/// Auto-generated by Deno Win32: Windows.Win32.Security.Credentials.Apis

import * as util from "../../util.ts";

// Enums
export type CRED_FLAGS = number;
export type CRED_TYPE = number;
export type CRED_PERSIST = number;
export type CREDUI_FLAGS = number;
export type SCARD_SCOPE = number;
export type CRED_ENUMERATE_FLAGS = number;
export type CREDUIWIN_FLAGS = number;
export type SCARD_STATE = number;
export type CRED_PACK_FLAGS = number;
export type KeyCredentialManagerOperationErrorStates = number;
export type KeyCredentialManagerOperationType = number;
export type CRED_MARSHAL_TYPE = number;
export type CRED_PROTECTION_TYPE = number;
export type READER_SEL_REQUEST_MATCH_TYPE = number;
export type CREDSPP_SUBMIT_TYPE = number;

// Constants
export const CRED_FLAGS_PASSWORD_FOR_CERT = 1;
export const CRED_FLAGS_PROMPT_NOW = 2;
export const CRED_FLAGS_USERNAME_TARGET = 4;
export const CRED_FLAGS_OWF_CRED_BLOB = 8;
export const CRED_FLAGS_REQUIRE_CONFIRMATION = 16;
export const CRED_FLAGS_WILDCARD_MATCH = 32;
export const CRED_FLAGS_VSM_PROTECTED = 64;
export const CRED_FLAGS_NGC_CERT = 128;
export const CRED_FLAGS_VALID_FLAGS = 61695;
export const CRED_FLAGS_VALID_INPUT_FLAGS = 61599;
export const CRED_TYPE_GENERIC = 1;
export const CRED_TYPE_DOMAIN_PASSWORD = 2;
export const CRED_TYPE_DOMAIN_CERTIFICATE = 3;
export const CRED_TYPE_DOMAIN_VISIBLE_PASSWORD = 4;
export const CRED_TYPE_GENERIC_CERTIFICATE = 5;
export const CRED_TYPE_DOMAIN_EXTENDED = 6;
export const CRED_TYPE_MAXIMUM = 7;
export const CRED_TYPE_MAXIMUM_EX = 1007;
export const CRED_PERSIST_NONE = 0;
export const CRED_PERSIST_SESSION = 1;
export const CRED_PERSIST_LOCAL_MACHINE = 2;
export const CRED_PERSIST_ENTERPRISE = 3;
export const CREDUI_FLAGS_ALWAYS_SHOW_UI = 128;
export const CREDUI_FLAGS_COMPLETE_USERNAME = 2048;
export const CREDUI_FLAGS_DO_NOT_PERSIST = 2;
export const CREDUI_FLAGS_EXCLUDE_CERTIFICATES = 8;
export const CREDUI_FLAGS_EXPECT_CONFIRMATION = 131072;
export const CREDUI_FLAGS_GENERIC_CREDENTIALS = 262144;
export const CREDUI_FLAGS_INCORRECT_PASSWORD = 1;
export const CREDUI_FLAGS_KEEP_USERNAME = 1048576;
export const CREDUI_FLAGS_PASSWORD_ONLY_OK = 512;
export const CREDUI_FLAGS_PERSIST = 4096;
export const CREDUI_FLAGS_REQUEST_ADMINISTRATOR = 4;
export const CREDUI_FLAGS_REQUIRE_CERTIFICATE = 16;
export const CREDUI_FLAGS_REQUIRE_SMARTCARD = 256;
export const CREDUI_FLAGS_SERVER_CREDENTIAL = 16384;
export const CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX = 64;
export const CREDUI_FLAGS_USERNAME_TARGET_CREDENTIALS = 524288;
export const CREDUI_FLAGS_VALIDATE_USERNAME = 1024;
export const SCARD_SCOPE_USER = 0;
export const SCARD_SCOPE_SYSTEM = 2;
export const CRED_ENUMERATE_ALL_CREDENTIALS = 1;
export const CREDUIWIN_GENERIC = 1;
export const CREDUIWIN_CHECKBOX = 2;
export const CREDUIWIN_AUTHPACKAGE_ONLY = 16;
export const CREDUIWIN_IN_CRED_ONLY = 32;
export const CREDUIWIN_ENUMERATE_ADMINS = 256;
export const CREDUIWIN_ENUMERATE_CURRENT_USER = 512;
export const CREDUIWIN_SECURE_PROMPT = 4096;
export const CREDUIWIN_PREPROMPTING = 8192;
export const CREDUIWIN_PACK_32_WOW = 268435456;
export const SCARD_STATE_UNAWARE = 0;
export const SCARD_STATE_IGNORE = 1;
export const SCARD_STATE_UNAVAILABLE = 8;
export const SCARD_STATE_EMPTY = 16;
export const SCARD_STATE_PRESENT = 32;
export const SCARD_STATE_ATRMATCH = 64;
export const SCARD_STATE_EXCLUSIVE = 128;
export const SCARD_STATE_INUSE = 256;
export const SCARD_STATE_MUTE = 512;
export const SCARD_STATE_CHANGED = 2;
export const SCARD_STATE_UNKNOWN = 4;
export const CRED_PACK_PROTECTED_CREDENTIALS = 1;
export const CRED_PACK_WOW_BUFFER = 2;
export const CRED_PACK_GENERIC_CREDENTIALS = 4;
export const CRED_PACK_ID_PROVIDER_CREDENTIALS = 8;
export const CRED_MAX_CREDENTIAL_BLOB_SIZE = 2560;
export const CRED_MAX_USERNAME_LENGTH = 513;
export const CRED_MAX_DOMAIN_TARGET_NAME_LENGTH = 337;
export const FILE_DEVICE_SMARTCARD = 49;
export const SCARD_ATR_LENGTH = 33;
export const SCARD_PROTOCOL_UNDEFINED = 0;
export const SCARD_PROTOCOL_T0 = 1;
export const SCARD_PROTOCOL_T1 = 2;
export const SCARD_PROTOCOL_RAW = 65536;
export const SCARD_PROTOCOL_DEFAULT = 2147483648;
export const SCARD_PROTOCOL_OPTIMAL = 0;
export const SCARD_POWER_DOWN = 0;
export const SCARD_COLD_RESET = 1;
export const SCARD_WARM_RESET = 2;
export const MAXIMUM_ATTR_STRING_LENGTH = 32;
export const MAXIMUM_SMARTCARD_READERS = 10;
export const SCARD_CLASS_VENDOR_INFO = 1;
export const SCARD_CLASS_COMMUNICATIONS = 2;
export const SCARD_CLASS_PROTOCOL = 3;
export const SCARD_CLASS_POWER_MGMT = 4;
export const SCARD_CLASS_SECURITY = 5;
export const SCARD_CLASS_MECHANICAL = 6;
export const SCARD_CLASS_VENDOR_DEFINED = 7;
export const SCARD_CLASS_IFD_PROTOCOL = 8;
export const SCARD_CLASS_ICC_STATE = 9;
export const SCARD_CLASS_PERF = 32766;
export const SCARD_CLASS_SYSTEM = 32767;
export const SCARD_T0_HEADER_LENGTH = 7;
export const SCARD_T0_CMD_LENGTH = 5;
export const SCARD_T1_PROLOGUE_LENGTH = 3;
export const SCARD_T1_EPILOGUE_LENGTH = 2;
export const SCARD_T1_EPILOGUE_LENGTH_LRC = 1;
export const SCARD_T1_MAX_IFS = 254;
export const SCARD_UNKNOWN = 0;
export const SCARD_ABSENT = 1;
export const SCARD_PRESENT = 2;
export const SCARD_SWALLOWED = 3;
export const SCARD_POWERED = 4;
export const SCARD_NEGOTIABLE = 5;
export const SCARD_SPECIFIC = 6;
export const SCARD_READER_SWALLOWS = 1;
export const SCARD_READER_EJECTS = 2;
export const SCARD_READER_CONFISCATES = 4;
export const SCARD_READER_CONTACTLESS = 8;
export const SCARD_READER_TYPE_SERIAL = 1;
export const SCARD_READER_TYPE_PARALELL = 2;
export const SCARD_READER_TYPE_KEYBOARD = 4;
export const SCARD_READER_TYPE_SCSI = 8;
export const SCARD_READER_TYPE_IDE = 16;
export const SCARD_READER_TYPE_USB = 32;
export const SCARD_READER_TYPE_PCMCIA = 64;
export const SCARD_READER_TYPE_TPM = 128;
export const SCARD_READER_TYPE_NFC = 256;
export const SCARD_READER_TYPE_UICC = 512;
export const SCARD_READER_TYPE_NGC = 1024;
export const SCARD_READER_TYPE_EMBEDDEDSE = 2048;
export const SCARD_READER_TYPE_VENDOR = 240;
export const STATUS_LOGON_FAILURE = 116568633639021;
export const STATUS_WRONG_PASSWORD = 124265215033450;
export const STATUS_PASSWORD_EXPIRED = 602552773116017;
export const STATUS_PASSWORD_MUST_CHANGE = 993978912604708;
export const STATUS_DOWNGRADE_DETECTED = 1146811028865928;
export const STATUS_AUTHENTICATION_FIREWALL_FAILED = 125364726662163;
export const STATUS_ACCOUNT_DISABLED = 120966680150130;
export const STATUS_ACCOUNT_RESTRICTION = 620144959160430;
export const STATUS_ACCOUNT_LOCKED_OUT = 443123587088948;
export const STATUS_ACCOUNT_EXPIRED = 381550935933331;
export const STATUS_LOGON_TYPE_NOT_GRANTED = 104474005733723;
export const STATUS_NO_SUCH_LOGON_SESSION = 109971563872351;
export const STATUS_NO_SUCH_USER = 5980826556577087588n;
export const CRED_MAX_STRING_LENGTH = 256;
export const CRED_MAX_GENERIC_TARGET_NAME_LENGTH = 32767;
export const CRED_MAX_TARGETNAME_NAMESPACE_LENGTH = 256;
export const CRED_MAX_TARGETNAME_ATTRIBUTE_LENGTH = 256;
export const CRED_MAX_VALUE_SIZE = 256;
export const CRED_MAX_ATTRIBUTES = 64;
export const CRED_SESSION_WILDCARD_NAME_W = `*Session`;
export const CRED_SESSION_WILDCARD_NAME_A = `*Session`;
export const CRED_TARGETNAME_DOMAIN_NAMESPACE_W = `Domain`;
export const CRED_TARGETNAME_DOMAIN_NAMESPACE_A = `Domain`;
export const CRED_TARGETNAME_LEGACYGENERIC_NAMESPACE_W = `LegacyGeneric`;
export const CRED_TARGETNAME_LEGACYGENERIC_NAMESPACE_A = `LegacyGeneric`;
export const CRED_TARGETNAME_ATTRIBUTE_TARGET_W = `target`;
export const CRED_TARGETNAME_ATTRIBUTE_TARGET_A = `target`;
export const CRED_TARGETNAME_ATTRIBUTE_NAME_W = `name`;
export const CRED_TARGETNAME_ATTRIBUTE_NAME_A = `name`;
export const CRED_TARGETNAME_ATTRIBUTE_BATCH_W = `batch`;
export const CRED_TARGETNAME_ATTRIBUTE_BATCH_A = `batch`;
export const CRED_TARGETNAME_ATTRIBUTE_INTERACTIVE_W = `interactive`;
export const CRED_TARGETNAME_ATTRIBUTE_INTERACTIVE_A = `interactive`;
export const CRED_TARGETNAME_ATTRIBUTE_SERVICE_W = `service`;
export const CRED_TARGETNAME_ATTRIBUTE_SERVICE_A = `service`;
export const CRED_TARGETNAME_ATTRIBUTE_NETWORK_W = `network`;
export const CRED_TARGETNAME_ATTRIBUTE_NETWORK_A = `network`;
export const CRED_TARGETNAME_ATTRIBUTE_NETWORKCLEARTEXT_W = `networkcleartext`;
export const CRED_TARGETNAME_ATTRIBUTE_NETWORKCLEARTEXT_A = `networkcleartext`;
export const CRED_TARGETNAME_ATTRIBUTE_REMOTEINTERACTIVE_W = `remoteinteractive`;
export const CRED_TARGETNAME_ATTRIBUTE_REMOTEINTERACTIVE_A = `remoteinteractive`;
export const CRED_TARGETNAME_ATTRIBUTE_CACHEDINTERACTIVE_W = `cachedinteractive`;
export const CRED_TARGETNAME_ATTRIBUTE_CACHEDINTERACTIVE_A = `cachedinteractive`;
export const CRED_SESSION_WILDCARD_NAME = `*Session`;
export const CRED_TARGETNAME_DOMAIN_NAMESPACE = `Domain`;
export const CRED_TARGETNAME_ATTRIBUTE_NAME = `name`;
export const CRED_TARGETNAME_ATTRIBUTE_TARGET = `target`;
export const CRED_TARGETNAME_ATTRIBUTE_BATCH = `batch`;
export const CRED_TARGETNAME_ATTRIBUTE_INTERACTIVE = `interactive`;
export const CRED_TARGETNAME_ATTRIBUTE_SERVICE = `service`;
export const CRED_TARGETNAME_ATTRIBUTE_NETWORK = `network`;
export const CRED_TARGETNAME_ATTRIBUTE_NETWORKCLEARTEXT = `networkcleartext`;
export const CRED_TARGETNAME_ATTRIBUTE_REMOTEINTERACTIVE = `remoteinteractive`;
export const CRED_TARGETNAME_ATTRIBUTE_CACHEDINTERACTIVE = `cachedinteractive`;
export const CRED_LOGON_TYPES_MASK = 61440;
export const CRED_TI_SERVER_FORMAT_UNKNOWN = 1;
export const CRED_TI_DOMAIN_FORMAT_UNKNOWN = 2;
export const CRED_TI_ONLY_PASSWORD_REQUIRED = 4;
export const CRED_TI_USERNAME_TARGET = 8;
export const CRED_TI_CREATE_EXPLICIT_CRED = 16;
export const CRED_TI_WORKGROUP_MEMBER = 32;
export const CRED_TI_DNSTREE_IS_DFS_SERVER = 64;
export const CRED_TI_VALID_FLAGS = 61567;
export const CERT_HASH_LENGTH = 20;
export const CREDUI_MAX_MESSAGE_LENGTH = 1024;
export const CREDUI_MAX_CAPTION_LENGTH = 128;
export const CREDUI_MAX_GENERIC_TARGET_LENGTH = 32767;
export const CREDUI_MAX_DOMAIN_TARGET_LENGTH = 337;
export const CREDUI_MAX_USERNAME_LENGTH = 513;
export const CREDUIWIN_IGNORE_CLOUDAUTHORITY_NAME = 262144;
export const CREDUIWIN_DOWNLEVEL_HELLO_AS_SMART_CARD = 2147483648;
export const CRED_PRESERVE_CREDENTIAL_BLOB = 1;
export const CRED_CACHE_TARGET_INFORMATION = 1;
export const CRED_ALLOW_NAME_RESOLUTION = 1;
export const CRED_PROTECT_AS_SELF = 1;
export const CRED_PROTECT_TO_SYSTEM = 2;
export const CRED_UNPROTECT_AS_SELF = 1;
export const CRED_UNPROTECT_ALLOW_TO_SYSTEM = 2;
export const SCARD_SCOPE_TERMINAL = 1;
export const SCARD_ALL_READERS = `SCard$AllReaders\000`;
export const SCARD_DEFAULT_READERS = `SCard$DefaultReaders\000`;
export const SCARD_LOCAL_READERS = `SCard$LocalReaders\000`;
export const SCARD_SYSTEM_READERS = `SCard$SystemReaders\000`;
export const SCARD_PROVIDER_PRIMARY = 1;
export const SCARD_PROVIDER_CSP = 2;
export const SCARD_PROVIDER_KSP = 3;
export const SCARD_STATE_UNPOWERED = 1024;
export const SCARD_SHARE_EXCLUSIVE = 1;
export const SCARD_SHARE_SHARED = 2;
export const SCARD_SHARE_DIRECT = 3;
export const SCARD_LEAVE_CARD = 0;
export const SCARD_RESET_CARD = 1;
export const SCARD_UNPOWER_CARD = 2;
export const SCARD_EJECT_CARD = 3;
export const SC_DLG_MINIMAL_UI = 1;
export const SC_DLG_NO_UI = 2;
export const SC_DLG_FORCE_UI = 4;
export const SCERR_NOCARDNAME = 16384;
export const SCERR_NOGUIDS = 32768;
export const SCARD_AUDIT_CHV_FAILURE = 0;
export const SCARD_AUDIT_CHV_SUCCESS = 1;
export const CREDSSP_NAME = `CREDSSP`;
export const TS_SSP_NAME_A = `TSSSP`;
export const TS_SSP_NAME = `TSSSP`;
export const szOID_TS_KP_TS_SERVER_AUTH = `1.3.6.1.4.1.311.54.1.2`;
export const CREDSSP_SERVER_AUTH_NEGOTIATE = 1;
export const CREDSSP_SERVER_AUTH_CERTIFICATE = 2;
export const CREDSSP_SERVER_AUTH_LOOPBACK = 4;
export const SECPKG_ALT_ATTR = 2147483648;
export const SECPKG_ATTR_C_FULL_IDENT_TOKEN = 2147483781;
export const CREDSSP_CRED_EX_VERSION = 0;
export const CREDSSP_FLAG_REDIRECT = 1;
export const KeyCredentialManagerOperationErrorStateNone = 0;
export const KeyCredentialManagerOperationErrorStateDeviceJoinFailure = 1;
export const KeyCredentialManagerOperationErrorStateTokenFailure = 2;
export const KeyCredentialManagerOperationErrorStateCertificateFailure = 4;
export const KeyCredentialManagerOperationErrorStateRemoteSessionFailure = 8;
export const KeyCredentialManagerOperationErrorStatePolicyFailure = 16;
export const KeyCredentialManagerOperationErrorStateHardwareFailure = 32;
export const KeyCredentialManagerOperationErrorStatePinExistsFailure = 64;
export const KeyCredentialManagerProvisioning = 0;
export const KeyCredentialManagerPinChange = 1;
export const KeyCredentialManagerPinReset = 2;
export const CertCredential = 1;
export const UsernameTargetCredential = 2;
export const BinaryBlobCredential = 3;
export const UsernameForPackedCredentials = 4;
export const BinaryBlobForSystem = 5;
export const CredUnprotected = 0;
export const CredUserProtection = 1;
export const CredTrustedProtection = 2;
export const CredForSystemProtection = 3;
export const RSR_MATCH_TYPE_READER_AND_CONTAINER = 1;
export const RSR_MATCH_TYPE_SERIAL_NUMBER = 2;
export const RSR_MATCH_TYPE_ALL_CARDS = 3;
export const CredsspPasswordCreds = 2;
export const CredsspSchannelCreds = 4;
export const CredsspCertificateCreds = 13;
export const CredsspSubmitBufferBoth = 50;
export const CredsspSubmitBufferBothOld = 51;
export const CredsspCredEx = 100;

// Structs

/**
 * Windows.Win32.Security.Credentials.KeyCredentialManagerInfo (size: 8)
 */
export interface KeyCredentialManagerInfo {
  /** System.Guid */
  containerId: Uint8Array | Deno.PointerValue;
}

export const sizeofKeyCredentialManagerInfo = 8;

export function allocKeyCredentialManagerInfo(data?: Partial<KeyCredentialManagerInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofKeyCredentialManagerInfo);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.containerId !== undefined) view.setBigUint64(0, data.containerId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.containerId))), true);
  return buf;
}

export class KeyCredentialManagerInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get containerId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set containerId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.SecHandle (size: 16)
 */
export interface SecHandle {
  /** usize */
  dwLower: bigint | number;
  /** usize */
  dwUpper: bigint | number;
}

export const sizeofSecHandle = 16;

export function allocSecHandle(data?: Partial<SecHandle>): Uint8Array {
  const buf = new Uint8Array(sizeofSecHandle);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwLower !== undefined) view.setBigUint64(0, BigInt(data.dwLower), true);
  // 0x08: usize
  if (data?.dwUpper !== undefined) view.setBigUint64(8, BigInt(data.dwUpper), true);
  return buf;
}

export class SecHandleView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get dwLower(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: usize
  get dwUpper(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: usize
  set dwLower(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: usize
  set dwUpper(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

export type PSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Security.Credentials.CREDENTIAL_ATTRIBUTEA (size: 24)
 */
export interface CREDENTIAL_ATTRIBUTEA {
  /** Windows.Win32.Foundation.PSTR */
  Keyword: string | null | Uint8Array;
  /** u32 */
  Flags: number;
  /** u32 */
  ValueSize: number;
  /** ptr */
  Value: Deno.PointerValue | Uint8Array;
}

export const sizeofCREDENTIAL_ATTRIBUTEA = 24;

export function allocCREDENTIAL_ATTRIBUTEA(data?: Partial<CREDENTIAL_ATTRIBUTEA>): Uint8Array {
  const buf = new Uint8Array(sizeofCREDENTIAL_ATTRIBUTEA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Keyword !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Keyword);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.ValueSize !== undefined) view.setUint32(12, Number(data.ValueSize), true);
  // 0x10: pointer
  if (data?.Value !== undefined) view.setBigUint64(16, data.Value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Value))), true);
  return buf;
}

export class CREDENTIAL_ATTRIBUTEAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Keyword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ValueSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get Value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set Keyword(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ValueSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set Value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Security.Credentials.CREDENTIAL_ATTRIBUTEW (size: 24)
 */
export interface CREDENTIAL_ATTRIBUTEW {
  /** Windows.Win32.Foundation.PWSTR */
  Keyword: string | null | Uint8Array | Uint16Array;
  /** u32 */
  Flags: number;
  /** u32 */
  ValueSize: number;
  /** ptr */
  Value: Deno.PointerValue | Uint8Array;
}

export const sizeofCREDENTIAL_ATTRIBUTEW = 24;

export function allocCREDENTIAL_ATTRIBUTEW(data?: Partial<CREDENTIAL_ATTRIBUTEW>): Uint8Array {
  const buf = new Uint8Array(sizeofCREDENTIAL_ATTRIBUTEW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Keyword !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Keyword);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.ValueSize !== undefined) view.setUint32(12, Number(data.ValueSize), true);
  // 0x10: pointer
  if (data?.Value !== undefined) view.setBigUint64(16, data.Value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Value))), true);
  return buf;
}

export class CREDENTIAL_ATTRIBUTEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Keyword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ValueSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get Value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set Keyword(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ValueSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set Value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

export class FILETIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLowDateTime(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwHighDateTime(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwLowDateTime(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwHighDateTime(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Credentials.CREDENTIALA (size: 80)
 */
export interface CREDENTIALA {
  /** Windows.Win32.Security.Credentials.CRED_FLAGS */
  Flags: CRED_FLAGS;
  /** Windows.Win32.Security.Credentials.CRED_TYPE */
  Type: CRED_TYPE;
  /** Windows.Win32.Foundation.PSTR */
  TargetName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  Comment: string | null | Uint8Array;
  /** Windows.Win32.Foundation.FILETIME */
  LastWritten: Uint8Array | Deno.PointerValue;
  /** u32 */
  CredentialBlobSize: number;
  /** ptr */
  CredentialBlob: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Security.Credentials.CRED_PERSIST */
  Persist: CRED_PERSIST;
  /** u32 */
  AttributeCount: number;
  /** ptr */
  Attributes: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  TargetAlias: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  UserName: string | null | Uint8Array;
}

export const sizeofCREDENTIALA = 80;

export function allocCREDENTIALA(data?: Partial<CREDENTIALA>): Uint8Array {
  const buf = new Uint8Array(sizeofCREDENTIALA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.Type !== undefined) view.setUint32(4, Number(data.Type), true);
  // 0x08: buffer
  if (data?.TargetName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.TargetName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.Comment !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.Comment);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.LastWritten !== undefined) view.setBigUint64(24, data.LastWritten === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LastWritten))), true);
  // 0x20: u32
  if (data?.CredentialBlobSize !== undefined) view.setUint32(32, Number(data.CredentialBlobSize), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.CredentialBlob !== undefined) view.setBigUint64(40, data.CredentialBlob === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CredentialBlob))), true);
  // 0x30: u32
  if (data?.Persist !== undefined) view.setUint32(48, Number(data.Persist), true);
  // 0x34: u32
  if (data?.AttributeCount !== undefined) view.setUint32(52, Number(data.AttributeCount), true);
  // 0x38: pointer
  if (data?.Attributes !== undefined) view.setBigUint64(56, data.Attributes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Attributes))), true);
  // 0x40: buffer
  if (data?.TargetAlias !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.TargetAlias);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: buffer
  if (data?.UserName !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.UserName);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  return buf;
}

export class CREDENTIALAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Type(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get TargetName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get Comment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get LastWritten(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get CredentialBlobSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get CredentialBlob(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get Persist(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get AttributeCount(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get Attributes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get TargetAlias(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Type(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set TargetName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set Comment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set LastWritten(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set CredentialBlobSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set CredentialBlob(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set Persist(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set AttributeCount(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set Attributes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: buffer
  set TargetAlias(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: buffer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.CREDENTIALW (size: 80)
 */
export interface CREDENTIALW {
  /** Windows.Win32.Security.Credentials.CRED_FLAGS */
  Flags: CRED_FLAGS;
  /** Windows.Win32.Security.Credentials.CRED_TYPE */
  Type: CRED_TYPE;
  /** Windows.Win32.Foundation.PWSTR */
  TargetName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  Comment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.FILETIME */
  LastWritten: Uint8Array | Deno.PointerValue;
  /** u32 */
  CredentialBlobSize: number;
  /** ptr */
  CredentialBlob: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Security.Credentials.CRED_PERSIST */
  Persist: CRED_PERSIST;
  /** u32 */
  AttributeCount: number;
  /** ptr */
  Attributes: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  TargetAlias: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  UserName: string | null | Uint8Array | Uint16Array;
}

export const sizeofCREDENTIALW = 80;

export function allocCREDENTIALW(data?: Partial<CREDENTIALW>): Uint8Array {
  const buf = new Uint8Array(sizeofCREDENTIALW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.Type !== undefined) view.setUint32(4, Number(data.Type), true);
  // 0x08: buffer
  if (data?.TargetName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.TargetName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.Comment !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.Comment);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.LastWritten !== undefined) view.setBigUint64(24, data.LastWritten === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LastWritten))), true);
  // 0x20: u32
  if (data?.CredentialBlobSize !== undefined) view.setUint32(32, Number(data.CredentialBlobSize), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.CredentialBlob !== undefined) view.setBigUint64(40, data.CredentialBlob === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CredentialBlob))), true);
  // 0x30: u32
  if (data?.Persist !== undefined) view.setUint32(48, Number(data.Persist), true);
  // 0x34: u32
  if (data?.AttributeCount !== undefined) view.setUint32(52, Number(data.AttributeCount), true);
  // 0x38: pointer
  if (data?.Attributes !== undefined) view.setBigUint64(56, data.Attributes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Attributes))), true);
  // 0x40: buffer
  if (data?.TargetAlias !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.TargetAlias);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: buffer
  if (data?.UserName !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.UserName);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  return buf;
}

export class CREDENTIALWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Type(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get TargetName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get Comment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get LastWritten(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get CredentialBlobSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get CredentialBlob(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get Persist(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get AttributeCount(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get Attributes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get TargetAlias(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Type(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set TargetName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set Comment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set LastWritten(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set CredentialBlobSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set CredentialBlob(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set Persist(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set AttributeCount(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set Attributes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: buffer
  set TargetAlias(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: buffer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.CREDENTIAL_TARGET_INFORMATIONA (size: 72)
 */
export interface CREDENTIAL_TARGET_INFORMATIONA {
  /** Windows.Win32.Foundation.PSTR */
  TargetName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  NetbiosServerName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  DnsServerName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  NetbiosDomainName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  DnsDomainName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  DnsTreeName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  PackageName: string | null | Uint8Array;
  /** u32 */
  Flags: number;
  /** u32 */
  CredTypeCount: number;
  /** ptr */
  CredTypes: Deno.PointerValue | Uint8Array;
}

export const sizeofCREDENTIAL_TARGET_INFORMATIONA = 72;

export function allocCREDENTIAL_TARGET_INFORMATIONA(data?: Partial<CREDENTIAL_TARGET_INFORMATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofCREDENTIAL_TARGET_INFORMATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.TargetName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.TargetName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.NetbiosServerName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.NetbiosServerName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.DnsServerName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.DnsServerName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.NetbiosDomainName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.NetbiosDomainName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.DnsDomainName !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.DnsDomainName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.DnsTreeName !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.DnsTreeName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.PackageName !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.PackageName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: u32
  if (data?.Flags !== undefined) view.setUint32(56, Number(data.Flags), true);
  // 0x3c: u32
  if (data?.CredTypeCount !== undefined) view.setUint32(60, Number(data.CredTypeCount), true);
  // 0x40: pointer
  if (data?.CredTypes !== undefined) view.setBigUint64(64, data.CredTypes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CredTypes))), true);
  return buf;
}

export class CREDENTIAL_TARGET_INFORMATIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get TargetName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get NetbiosServerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get DnsServerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get NetbiosDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get DnsDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get DnsTreeName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get PackageName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get Flags(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get CredTypeCount(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: pointer
  get CredTypes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set TargetName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set NetbiosServerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set DnsServerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set NetbiosDomainName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set DnsDomainName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set DnsTreeName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set PackageName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: u32
  set Flags(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set CredTypeCount(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: pointer
  set CredTypes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.CREDENTIAL_TARGET_INFORMATIONW (size: 72)
 */
export interface CREDENTIAL_TARGET_INFORMATIONW {
  /** Windows.Win32.Foundation.PWSTR */
  TargetName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  NetbiosServerName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  DnsServerName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  NetbiosDomainName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  DnsDomainName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  DnsTreeName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  PackageName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  Flags: number;
  /** u32 */
  CredTypeCount: number;
  /** ptr */
  CredTypes: Deno.PointerValue | Uint8Array;
}

export const sizeofCREDENTIAL_TARGET_INFORMATIONW = 72;

export function allocCREDENTIAL_TARGET_INFORMATIONW(data?: Partial<CREDENTIAL_TARGET_INFORMATIONW>): Uint8Array {
  const buf = new Uint8Array(sizeofCREDENTIAL_TARGET_INFORMATIONW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.TargetName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.TargetName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.NetbiosServerName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.NetbiosServerName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.DnsServerName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.DnsServerName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.NetbiosDomainName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.NetbiosDomainName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.DnsDomainName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.DnsDomainName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.DnsTreeName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.DnsTreeName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.PackageName !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.PackageName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: u32
  if (data?.Flags !== undefined) view.setUint32(56, Number(data.Flags), true);
  // 0x3c: u32
  if (data?.CredTypeCount !== undefined) view.setUint32(60, Number(data.CredTypeCount), true);
  // 0x40: pointer
  if (data?.CredTypes !== undefined) view.setBigUint64(64, data.CredTypes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CredTypes))), true);
  return buf;
}

export class CREDENTIAL_TARGET_INFORMATIONWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get TargetName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get NetbiosServerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get DnsServerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get NetbiosDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get DnsDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get DnsTreeName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get PackageName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get Flags(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get CredTypeCount(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: pointer
  get CredTypes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set TargetName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set NetbiosServerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set DnsServerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set NetbiosDomainName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set DnsDomainName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set DnsTreeName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set PackageName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: u32
  set Flags(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set CredTypeCount(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: pointer
  set CredTypes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.CERT_CREDENTIAL_INFO (size: 16)
 */
export interface CERT_CREDENTIAL_INFO {
  /** u32 */
  cbSize: number;
  /** array */
  rgbHashOfCert: Deno.PointerValue;
}

export const sizeofCERT_CREDENTIAL_INFO = 16;

export function allocCERT_CREDENTIAL_INFO(data?: Partial<CERT_CREDENTIAL_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_CREDENTIAL_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgbHashOfCert !== undefined) view.setBigUint64(8, data.rgbHashOfCert === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgbHashOfCert))), true);
  return buf;
}

export class CERT_CREDENTIAL_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgbHashOfCert(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgbHashOfCert(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.USERNAME_TARGET_CREDENTIAL_INFO (size: 8)
 */
export interface USERNAME_TARGET_CREDENTIAL_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  UserName: string | null | Uint8Array | Uint16Array;
}

export const sizeofUSERNAME_TARGET_CREDENTIAL_INFO = 8;

export function allocUSERNAME_TARGET_CREDENTIAL_INFO(data?: Partial<USERNAME_TARGET_CREDENTIAL_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUSERNAME_TARGET_CREDENTIAL_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.UserName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.UserName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  return buf;
}

export class USERNAME_TARGET_CREDENTIAL_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.BINARY_BLOB_CREDENTIAL_INFO (size: 16)
 */
export interface BINARY_BLOB_CREDENTIAL_INFO {
  /** u32 */
  cbBlob: number;
  /** ptr */
  pbBlob: Deno.PointerValue | Uint8Array;
}

export const sizeofBINARY_BLOB_CREDENTIAL_INFO = 16;

export function allocBINARY_BLOB_CREDENTIAL_INFO(data?: Partial<BINARY_BLOB_CREDENTIAL_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofBINARY_BLOB_CREDENTIAL_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbBlob !== undefined) view.setUint32(0, Number(data.cbBlob), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbBlob !== undefined) view.setBigUint64(8, data.pbBlob === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbBlob))), true);
  return buf;
}

export class BINARY_BLOB_CREDENTIAL_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbBlob(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pbBlob(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbBlob(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pbBlob(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HWND = bigint | number;

export type HBITMAP = bigint | number;

/**
 * Windows.Win32.Security.Credentials.CREDUI_INFOA (size: 40)
 */
export interface CREDUI_INFOA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  pszMessageText: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszCaptionText: string | null | Uint8Array;
  /** Windows.Win32.Graphics.Gdi.HBITMAP */
  hbmBanner: Uint8Array | Deno.PointerValue;
}

export const sizeofCREDUI_INFOA = 40;

export function allocCREDUI_INFOA(data?: Partial<CREDUI_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofCREDUI_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(8, data.hwndParent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndParent))), true);
  // 0x10: buffer
  if (data?.pszMessageText !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszMessageText);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pszCaptionText !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pszCaptionText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.hbmBanner !== undefined) view.setBigUint64(32, data.hbmBanner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hbmBanner))), true);
  return buf;
}

export class CREDUI_INFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndParent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszMessageText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pszCaptionText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get hbmBanner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndParent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set pszMessageText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pszCaptionText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set hbmBanner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.CREDUI_INFOW (size: 40)
 */
export interface CREDUI_INFOW {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszMessageText: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszCaptionText: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Graphics.Gdi.HBITMAP */
  hbmBanner: Uint8Array | Deno.PointerValue;
}

export const sizeofCREDUI_INFOW = 40;

export function allocCREDUI_INFOW(data?: Partial<CREDUI_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofCREDUI_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(8, data.hwndParent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndParent))), true);
  // 0x10: buffer
  if (data?.pszMessageText !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszMessageText);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pszCaptionText !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszCaptionText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.hbmBanner !== undefined) view.setBigUint64(32, data.hbmBanner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hbmBanner))), true);
  return buf;
}

export class CREDUI_INFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndParent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszMessageText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pszCaptionText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get hbmBanner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndParent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set pszMessageText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pszCaptionText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set hbmBanner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.SCARD_IO_REQUEST (size: 8)
 */
export interface SCARD_IO_REQUEST {
  /** u32 */
  dwProtocol: number;
  /** u32 */
  cbPciLength: number;
}

export const sizeofSCARD_IO_REQUEST = 8;

export function allocSCARD_IO_REQUEST(data?: Partial<SCARD_IO_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofSCARD_IO_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwProtocol !== undefined) view.setUint32(0, Number(data.dwProtocol), true);
  // 0x04: u32
  if (data?.cbPciLength !== undefined) view.setUint32(4, Number(data.cbPciLength), true);
  return buf;
}

export class SCARD_IO_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwProtocol(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbPciLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwProtocol(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbPciLength(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Credentials.SCARD_T0_COMMAND (size: 8)
 */
export interface SCARD_T0_COMMAND {
  /** u8 */
  bCla: number;
  /** u8 */
  bIns: number;
  /** u8 */
  bP1: number;
  /** u8 */
  bP2: number;
  /** u8 */
  bP3: number;
}

export const sizeofSCARD_T0_COMMAND = 8;

export function allocSCARD_T0_COMMAND(data?: Partial<SCARD_T0_COMMAND>): Uint8Array {
  const buf = new Uint8Array(sizeofSCARD_T0_COMMAND);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bCla !== undefined) view.setUint8(0, Number(data.bCla));
  // 0x01: u8
  if (data?.bIns !== undefined) view.setUint8(1, Number(data.bIns));
  // 0x02: u8
  if (data?.bP1 !== undefined) view.setUint8(2, Number(data.bP1));
  // 0x03: u8
  if (data?.bP2 !== undefined) view.setUint8(3, Number(data.bP2));
  // 0x04: u8
  if (data?.bP3 !== undefined) view.setUint8(4, Number(data.bP3));
  // 0x05: pad3
  return buf;
}

export class SCARD_T0_COMMANDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bCla(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bIns(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get bP1(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get bP2(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u8
  get bP3(): number {
    return this.view.getUint8(4);
  }

  // 0x05: pad3

  // 0x00: u8
  set bCla(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bIns(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set bP1(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set bP2(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u8
  set bP3(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: pad3
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: bigint | number;
  /** u64 */
  Region: bigint | number;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  X: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.X))), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.SCARD_T0_REQUEST (size: 24)
 */
export interface SCARD_T0_REQUEST {
  /** Windows.Win32.Security.Credentials.SCARD_IO_REQUEST */
  ioRequest: Uint8Array | Deno.PointerValue;
  /** u8 */
  bSw1: number;
  /** u8 */
  bSw2: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofSCARD_T0_REQUEST = 24;

export function allocSCARD_T0_REQUEST(data?: Partial<SCARD_T0_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofSCARD_T0_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ioRequest !== undefined) view.setBigUint64(0, data.ioRequest === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ioRequest))), true);
  // 0x08: u8
  if (data?.bSw1 !== undefined) view.setUint8(8, Number(data.bSw1));
  // 0x09: u8
  if (data?.bSw2 !== undefined) view.setUint8(9, Number(data.bSw2));
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class SCARD_T0_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ioRequest(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get bSw1(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get bSw2(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ioRequest(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set bSw1(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set bSw2(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.SCARD_T1_REQUEST (size: 8)
 */
export interface SCARD_T1_REQUEST {
  /** Windows.Win32.Security.Credentials.SCARD_IO_REQUEST */
  ioRequest: Uint8Array | Deno.PointerValue;
}

export const sizeofSCARD_T1_REQUEST = 8;

export function allocSCARD_T1_REQUEST(data?: Partial<SCARD_T1_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofSCARD_T1_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ioRequest !== undefined) view.setBigUint64(0, data.ioRequest === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ioRequest))), true);
  return buf;
}

export class SCARD_T1_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ioRequest(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ioRequest(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.SCARD_READERSTATEA (size: 40)
 */
export interface SCARD_READERSTATEA {
  /** Windows.Win32.Foundation.PSTR */
  szReader: string | null | Uint8Array;
  /** ptr */
  pvUserData: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Security.Credentials.SCARD_STATE */
  dwCurrentState: SCARD_STATE;
  /** Windows.Win32.Security.Credentials.SCARD_STATE */
  dwEventState: SCARD_STATE;
  /** u32 */
  cbAtr: number;
  /** array */
  rgbAtr: Deno.PointerValue;
}

export const sizeofSCARD_READERSTATEA = 40;

export function allocSCARD_READERSTATEA(data?: Partial<SCARD_READERSTATEA>): Uint8Array {
  const buf = new Uint8Array(sizeofSCARD_READERSTATEA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szReader !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.szReader);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.pvUserData !== undefined) view.setBigUint64(8, data.pvUserData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvUserData))), true);
  // 0x10: u32
  if (data?.dwCurrentState !== undefined) view.setUint32(16, Number(data.dwCurrentState), true);
  // 0x14: u32
  if (data?.dwEventState !== undefined) view.setUint32(20, Number(data.dwEventState), true);
  // 0x18: u32
  if (data?.cbAtr !== undefined) view.setUint32(24, Number(data.cbAtr), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.rgbAtr !== undefined) view.setBigUint64(32, data.rgbAtr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgbAtr))), true);
  return buf;
}

export class SCARD_READERSTATEAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get szReader(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pvUserData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwCurrentState(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwEventState(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get cbAtr(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get rgbAtr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set szReader(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set pvUserData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwCurrentState(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwEventState(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set cbAtr(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set rgbAtr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.SCARD_READERSTATEW (size: 40)
 */
export interface SCARD_READERSTATEW {
  /** Windows.Win32.Foundation.PWSTR */
  szReader: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pvUserData: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Security.Credentials.SCARD_STATE */
  dwCurrentState: SCARD_STATE;
  /** Windows.Win32.Security.Credentials.SCARD_STATE */
  dwEventState: SCARD_STATE;
  /** u32 */
  cbAtr: number;
  /** array */
  rgbAtr: Deno.PointerValue;
}

export const sizeofSCARD_READERSTATEW = 40;

export function allocSCARD_READERSTATEW(data?: Partial<SCARD_READERSTATEW>): Uint8Array {
  const buf = new Uint8Array(sizeofSCARD_READERSTATEW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szReader !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.szReader);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.pvUserData !== undefined) view.setBigUint64(8, data.pvUserData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvUserData))), true);
  // 0x10: u32
  if (data?.dwCurrentState !== undefined) view.setUint32(16, Number(data.dwCurrentState), true);
  // 0x14: u32
  if (data?.dwEventState !== undefined) view.setUint32(20, Number(data.dwEventState), true);
  // 0x18: u32
  if (data?.cbAtr !== undefined) view.setUint32(24, Number(data.cbAtr), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.rgbAtr !== undefined) view.setBigUint64(32, data.rgbAtr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgbAtr))), true);
  return buf;
}

export class SCARD_READERSTATEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get szReader(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pvUserData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwCurrentState(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwEventState(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get cbAtr(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get rgbAtr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set szReader(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set pvUserData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwCurrentState(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwEventState(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set cbAtr(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set rgbAtr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.SCARD_ATRMASK (size: 24)
 */
export interface SCARD_ATRMASK {
  /** u32 */
  cbAtr: number;
  /** array */
  rgbAtr: Deno.PointerValue;
  /** array */
  rgbMask: Deno.PointerValue;
}

export const sizeofSCARD_ATRMASK = 24;

export function allocSCARD_ATRMASK(data?: Partial<SCARD_ATRMASK>): Uint8Array {
  const buf = new Uint8Array(sizeofSCARD_ATRMASK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbAtr !== undefined) view.setUint32(0, Number(data.cbAtr), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgbAtr !== undefined) view.setBigUint64(8, data.rgbAtr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgbAtr))), true);
  // 0x10: pointer
  if (data?.rgbMask !== undefined) view.setBigUint64(16, data.rgbMask === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgbMask))), true);
  return buf;
}

export class SCARD_ATRMASKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbAtr(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgbAtr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get rgbMask(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbAtr(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgbAtr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set rgbMask(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.OPENCARD_SEARCH_CRITERIAA (size: 96)
 */
export interface OPENCARD_SEARCH_CRITERIAA {
  /** u32 */
  dwStructSize: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrGroupNames: string | null | Uint8Array;
  /** u32 */
  nMaxGroupNames: number;
  /** ptr */
  rgguidInterfaces: Deno.PointerValue | Uint8Array;
  /** u32 */
  cguidInterfaces: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrCardNames: string | null | Uint8Array;
  /** u32 */
  nMaxCardNames: number;
  /** Windows.Win32.Security.Credentials.LPOCNCHKPROC */
  lpfnCheck: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Credentials.LPOCNCONNPROCA */
  lpfnConnect: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Credentials.LPOCNDSCPROC */
  lpfnDisconnect: Uint8Array | Deno.PointerValue;
  /** ptr */
  pvUserData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwShareMode: number;
  /** u32 */
  dwPreferredProtocols: number;
}

export const sizeofOPENCARD_SEARCH_CRITERIAA = 96;

export function allocOPENCARD_SEARCH_CRITERIAA(data?: Partial<OPENCARD_SEARCH_CRITERIAA>): Uint8Array {
  const buf = new Uint8Array(sizeofOPENCARD_SEARCH_CRITERIAA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStructSize !== undefined) view.setUint32(0, Number(data.dwStructSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpstrGroupNames !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpstrGroupNames);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.nMaxGroupNames !== undefined) view.setUint32(16, Number(data.nMaxGroupNames), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rgguidInterfaces !== undefined) view.setBigUint64(24, data.rgguidInterfaces === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgguidInterfaces))), true);
  // 0x20: u32
  if (data?.cguidInterfaces !== undefined) view.setUint32(32, Number(data.cguidInterfaces), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.lpstrCardNames !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.lpstrCardNames);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: u32
  if (data?.nMaxCardNames !== undefined) view.setUint32(48, Number(data.nMaxCardNames), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.lpfnCheck !== undefined) view.setBigUint64(56, data.lpfnCheck === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnCheck))), true);
  // 0x40: pointer
  if (data?.lpfnConnect !== undefined) view.setBigUint64(64, data.lpfnConnect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnConnect))), true);
  // 0x48: pointer
  if (data?.lpfnDisconnect !== undefined) view.setBigUint64(72, data.lpfnDisconnect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnDisconnect))), true);
  // 0x50: pointer
  if (data?.pvUserData !== undefined) view.setBigUint64(80, data.pvUserData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvUserData))), true);
  // 0x58: u32
  if (data?.dwShareMode !== undefined) view.setUint32(88, Number(data.dwShareMode), true);
  // 0x5c: u32
  if (data?.dwPreferredProtocols !== undefined) view.setUint32(92, Number(data.dwPreferredProtocols), true);
  return buf;
}

export class OPENCARD_SEARCH_CRITERIAAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get lpstrGroupNames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get nMaxGroupNames(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rgguidInterfaces(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get cguidInterfaces(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  get lpstrCardNames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get nMaxCardNames(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get lpfnCheck(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get lpfnConnect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get lpfnDisconnect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get pvUserData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u32
  get dwShareMode(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get dwPreferredProtocols(): number {
    return this.view.getUint32(92, true);
  }

  // 0x00: u32
  set dwStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set lpstrGroupNames(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set nMaxGroupNames(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rgguidInterfaces(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set cguidInterfaces(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  set lpstrCardNames(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: u32
  set nMaxCardNames(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set lpfnCheck(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set lpfnConnect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set lpfnDisconnect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set pvUserData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u32
  set dwShareMode(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set dwPreferredProtocols(value: number) {
    this.view.setUint32(92, value, true);
  }
}

/**
 * Windows.Win32.Security.Credentials.OPENCARD_SEARCH_CRITERIAW (size: 96)
 */
export interface OPENCARD_SEARCH_CRITERIAW {
  /** u32 */
  dwStructSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrGroupNames: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxGroupNames: number;
  /** ptr */
  rgguidInterfaces: Deno.PointerValue | Uint8Array;
  /** u32 */
  cguidInterfaces: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrCardNames: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxCardNames: number;
  /** Windows.Win32.Security.Credentials.LPOCNCHKPROC */
  lpfnCheck: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Credentials.LPOCNCONNPROCW */
  lpfnConnect: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Credentials.LPOCNDSCPROC */
  lpfnDisconnect: Uint8Array | Deno.PointerValue;
  /** ptr */
  pvUserData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwShareMode: number;
  /** u32 */
  dwPreferredProtocols: number;
}

export const sizeofOPENCARD_SEARCH_CRITERIAW = 96;

export function allocOPENCARD_SEARCH_CRITERIAW(data?: Partial<OPENCARD_SEARCH_CRITERIAW>): Uint8Array {
  const buf = new Uint8Array(sizeofOPENCARD_SEARCH_CRITERIAW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStructSize !== undefined) view.setUint32(0, Number(data.dwStructSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpstrGroupNames !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrGroupNames);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.nMaxGroupNames !== undefined) view.setUint32(16, Number(data.nMaxGroupNames), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rgguidInterfaces !== undefined) view.setBigUint64(24, data.rgguidInterfaces === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgguidInterfaces))), true);
  // 0x20: u32
  if (data?.cguidInterfaces !== undefined) view.setUint32(32, Number(data.cguidInterfaces), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.lpstrCardNames !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.lpstrCardNames);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: u32
  if (data?.nMaxCardNames !== undefined) view.setUint32(48, Number(data.nMaxCardNames), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.lpfnCheck !== undefined) view.setBigUint64(56, data.lpfnCheck === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnCheck))), true);
  // 0x40: pointer
  if (data?.lpfnConnect !== undefined) view.setBigUint64(64, data.lpfnConnect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnConnect))), true);
  // 0x48: pointer
  if (data?.lpfnDisconnect !== undefined) view.setBigUint64(72, data.lpfnDisconnect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnDisconnect))), true);
  // 0x50: pointer
  if (data?.pvUserData !== undefined) view.setBigUint64(80, data.pvUserData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvUserData))), true);
  // 0x58: u32
  if (data?.dwShareMode !== undefined) view.setUint32(88, Number(data.dwShareMode), true);
  // 0x5c: u32
  if (data?.dwPreferredProtocols !== undefined) view.setUint32(92, Number(data.dwPreferredProtocols), true);
  return buf;
}

export class OPENCARD_SEARCH_CRITERIAWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get lpstrGroupNames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get nMaxGroupNames(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rgguidInterfaces(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get cguidInterfaces(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  get lpstrCardNames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get nMaxCardNames(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get lpfnCheck(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get lpfnConnect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get lpfnDisconnect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get pvUserData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u32
  get dwShareMode(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get dwPreferredProtocols(): number {
    return this.view.getUint32(92, true);
  }

  // 0x00: u32
  set dwStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set lpstrGroupNames(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set nMaxGroupNames(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rgguidInterfaces(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set cguidInterfaces(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  set lpstrCardNames(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: u32
  set nMaxCardNames(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set lpfnCheck(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set lpfnConnect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set lpfnDisconnect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set pvUserData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u32
  set dwShareMode(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set dwPreferredProtocols(value: number) {
    this.view.setUint32(92, value, true);
  }
}

export type HICON = bigint | number;

/**
 * Windows.Win32.Security.Credentials.OPENCARDNAME_EXA (size: 128)
 */
export interface OPENCARDNAME_EXA {
  /** u32 */
  dwStructSize: number;
  /** usize */
  hSCardContext: bigint | number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrTitle: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpstrSearchDesc: string | null | Uint8Array;
  /** Windows.Win32.UI.WindowsAndMessaging.HICON */
  hIcon: Uint8Array | Deno.PointerValue;
  /** ptr */
  pOpenCardSearchCriteria: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Security.Credentials.LPOCNCONNPROCA */
  lpfnConnect: Uint8Array | Deno.PointerValue;
  /** ptr */
  pvUserData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwShareMode: number;
  /** u32 */
  dwPreferredProtocols: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrRdr: string | null | Uint8Array;
  /** u32 */
  nMaxRdr: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrCard: string | null | Uint8Array;
  /** u32 */
  nMaxCard: number;
  /** u32 */
  dwActiveProtocol: number;
  /** usize */
  hCardHandle: bigint | number;
}

export const sizeofOPENCARDNAME_EXA = 128;

export function allocOPENCARDNAME_EXA(data?: Partial<OPENCARDNAME_EXA>): Uint8Array {
  const buf = new Uint8Array(sizeofOPENCARDNAME_EXA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStructSize !== undefined) view.setUint32(0, Number(data.dwStructSize), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.hSCardContext !== undefined) view.setBigUint64(8, BigInt(data.hSCardContext), true);
  // 0x10: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(16, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.lpstrTitle !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpstrTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.lpstrSearchDesc !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.lpstrSearchDesc);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: pointer
  if (data?.hIcon !== undefined) view.setBigUint64(48, data.hIcon === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hIcon))), true);
  // 0x38: pointer
  if (data?.pOpenCardSearchCriteria !== undefined) view.setBigUint64(56, data.pOpenCardSearchCriteria === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pOpenCardSearchCriteria))), true);
  // 0x40: pointer
  if (data?.lpfnConnect !== undefined) view.setBigUint64(64, data.lpfnConnect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnConnect))), true);
  // 0x48: pointer
  if (data?.pvUserData !== undefined) view.setBigUint64(72, data.pvUserData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvUserData))), true);
  // 0x50: u32
  if (data?.dwShareMode !== undefined) view.setUint32(80, Number(data.dwShareMode), true);
  // 0x54: u32
  if (data?.dwPreferredProtocols !== undefined) view.setUint32(84, Number(data.dwPreferredProtocols), true);
  // 0x58: buffer
  if (data?.lpstrRdr !== undefined) {
    (buf as any)._f88 = util.pstrToFfi(data.lpstrRdr);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: u32
  if (data?.nMaxRdr !== undefined) view.setUint32(96, Number(data.nMaxRdr), true);
  // 0x64: pad4
  // 0x68: buffer
  if (data?.lpstrCard !== undefined) {
    (buf as any)._f104 = util.pstrToFfi(data.lpstrCard);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f104))), true);
  }
  // 0x70: u32
  if (data?.nMaxCard !== undefined) view.setUint32(112, Number(data.nMaxCard), true);
  // 0x74: u32
  if (data?.dwActiveProtocol !== undefined) view.setUint32(116, Number(data.dwActiveProtocol), true);
  // 0x78: usize
  if (data?.hCardHandle !== undefined) view.setBigUint64(120, BigInt(data.hCardHandle), true);
  return buf;
}

export class OPENCARDNAME_EXAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: usize
  get hSCardContext(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  get lpstrTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get lpstrSearchDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get hIcon(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pOpenCardSearchCriteria(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get lpfnConnect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get pvUserData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get dwShareMode(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwPreferredProtocols(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: buffer
  get lpstrRdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get nMaxRdr(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: buffer
  get lpstrCard(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: u32
  get nMaxCard(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: u32
  get dwActiveProtocol(): number {
    return this.view.getUint32(116, true);
  }

  // 0x78: usize
  get hCardHandle(): bigint | number {
    return Number(this.view.getBigUint64(120, true));
  }

  // 0x00: u32
  set dwStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: usize
  set hSCardContext(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  set lpstrTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set lpstrSearchDesc(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: pointer
  set hIcon(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pOpenCardSearchCriteria(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set lpfnConnect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set pvUserData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u32
  set dwShareMode(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwPreferredProtocols(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: buffer
  set lpstrRdr(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: u32
  set nMaxRdr(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: buffer
  set lpstrCard(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f104))), true);
  }

  // 0x70: u32
  set nMaxCard(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: u32
  set dwActiveProtocol(value: number) {
    this.view.setUint32(116, value, true);
  }

  // 0x78: usize
  set hCardHandle(value: bigint | number) {
    this.view.setBigUint64(120, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.OPENCARDNAME_EXW (size: 128)
 */
export interface OPENCARDNAME_EXW {
  /** u32 */
  dwStructSize: number;
  /** usize */
  hSCardContext: bigint | number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrTitle: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrSearchDesc: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.UI.WindowsAndMessaging.HICON */
  hIcon: Uint8Array | Deno.PointerValue;
  /** ptr */
  pOpenCardSearchCriteria: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Security.Credentials.LPOCNCONNPROCW */
  lpfnConnect: Uint8Array | Deno.PointerValue;
  /** ptr */
  pvUserData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwShareMode: number;
  /** u32 */
  dwPreferredProtocols: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrRdr: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxRdr: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrCard: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxCard: number;
  /** u32 */
  dwActiveProtocol: number;
  /** usize */
  hCardHandle: bigint | number;
}

export const sizeofOPENCARDNAME_EXW = 128;

export function allocOPENCARDNAME_EXW(data?: Partial<OPENCARDNAME_EXW>): Uint8Array {
  const buf = new Uint8Array(sizeofOPENCARDNAME_EXW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStructSize !== undefined) view.setUint32(0, Number(data.dwStructSize), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.hSCardContext !== undefined) view.setBigUint64(8, BigInt(data.hSCardContext), true);
  // 0x10: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(16, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.lpstrTitle !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpstrTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.lpstrSearchDesc !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.lpstrSearchDesc);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: pointer
  if (data?.hIcon !== undefined) view.setBigUint64(48, data.hIcon === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hIcon))), true);
  // 0x38: pointer
  if (data?.pOpenCardSearchCriteria !== undefined) view.setBigUint64(56, data.pOpenCardSearchCriteria === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pOpenCardSearchCriteria))), true);
  // 0x40: pointer
  if (data?.lpfnConnect !== undefined) view.setBigUint64(64, data.lpfnConnect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnConnect))), true);
  // 0x48: pointer
  if (data?.pvUserData !== undefined) view.setBigUint64(72, data.pvUserData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvUserData))), true);
  // 0x50: u32
  if (data?.dwShareMode !== undefined) view.setUint32(80, Number(data.dwShareMode), true);
  // 0x54: u32
  if (data?.dwPreferredProtocols !== undefined) view.setUint32(84, Number(data.dwPreferredProtocols), true);
  // 0x58: buffer
  if (data?.lpstrRdr !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.lpstrRdr);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: u32
  if (data?.nMaxRdr !== undefined) view.setUint32(96, Number(data.nMaxRdr), true);
  // 0x64: pad4
  // 0x68: buffer
  if (data?.lpstrCard !== undefined) {
    (buf as any)._f104 = util.pwstrToFfi(data.lpstrCard);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f104))), true);
  }
  // 0x70: u32
  if (data?.nMaxCard !== undefined) view.setUint32(112, Number(data.nMaxCard), true);
  // 0x74: u32
  if (data?.dwActiveProtocol !== undefined) view.setUint32(116, Number(data.dwActiveProtocol), true);
  // 0x78: usize
  if (data?.hCardHandle !== undefined) view.setBigUint64(120, BigInt(data.hCardHandle), true);
  return buf;
}

export class OPENCARDNAME_EXWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: usize
  get hSCardContext(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  get lpstrTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get lpstrSearchDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get hIcon(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pOpenCardSearchCriteria(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get lpfnConnect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get pvUserData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get dwShareMode(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwPreferredProtocols(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: buffer
  get lpstrRdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get nMaxRdr(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: buffer
  get lpstrCard(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: u32
  get nMaxCard(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: u32
  get dwActiveProtocol(): number {
    return this.view.getUint32(116, true);
  }

  // 0x78: usize
  get hCardHandle(): bigint | number {
    return Number(this.view.getBigUint64(120, true));
  }

  // 0x00: u32
  set dwStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: usize
  set hSCardContext(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  set lpstrTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set lpstrSearchDesc(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: pointer
  set hIcon(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pOpenCardSearchCriteria(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set lpfnConnect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set pvUserData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u32
  set dwShareMode(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwPreferredProtocols(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: buffer
  set lpstrRdr(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: u32
  set nMaxRdr(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: buffer
  set lpstrCard(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f104))), true);
  }

  // 0x70: u32
  set nMaxCard(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: u32
  set dwActiveProtocol(value: number) {
    this.view.setUint32(116, value, true);
  }

  // 0x78: usize
  set hCardHandle(value: bigint | number) {
    this.view.setBigUint64(120, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.READER_SEL_REQUEST (size: 24)
 */
export interface READER_SEL_REQUEST {
  /** u32 */
  dwShareMode: number;
  /** u32 */
  dwPreferredProtocols: number;
  /** Windows.Win32.Security.Credentials.READER_SEL_REQUEST_MATCH_TYPE */
  MatchType: READER_SEL_REQUEST_MATCH_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofREADER_SEL_REQUEST = 24;

export function allocREADER_SEL_REQUEST(data?: Partial<READER_SEL_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofREADER_SEL_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwShareMode !== undefined) view.setUint32(0, Number(data.dwShareMode), true);
  // 0x04: u32
  if (data?.dwPreferredProtocols !== undefined) view.setUint32(4, Number(data.dwPreferredProtocols), true);
  // 0x08: i32
  if (data?.MatchType !== undefined) view.setInt32(8, Number(data.MatchType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class READER_SEL_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwShareMode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwPreferredProtocols(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get MatchType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwShareMode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwPreferredProtocols(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set MatchType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.READER_SEL_RESPONSE (size: 16)
 */
export interface READER_SEL_RESPONSE {
  /** u32 */
  cbReaderNameOffset: number;
  /** u32 */
  cchReaderNameLength: number;
  /** u32 */
  cbCardNameOffset: number;
  /** u32 */
  cchCardNameLength: number;
}

export const sizeofREADER_SEL_RESPONSE = 16;

export function allocREADER_SEL_RESPONSE(data?: Partial<READER_SEL_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofREADER_SEL_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbReaderNameOffset !== undefined) view.setUint32(0, Number(data.cbReaderNameOffset), true);
  // 0x04: u32
  if (data?.cchReaderNameLength !== undefined) view.setUint32(4, Number(data.cchReaderNameLength), true);
  // 0x08: u32
  if (data?.cbCardNameOffset !== undefined) view.setUint32(8, Number(data.cbCardNameOffset), true);
  // 0x0c: u32
  if (data?.cchCardNameLength !== undefined) view.setUint32(12, Number(data.cchCardNameLength), true);
  return buf;
}

export class READER_SEL_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbReaderNameOffset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cchReaderNameLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cbCardNameOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cchCardNameLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set cbReaderNameOffset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cchReaderNameLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cbCardNameOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cchCardNameLength(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.Credentials.OPENCARDNAMEA (size: 176)
 */
export interface OPENCARDNAMEA {
  /** u32 */
  dwStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** usize */
  hSCardContext: bigint | number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrGroupNames: string | null | Uint8Array;
  /** u32 */
  nMaxGroupNames: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrCardNames: string | null | Uint8Array;
  /** u32 */
  nMaxCardNames: number;
  /** ptr */
  rgguidInterfaces: Deno.PointerValue | Uint8Array;
  /** u32 */
  cguidInterfaces: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrRdr: string | null | Uint8Array;
  /** u32 */
  nMaxRdr: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrCard: string | null | Uint8Array;
  /** u32 */
  nMaxCard: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrTitle: string | null | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** ptr */
  pvUserData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwShareMode: number;
  /** u32 */
  dwPreferredProtocols: number;
  /** u32 */
  dwActiveProtocol: number;
  /** Windows.Win32.Security.Credentials.LPOCNCONNPROCA */
  lpfnConnect: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Credentials.LPOCNCHKPROC */
  lpfnCheck: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Credentials.LPOCNDSCPROC */
  lpfnDisconnect: Uint8Array | Deno.PointerValue;
  /** usize */
  hCardHandle: bigint | number;
}

export const sizeofOPENCARDNAMEA = 176;

export function allocOPENCARDNAMEA(data?: Partial<OPENCARDNAMEA>): Uint8Array {
  const buf = new Uint8Array(sizeofOPENCARDNAMEA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStructSize !== undefined) view.setUint32(0, Number(data.dwStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: usize
  if (data?.hSCardContext !== undefined) view.setBigUint64(16, BigInt(data.hSCardContext), true);
  // 0x18: buffer
  if (data?.lpstrGroupNames !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrGroupNames);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.nMaxGroupNames !== undefined) view.setUint32(32, Number(data.nMaxGroupNames), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.lpstrCardNames !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.lpstrCardNames);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: u32
  if (data?.nMaxCardNames !== undefined) view.setUint32(48, Number(data.nMaxCardNames), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.rgguidInterfaces !== undefined) view.setBigUint64(56, data.rgguidInterfaces === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgguidInterfaces))), true);
  // 0x40: u32
  if (data?.cguidInterfaces !== undefined) view.setUint32(64, Number(data.cguidInterfaces), true);
  // 0x44: pad4
  // 0x48: buffer
  if (data?.lpstrRdr !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.lpstrRdr);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: u32
  if (data?.nMaxRdr !== undefined) view.setUint32(80, Number(data.nMaxRdr), true);
  // 0x54: pad4
  // 0x58: buffer
  if (data?.lpstrCard !== undefined) {
    (buf as any)._f88 = util.pstrToFfi(data.lpstrCard);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: u32
  if (data?.nMaxCard !== undefined) view.setUint32(96, Number(data.nMaxCard), true);
  // 0x64: pad4
  // 0x68: buffer
  if (data?.lpstrTitle !== undefined) {
    (buf as any)._f104 = util.pstrToFfi(data.lpstrTitle);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f104))), true);
  }
  // 0x70: u32
  if (data?.dwFlags !== undefined) view.setUint32(112, Number(data.dwFlags), true);
  // 0x74: pad4
  // 0x78: pointer
  if (data?.pvUserData !== undefined) view.setBigUint64(120, data.pvUserData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvUserData))), true);
  // 0x80: u32
  if (data?.dwShareMode !== undefined) view.setUint32(128, Number(data.dwShareMode), true);
  // 0x84: u32
  if (data?.dwPreferredProtocols !== undefined) view.setUint32(132, Number(data.dwPreferredProtocols), true);
  // 0x88: u32
  if (data?.dwActiveProtocol !== undefined) view.setUint32(136, Number(data.dwActiveProtocol), true);
  // 0x8c: pad4
  // 0x90: pointer
  if (data?.lpfnConnect !== undefined) view.setBigUint64(144, data.lpfnConnect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnConnect))), true);
  // 0x98: pointer
  if (data?.lpfnCheck !== undefined) view.setBigUint64(152, data.lpfnCheck === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnCheck))), true);
  // 0xa0: pointer
  if (data?.lpfnDisconnect !== undefined) view.setBigUint64(160, data.lpfnDisconnect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnDisconnect))), true);
  // 0xa8: usize
  if (data?.hCardHandle !== undefined) view.setBigUint64(168, BigInt(data.hCardHandle), true);
  return buf;
}

export class OPENCARDNAMEAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: usize
  get hSCardContext(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: buffer
  get lpstrGroupNames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get nMaxGroupNames(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  get lpstrCardNames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get nMaxCardNames(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get rgguidInterfaces(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get cguidInterfaces(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: buffer
  get lpstrRdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get nMaxRdr(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: buffer
  get lpstrCard(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get nMaxCard(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: buffer
  get lpstrTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: u32
  get dwFlags(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  get pvUserData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: u32
  get dwShareMode(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get dwPreferredProtocols(): number {
    return this.view.getUint32(132, true);
  }

  // 0x88: u32
  get dwActiveProtocol(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  get lpfnConnect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x98: pointer
  get lpfnCheck(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa0: pointer
  get lpfnDisconnect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(160, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa8: usize
  get hCardHandle(): bigint | number {
    return Number(this.view.getBigUint64(168, true));
  }

  // 0x00: u32
  set dwStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: usize
  set hSCardContext(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: buffer
  set lpstrGroupNames(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set nMaxGroupNames(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  set lpstrCardNames(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: u32
  set nMaxCardNames(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set rgguidInterfaces(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set cguidInterfaces(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: buffer
  set lpstrRdr(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: u32
  set nMaxRdr(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: buffer
  set lpstrCard(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: u32
  set nMaxCard(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: buffer
  set lpstrTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f104))), true);
  }

  // 0x70: u32
  set dwFlags(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  set pvUserData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: u32
  set dwShareMode(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set dwPreferredProtocols(value: number) {
    this.view.setUint32(132, value, true);
  }

  // 0x88: u32
  set dwActiveProtocol(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  set lpfnConnect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x98: pointer
  set lpfnCheck(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa0: pointer
  set lpfnDisconnect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(160, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa8: usize
  set hCardHandle(value: bigint | number) {
    this.view.setBigUint64(168, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.OPENCARDNAMEW (size: 176)
 */
export interface OPENCARDNAMEW {
  /** u32 */
  dwStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** usize */
  hSCardContext: bigint | number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrGroupNames: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxGroupNames: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrCardNames: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxCardNames: number;
  /** ptr */
  rgguidInterfaces: Deno.PointerValue | Uint8Array;
  /** u32 */
  cguidInterfaces: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrRdr: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxRdr: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrCard: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxCard: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrTitle: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwFlags: number;
  /** ptr */
  pvUserData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwShareMode: number;
  /** u32 */
  dwPreferredProtocols: number;
  /** u32 */
  dwActiveProtocol: number;
  /** Windows.Win32.Security.Credentials.LPOCNCONNPROCW */
  lpfnConnect: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Credentials.LPOCNCHKPROC */
  lpfnCheck: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Credentials.LPOCNDSCPROC */
  lpfnDisconnect: Uint8Array | Deno.PointerValue;
  /** usize */
  hCardHandle: bigint | number;
}

export const sizeofOPENCARDNAMEW = 176;

export function allocOPENCARDNAMEW(data?: Partial<OPENCARDNAMEW>): Uint8Array {
  const buf = new Uint8Array(sizeofOPENCARDNAMEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStructSize !== undefined) view.setUint32(0, Number(data.dwStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: usize
  if (data?.hSCardContext !== undefined) view.setBigUint64(16, BigInt(data.hSCardContext), true);
  // 0x18: buffer
  if (data?.lpstrGroupNames !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrGroupNames);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.nMaxGroupNames !== undefined) view.setUint32(32, Number(data.nMaxGroupNames), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.lpstrCardNames !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.lpstrCardNames);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: u32
  if (data?.nMaxCardNames !== undefined) view.setUint32(48, Number(data.nMaxCardNames), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.rgguidInterfaces !== undefined) view.setBigUint64(56, data.rgguidInterfaces === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgguidInterfaces))), true);
  // 0x40: u32
  if (data?.cguidInterfaces !== undefined) view.setUint32(64, Number(data.cguidInterfaces), true);
  // 0x44: pad4
  // 0x48: buffer
  if (data?.lpstrRdr !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.lpstrRdr);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: u32
  if (data?.nMaxRdr !== undefined) view.setUint32(80, Number(data.nMaxRdr), true);
  // 0x54: pad4
  // 0x58: buffer
  if (data?.lpstrCard !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.lpstrCard);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: u32
  if (data?.nMaxCard !== undefined) view.setUint32(96, Number(data.nMaxCard), true);
  // 0x64: pad4
  // 0x68: buffer
  if (data?.lpstrTitle !== undefined) {
    (buf as any)._f104 = util.pwstrToFfi(data.lpstrTitle);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f104))), true);
  }
  // 0x70: u32
  if (data?.dwFlags !== undefined) view.setUint32(112, Number(data.dwFlags), true);
  // 0x74: pad4
  // 0x78: pointer
  if (data?.pvUserData !== undefined) view.setBigUint64(120, data.pvUserData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvUserData))), true);
  // 0x80: u32
  if (data?.dwShareMode !== undefined) view.setUint32(128, Number(data.dwShareMode), true);
  // 0x84: u32
  if (data?.dwPreferredProtocols !== undefined) view.setUint32(132, Number(data.dwPreferredProtocols), true);
  // 0x88: u32
  if (data?.dwActiveProtocol !== undefined) view.setUint32(136, Number(data.dwActiveProtocol), true);
  // 0x8c: pad4
  // 0x90: pointer
  if (data?.lpfnConnect !== undefined) view.setBigUint64(144, data.lpfnConnect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnConnect))), true);
  // 0x98: pointer
  if (data?.lpfnCheck !== undefined) view.setBigUint64(152, data.lpfnCheck === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnCheck))), true);
  // 0xa0: pointer
  if (data?.lpfnDisconnect !== undefined) view.setBigUint64(160, data.lpfnDisconnect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnDisconnect))), true);
  // 0xa8: usize
  if (data?.hCardHandle !== undefined) view.setBigUint64(168, BigInt(data.hCardHandle), true);
  return buf;
}

export class OPENCARDNAMEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: usize
  get hSCardContext(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: buffer
  get lpstrGroupNames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get nMaxGroupNames(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  get lpstrCardNames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get nMaxCardNames(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get rgguidInterfaces(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get cguidInterfaces(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: buffer
  get lpstrRdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get nMaxRdr(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: buffer
  get lpstrCard(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get nMaxCard(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: buffer
  get lpstrTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: u32
  get dwFlags(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  get pvUserData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: u32
  get dwShareMode(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get dwPreferredProtocols(): number {
    return this.view.getUint32(132, true);
  }

  // 0x88: u32
  get dwActiveProtocol(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  get lpfnConnect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x98: pointer
  get lpfnCheck(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa0: pointer
  get lpfnDisconnect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(160, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa8: usize
  get hCardHandle(): bigint | number {
    return Number(this.view.getBigUint64(168, true));
  }

  // 0x00: u32
  set dwStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: usize
  set hSCardContext(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: buffer
  set lpstrGroupNames(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set nMaxGroupNames(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  set lpstrCardNames(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: u32
  set nMaxCardNames(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set rgguidInterfaces(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set cguidInterfaces(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: buffer
  set lpstrRdr(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: u32
  set nMaxRdr(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: buffer
  set lpstrCard(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: u32
  set nMaxCard(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: buffer
  set lpstrTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f104))), true);
  }

  // 0x70: u32
  set dwFlags(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  set pvUserData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: u32
  set dwShareMode(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set dwPreferredProtocols(value: number) {
    this.view.setUint32(132, value, true);
  }

  // 0x88: u32
  set dwActiveProtocol(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  set lpfnConnect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x98: pointer
  set lpfnCheck(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa0: pointer
  set lpfnDisconnect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(160, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa8: usize
  set hCardHandle(value: bigint | number) {
    this.view.setBigUint64(168, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.SecPkgContext_ClientCreds (size: 16)
 */
export interface SecPkgContext_ClientCreds {
  /** u32 */
  AuthBufferLen: number;
  /** ptr */
  AuthBuffer: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_ClientCreds = 16;

export function allocSecPkgContext_ClientCreds(data?: Partial<SecPkgContext_ClientCreds>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_ClientCreds);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AuthBufferLen !== undefined) view.setUint32(0, Number(data.AuthBufferLen), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.AuthBuffer !== undefined) view.setBigUint64(8, data.AuthBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AuthBuffer))), true);
  return buf;
}

export class SecPkgContext_ClientCredsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AuthBufferLen(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get AuthBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set AuthBufferLen(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set AuthBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.CREDSSP_CRED (size: 24)
 */
export interface CREDSSP_CRED {
  /** Windows.Win32.Security.Credentials.CREDSPP_SUBMIT_TYPE */
  Type: CREDSPP_SUBMIT_TYPE;
  /** ptr */
  pSchannelCred: Deno.PointerValue | Uint8Array;
  /** ptr */
  pSpnegoCred: Deno.PointerValue | Uint8Array;
}

export const sizeofCREDSSP_CRED = 24;

export function allocCREDSSP_CRED(data?: Partial<CREDSSP_CRED>): Uint8Array {
  const buf = new Uint8Array(sizeofCREDSSP_CRED);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pSchannelCred !== undefined) view.setBigUint64(8, data.pSchannelCred === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSchannelCred))), true);
  // 0x10: pointer
  if (data?.pSpnegoCred !== undefined) view.setBigUint64(16, data.pSpnegoCred === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSpnegoCred))), true);
  return buf;
}

export class CREDSSP_CREDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pSchannelCred(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pSpnegoCred(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pSchannelCred(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pSpnegoCred(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.CREDSSP_CRED_EX (size: 24)
 */
export interface CREDSSP_CRED_EX {
  /** Windows.Win32.Security.Credentials.CREDSPP_SUBMIT_TYPE */
  Type: CREDSPP_SUBMIT_TYPE;
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Reserved: number;
  /** Windows.Win32.Security.Credentials.CREDSSP_CRED */
  Cred: Uint8Array | Deno.PointerValue;
}

export const sizeofCREDSSP_CRED_EX = 24;

export function allocCREDSSP_CRED_EX(data?: Partial<CREDSSP_CRED_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofCREDSSP_CRED_EX);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  // 0x10: pointer
  if (data?.Cred !== undefined) view.setBigUint64(16, data.Cred === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Cred))), true);
  return buf;
}

export class CREDSSP_CRED_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Version(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Reserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get Cred(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Version(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Reserved(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set Cred(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HRESULT = number;

export type BOOL = number;

export type HANDLE = bigint | number;

// Native Libraries

try {
  var libKeyCredMgr_dll = Deno.dlopen("KeyCredMgr.dll", {
    KeyCredentialManagerGetOperationErrorStates: {
      parameters: ["i32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    KeyCredentialManagerShowUIOperation: {
      parameters: ["pointer", "i32"],
      result: "pointer",
      optional: true,
    },
    KeyCredentialManagerGetInformation: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    KeyCredentialManagerFreeInformation: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libADVAPI32_dll = Deno.dlopen("ADVAPI32.dll", {
    CredWriteW: {
      parameters: ["pointer", "u32"],
      result: "i32",
      optional: true,
    },
    CredWriteA: {
      parameters: ["pointer", "u32"],
      result: "i32",
      optional: true,
    },
    CredReadW: {
      parameters: ["buffer", "u32", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    CredReadA: {
      parameters: ["buffer", "u32", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    CredEnumerateW: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    CredEnumerateA: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    CredWriteDomainCredentialsW: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    CredWriteDomainCredentialsA: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    CredReadDomainCredentialsW: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    CredReadDomainCredentialsA: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    CredDeleteW: {
      parameters: ["buffer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    CredDeleteA: {
      parameters: ["buffer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    CredRenameW: {
      parameters: ["buffer", "buffer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    CredRenameA: {
      parameters: ["buffer", "buffer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    CredGetTargetInfoW: {
      parameters: ["buffer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    CredGetTargetInfoA: {
      parameters: ["buffer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    CredMarshalCredentialW: {
      parameters: ["i32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    CredMarshalCredentialA: {
      parameters: ["i32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    CredUnmarshalCredentialW: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    CredUnmarshalCredentialA: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    CredIsMarshaledCredentialW: {
      parameters: ["buffer"],
      result: "i32",
      optional: true,
    },
    CredIsMarshaledCredentialA: {
      parameters: ["buffer"],
      result: "i32",
      optional: true,
    },
    CredProtectW: {
      parameters: ["i32", "buffer", "u32", "buffer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    CredProtectA: {
      parameters: ["i32", "buffer", "u32", "buffer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    CredUnprotectW: {
      parameters: ["i32", "buffer", "u32", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    CredUnprotectA: {
      parameters: ["i32", "buffer", "u32", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    CredIsProtectedW: {
      parameters: ["buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    CredIsProtectedA: {
      parameters: ["buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    CredFindBestCredentialW: {
      parameters: ["buffer", "u32", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    CredFindBestCredentialA: {
      parameters: ["buffer", "u32", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    CredGetSessionTypes: {
      parameters: ["u32", "pointer"],
      result: "i32",
      optional: true,
    },
    CredFree: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libcredui_dll = Deno.dlopen("credui.dll", {
    CredUnPackAuthenticationBufferW: {
      parameters: ["u32", "pointer", "u32", "buffer", "pointer", "buffer", "pointer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    CredUnPackAuthenticationBufferA: {
      parameters: ["u32", "pointer", "u32", "buffer", "pointer", "buffer", "pointer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    CredPackAuthenticationBufferW: {
      parameters: ["u32", "buffer", "buffer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    CredPackAuthenticationBufferA: {
      parameters: ["u32", "buffer", "buffer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    CredUIPromptForCredentialsW: {
      parameters: ["pointer", "buffer", "pointer", "u32", "buffer", "u32", "buffer", "u32", "pointer", "u32"],
      result: "u32",
      optional: true,
    },
    CredUIPromptForCredentialsA: {
      parameters: ["pointer", "buffer", "pointer", "u32", "buffer", "u32", "buffer", "u32", "pointer", "u32"],
      result: "u32",
      optional: true,
    },
    CredUIPromptForWindowsCredentialsW: {
      parameters: ["pointer", "u32", "pointer", "pointer", "u32", "pointer", "pointer", "pointer", "u32"],
      result: "u32",
      optional: true,
    },
    CredUIPromptForWindowsCredentialsA: {
      parameters: ["pointer", "u32", "pointer", "pointer", "u32", "pointer", "pointer", "pointer", "u32"],
      result: "u32",
      optional: true,
    },
    CredUIParseUserNameW: {
      parameters: ["buffer", "buffer", "u32", "buffer", "u32"],
      result: "u32",
      optional: true,
    },
    CredUIParseUserNameA: {
      parameters: ["buffer", "buffer", "u32", "buffer", "u32"],
      result: "u32",
      optional: true,
    },
    CredUICmdLinePromptForCredentialsW: {
      parameters: ["buffer", "pointer", "u32", "buffer", "u32", "buffer", "u32", "pointer", "u32"],
      result: "u32",
      optional: true,
    },
    CredUICmdLinePromptForCredentialsA: {
      parameters: ["buffer", "pointer", "u32", "buffer", "u32", "buffer", "u32", "pointer", "u32"],
      result: "u32",
      optional: true,
    },
    CredUIConfirmCredentialsW: {
      parameters: ["buffer", "i32"],
      result: "u32",
      optional: true,
    },
    CredUIConfirmCredentialsA: {
      parameters: ["buffer", "i32"],
      result: "u32",
      optional: true,
    },
    CredUIStoreSSOCredW: {
      parameters: ["buffer", "buffer", "buffer", "i32"],
      result: "u32",
      optional: true,
    },
    CredUIReadSSOCredW: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libWinSCard_dll = Deno.dlopen("WinSCard.dll", {
    SCardEstablishContext: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardReleaseContext: {
      parameters: ["usize"],
      result: "i32",
      optional: true,
    },
    SCardIsValidContext: {
      parameters: ["usize"],
      result: "i32",
      optional: true,
    },
    SCardListReaderGroupsA: {
      parameters: ["usize", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardListReaderGroupsW: {
      parameters: ["usize", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardListReadersA: {
      parameters: ["usize", "buffer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardListReadersW: {
      parameters: ["usize", "buffer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardListCardsA: {
      parameters: ["usize", "pointer", "pointer", "u32", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardListCardsW: {
      parameters: ["usize", "pointer", "pointer", "u32", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardListInterfacesA: {
      parameters: ["usize", "buffer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardListInterfacesW: {
      parameters: ["usize", "buffer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardGetProviderIdA: {
      parameters: ["usize", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardGetProviderIdW: {
      parameters: ["usize", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardGetCardTypeProviderNameA: {
      parameters: ["usize", "buffer", "u32", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardGetCardTypeProviderNameW: {
      parameters: ["usize", "buffer", "u32", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardIntroduceReaderGroupA: {
      parameters: ["usize", "buffer"],
      result: "i32",
      optional: true,
    },
    SCardIntroduceReaderGroupW: {
      parameters: ["usize", "buffer"],
      result: "i32",
      optional: true,
    },
    SCardForgetReaderGroupA: {
      parameters: ["usize", "buffer"],
      result: "i32",
      optional: true,
    },
    SCardForgetReaderGroupW: {
      parameters: ["usize", "buffer"],
      result: "i32",
      optional: true,
    },
    SCardIntroduceReaderA: {
      parameters: ["usize", "buffer", "buffer"],
      result: "i32",
      optional: true,
    },
    SCardIntroduceReaderW: {
      parameters: ["usize", "buffer", "buffer"],
      result: "i32",
      optional: true,
    },
    SCardForgetReaderA: {
      parameters: ["usize", "buffer"],
      result: "i32",
      optional: true,
    },
    SCardForgetReaderW: {
      parameters: ["usize", "buffer"],
      result: "i32",
      optional: true,
    },
    SCardAddReaderToGroupA: {
      parameters: ["usize", "buffer", "buffer"],
      result: "i32",
      optional: true,
    },
    SCardAddReaderToGroupW: {
      parameters: ["usize", "buffer", "buffer"],
      result: "i32",
      optional: true,
    },
    SCardRemoveReaderFromGroupA: {
      parameters: ["usize", "buffer", "buffer"],
      result: "i32",
      optional: true,
    },
    SCardRemoveReaderFromGroupW: {
      parameters: ["usize", "buffer", "buffer"],
      result: "i32",
      optional: true,
    },
    SCardIntroduceCardTypeA: {
      parameters: ["usize", "buffer", "pointer", "pointer", "u32", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    SCardIntroduceCardTypeW: {
      parameters: ["usize", "buffer", "pointer", "pointer", "u32", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    SCardSetCardTypeProviderNameA: {
      parameters: ["usize", "buffer", "u32", "buffer"],
      result: "i32",
      optional: true,
    },
    SCardSetCardTypeProviderNameW: {
      parameters: ["usize", "buffer", "u32", "buffer"],
      result: "i32",
      optional: true,
    },
    SCardForgetCardTypeA: {
      parameters: ["usize", "buffer"],
      result: "i32",
      optional: true,
    },
    SCardForgetCardTypeW: {
      parameters: ["usize", "buffer"],
      result: "i32",
      optional: true,
    },
    SCardFreeMemory: {
      parameters: ["usize", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardAccessStartedEvent: {
      parameters: [],
      result: "pointer",
      optional: true,
    },
    SCardReleaseStartedEvent: {
      parameters: [],
      result: "void",
      optional: true,
    },
    SCardLocateCardsA: {
      parameters: ["usize", "buffer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    SCardLocateCardsW: {
      parameters: ["usize", "buffer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    SCardLocateCardsByATRA: {
      parameters: ["usize", "pointer", "u32", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    SCardLocateCardsByATRW: {
      parameters: ["usize", "pointer", "u32", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    SCardGetStatusChangeA: {
      parameters: ["usize", "u32", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    SCardGetStatusChangeW: {
      parameters: ["usize", "u32", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    SCardCancel: {
      parameters: ["usize"],
      result: "i32",
      optional: true,
    },
    SCardConnectA: {
      parameters: ["usize", "buffer", "u32", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardConnectW: {
      parameters: ["usize", "buffer", "u32", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardReconnect: {
      parameters: ["usize", "u32", "u32", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardDisconnect: {
      parameters: ["usize", "u32"],
      result: "i32",
      optional: true,
    },
    SCardBeginTransaction: {
      parameters: ["usize"],
      result: "i32",
      optional: true,
    },
    SCardEndTransaction: {
      parameters: ["usize", "u32"],
      result: "i32",
      optional: true,
    },
    SCardState: {
      parameters: ["usize", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardStatusA: {
      parameters: ["usize", "buffer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardStatusW: {
      parameters: ["usize", "buffer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardTransmit: {
      parameters: ["usize", "pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardGetTransmitCount: {
      parameters: ["usize", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardControl: {
      parameters: ["usize", "u32", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardGetAttrib: {
      parameters: ["usize", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardSetAttrib: {
      parameters: ["usize", "u32", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    SCardReadCacheA: {
      parameters: ["usize", "pointer", "u32", "buffer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardReadCacheW: {
      parameters: ["usize", "pointer", "u32", "buffer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardWriteCacheA: {
      parameters: ["usize", "pointer", "u32", "buffer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    SCardWriteCacheW: {
      parameters: ["usize", "pointer", "u32", "buffer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    SCardGetReaderIconA: {
      parameters: ["usize", "buffer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardGetReaderIconW: {
      parameters: ["usize", "buffer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardGetDeviceTypeIdA: {
      parameters: ["usize", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardGetDeviceTypeIdW: {
      parameters: ["usize", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardGetReaderDeviceInstanceIdA: {
      parameters: ["usize", "buffer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardGetReaderDeviceInstanceIdW: {
      parameters: ["usize", "buffer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardListReadersWithDeviceInstanceIdA: {
      parameters: ["usize", "buffer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardListReadersWithDeviceInstanceIdW: {
      parameters: ["usize", "buffer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    SCardAudit: {
      parameters: ["usize", "u32"],
      result: "i32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libSCARDDLG_dll = Deno.dlopen("SCARDDLG.dll", {
    SCardUIDlgSelectCardA: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    SCardUIDlgSelectCardW: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    GetOpenCardNameA: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    GetOpenCardNameW: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    SCardDlgExtendedError: {
      parameters: [],
      result: "i32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function KeyCredentialManagerGetOperationErrorStates(
  keyCredentialManagerOperationType: KeyCredentialManagerOperationType /* Windows.Win32.Security.Credentials.KeyCredentialManagerOperationType */,
  isReady: Deno.PointerValue | Uint8Array /* ptr */,
  keyCredentialManagerOperationErrorStates: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libKeyCredMgr_dll.KeyCredentialManagerGetOperationErrorStates!(keyCredentialManagerOperationType, util.toPointer(isReady), util.toPointer(keyCredentialManagerOperationErrorStates));
}

export function KeyCredentialManagerShowUIOperation(
  hWndOwner: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  keyCredentialManagerOperationType: KeyCredentialManagerOperationType /* Windows.Win32.Security.Credentials.KeyCredentialManagerOperationType */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libKeyCredMgr_dll.KeyCredentialManagerShowUIOperation!((hWndOwner), keyCredentialManagerOperationType);
}

export function KeyCredentialManagerGetInformation(
  keyCredentialManagerInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libKeyCredMgr_dll.KeyCredentialManagerGetInformation!(util.toPointer(keyCredentialManagerInfo));
}

export function KeyCredentialManagerFreeInformation(
  keyCredentialManagerInfo: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libKeyCredMgr_dll.KeyCredentialManagerFreeInformation!(util.toPointer(keyCredentialManagerInfo));
}

export function CredWriteW(
  Credential: Deno.PointerValue | Uint8Array /* ptr */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredWriteW!(util.toPointer(Credential), Flags));
}

export function CredWriteA(
  Credential: Deno.PointerValue | Uint8Array /* ptr */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredWriteA!(util.toPointer(Credential), Flags));
}

export function CredReadW(
  TargetName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Type: number /* u32 */,
  Flags: number /* u32 */,
  Credential: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredReadW!(util.pwstrToFfi(TargetName), Type, Flags, util.toPointer(Credential)));
}

export function CredReadA(
  TargetName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Type: number /* u32 */,
  Flags: number /* u32 */,
  Credential: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredReadA!(util.pstrToFfi(TargetName), Type, Flags, util.toPointer(Credential)));
}

export function CredEnumerateW(
  Filter: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: CRED_ENUMERATE_FLAGS /* Windows.Win32.Security.Credentials.CRED_ENUMERATE_FLAGS */,
  Count: Deno.PointerValue | Uint8Array /* ptr */,
  Credential: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredEnumerateW!(util.pwstrToFfi(Filter), Flags, util.toPointer(Count), util.toPointer(Credential)));
}

export function CredEnumerateA(
  Filter: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Flags: CRED_ENUMERATE_FLAGS /* Windows.Win32.Security.Credentials.CRED_ENUMERATE_FLAGS */,
  Count: Deno.PointerValue | Uint8Array /* ptr */,
  Credential: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredEnumerateA!(util.pstrToFfi(Filter), Flags, util.toPointer(Count), util.toPointer(Credential)));
}

export function CredWriteDomainCredentialsW(
  TargetInfo: Deno.PointerValue | Uint8Array /* ptr */,
  Credential: Deno.PointerValue | Uint8Array /* ptr */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredWriteDomainCredentialsW!(util.toPointer(TargetInfo), util.toPointer(Credential), Flags));
}

export function CredWriteDomainCredentialsA(
  TargetInfo: Deno.PointerValue | Uint8Array /* ptr */,
  Credential: Deno.PointerValue | Uint8Array /* ptr */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredWriteDomainCredentialsA!(util.toPointer(TargetInfo), util.toPointer(Credential), Flags));
}

export function CredReadDomainCredentialsW(
  TargetInfo: Deno.PointerValue | Uint8Array /* ptr */,
  Flags: number /* u32 */,
  Count: Deno.PointerValue | Uint8Array /* ptr */,
  Credential: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredReadDomainCredentialsW!(util.toPointer(TargetInfo), Flags, util.toPointer(Count), util.toPointer(Credential)));
}

export function CredReadDomainCredentialsA(
  TargetInfo: Deno.PointerValue | Uint8Array /* ptr */,
  Flags: number /* u32 */,
  Count: Deno.PointerValue | Uint8Array /* ptr */,
  Credential: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredReadDomainCredentialsA!(util.toPointer(TargetInfo), Flags, util.toPointer(Count), util.toPointer(Credential)));
}

export function CredDeleteW(
  TargetName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Type: number /* u32 */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredDeleteW!(util.pwstrToFfi(TargetName), Type, Flags));
}

export function CredDeleteA(
  TargetName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Type: number /* u32 */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredDeleteA!(util.pstrToFfi(TargetName), Type, Flags));
}

export function CredRenameW(
  OldTargetName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  NewTargetName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Type: number /* u32 */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredRenameW!(util.pwstrToFfi(OldTargetName), util.pwstrToFfi(NewTargetName), Type, Flags));
}

export function CredRenameA(
  OldTargetName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  NewTargetName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Type: number /* u32 */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredRenameA!(util.pstrToFfi(OldTargetName), util.pstrToFfi(NewTargetName), Type, Flags));
}

export function CredGetTargetInfoW(
  TargetName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  TargetInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredGetTargetInfoW!(util.pwstrToFfi(TargetName), Flags, util.toPointer(TargetInfo)));
}

export function CredGetTargetInfoA(
  TargetName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Flags: number /* u32 */,
  TargetInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredGetTargetInfoA!(util.pstrToFfi(TargetName), Flags, util.toPointer(TargetInfo)));
}

export function CredMarshalCredentialW(
  CredType: CRED_MARSHAL_TYPE /* Windows.Win32.Security.Credentials.CRED_MARSHAL_TYPE */,
  Credential: Deno.PointerValue | Uint8Array /* ptr */,
  MarshaledCredential: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredMarshalCredentialW!(CredType, util.toPointer(Credential), util.toPointer(MarshaledCredential)));
}

export function CredMarshalCredentialA(
  CredType: CRED_MARSHAL_TYPE /* Windows.Win32.Security.Credentials.CRED_MARSHAL_TYPE */,
  Credential: Deno.PointerValue | Uint8Array /* ptr */,
  MarshaledCredential: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredMarshalCredentialA!(CredType, util.toPointer(Credential), util.toPointer(MarshaledCredential)));
}

export function CredUnmarshalCredentialW(
  MarshaledCredential: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  CredType: Deno.PointerValue | Uint8Array /* ptr */,
  Credential: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredUnmarshalCredentialW!(util.pwstrToFfi(MarshaledCredential), util.toPointer(CredType), util.toPointer(Credential)));
}

export function CredUnmarshalCredentialA(
  MarshaledCredential: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  CredType: Deno.PointerValue | Uint8Array /* ptr */,
  Credential: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredUnmarshalCredentialA!(util.pstrToFfi(MarshaledCredential), util.toPointer(CredType), util.toPointer(Credential)));
}

export function CredIsMarshaledCredentialW(
  MarshaledCredential: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredIsMarshaledCredentialW!(util.pwstrToFfi(MarshaledCredential)));
}

export function CredIsMarshaledCredentialA(
  MarshaledCredential: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredIsMarshaledCredentialA!(util.pstrToFfi(MarshaledCredential)));
}

export function CredUnPackAuthenticationBufferW(
  dwFlags: CRED_PACK_FLAGS /* Windows.Win32.Security.Credentials.CRED_PACK_FLAGS */,
  pAuthBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  cbAuthBuffer: number /* u32 */,
  pszUserName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchMaxUserName: Deno.PointerValue | Uint8Array /* ptr */,
  pszDomainName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchMaxDomainName: Deno.PointerValue | Uint8Array /* ptr */,
  pszPassword: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchMaxPassword: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libcredui_dll.CredUnPackAuthenticationBufferW!(dwFlags, util.toPointer(pAuthBuffer), cbAuthBuffer, util.pwstrToFfi(pszUserName), util.toPointer(pcchMaxUserName), util.pwstrToFfi(pszDomainName), util.toPointer(pcchMaxDomainName), util.pwstrToFfi(pszPassword), util.toPointer(pcchMaxPassword)));
}

export function CredUnPackAuthenticationBufferA(
  dwFlags: CRED_PACK_FLAGS /* Windows.Win32.Security.Credentials.CRED_PACK_FLAGS */,
  pAuthBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  cbAuthBuffer: number /* u32 */,
  pszUserName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchlMaxUserName: Deno.PointerValue | Uint8Array /* ptr */,
  pszDomainName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchMaxDomainName: Deno.PointerValue | Uint8Array /* ptr */,
  pszPassword: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchMaxPassword: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libcredui_dll.CredUnPackAuthenticationBufferA!(dwFlags, util.toPointer(pAuthBuffer), cbAuthBuffer, util.pstrToFfi(pszUserName), util.toPointer(pcchlMaxUserName), util.pstrToFfi(pszDomainName), util.toPointer(pcchMaxDomainName), util.pstrToFfi(pszPassword), util.toPointer(pcchMaxPassword)));
}

export function CredPackAuthenticationBufferW(
  dwFlags: CRED_PACK_FLAGS /* Windows.Win32.Security.Credentials.CRED_PACK_FLAGS */,
  pszUserName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszPassword: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pPackedCredentials: Deno.PointerValue | Uint8Array /* ptr */,
  pcbPackedCredentials: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libcredui_dll.CredPackAuthenticationBufferW!(dwFlags, util.pwstrToFfi(pszUserName), util.pwstrToFfi(pszPassword), util.toPointer(pPackedCredentials), util.toPointer(pcbPackedCredentials)));
}

export function CredPackAuthenticationBufferA(
  dwFlags: CRED_PACK_FLAGS /* Windows.Win32.Security.Credentials.CRED_PACK_FLAGS */,
  pszUserName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszPassword: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pPackedCredentials: Deno.PointerValue | Uint8Array /* ptr */,
  pcbPackedCredentials: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libcredui_dll.CredPackAuthenticationBufferA!(dwFlags, util.pstrToFfi(pszUserName), util.pstrToFfi(pszPassword), util.toPointer(pPackedCredentials), util.toPointer(pcbPackedCredentials)));
}

export function CredProtectW(
  fAsSelf: boolean /* Windows.Win32.Foundation.BOOL */,
  pszCredentials: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchCredentials: number /* u32 */,
  pszProtectedCredentials: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchMaxChars: Deno.PointerValue | Uint8Array /* ptr */,
  ProtectionType: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredProtectW!(util.boolToFfi(fAsSelf), util.pwstrToFfi(pszCredentials), cchCredentials, util.pwstrToFfi(pszProtectedCredentials), util.toPointer(pcchMaxChars), util.toPointer(ProtectionType)));
}

export function CredProtectA(
  fAsSelf: boolean /* Windows.Win32.Foundation.BOOL */,
  pszCredentials: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchCredentials: number /* u32 */,
  pszProtectedCredentials: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchMaxChars: Deno.PointerValue | Uint8Array /* ptr */,
  ProtectionType: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredProtectA!(util.boolToFfi(fAsSelf), util.pstrToFfi(pszCredentials), cchCredentials, util.pstrToFfi(pszProtectedCredentials), util.toPointer(pcchMaxChars), util.toPointer(ProtectionType)));
}

export function CredUnprotectW(
  fAsSelf: boolean /* Windows.Win32.Foundation.BOOL */,
  pszProtectedCredentials: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchProtectedCredentials: number /* u32 */,
  pszCredentials: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchMaxChars: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredUnprotectW!(util.boolToFfi(fAsSelf), util.pwstrToFfi(pszProtectedCredentials), cchProtectedCredentials, util.pwstrToFfi(pszCredentials), util.toPointer(pcchMaxChars)));
}

export function CredUnprotectA(
  fAsSelf: boolean /* Windows.Win32.Foundation.BOOL */,
  pszProtectedCredentials: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchProtectedCredentials: number /* u32 */,
  pszCredentials: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchMaxChars: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredUnprotectA!(util.boolToFfi(fAsSelf), util.pstrToFfi(pszProtectedCredentials), cchProtectedCredentials, util.pstrToFfi(pszCredentials), util.toPointer(pcchMaxChars)));
}

export function CredIsProtectedW(
  pszProtectedCredentials: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pProtectionType: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredIsProtectedW!(util.pwstrToFfi(pszProtectedCredentials), util.toPointer(pProtectionType)));
}

export function CredIsProtectedA(
  pszProtectedCredentials: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pProtectionType: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredIsProtectedA!(util.pstrToFfi(pszProtectedCredentials), util.toPointer(pProtectionType)));
}

export function CredFindBestCredentialW(
  TargetName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Type: number /* u32 */,
  Flags: number /* u32 */,
  Credential: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredFindBestCredentialW!(util.pwstrToFfi(TargetName), Type, Flags, util.toPointer(Credential)));
}

export function CredFindBestCredentialA(
  TargetName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Type: number /* u32 */,
  Flags: number /* u32 */,
  Credential: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredFindBestCredentialA!(util.pstrToFfi(TargetName), Type, Flags, util.toPointer(Credential)));
}

export function CredGetSessionTypes(
  MaximumPersistCount: number /* u32 */,
  MaximumPersist: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CredGetSessionTypes!(MaximumPersistCount, util.toPointer(MaximumPersist)));
}

export function CredFree(
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libADVAPI32_dll.CredFree!(util.toPointer(Buffer));
}

export function CredUIPromptForCredentialsW(
  pUiInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pszTargetName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pContext: Deno.PointerValue | Uint8Array /* ptr */,
  dwAuthError: number /* u32 */,
  pszUserName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ulUserNameBufferSize: number /* u32 */,
  pszPassword: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ulPasswordBufferSize: number /* u32 */,
  save: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: CREDUI_FLAGS /* Windows.Win32.Security.Credentials.CREDUI_FLAGS */,
): number /* u32 */ {
  return libcredui_dll.CredUIPromptForCredentialsW!(util.toPointer(pUiInfo), util.pwstrToFfi(pszTargetName), util.toPointer(pContext), dwAuthError, util.pwstrToFfi(pszUserName), ulUserNameBufferSize, util.pwstrToFfi(pszPassword), ulPasswordBufferSize, util.toPointer(save), dwFlags);
}

export function CredUIPromptForCredentialsA(
  pUiInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pszTargetName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pContext: Deno.PointerValue | Uint8Array /* ptr */,
  dwAuthError: number /* u32 */,
  pszUserName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ulUserNameBufferSize: number /* u32 */,
  pszPassword: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ulPasswordBufferSize: number /* u32 */,
  save: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: CREDUI_FLAGS /* Windows.Win32.Security.Credentials.CREDUI_FLAGS */,
): number /* u32 */ {
  return libcredui_dll.CredUIPromptForCredentialsA!(util.toPointer(pUiInfo), util.pstrToFfi(pszTargetName), util.toPointer(pContext), dwAuthError, util.pstrToFfi(pszUserName), ulUserNameBufferSize, util.pstrToFfi(pszPassword), ulPasswordBufferSize, util.toPointer(save), dwFlags);
}

export function CredUIPromptForWindowsCredentialsW(
  pUiInfo: Deno.PointerValue | Uint8Array /* ptr */,
  dwAuthError: number /* u32 */,
  pulAuthPackage: Deno.PointerValue | Uint8Array /* ptr */,
  pvInAuthBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  ulInAuthBufferSize: number /* u32 */,
  ppvOutAuthBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pulOutAuthBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  pfSave: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: CREDUIWIN_FLAGS /* Windows.Win32.Security.Credentials.CREDUIWIN_FLAGS */,
): number /* u32 */ {
  return libcredui_dll.CredUIPromptForWindowsCredentialsW!(util.toPointer(pUiInfo), dwAuthError, util.toPointer(pulAuthPackage), util.toPointer(pvInAuthBuffer), ulInAuthBufferSize, util.toPointer(ppvOutAuthBuffer), util.toPointer(pulOutAuthBufferSize), util.toPointer(pfSave), dwFlags);
}

export function CredUIPromptForWindowsCredentialsA(
  pUiInfo: Deno.PointerValue | Uint8Array /* ptr */,
  dwAuthError: number /* u32 */,
  pulAuthPackage: Deno.PointerValue | Uint8Array /* ptr */,
  pvInAuthBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  ulInAuthBufferSize: number /* u32 */,
  ppvOutAuthBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pulOutAuthBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  pfSave: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: CREDUIWIN_FLAGS /* Windows.Win32.Security.Credentials.CREDUIWIN_FLAGS */,
): number /* u32 */ {
  return libcredui_dll.CredUIPromptForWindowsCredentialsA!(util.toPointer(pUiInfo), dwAuthError, util.toPointer(pulAuthPackage), util.toPointer(pvInAuthBuffer), ulInAuthBufferSize, util.toPointer(ppvOutAuthBuffer), util.toPointer(pulOutAuthBufferSize), util.toPointer(pfSave), dwFlags);
}

export function CredUIParseUserNameW(
  UserName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  user: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  userBufferSize: number /* u32 */,
  domain: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  domainBufferSize: number /* u32 */,
): number /* u32 */ {
  return libcredui_dll.CredUIParseUserNameW!(util.pwstrToFfi(UserName), util.pwstrToFfi(user), userBufferSize, util.pwstrToFfi(domain), domainBufferSize);
}

export function CredUIParseUserNameA(
  userName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  user: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  userBufferSize: number /* u32 */,
  domain: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  domainBufferSize: number /* u32 */,
): number /* u32 */ {
  return libcredui_dll.CredUIParseUserNameA!(util.pstrToFfi(userName), util.pstrToFfi(user), userBufferSize, util.pstrToFfi(domain), domainBufferSize);
}

export function CredUICmdLinePromptForCredentialsW(
  pszTargetName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pContext: Deno.PointerValue | Uint8Array /* ptr */,
  dwAuthError: number /* u32 */,
  UserName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ulUserBufferSize: number /* u32 */,
  pszPassword: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ulPasswordBufferSize: number /* u32 */,
  pfSave: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: CREDUI_FLAGS /* Windows.Win32.Security.Credentials.CREDUI_FLAGS */,
): number /* u32 */ {
  return libcredui_dll.CredUICmdLinePromptForCredentialsW!(util.pwstrToFfi(pszTargetName), util.toPointer(pContext), dwAuthError, util.pwstrToFfi(UserName), ulUserBufferSize, util.pwstrToFfi(pszPassword), ulPasswordBufferSize, util.toPointer(pfSave), dwFlags);
}

export function CredUICmdLinePromptForCredentialsA(
  pszTargetName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pContext: Deno.PointerValue | Uint8Array /* ptr */,
  dwAuthError: number /* u32 */,
  UserName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ulUserBufferSize: number /* u32 */,
  pszPassword: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ulPasswordBufferSize: number /* u32 */,
  pfSave: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: CREDUI_FLAGS /* Windows.Win32.Security.Credentials.CREDUI_FLAGS */,
): number /* u32 */ {
  return libcredui_dll.CredUICmdLinePromptForCredentialsA!(util.pstrToFfi(pszTargetName), util.toPointer(pContext), dwAuthError, util.pstrToFfi(UserName), ulUserBufferSize, util.pstrToFfi(pszPassword), ulPasswordBufferSize, util.toPointer(pfSave), dwFlags);
}

export function CredUIConfirmCredentialsW(
  pszTargetName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  bConfirm: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libcredui_dll.CredUIConfirmCredentialsW!(util.pwstrToFfi(pszTargetName), util.boolToFfi(bConfirm));
}

export function CredUIConfirmCredentialsA(
  pszTargetName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  bConfirm: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libcredui_dll.CredUIConfirmCredentialsA!(util.pstrToFfi(pszTargetName), util.boolToFfi(bConfirm));
}

export function CredUIStoreSSOCredW(
  pszRealm: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszUsername: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszPassword: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  bPersist: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libcredui_dll.CredUIStoreSSOCredW!(util.pwstrToFfi(pszRealm), util.pwstrToFfi(pszUsername), util.pwstrToFfi(pszPassword), util.boolToFfi(bPersist));
}

export function CredUIReadSSOCredW(
  pszRealm: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppszUsername: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libcredui_dll.CredUIReadSSOCredW!(util.pwstrToFfi(pszRealm), util.toPointer(ppszUsername));
}

export function SCardEstablishContext(
  dwScope: SCARD_SCOPE /* Windows.Win32.Security.Credentials.SCARD_SCOPE */,
  pvReserved1: Deno.PointerValue | Uint8Array /* ptr */,
  pvReserved2: Deno.PointerValue | Uint8Array /* ptr */,
  phContext: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardEstablishContext!(dwScope, util.toPointer(pvReserved1), util.toPointer(pvReserved2), util.toPointer(phContext));
}

export function SCardReleaseContext(
  hContext: bigint | number /* usize */,
): number /* i32 */ {
  return libWinSCard_dll.SCardReleaseContext!(hContext);
}

export function SCardIsValidContext(
  hContext: bigint | number /* usize */,
): number /* i32 */ {
  return libWinSCard_dll.SCardIsValidContext!(hContext);
}

export function SCardListReaderGroupsA(
  hContext: bigint | number /* usize */,
  mszGroups: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchGroups: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardListReaderGroupsA!(hContext, util.pstrToFfi(mszGroups), util.toPointer(pcchGroups));
}

export function SCardListReaderGroupsW(
  hContext: bigint | number /* usize */,
  mszGroups: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchGroups: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardListReaderGroupsW!(hContext, util.pwstrToFfi(mszGroups), util.toPointer(pcchGroups));
}

export function SCardListReadersA(
  hContext: bigint | number /* usize */,
  mszGroups: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  mszReaders: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchReaders: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardListReadersA!(hContext, util.pstrToFfi(mszGroups), util.pstrToFfi(mszReaders), util.toPointer(pcchReaders));
}

export function SCardListReadersW(
  hContext: bigint | number /* usize */,
  mszGroups: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  mszReaders: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchReaders: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardListReadersW!(hContext, util.pwstrToFfi(mszGroups), util.pwstrToFfi(mszReaders), util.toPointer(pcchReaders));
}

export function SCardListCardsA(
  hContext: bigint | number /* usize */,
  pbAtr: Deno.PointerValue | Uint8Array /* ptr */,
  rgquidInterfaces: Deno.PointerValue | Uint8Array /* ptr */,
  cguidInterfaceCount: number /* u32 */,
  mszCards: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchCards: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardListCardsA!(hContext, util.toPointer(pbAtr), util.toPointer(rgquidInterfaces), cguidInterfaceCount, util.pstrToFfi(mszCards), util.toPointer(pcchCards));
}

export function SCardListCardsW(
  hContext: bigint | number /* usize */,
  pbAtr: Deno.PointerValue | Uint8Array /* ptr */,
  rgquidInterfaces: Deno.PointerValue | Uint8Array /* ptr */,
  cguidInterfaceCount: number /* u32 */,
  mszCards: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchCards: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardListCardsW!(hContext, util.toPointer(pbAtr), util.toPointer(rgquidInterfaces), cguidInterfaceCount, util.pwstrToFfi(mszCards), util.toPointer(pcchCards));
}

export function SCardListInterfacesA(
  hContext: bigint | number /* usize */,
  szCard: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pguidInterfaces: Deno.PointerValue | Uint8Array /* ptr */,
  pcguidInterfaces: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardListInterfacesA!(hContext, util.pstrToFfi(szCard), util.toPointer(pguidInterfaces), util.toPointer(pcguidInterfaces));
}

export function SCardListInterfacesW(
  hContext: bigint | number /* usize */,
  szCard: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pguidInterfaces: Deno.PointerValue | Uint8Array /* ptr */,
  pcguidInterfaces: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardListInterfacesW!(hContext, util.pwstrToFfi(szCard), util.toPointer(pguidInterfaces), util.toPointer(pcguidInterfaces));
}

export function SCardGetProviderIdA(
  hContext: bigint | number /* usize */,
  szCard: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pguidProviderId: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardGetProviderIdA!(hContext, util.pstrToFfi(szCard), util.toPointer(pguidProviderId));
}

export function SCardGetProviderIdW(
  hContext: bigint | number /* usize */,
  szCard: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pguidProviderId: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardGetProviderIdW!(hContext, util.pwstrToFfi(szCard), util.toPointer(pguidProviderId));
}

export function SCardGetCardTypeProviderNameA(
  hContext: bigint | number /* usize */,
  szCardName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwProviderId: number /* u32 */,
  szProvider: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchProvider: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardGetCardTypeProviderNameA!(hContext, util.pstrToFfi(szCardName), dwProviderId, util.pstrToFfi(szProvider), util.toPointer(pcchProvider));
}

export function SCardGetCardTypeProviderNameW(
  hContext: bigint | number /* usize */,
  szCardName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwProviderId: number /* u32 */,
  szProvider: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchProvider: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardGetCardTypeProviderNameW!(hContext, util.pwstrToFfi(szCardName), dwProviderId, util.pwstrToFfi(szProvider), util.toPointer(pcchProvider));
}

export function SCardIntroduceReaderGroupA(
  hContext: bigint | number /* usize */,
  szGroupName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libWinSCard_dll.SCardIntroduceReaderGroupA!(hContext, util.pstrToFfi(szGroupName));
}

export function SCardIntroduceReaderGroupW(
  hContext: bigint | number /* usize */,
  szGroupName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libWinSCard_dll.SCardIntroduceReaderGroupW!(hContext, util.pwstrToFfi(szGroupName));
}

export function SCardForgetReaderGroupA(
  hContext: bigint | number /* usize */,
  szGroupName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libWinSCard_dll.SCardForgetReaderGroupA!(hContext, util.pstrToFfi(szGroupName));
}

export function SCardForgetReaderGroupW(
  hContext: bigint | number /* usize */,
  szGroupName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libWinSCard_dll.SCardForgetReaderGroupW!(hContext, util.pwstrToFfi(szGroupName));
}

export function SCardIntroduceReaderA(
  hContext: bigint | number /* usize */,
  szReaderName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  szDeviceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libWinSCard_dll.SCardIntroduceReaderA!(hContext, util.pstrToFfi(szReaderName), util.pstrToFfi(szDeviceName));
}

export function SCardIntroduceReaderW(
  hContext: bigint | number /* usize */,
  szReaderName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szDeviceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libWinSCard_dll.SCardIntroduceReaderW!(hContext, util.pwstrToFfi(szReaderName), util.pwstrToFfi(szDeviceName));
}

export function SCardForgetReaderA(
  hContext: bigint | number /* usize */,
  szReaderName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libWinSCard_dll.SCardForgetReaderA!(hContext, util.pstrToFfi(szReaderName));
}

export function SCardForgetReaderW(
  hContext: bigint | number /* usize */,
  szReaderName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libWinSCard_dll.SCardForgetReaderW!(hContext, util.pwstrToFfi(szReaderName));
}

export function SCardAddReaderToGroupA(
  hContext: bigint | number /* usize */,
  szReaderName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  szGroupName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libWinSCard_dll.SCardAddReaderToGroupA!(hContext, util.pstrToFfi(szReaderName), util.pstrToFfi(szGroupName));
}

export function SCardAddReaderToGroupW(
  hContext: bigint | number /* usize */,
  szReaderName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szGroupName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libWinSCard_dll.SCardAddReaderToGroupW!(hContext, util.pwstrToFfi(szReaderName), util.pwstrToFfi(szGroupName));
}

export function SCardRemoveReaderFromGroupA(
  hContext: bigint | number /* usize */,
  szReaderName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  szGroupName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libWinSCard_dll.SCardRemoveReaderFromGroupA!(hContext, util.pstrToFfi(szReaderName), util.pstrToFfi(szGroupName));
}

export function SCardRemoveReaderFromGroupW(
  hContext: bigint | number /* usize */,
  szReaderName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szGroupName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libWinSCard_dll.SCardRemoveReaderFromGroupW!(hContext, util.pwstrToFfi(szReaderName), util.pwstrToFfi(szGroupName));
}

export function SCardIntroduceCardTypeA(
  hContext: bigint | number /* usize */,
  szCardName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pguidPrimaryProvider: Deno.PointerValue | Uint8Array /* ptr */,
  rgguidInterfaces: Deno.PointerValue | Uint8Array /* ptr */,
  dwInterfaceCount: number /* u32 */,
  pbAtr: Deno.PointerValue | Uint8Array /* ptr */,
  pbAtrMask: Deno.PointerValue | Uint8Array /* ptr */,
  cbAtrLen: number /* u32 */,
): number /* i32 */ {
  return libWinSCard_dll.SCardIntroduceCardTypeA!(hContext, util.pstrToFfi(szCardName), util.toPointer(pguidPrimaryProvider), util.toPointer(rgguidInterfaces), dwInterfaceCount, util.toPointer(pbAtr), util.toPointer(pbAtrMask), cbAtrLen);
}

export function SCardIntroduceCardTypeW(
  hContext: bigint | number /* usize */,
  szCardName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pguidPrimaryProvider: Deno.PointerValue | Uint8Array /* ptr */,
  rgguidInterfaces: Deno.PointerValue | Uint8Array /* ptr */,
  dwInterfaceCount: number /* u32 */,
  pbAtr: Deno.PointerValue | Uint8Array /* ptr */,
  pbAtrMask: Deno.PointerValue | Uint8Array /* ptr */,
  cbAtrLen: number /* u32 */,
): number /* i32 */ {
  return libWinSCard_dll.SCardIntroduceCardTypeW!(hContext, util.pwstrToFfi(szCardName), util.toPointer(pguidPrimaryProvider), util.toPointer(rgguidInterfaces), dwInterfaceCount, util.toPointer(pbAtr), util.toPointer(pbAtrMask), cbAtrLen);
}

export function SCardSetCardTypeProviderNameA(
  hContext: bigint | number /* usize */,
  szCardName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwProviderId: number /* u32 */,
  szProvider: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libWinSCard_dll.SCardSetCardTypeProviderNameA!(hContext, util.pstrToFfi(szCardName), dwProviderId, util.pstrToFfi(szProvider));
}

export function SCardSetCardTypeProviderNameW(
  hContext: bigint | number /* usize */,
  szCardName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwProviderId: number /* u32 */,
  szProvider: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libWinSCard_dll.SCardSetCardTypeProviderNameW!(hContext, util.pwstrToFfi(szCardName), dwProviderId, util.pwstrToFfi(szProvider));
}

export function SCardForgetCardTypeA(
  hContext: bigint | number /* usize */,
  szCardName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libWinSCard_dll.SCardForgetCardTypeA!(hContext, util.pstrToFfi(szCardName));
}

export function SCardForgetCardTypeW(
  hContext: bigint | number /* usize */,
  szCardName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libWinSCard_dll.SCardForgetCardTypeW!(hContext, util.pwstrToFfi(szCardName));
}

export function SCardFreeMemory(
  hContext: bigint | number /* usize */,
  pvMem: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardFreeMemory!(hContext, util.toPointer(pvMem));
}

export function SCardAccessStartedEvent(): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libWinSCard_dll.SCardAccessStartedEvent!();
}

export function SCardReleaseStartedEvent(): void /* void */ {
  return libWinSCard_dll.SCardReleaseStartedEvent!();
}

export function SCardLocateCardsA(
  hContext: bigint | number /* usize */,
  mszCards: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  rgReaderStates: Deno.PointerValue | Uint8Array /* ptr */,
  cReaders: number /* u32 */,
): number /* i32 */ {
  return libWinSCard_dll.SCardLocateCardsA!(hContext, util.pstrToFfi(mszCards), util.toPointer(rgReaderStates), cReaders);
}

export function SCardLocateCardsW(
  hContext: bigint | number /* usize */,
  mszCards: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  rgReaderStates: Deno.PointerValue | Uint8Array /* ptr */,
  cReaders: number /* u32 */,
): number /* i32 */ {
  return libWinSCard_dll.SCardLocateCardsW!(hContext, util.pwstrToFfi(mszCards), util.toPointer(rgReaderStates), cReaders);
}

export function SCardLocateCardsByATRA(
  hContext: bigint | number /* usize */,
  rgAtrMasks: Deno.PointerValue | Uint8Array /* ptr */,
  cAtrs: number /* u32 */,
  rgReaderStates: Deno.PointerValue | Uint8Array /* ptr */,
  cReaders: number /* u32 */,
): number /* i32 */ {
  return libWinSCard_dll.SCardLocateCardsByATRA!(hContext, util.toPointer(rgAtrMasks), cAtrs, util.toPointer(rgReaderStates), cReaders);
}

export function SCardLocateCardsByATRW(
  hContext: bigint | number /* usize */,
  rgAtrMasks: Deno.PointerValue | Uint8Array /* ptr */,
  cAtrs: number /* u32 */,
  rgReaderStates: Deno.PointerValue | Uint8Array /* ptr */,
  cReaders: number /* u32 */,
): number /* i32 */ {
  return libWinSCard_dll.SCardLocateCardsByATRW!(hContext, util.toPointer(rgAtrMasks), cAtrs, util.toPointer(rgReaderStates), cReaders);
}

export function SCardGetStatusChangeA(
  hContext: bigint | number /* usize */,
  dwTimeout: number /* u32 */,
  rgReaderStates: Deno.PointerValue | Uint8Array /* ptr */,
  cReaders: number /* u32 */,
): number /* i32 */ {
  return libWinSCard_dll.SCardGetStatusChangeA!(hContext, dwTimeout, util.toPointer(rgReaderStates), cReaders);
}

export function SCardGetStatusChangeW(
  hContext: bigint | number /* usize */,
  dwTimeout: number /* u32 */,
  rgReaderStates: Deno.PointerValue | Uint8Array /* ptr */,
  cReaders: number /* u32 */,
): number /* i32 */ {
  return libWinSCard_dll.SCardGetStatusChangeW!(hContext, dwTimeout, util.toPointer(rgReaderStates), cReaders);
}

export function SCardCancel(
  hContext: bigint | number /* usize */,
): number /* i32 */ {
  return libWinSCard_dll.SCardCancel!(hContext);
}

export function SCardConnectA(
  hContext: bigint | number /* usize */,
  szReader: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwShareMode: number /* u32 */,
  dwPreferredProtocols: number /* u32 */,
  phCard: Deno.PointerValue | Uint8Array /* ptr */,
  pdwActiveProtocol: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardConnectA!(hContext, util.pstrToFfi(szReader), dwShareMode, dwPreferredProtocols, util.toPointer(phCard), util.toPointer(pdwActiveProtocol));
}

export function SCardConnectW(
  hContext: bigint | number /* usize */,
  szReader: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwShareMode: number /* u32 */,
  dwPreferredProtocols: number /* u32 */,
  phCard: Deno.PointerValue | Uint8Array /* ptr */,
  pdwActiveProtocol: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardConnectW!(hContext, util.pwstrToFfi(szReader), dwShareMode, dwPreferredProtocols, util.toPointer(phCard), util.toPointer(pdwActiveProtocol));
}

export function SCardReconnect(
  hCard: bigint | number /* usize */,
  dwShareMode: number /* u32 */,
  dwPreferredProtocols: number /* u32 */,
  dwInitialization: number /* u32 */,
  pdwActiveProtocol: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardReconnect!(hCard, dwShareMode, dwPreferredProtocols, dwInitialization, util.toPointer(pdwActiveProtocol));
}

export function SCardDisconnect(
  hCard: bigint | number /* usize */,
  dwDisposition: number /* u32 */,
): number /* i32 */ {
  return libWinSCard_dll.SCardDisconnect!(hCard, dwDisposition);
}

export function SCardBeginTransaction(
  hCard: bigint | number /* usize */,
): number /* i32 */ {
  return libWinSCard_dll.SCardBeginTransaction!(hCard);
}

export function SCardEndTransaction(
  hCard: bigint | number /* usize */,
  dwDisposition: number /* u32 */,
): number /* i32 */ {
  return libWinSCard_dll.SCardEndTransaction!(hCard, dwDisposition);
}

export function SCardState(
  hCard: bigint | number /* usize */,
  pdwState: Deno.PointerValue | Uint8Array /* ptr */,
  pdwProtocol: Deno.PointerValue | Uint8Array /* ptr */,
  pbAtr: Deno.PointerValue | Uint8Array /* ptr */,
  pcbAtrLen: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardState!(hCard, util.toPointer(pdwState), util.toPointer(pdwProtocol), util.toPointer(pbAtr), util.toPointer(pcbAtrLen));
}

export function SCardStatusA(
  hCard: bigint | number /* usize */,
  mszReaderNames: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchReaderLen: Deno.PointerValue | Uint8Array /* ptr */,
  pdwState: Deno.PointerValue | Uint8Array /* ptr */,
  pdwProtocol: Deno.PointerValue | Uint8Array /* ptr */,
  pbAtr: Deno.PointerValue | Uint8Array /* ptr */,
  pcbAtrLen: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardStatusA!(hCard, util.pstrToFfi(mszReaderNames), util.toPointer(pcchReaderLen), util.toPointer(pdwState), util.toPointer(pdwProtocol), util.toPointer(pbAtr), util.toPointer(pcbAtrLen));
}

export function SCardStatusW(
  hCard: bigint | number /* usize */,
  mszReaderNames: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchReaderLen: Deno.PointerValue | Uint8Array /* ptr */,
  pdwState: Deno.PointerValue | Uint8Array /* ptr */,
  pdwProtocol: Deno.PointerValue | Uint8Array /* ptr */,
  pbAtr: Deno.PointerValue | Uint8Array /* ptr */,
  pcbAtrLen: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardStatusW!(hCard, util.pwstrToFfi(mszReaderNames), util.toPointer(pcchReaderLen), util.toPointer(pdwState), util.toPointer(pdwProtocol), util.toPointer(pbAtr), util.toPointer(pcbAtrLen));
}

export function SCardTransmit(
  hCard: bigint | number /* usize */,
  pioSendPci: Deno.PointerValue | Uint8Array /* ptr */,
  pbSendBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  cbSendLength: number /* u32 */,
  pioRecvPci: Deno.PointerValue | Uint8Array /* ptr */,
  pbRecvBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pcbRecvLength: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardTransmit!(hCard, util.toPointer(pioSendPci), util.toPointer(pbSendBuffer), cbSendLength, util.toPointer(pioRecvPci), util.toPointer(pbRecvBuffer), util.toPointer(pcbRecvLength));
}

export function SCardGetTransmitCount(
  hCard: bigint | number /* usize */,
  pcTransmitCount: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardGetTransmitCount!(hCard, util.toPointer(pcTransmitCount));
}

export function SCardControl(
  hCard: bigint | number /* usize */,
  dwControlCode: number /* u32 */,
  lpInBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  cbInBufferSize: number /* u32 */,
  lpOutBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  cbOutBufferSize: number /* u32 */,
  lpBytesReturned: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardControl!(hCard, dwControlCode, util.toPointer(lpInBuffer), cbInBufferSize, util.toPointer(lpOutBuffer), cbOutBufferSize, util.toPointer(lpBytesReturned));
}

export function SCardGetAttrib(
  hCard: bigint | number /* usize */,
  dwAttrId: number /* u32 */,
  pbAttr: Deno.PointerValue | Uint8Array /* ptr */,
  pcbAttrLen: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardGetAttrib!(hCard, dwAttrId, util.toPointer(pbAttr), util.toPointer(pcbAttrLen));
}

export function SCardSetAttrib(
  hCard: bigint | number /* usize */,
  dwAttrId: number /* u32 */,
  pbAttr: Deno.PointerValue | Uint8Array /* ptr */,
  cbAttrLen: number /* u32 */,
): number /* i32 */ {
  return libWinSCard_dll.SCardSetAttrib!(hCard, dwAttrId, util.toPointer(pbAttr), cbAttrLen);
}

export function SCardUIDlgSelectCardA(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libSCARDDLG_dll.SCardUIDlgSelectCardA!(util.toPointer(param0));
}

export function SCardUIDlgSelectCardW(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libSCARDDLG_dll.SCardUIDlgSelectCardW!(util.toPointer(param0));
}

export function GetOpenCardNameA(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libSCARDDLG_dll.GetOpenCardNameA!(util.toPointer(param0));
}

export function GetOpenCardNameW(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libSCARDDLG_dll.GetOpenCardNameW!(util.toPointer(param0));
}

export function SCardDlgExtendedError(): number /* i32 */ {
  return libSCARDDLG_dll.SCardDlgExtendedError!();
}

export function SCardReadCacheA(
  hContext: bigint | number /* usize */,
  CardIdentifier: Deno.PointerValue | Uint8Array /* ptr */,
  FreshnessCounter: number /* u32 */,
  LookupName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Data: Deno.PointerValue | Uint8Array /* ptr */,
  DataLen: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardReadCacheA!(hContext, util.toPointer(CardIdentifier), FreshnessCounter, util.pstrToFfi(LookupName), util.toPointer(Data), util.toPointer(DataLen));
}

export function SCardReadCacheW(
  hContext: bigint | number /* usize */,
  CardIdentifier: Deno.PointerValue | Uint8Array /* ptr */,
  FreshnessCounter: number /* u32 */,
  LookupName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Data: Deno.PointerValue | Uint8Array /* ptr */,
  DataLen: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardReadCacheW!(hContext, util.toPointer(CardIdentifier), FreshnessCounter, util.pwstrToFfi(LookupName), util.toPointer(Data), util.toPointer(DataLen));
}

export function SCardWriteCacheA(
  hContext: bigint | number /* usize */,
  CardIdentifier: Deno.PointerValue | Uint8Array /* ptr */,
  FreshnessCounter: number /* u32 */,
  LookupName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Data: Deno.PointerValue | Uint8Array /* ptr */,
  DataLen: number /* u32 */,
): number /* i32 */ {
  return libWinSCard_dll.SCardWriteCacheA!(hContext, util.toPointer(CardIdentifier), FreshnessCounter, util.pstrToFfi(LookupName), util.toPointer(Data), DataLen);
}

export function SCardWriteCacheW(
  hContext: bigint | number /* usize */,
  CardIdentifier: Deno.PointerValue | Uint8Array /* ptr */,
  FreshnessCounter: number /* u32 */,
  LookupName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Data: Deno.PointerValue | Uint8Array /* ptr */,
  DataLen: number /* u32 */,
): number /* i32 */ {
  return libWinSCard_dll.SCardWriteCacheW!(hContext, util.toPointer(CardIdentifier), FreshnessCounter, util.pwstrToFfi(LookupName), util.toPointer(Data), DataLen);
}

export function SCardGetReaderIconA(
  hContext: bigint | number /* usize */,
  szReaderName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pbIcon: Deno.PointerValue | Uint8Array /* ptr */,
  pcbIcon: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardGetReaderIconA!(hContext, util.pstrToFfi(szReaderName), util.toPointer(pbIcon), util.toPointer(pcbIcon));
}

export function SCardGetReaderIconW(
  hContext: bigint | number /* usize */,
  szReaderName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pbIcon: Deno.PointerValue | Uint8Array /* ptr */,
  pcbIcon: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardGetReaderIconW!(hContext, util.pwstrToFfi(szReaderName), util.toPointer(pbIcon), util.toPointer(pcbIcon));
}

export function SCardGetDeviceTypeIdA(
  hContext: bigint | number /* usize */,
  szReaderName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pdwDeviceTypeId: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardGetDeviceTypeIdA!(hContext, util.pstrToFfi(szReaderName), util.toPointer(pdwDeviceTypeId));
}

export function SCardGetDeviceTypeIdW(
  hContext: bigint | number /* usize */,
  szReaderName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pdwDeviceTypeId: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardGetDeviceTypeIdW!(hContext, util.pwstrToFfi(szReaderName), util.toPointer(pdwDeviceTypeId));
}

export function SCardGetReaderDeviceInstanceIdA(
  hContext: bigint | number /* usize */,
  szReaderName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  szDeviceInstanceId: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchDeviceInstanceId: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardGetReaderDeviceInstanceIdA!(hContext, util.pstrToFfi(szReaderName), util.pstrToFfi(szDeviceInstanceId), util.toPointer(pcchDeviceInstanceId));
}

export function SCardGetReaderDeviceInstanceIdW(
  hContext: bigint | number /* usize */,
  szReaderName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szDeviceInstanceId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchDeviceInstanceId: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardGetReaderDeviceInstanceIdW!(hContext, util.pwstrToFfi(szReaderName), util.pwstrToFfi(szDeviceInstanceId), util.toPointer(pcchDeviceInstanceId));
}

export function SCardListReadersWithDeviceInstanceIdA(
  hContext: bigint | number /* usize */,
  szDeviceInstanceId: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  mszReaders: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchReaders: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardListReadersWithDeviceInstanceIdA!(hContext, util.pstrToFfi(szDeviceInstanceId), util.pstrToFfi(mszReaders), util.toPointer(pcchReaders));
}

export function SCardListReadersWithDeviceInstanceIdW(
  hContext: bigint | number /* usize */,
  szDeviceInstanceId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  mszReaders: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchReaders: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libWinSCard_dll.SCardListReadersWithDeviceInstanceIdW!(hContext, util.pwstrToFfi(szDeviceInstanceId), util.pwstrToFfi(mszReaders), util.toPointer(pcchReaders));
}

export function SCardAudit(
  hContext: bigint | number /* usize */,
  dwEvent: number /* u32 */,
): number /* i32 */ {
  return libWinSCard_dll.SCardAudit!(hContext, dwEvent);
}

