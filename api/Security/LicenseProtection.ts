/// Auto-generated by Deno Win32: Windows.Win32.Security.LicenseProtection.Apis

import * as util from "../../util.ts";

// Enums
export type LicenseProtectionStatus = number;

// Constants
export const Success = 0;
export const LicenseKeyNotFound = 1;
export const LicenseKeyUnprotected = 2;
export const LicenseKeyCorrupted = 3;
export const LicenseKeyAlreadyExists = 4;

// Structs

export type PWSTR = Deno.PointerValue | Uint8Array | null;

export type HRESULT = number;

// Native Libraries

try {
  var liblicenseprotection = Deno.dlopen("licenseprotection", {
    RegisterLicenseKeyWithExpiration: {
      parameters: ["buffer", "u32", "pointer"],
      result: "pointer",
    },
    ValidateLicenseKeyProtection: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function RegisterLicenseKeyWithExpiration(
  licenseKey: string | null /* Windows.Win32.Foundation.PWSTR */,
  validityInDays: number /* u32 */,
  status: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liblicenseprotection.RegisterLicenseKeyWithExpiration(util.pwstrToFfi(licenseKey), validityInDays, util.toPointer(status)));
}

export function ValidateLicenseKeyProtection(
  licenseKey: string | null /* Windows.Win32.Foundation.PWSTR */,
  notValidBefore: Deno.PointerValue | Uint8Array | null /* ptr */,
  notValidAfter: Deno.PointerValue | Uint8Array | null /* ptr */,
  status: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liblicenseprotection.ValidateLicenseKeyProtection(util.pwstrToFfi(licenseKey), util.toPointer(notValidBefore), util.toPointer(notValidAfter), util.toPointer(status)));
}

