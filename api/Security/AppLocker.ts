/// Auto-generated by Deno Win32: Windows.Win32.Security.AppLocker.Apis

import * as util from "../../util.ts";

// Enums
export type SAFER_COMPUTE_TOKEN_FROM_LEVEL_FLAGS = number;
export type SAFER_POLICY_INFO_CLASS = number;
export type SAFER_OBJECT_INFO_CLASS = number;
export type SAFER_IDENTIFICATION_TYPES = number;

// Constants
export const SAFER_TOKEN_NULL_IF_EQUAL = 1;
export const SAFER_TOKEN_COMPARE_ONLY = 2;
export const SAFER_TOKEN_MAKE_INERT = 4;
export const SAFER_TOKEN_WANT_FLAGS = 8;
export const SAFER_SCOPEID_MACHINE = 1;
export const SAFER_SCOPEID_USER = 2;
export const SAFER_LEVELID_FULLYTRUSTED = 262144;
export const SAFER_LEVELID_NORMALUSER = 131072;
export const SAFER_LEVELID_CONSTRAINED = 65536;
export const SAFER_LEVELID_UNTRUSTED = 4096;
export const SAFER_LEVELID_DISALLOWED = 0;
export const SAFER_LEVEL_OPEN = 1;
export const SAFER_MAX_FRIENDLYNAME_SIZE = 256;
export const SAFER_MAX_DESCRIPTION_SIZE = 256;
export const SAFER_MAX_HASH_SIZE = 64;
export const SAFER_CRITERIA_IMAGEPATH = 1;
export const SAFER_CRITERIA_NOSIGNEDHASH = 2;
export const SAFER_CRITERIA_IMAGEHASH = 4;
export const SAFER_CRITERIA_AUTHENTICODE = 8;
export const SAFER_CRITERIA_URLZONE = 16;
export const SAFER_CRITERIA_APPX_PACKAGE = 32;
export const SAFER_CRITERIA_IMAGEPATH_NT = 4096;
export const SAFER_POLICY_JOBID_MASK = 4278190080;
export const SAFER_POLICY_JOBID_CONSTRAINED = 67108864;
export const SAFER_POLICY_JOBID_UNTRUSTED = 50331648;
export const SAFER_POLICY_ONLY_EXES = 65536;
export const SAFER_POLICY_SANDBOX_INERT = 131072;
export const SAFER_POLICY_HASH_DUPLICATE = 262144;
export const SAFER_POLICY_ONLY_AUDIT = 4096;
export const SAFER_POLICY_BLOCK_CLIENT_UI = 8192;
export const SAFER_POLICY_UIFLAGS_MASK = 255;
export const SAFER_POLICY_UIFLAGS_INFORMATION_PROMPT = 1;
export const SAFER_POLICY_UIFLAGS_OPTION_PROMPT = 2;
export const SAFER_POLICY_UIFLAGS_HIDDEN = 4;
export const SRP_POLICY_EXE = `EXE`;
export const SRP_POLICY_DLL = `DLL`;
export const SRP_POLICY_MSI = `MSI`;
export const SRP_POLICY_SCRIPT = `SCRIPT`;
export const SRP_POLICY_SHELL = `SHELL`;
export const SRP_POLICY_NOV2 = `IGNORESRPV2`;
export const SRP_POLICY_APPX = `APPX`;
export const SRP_POLICY_WLDPMSI = `WLDPMSI`;
export const SRP_POLICY_WLDPSCRIPT = `WLDPSCRIPT`;
export const SRP_POLICY_WLDPCONFIGCI = `WLDPCONFIGCI`;
export const SRP_POLICY_MANAGEDINSTALLER = `MANAGEDINSTALLER`;
export const SaferPolicyLevelList = 1;
export const SaferPolicyEnableTransparentEnforcement = 2;
export const SaferPolicyDefaultLevel = 3;
export const SaferPolicyEvaluateUserScope = 4;
export const SaferPolicyScopeFlags = 5;
export const SaferPolicyDefaultLevelFlags = 6;
export const SaferPolicyAuthenticodeEnabled = 7;
export const SaferObjectLevelId = 1;
export const SaferObjectScopeId = 2;
export const SaferObjectFriendlyName = 3;
export const SaferObjectDescription = 4;
export const SaferObjectBuiltin = 5;
export const SaferObjectDisallowed = 6;
export const SaferObjectDisableMaxPrivilege = 7;
export const SaferObjectInvertDeletedPrivileges = 8;
export const SaferObjectDeletedPrivileges = 9;
export const SaferObjectDefaultOwner = 10;
export const SaferObjectSidsToDisable = 11;
export const SaferObjectRestrictedSidsInverted = 12;
export const SaferObjectRestrictedSidsAdded = 13;
export const SaferObjectAllIdentificationGuids = 14;
export const SaferObjectSingleIdentification = 15;
export const SaferObjectExtendedError = 16;
export const SaferIdentityDefault = 0;
export const SaferIdentityTypeImageName = 1;
export const SaferIdentityTypeImageHash = 2;
export const SaferIdentityTypeUrlZone = 3;
export const SaferIdentityTypeCertificate = 4;

// Structs

export type PWSTR = Deno.PointerValue | Uint8Array | null;

export type HANDLE = Deno.PointerValue;

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

export type HWND = Deno.PointerValue;

/**
 * Windows.Win32.Security.AppLocker.SAFER_CODE_PROPERTIES_V1 (size: 88)
 */
export interface SAFER_CODE_PROPERTIES_V1 {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwCheckFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  ImagePath: string | null;
  /** Windows.Win32.Foundation.HANDLE */
  hImageFileHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  UrlZoneId: number;
  /** array */
  ImageHash: Deno.PointerValue | null;
  /** u32 */
  dwImageHashSize: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ImageSize: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  HashAlgorithm: number;
  /** ptr */
  pByteBlock: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HWND */
  hWndParent: Deno.PointerValue | null;
  /** u32 */
  dwWVTUIChoice: number;
}

export const sizeofSAFER_CODE_PROPERTIES_V1 = 88;

export function allocSAFER_CODE_PROPERTIES_V1(data?: Partial<SAFER_CODE_PROPERTIES_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofSAFER_CODE_PROPERTIES_V1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwCheckFlags !== undefined) view.setUint32(4, Number(data.dwCheckFlags), true);
  // 0x08: buffer
  if (data?.ImagePath !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ImagePath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.hImageFileHandle !== undefined) view.setBigUint64(16, data.hImageFileHandle === null ? 0n : BigInt(util.toPointer(data.hImageFileHandle)), true);
  // 0x18: u32
  if (data?.UrlZoneId !== undefined) view.setUint32(24, Number(data.UrlZoneId), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ImageHash !== undefined) view.setBigUint64(32, data.ImageHash === null ? 0n : BigInt(util.toPointer(data.ImageHash)), true);
  // 0x28: u32
  if (data?.dwImageHashSize !== undefined) view.setUint32(40, Number(data.dwImageHashSize), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.ImageSize !== undefined) view.setBigUint64(48, data.ImageSize === null ? 0n : BigInt(util.toPointer(data.ImageSize)), true);
  // 0x38: u32
  if (data?.HashAlgorithm !== undefined) view.setUint32(56, Number(data.HashAlgorithm), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.pByteBlock !== undefined) view.setBigUint64(64, data.pByteBlock === null ? 0n : BigInt(util.toPointer(data.pByteBlock)), true);
  // 0x48: pointer
  if (data?.hWndParent !== undefined) view.setBigUint64(72, data.hWndParent === null ? 0n : BigInt(util.toPointer(data.hWndParent)), true);
  // 0x50: u32
  if (data?.dwWVTUIChoice !== undefined) view.setUint32(80, Number(data.dwWVTUIChoice), true);
  // 0x54: pad4
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.Security.AppLocker.SAFER_CODE_PROPERTIES_V2 (size: 128)
 */
export interface SAFER_CODE_PROPERTIES_V2 {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwCheckFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  ImagePath: string | null;
  /** Windows.Win32.Foundation.HANDLE */
  hImageFileHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  UrlZoneId: number;
  /** array */
  ImageHash: Deno.PointerValue | null;
  /** u32 */
  dwImageHashSize: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ImageSize: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  HashAlgorithm: number;
  /** ptr */
  pByteBlock: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HWND */
  hWndParent: Deno.PointerValue | null;
  /** u32 */
  dwWVTUIChoice: number;
  /** Windows.Win32.Foundation.PWSTR */
  PackageMoniker: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  PackagePublisher: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  PackageName: string | null;
  /** u64 */
  PackageVersion: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  PackageIsFramework: boolean;
}

export const sizeofSAFER_CODE_PROPERTIES_V2 = 128;

export function allocSAFER_CODE_PROPERTIES_V2(data?: Partial<SAFER_CODE_PROPERTIES_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofSAFER_CODE_PROPERTIES_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwCheckFlags !== undefined) view.setUint32(4, Number(data.dwCheckFlags), true);
  // 0x08: buffer
  if (data?.ImagePath !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ImagePath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.hImageFileHandle !== undefined) view.setBigUint64(16, data.hImageFileHandle === null ? 0n : BigInt(util.toPointer(data.hImageFileHandle)), true);
  // 0x18: u32
  if (data?.UrlZoneId !== undefined) view.setUint32(24, Number(data.UrlZoneId), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ImageHash !== undefined) view.setBigUint64(32, data.ImageHash === null ? 0n : BigInt(util.toPointer(data.ImageHash)), true);
  // 0x28: u32
  if (data?.dwImageHashSize !== undefined) view.setUint32(40, Number(data.dwImageHashSize), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.ImageSize !== undefined) view.setBigUint64(48, data.ImageSize === null ? 0n : BigInt(util.toPointer(data.ImageSize)), true);
  // 0x38: u32
  if (data?.HashAlgorithm !== undefined) view.setUint32(56, Number(data.HashAlgorithm), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.pByteBlock !== undefined) view.setBigUint64(64, data.pByteBlock === null ? 0n : BigInt(util.toPointer(data.pByteBlock)), true);
  // 0x48: pointer
  if (data?.hWndParent !== undefined) view.setBigUint64(72, data.hWndParent === null ? 0n : BigInt(util.toPointer(data.hWndParent)), true);
  // 0x50: u32
  if (data?.dwWVTUIChoice !== undefined) view.setUint32(80, Number(data.dwWVTUIChoice), true);
  // 0x54: pad4
  // 0x58: buffer
  if (data?.PackageMoniker !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.PackageMoniker);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: buffer
  if (data?.PackagePublisher !== undefined) {
    (buf as any)._f96 = util.pwstrToFfi(data.PackagePublisher);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f96)), true);
  }
  // 0x68: buffer
  if (data?.PackageName !== undefined) {
    (buf as any)._f104 = util.pwstrToFfi(data.PackageName);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f104)), true);
  }
  // 0x70: u64
  if (data?.PackageVersion !== undefined) view.setBigUint64(112, BigInt(data.PackageVersion), true);
  // 0x78: i32
  if (data?.PackageIsFramework !== undefined) view.setInt32(120, Number(data.PackageIsFramework), true);
  // 0x7c: pad4
  return buf;
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

/**
 * Windows.Win32.Security.AppLocker.SAFER_IDENTIFICATION_HEADER (size: 24)
 */
export interface SAFER_IDENTIFICATION_HEADER {
  /** Windows.Win32.Security.AppLocker.SAFER_IDENTIFICATION_TYPES */
  dwIdentificationType: SAFER_IDENTIFICATION_TYPES;
  /** u32 */
  cbStructSize: number;
  /** System.Guid */
  IdentificationGuid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  lastModified: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSAFER_IDENTIFICATION_HEADER = 24;

export function allocSAFER_IDENTIFICATION_HEADER(data?: Partial<SAFER_IDENTIFICATION_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofSAFER_IDENTIFICATION_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dwIdentificationType !== undefined) view.setInt32(0, Number(data.dwIdentificationType), true);
  // 0x04: u32
  if (data?.cbStructSize !== undefined) view.setUint32(4, Number(data.cbStructSize), true);
  // 0x08: pointer
  if (data?.IdentificationGuid !== undefined) view.setBigUint64(8, data.IdentificationGuid === null ? 0n : BigInt(util.toPointer(data.IdentificationGuid)), true);
  // 0x10: pointer
  if (data?.lastModified !== undefined) view.setBigUint64(16, data.lastModified === null ? 0n : BigInt(util.toPointer(data.lastModified)), true);
  return buf;
}

/**
 * Windows.Win32.Security.AppLocker.SAFER_PATHNAME_IDENTIFICATION (size: 32)
 */
export interface SAFER_PATHNAME_IDENTIFICATION {
  /** Windows.Win32.Security.AppLocker.SAFER_IDENTIFICATION_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** array */
  Description: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  ImageName: string | null;
  /** u32 */
  dwSaferFlags: number;
}

export const sizeofSAFER_PATHNAME_IDENTIFICATION = 32;

export function allocSAFER_PATHNAME_IDENTIFICATION(data?: Partial<SAFER_PATHNAME_IDENTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSAFER_PATHNAME_IDENTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: pointer
  if (data?.Description !== undefined) view.setBigUint64(8, data.Description === null ? 0n : BigInt(util.toPointer(data.Description)), true);
  // 0x10: buffer
  if (data?.ImageName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.ImageName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.dwSaferFlags !== undefined) view.setUint32(24, Number(data.dwSaferFlags), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Security.AppLocker.SAFER_HASH_IDENTIFICATION (size: 64)
 */
export interface SAFER_HASH_IDENTIFICATION {
  /** Windows.Win32.Security.AppLocker.SAFER_IDENTIFICATION_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** array */
  Description: Deno.PointerValue | null;
  /** array */
  FriendlyName: Deno.PointerValue | null;
  /** u32 */
  HashSize: number;
  /** array */
  ImageHash: Deno.PointerValue | null;
  /** u32 */
  HashAlgorithm: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ImageSize: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwSaferFlags: number;
}

export const sizeofSAFER_HASH_IDENTIFICATION = 64;

export function allocSAFER_HASH_IDENTIFICATION(data?: Partial<SAFER_HASH_IDENTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSAFER_HASH_IDENTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: pointer
  if (data?.Description !== undefined) view.setBigUint64(8, data.Description === null ? 0n : BigInt(util.toPointer(data.Description)), true);
  // 0x10: pointer
  if (data?.FriendlyName !== undefined) view.setBigUint64(16, data.FriendlyName === null ? 0n : BigInt(util.toPointer(data.FriendlyName)), true);
  // 0x18: u32
  if (data?.HashSize !== undefined) view.setUint32(24, Number(data.HashSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ImageHash !== undefined) view.setBigUint64(32, data.ImageHash === null ? 0n : BigInt(util.toPointer(data.ImageHash)), true);
  // 0x28: u32
  if (data?.HashAlgorithm !== undefined) view.setUint32(40, Number(data.HashAlgorithm), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.ImageSize !== undefined) view.setBigUint64(48, data.ImageSize === null ? 0n : BigInt(util.toPointer(data.ImageSize)), true);
  // 0x38: u32
  if (data?.dwSaferFlags !== undefined) view.setUint32(56, Number(data.dwSaferFlags), true);
  // 0x3c: pad4
  return buf;
}

/**
 * Windows.Win32.Security.AppLocker.SAFER_HASH_IDENTIFICATION2 (size: 32)
 */
export interface SAFER_HASH_IDENTIFICATION2 {
  /** Windows.Win32.Security.AppLocker.SAFER_HASH_IDENTIFICATION */
  hashIdentification: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  HashSize: number;
  /** array */
  ImageHash: Deno.PointerValue | null;
  /** u32 */
  HashAlgorithm: number;
}

export const sizeofSAFER_HASH_IDENTIFICATION2 = 32;

export function allocSAFER_HASH_IDENTIFICATION2(data?: Partial<SAFER_HASH_IDENTIFICATION2>): Uint8Array {
  const buf = new Uint8Array(sizeofSAFER_HASH_IDENTIFICATION2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hashIdentification !== undefined) view.setBigUint64(0, data.hashIdentification === null ? 0n : BigInt(util.toPointer(data.hashIdentification)), true);
  // 0x08: u32
  if (data?.HashSize !== undefined) view.setUint32(8, Number(data.HashSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ImageHash !== undefined) view.setBigUint64(16, data.ImageHash === null ? 0n : BigInt(util.toPointer(data.ImageHash)), true);
  // 0x18: u32
  if (data?.HashAlgorithm !== undefined) view.setUint32(24, Number(data.HashAlgorithm), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Security.AppLocker.SAFER_URLZONE_IDENTIFICATION (size: 16)
 */
export interface SAFER_URLZONE_IDENTIFICATION {
  /** Windows.Win32.Security.AppLocker.SAFER_IDENTIFICATION_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  UrlZoneId: number;
  /** u32 */
  dwSaferFlags: number;
}

export const sizeofSAFER_URLZONE_IDENTIFICATION = 16;

export function allocSAFER_URLZONE_IDENTIFICATION(data?: Partial<SAFER_URLZONE_IDENTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSAFER_URLZONE_IDENTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: u32
  if (data?.UrlZoneId !== undefined) view.setUint32(8, Number(data.UrlZoneId), true);
  // 0x0c: u32
  if (data?.dwSaferFlags !== undefined) view.setUint32(12, Number(data.dwSaferFlags), true);
  return buf;
}

export type SAFER_LEVEL_HANDLE = Deno.PointerValue;

export type BOOLEAN = number;

// Native Libraries

try {
  var libADVAPI32_dll = Deno.dlopen("ADVAPI32.dll", {
    SaferGetPolicyInformation: {
      parameters: ["u32", "i32", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SaferSetPolicyInformation: {
      parameters: ["u32", "i32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SaferCreateLevel: {
      parameters: ["u32", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SaferCloseLevel: {
      parameters: ["pointer"],
      result: "i32",
    },
    SaferIdentifyLevel: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SaferComputeTokenFromLevel: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SaferGetLevelInformation: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SaferSetLevelInformation: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "i32",
    },
    SaferRecordEventLogEntry: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "i32",
    },
    SaferiIsExecutableFileType: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function SaferGetPolicyInformation(
  dwScopeId: number /* u32 */,
  SaferPolicyInfoClass: SAFER_POLICY_INFO_CLASS /* Windows.Win32.Security.AppLocker.SAFER_POLICY_INFO_CLASS */,
  InfoBufferSize: number /* u32 */,
  InfoBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfoBufferRetSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.SaferGetPolicyInformation(dwScopeId, SaferPolicyInfoClass, InfoBufferSize, util.toPointer(InfoBuffer), util.toPointer(InfoBufferRetSize), util.toPointer(lpReserved)));
}

export function SaferSetPolicyInformation(
  dwScopeId: number /* u32 */,
  SaferPolicyInfoClass: SAFER_POLICY_INFO_CLASS /* Windows.Win32.Security.AppLocker.SAFER_POLICY_INFO_CLASS */,
  InfoBufferSize: number /* u32 */,
  InfoBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.SaferSetPolicyInformation(dwScopeId, SaferPolicyInfoClass, InfoBufferSize, util.toPointer(InfoBuffer), util.toPointer(lpReserved)));
}

export function SaferCreateLevel(
  dwScopeId: number /* u32 */,
  dwLevelId: number /* u32 */,
  OpenFlags: number /* u32 */,
  pLevelHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.SaferCreateLevel(dwScopeId, dwLevelId, OpenFlags, util.toPointer(pLevelHandle), util.toPointer(lpReserved)));
}

export function SaferCloseLevel(
  hLevelHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SAFER_LEVEL_HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.SaferCloseLevel(util.toPointer(hLevelHandle)));
}

export function SaferIdentifyLevel(
  dwNumProperties: number /* u32 */,
  pCodeProperties: Deno.PointerValue | Uint8Array | null /* ptr */,
  pLevelHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.SaferIdentifyLevel(dwNumProperties, util.toPointer(pCodeProperties), util.toPointer(pLevelHandle), util.toPointer(lpReserved)));
}

export function SaferComputeTokenFromLevel(
  LevelHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SAFER_LEVEL_HANDLE */,
  InAccessToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  OutAccessToken: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: SAFER_COMPUTE_TOKEN_FROM_LEVEL_FLAGS /* Windows.Win32.Security.AppLocker.SAFER_COMPUTE_TOKEN_FROM_LEVEL_FLAGS */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.SaferComputeTokenFromLevel(util.toPointer(LevelHandle), util.toPointer(InAccessToken), util.toPointer(OutAccessToken), dwFlags, util.toPointer(lpReserved)));
}

export function SaferGetLevelInformation(
  LevelHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SAFER_LEVEL_HANDLE */,
  dwInfoType: SAFER_OBJECT_INFO_CLASS /* Windows.Win32.Security.AppLocker.SAFER_OBJECT_INFO_CLASS */,
  lpQueryBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwInBufferSize: number /* u32 */,
  lpdwOutBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.SaferGetLevelInformation(util.toPointer(LevelHandle), dwInfoType, util.toPointer(lpQueryBuffer), dwInBufferSize, util.toPointer(lpdwOutBufferSize)));
}

export function SaferSetLevelInformation(
  LevelHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SAFER_LEVEL_HANDLE */,
  dwInfoType: SAFER_OBJECT_INFO_CLASS /* Windows.Win32.Security.AppLocker.SAFER_OBJECT_INFO_CLASS */,
  lpQueryBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwInBufferSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.SaferSetLevelInformation(util.toPointer(LevelHandle), dwInfoType, util.toPointer(lpQueryBuffer), dwInBufferSize));
}

export function SaferRecordEventLogEntry(
  hLevel: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SAFER_LEVEL_HANDLE */,
  szTargetPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.SaferRecordEventLogEntry(util.toPointer(hLevel), util.pwstrToFfi(szTargetPath), util.toPointer(lpReserved)));
}

export function SaferiIsExecutableFileType(
  szFullPathname: string | null /* Windows.Win32.Foundation.PWSTR */,
  bFromShellExecute: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.SaferiIsExecutableFileType(util.pwstrToFfi(szFullPathname), util.toPointer(bFromShellExecute)));
}

