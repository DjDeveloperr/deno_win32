/// Auto-generated by Deno Win32: Windows.Win32.Security.Authorization.Apis

import * as util from "../../util.ts";

// Enums
export type AUTHZ_RESOURCE_MANAGER_FLAGS = number;
export type AUTHZ_ACCESS_CHECK_FLAGS = number;
export type AUTHZ_INITIALIZE_OBJECT_ACCESS_AUDIT_EVENT_FLAGS = number;
export type TREE_SEC_INFO = number;
export type AUTHZ_GENERATE_RESULTS = number;
export type ACTRL_ACCESS_ENTRY_ACCESS_FLAGS = number;
export type AUTHZ_SECURITY_ATTRIBUTE_FLAGS = number;
export type SECURITY_INFO_PAGE_FLAGS = number;
export type SI_OBJECT_INFO_FLAGS = number;
export type SE_OBJECT_TYPE = number;
export type TRUSTEE_TYPE = number;
export type TRUSTEE_FORM = number;
export type MULTIPLE_TRUSTEE_OPERATION = number;
export type SYSTEM_AUDIT_OBJECT_ACE_FLAGS = number;
export type ACCESS_MODE = number;
export type ACE_FLAGS = number;
export type PROG_INVOKE_SETTING = number;
export type AUDIT_PARAM_TYPE = number;
export type AUTHZ_SECURITY_ATTRIBUTE_OPERATION = number;
export type AUTHZ_SID_OPERATION = number;
export type AUTHZ_CONTEXT_INFORMATION_CLASS = number;
export type AUTHZ_AUDIT_EVENT_INFORMATION_CLASS = number;
export type AZ_PROP_CONSTANTS = number;
export type SI_PAGE_TYPE = number;
export type SI_PAGE_ACTIVATED = number;
export type OBJECT_SECURITY_INFORMATION = number;

// Constants
export const AUTHZ_RM_FLAG_NO_AUDIT = 1;
export const AUTHZ_RM_FLAG_INITIALIZE_UNDER_IMPERSONATION = 2;
export const AUTHZ_RM_FLAG_NO_CENTRAL_ACCESS_POLICIES = 4;
export const AUTHZ_ACCESS_CHECK_NO_DEEP_COPY_SD = 1;
export const AUTHZ_NO_SUCCESS_AUDIT = 1;
export const AUTHZ_NO_FAILURE_AUDIT = 2;
export const AUTHZ_NO_ALLOC_STRINGS = 4;
export const TREE_SEC_INFO_SET = 1;
export const TREE_SEC_INFO_RESET = 2;
export const TREE_SEC_INFO_RESET_KEEP_EXPLICIT = 3;
export const AUTHZ_GENERATE_SUCCESS_AUDIT = 1;
export const AUTHZ_GENERATE_FAILURE_AUDIT = 2;
export const ACTRL_ACCESS_ALLOWED = 1;
export const ACTRL_ACCESS_DENIED = 2;
export const ACTRL_AUDIT_SUCCESS = 4;
export const ACTRL_AUDIT_FAILURE = 8;
export const AUTHZ_SECURITY_ATTRIBUTE_NON_INHERITABLE = 1;
export const AUTHZ_SECURITY_ATTRIBUTE_VALUE_CASE_SENSITIVE = 2;
export const SI_ADVANCED = 16;
export const SI_EDIT_AUDITS = 2;
export const SI_EDIT_PROPERTIES = 128;
export const SI_AUDITS_ELEVATION_REQUIRED = 33554432;
export const SI_DISABLE_DENY_ACE = 2147483648;
export const SI_EDIT_EFFECTIVE = 131072;
export const SI_ENABLE_CENTRAL_POLICY = 1073741824;
export const SI_ENABLE_EDIT_ATTRIBUTE_CONDITION = 536870912;
export const SI_MAY_WRITE = 268435456;
export const SI_NO_ADDITIONAL_PERMISSION = 2097152;
export const SI_OWNER_ELEVATION_REQUIRED = 67108864;
export const SI_PERMS_ELEVATION_REQUIRED = 16777216;
export const SI_RESET_DACL = 262144;
export const SI_RESET_OWNER = 1048576;
export const SI_RESET_SACL = 524288;
export const SI_SCOPE_ELEVATION_REQUIRED = 134217728;
export const SI_VIEW_ONLY = 4194304;
export const SDDL_REVISION_1 = 1;
export const SDDL_REVISION = 1;
export const SDDL_ALIAS_SIZE = 2;
export const INHERITED_ACCESS_ENTRY = 16;
export const INHERITED_PARENT = 268435456;
export const INHERITED_GRANDPARENT = 536870912;
export const TRUSTEE_ACCESS_ALLOWED = 1;
export const TRUSTEE_ACCESS_READ = 2;
export const TRUSTEE_ACCESS_WRITE = 4;
export const TRUSTEE_ACCESS_EXPLICIT = 1;
export const TRUSTEE_ACCESS_ALL = "-1";
export const ACTRL_RESERVED = 0;
export const ACTRL_PERM_1 = 1;
export const ACTRL_PERM_2 = 2;
export const ACTRL_PERM_3 = 4;
export const ACTRL_PERM_4 = 8;
export const ACTRL_PERM_5 = 16;
export const ACTRL_PERM_6 = 32;
export const ACTRL_PERM_7 = 64;
export const ACTRL_PERM_8 = 128;
export const ACTRL_PERM_9 = 256;
export const ACTRL_PERM_10 = 512;
export const ACTRL_PERM_11 = 1024;
export const ACTRL_PERM_12 = 2048;
export const ACTRL_PERM_13 = 4096;
export const ACTRL_PERM_14 = 8192;
export const ACTRL_PERM_15 = 16384;
export const ACTRL_PERM_16 = 32768;
export const ACTRL_PERM_17 = 65536;
export const ACTRL_PERM_18 = 131072;
export const ACTRL_PERM_19 = 262144;
export const ACTRL_PERM_20 = 524288;
export const ACTRL_ACCESS_PROTECTED = 1;
export const ACTRL_SYSTEM_ACCESS = 67108864;
export const ACTRL_DELETE = 134217728;
export const ACTRL_READ_CONTROL = 268435456;
export const ACTRL_CHANGE_ACCESS = 536870912;
export const ACTRL_CHANGE_OWNER = 1073741824;
export const ACTRL_SYNCHRONIZE = 2147483648;
export const ACTRL_STD_RIGHTS_ALL = 4160749568;
export const ACTRL_FILE_READ = 1;
export const ACTRL_FILE_WRITE = 2;
export const ACTRL_FILE_APPEND = 4;
export const ACTRL_FILE_READ_PROP = 8;
export const ACTRL_FILE_WRITE_PROP = 16;
export const ACTRL_FILE_EXECUTE = 32;
export const ACTRL_FILE_READ_ATTRIB = 128;
export const ACTRL_FILE_WRITE_ATTRIB = 256;
export const ACTRL_FILE_CREATE_PIPE = 512;
export const ACTRL_DIR_LIST = 1;
export const ACTRL_DIR_CREATE_OBJECT = 2;
export const ACTRL_DIR_CREATE_CHILD = 4;
export const ACTRL_DIR_DELETE_CHILD = 64;
export const ACTRL_DIR_TRAVERSE = 32;
export const ACTRL_KERNEL_TERMINATE = 1;
export const ACTRL_KERNEL_THREAD = 2;
export const ACTRL_KERNEL_VM = 4;
export const ACTRL_KERNEL_VM_READ = 8;
export const ACTRL_KERNEL_VM_WRITE = 16;
export const ACTRL_KERNEL_DUP_HANDLE = 32;
export const ACTRL_KERNEL_PROCESS = 64;
export const ACTRL_KERNEL_SET_INFO = 128;
export const ACTRL_KERNEL_GET_INFO = 256;
export const ACTRL_KERNEL_CONTROL = 512;
export const ACTRL_KERNEL_ALERT = 1024;
export const ACTRL_KERNEL_GET_CONTEXT = 2048;
export const ACTRL_KERNEL_SET_CONTEXT = 4096;
export const ACTRL_KERNEL_TOKEN = 8192;
export const ACTRL_KERNEL_IMPERSONATE = 16384;
export const ACTRL_KERNEL_DIMPERSONATE = 32768;
export const ACTRL_PRINT_SADMIN = 1;
export const ACTRL_PRINT_SLIST = 2;
export const ACTRL_PRINT_PADMIN = 4;
export const ACTRL_PRINT_PUSE = 8;
export const ACTRL_PRINT_JADMIN = 16;
export const ACTRL_SVC_GET_INFO = 1;
export const ACTRL_SVC_SET_INFO = 2;
export const ACTRL_SVC_STATUS = 4;
export const ACTRL_SVC_LIST = 8;
export const ACTRL_SVC_START = 16;
export const ACTRL_SVC_STOP = 32;
export const ACTRL_SVC_PAUSE = 64;
export const ACTRL_SVC_INTERROGATE = 128;
export const ACTRL_SVC_UCONTROL = 256;
export const ACTRL_REG_QUERY = 1;
export const ACTRL_REG_SET = 2;
export const ACTRL_REG_CREATE_CHILD = 4;
export const ACTRL_REG_LIST = 8;
export const ACTRL_REG_NOTIFY = 16;
export const ACTRL_REG_LINK = 32;
export const ACTRL_WIN_CLIPBRD = 1;
export const ACTRL_WIN_GLOBAL_ATOMS = 2;
export const ACTRL_WIN_CREATE = 4;
export const ACTRL_WIN_LIST_DESK = 8;
export const ACTRL_WIN_LIST = 16;
export const ACTRL_WIN_READ_ATTRIBS = 32;
export const ACTRL_WIN_WRITE_ATTRIBS = 64;
export const ACTRL_WIN_SCREEN = 128;
export const ACTRL_WIN_EXIT = 256;
export const ACTRL_ACCESS_NO_OPTIONS = 0;
export const ACTRL_ACCESS_SUPPORTS_OBJECT_ENTRIES = 1;
export const AUDIT_TYPE_LEGACY = 1;
export const AUDIT_TYPE_WMI = 2;
export const AP_ParamTypeBits = 8;
export const AP_ParamTypeMask = 255;
export const _AUTHZ_SS_MAXSIZE = 128;
export const APF_AuditFailure = 0;
export const APF_AuditSuccess = 1;
export const APF_ValidFlags = 1;
export const AUTHZP_WPD_EVENT = 16;
export const AUTHZ_ALLOW_MULTIPLE_SOURCE_INSTANCES = 1;
export const AUTHZ_MIGRATED_LEGACY_PUBLISHER = 2;
export const AUTHZ_AUDIT_INSTANCE_INFORMATION = 2;
export const AUTHZ_SKIP_TOKEN_GROUPS = 2;
export const AUTHZ_REQUIRE_S4U_LOGON = 4;
export const AUTHZ_COMPUTE_PRIVILEGES = 8;
export const AUTHZ_SECURITY_ATTRIBUTE_TYPE_INVALID = 0;
export const AUTHZ_SECURITY_ATTRIBUTE_TYPE_INT64 = 1;
export const AUTHZ_SECURITY_ATTRIBUTE_TYPE_UINT64 = 2;
export const AUTHZ_SECURITY_ATTRIBUTE_TYPE_STRING = 3;
export const AUTHZ_SECURITY_ATTRIBUTE_TYPE_FQBN = 4;
export const AUTHZ_SECURITY_ATTRIBUTE_TYPE_SID = 5;
export const AUTHZ_SECURITY_ATTRIBUTE_TYPE_BOOLEAN = 6;
export const AUTHZ_SECURITY_ATTRIBUTE_TYPE_OCTET_STRING = 16;
export const AUTHZ_SECURITY_ATTRIBUTES_INFORMATION_VERSION_V1 = 1;
export const AUTHZ_SECURITY_ATTRIBUTES_INFORMATION_VERSION = 1;
export const AUTHZ_RPC_INIT_INFO_CLIENT_VERSION_V1 = 1;
export const AUTHZ_INIT_INFO_VERSION_V1 = 1;
export const AUTHZ_WPD_CATEGORY_FLAG = 16;
export const AUTHZ_FLAG_ALLOW_MULTIPLE_SOURCE_INSTANCES = 1;
export const OLESCRIPT_E_SYNTAX = 1227512517316706561n;
export const SI_EDIT_PERMS = 0;
export const SI_EDIT_OWNER = 1;
export const SI_CONTAINER = 4;
export const SI_READONLY = 8;
export const SI_RESET = 32;
export const SI_OWNER_READONLY = 64;
export const SI_OWNER_RECURSE = 256;
export const SI_NO_ACL_PROTECT = 512;
export const SI_NO_TREE_APPLY = 1024;
export const SI_PAGE_TITLE = 2048;
export const SI_SERVER_IS_DC = 4096;
export const SI_RESET_DACL_TREE = 16384;
export const SI_RESET_SACL_TREE = 32768;
export const SI_OBJECT_GUID = 65536;
export const SI_ACCESS_SPECIFIC = 65536;
export const SI_ACCESS_GENERAL = 131072;
export const SI_ACCESS_CONTAINER = 262144;
export const SI_ACCESS_PROPERTY = 524288;
export const DOBJ_RES_CONT = 1;
export const DOBJ_RES_ROOT = 2;
export const DOBJ_VOL_NTACLS = 4;
export const DOBJ_COND_NTACLS = 8;
export const DOBJ_RIBBON_LAUNCH = 16;
export const SECURITY_OBJECT_ID_OBJECT_SD = 1;
export const SECURITY_OBJECT_ID_SHARE = 2;
export const SECURITY_OBJECT_ID_CENTRAL_POLICY = 3;
export const SECURITY_OBJECT_ID_CENTRAL_ACCESS_RULE = 4;
export const SE_UNKNOWN_OBJECT_TYPE = 0;
export const SE_FILE_OBJECT = 1;
export const SE_SERVICE = 2;
export const SE_PRINTER = 3;
export const SE_REGISTRY_KEY = 4;
export const SE_LMSHARE = 5;
export const SE_KERNEL_OBJECT = 6;
export const SE_WINDOW_OBJECT = 7;
export const SE_DS_OBJECT = 8;
export const SE_DS_OBJECT_ALL = 9;
export const SE_PROVIDER_DEFINED_OBJECT = 10;
export const SE_WMIGUID_OBJECT = 11;
export const SE_REGISTRY_WOW64_32KEY = 12;
export const SE_REGISTRY_WOW64_64KEY = 13;
export const TRUSTEE_IS_UNKNOWN = 0;
export const TRUSTEE_IS_USER = 1;
export const TRUSTEE_IS_GROUP = 2;
export const TRUSTEE_IS_DOMAIN = 3;
export const TRUSTEE_IS_ALIAS = 4;
export const TRUSTEE_IS_WELL_KNOWN_GROUP = 5;
export const TRUSTEE_IS_DELETED = 6;
export const TRUSTEE_IS_INVALID = 7;
export const TRUSTEE_IS_COMPUTER = 8;
export const TRUSTEE_IS_SID = 0;
export const TRUSTEE_IS_NAME = 1;
export const TRUSTEE_BAD_FORM = 2;
export const TRUSTEE_IS_OBJECTS_AND_SID = 3;
export const TRUSTEE_IS_OBJECTS_AND_NAME = 4;
export const NO_MULTIPLE_TRUSTEE = 0;
export const TRUSTEE_IS_IMPERSONATE = 1;
export const ACE_OBJECT_TYPE_PRESENT = 1;
export const ACE_INHERITED_OBJECT_TYPE_PRESENT = 2;
export const NOT_USED_ACCESS = 0;
export const GRANT_ACCESS = 1;
export const SET_ACCESS = 2;
export const DENY_ACCESS = 3;
export const REVOKE_ACCESS = 4;
export const SET_AUDIT_SUCCESS = 5;
export const SET_AUDIT_FAILURE = 6;
export const CONTAINER_INHERIT_ACE = 2;
export const FAILED_ACCESS_ACE_FLAG = 128;
export const INHERIT_ONLY_ACE = 8;
export const INHERITED_ACE = 16;
export const NO_PROPAGATE_INHERIT_ACE = 4;
export const OBJECT_INHERIT_ACE = 1;
export const SUCCESSFUL_ACCESS_ACE_FLAG = 64;
export const SUB_CONTAINERS_AND_OBJECTS_INHERIT = 3;
export const SUB_CONTAINERS_ONLY_INHERIT = 2;
export const SUB_OBJECTS_ONLY_INHERIT = 1;
export const INHERIT_NO_PROPAGATE = 4;
export const INHERIT_ONLY = 8;
export const NO_INHERITANCE = 0;
export const INHERIT_ONLY_ACE_ = 8;
export const ProgressInvokeNever = 1;
export const ProgressInvokeEveryObject = 2;
export const ProgressInvokeOnError = 3;
export const ProgressCancelOperation = 4;
export const ProgressRetryOperation = 5;
export const ProgressInvokePrePostError = 6;
export const APT_None = 1;
export const APT_String = 2;
export const APT_Ulong = 3;
export const APT_Pointer = 4;
export const APT_Sid = 5;
export const APT_LogonId = 6;
export const APT_ObjectTypeList = 7;
export const APT_Luid = 8;
export const APT_Guid = 9;
export const APT_Time = 10;
export const APT_Int64 = 11;
export const APT_IpAddress = 12;
export const APT_LogonIdWithSid = 13;
export const AUTHZ_SECURITY_ATTRIBUTE_OPERATION_NONE = 0;
export const AUTHZ_SECURITY_ATTRIBUTE_OPERATION_REPLACE_ALL = 1;
export const AUTHZ_SECURITY_ATTRIBUTE_OPERATION_ADD = 2;
export const AUTHZ_SECURITY_ATTRIBUTE_OPERATION_DELETE = 3;
export const AUTHZ_SECURITY_ATTRIBUTE_OPERATION_REPLACE = 4;
export const AUTHZ_SID_OPERATION_NONE = 0;
export const AUTHZ_SID_OPERATION_REPLACE_ALL = 1;
export const AUTHZ_SID_OPERATION_ADD = 2;
export const AUTHZ_SID_OPERATION_DELETE = 3;
export const AUTHZ_SID_OPERATION_REPLACE = 4;
export const AuthzContextInfoUserSid = 1;
export const AuthzContextInfoGroupsSids = 2;
export const AuthzContextInfoRestrictedSids = 3;
export const AuthzContextInfoPrivileges = 4;
export const AuthzContextInfoExpirationTime = 5;
export const AuthzContextInfoServerContext = 6;
export const AuthzContextInfoIdentifier = 7;
export const AuthzContextInfoSource = 8;
export const AuthzContextInfoAll = 9;
export const AuthzContextInfoAuthenticationId = 10;
export const AuthzContextInfoSecurityAttributes = 11;
export const AuthzContextInfoDeviceSids = 12;
export const AuthzContextInfoUserClaims = 13;
export const AuthzContextInfoDeviceClaims = 14;
export const AuthzContextInfoAppContainerSid = 15;
export const AuthzContextInfoCapabilitySids = 16;
export const AuthzAuditEventInfoFlags = 1;
export const AuthzAuditEventInfoOperationType = 2;
export const AuthzAuditEventInfoObjectType = 3;
export const AuthzAuditEventInfoObjectName = 4;
export const AuthzAuditEventInfoAdditionalInfo = 5;
export const AZ_PROP_NAME = 1;
export const AZ_PROP_DESCRIPTION = 2;
export const AZ_PROP_WRITABLE = 3;
export const AZ_PROP_APPLICATION_DATA = 4;
export const AZ_PROP_CHILD_CREATE = 5;
export const AZ_MAX_APPLICATION_NAME_LENGTH = 512;
export const AZ_MAX_OPERATION_NAME_LENGTH = 64;
export const AZ_MAX_TASK_NAME_LENGTH = 64;
export const AZ_MAX_SCOPE_NAME_LENGTH = 65536;
export const AZ_MAX_GROUP_NAME_LENGTH = 64;
export const AZ_MAX_ROLE_NAME_LENGTH = 64;
export const AZ_MAX_NAME_LENGTH = 65536;
export const AZ_MAX_DESCRIPTION_LENGTH = 1024;
export const AZ_MAX_APPLICATION_DATA_LENGTH = 4096;
export const AZ_SUBMIT_FLAG_ABORT = 1;
export const AZ_SUBMIT_FLAG_FLUSH = 2;
export const AZ_MAX_POLICY_URL_LENGTH = 65536;
export const AZ_AZSTORE_FLAG_CREATE = 1;
export const AZ_AZSTORE_FLAG_MANAGE_STORE_ONLY = 2;
export const AZ_AZSTORE_FLAG_BATCH_UPDATE = 4;
export const AZ_AZSTORE_FLAG_AUDIT_IS_CRITICAL = 8;
export const AZ_AZSTORE_FORCE_APPLICATION_CLOSE = 16;
export const AZ_AZSTORE_NT6_FUNCTION_LEVEL = 32;
export const AZ_AZSTORE_FLAG_MANAGE_ONLY_PASSIVE_SUBMIT = 32768;
export const AZ_PROP_AZSTORE_DOMAIN_TIMEOUT = 100;
export const AZ_AZSTORE_DEFAULT_DOMAIN_TIMEOUT = 15000;
export const AZ_PROP_AZSTORE_SCRIPT_ENGINE_TIMEOUT = 101;
export const AZ_AZSTORE_MIN_DOMAIN_TIMEOUT = 500;
export const AZ_AZSTORE_MIN_SCRIPT_ENGINE_TIMEOUT = 5000;
export const AZ_AZSTORE_DEFAULT_SCRIPT_ENGINE_TIMEOUT = 45000;
export const AZ_PROP_AZSTORE_MAX_SCRIPT_ENGINES = 102;
export const AZ_AZSTORE_DEFAULT_MAX_SCRIPT_ENGINES = 120;
export const AZ_PROP_AZSTORE_MAJOR_VERSION = 103;
export const AZ_PROP_AZSTORE_MINOR_VERSION = 104;
export const AZ_PROP_AZSTORE_TARGET_MACHINE = 105;
export const AZ_PROP_AZTORE_IS_ADAM_INSTANCE = 106;
export const AZ_PROP_OPERATION_ID = 200;
export const AZ_PROP_TASK_OPERATIONS = 300;
export const AZ_PROP_TASK_BIZRULE = 301;
export const AZ_PROP_TASK_BIZRULE_LANGUAGE = 302;
export const AZ_PROP_TASK_TASKS = 303;
export const AZ_PROP_TASK_BIZRULE_IMPORTED_PATH = 304;
export const AZ_PROP_TASK_IS_ROLE_DEFINITION = 305;
export const AZ_MAX_TASK_BIZRULE_LENGTH = 65536;
export const AZ_MAX_TASK_BIZRULE_LANGUAGE_LENGTH = 64;
export const AZ_MAX_TASK_BIZRULE_IMPORTED_PATH_LENGTH = 512;
export const AZ_MAX_BIZRULE_STRING = 65536;
export const AZ_PROP_GROUP_TYPE = 400;
export const AZ_GROUPTYPE_LDAP_QUERY = 1;
export const AZ_GROUPTYPE_BASIC = 2;
export const AZ_GROUPTYPE_BIZRULE = 3;
export const AZ_PROP_GROUP_APP_MEMBERS = 401;
export const AZ_PROP_GROUP_APP_NON_MEMBERS = 402;
export const AZ_PROP_GROUP_LDAP_QUERY = 403;
export const AZ_MAX_GROUP_LDAP_QUERY_LENGTH = 4096;
export const AZ_PROP_GROUP_MEMBERS = 404;
export const AZ_PROP_GROUP_NON_MEMBERS = 405;
export const AZ_PROP_GROUP_MEMBERS_NAME = 406;
export const AZ_PROP_GROUP_NON_MEMBERS_NAME = 407;
export const AZ_PROP_GROUP_BIZRULE = 408;
export const AZ_PROP_GROUP_BIZRULE_LANGUAGE = 409;
export const AZ_PROP_GROUP_BIZRULE_IMPORTED_PATH = 410;
export const AZ_MAX_GROUP_BIZRULE_LENGTH = 65536;
export const AZ_MAX_GROUP_BIZRULE_LANGUAGE_LENGTH = 64;
export const AZ_MAX_GROUP_BIZRULE_IMPORTED_PATH_LENGTH = 512;
export const AZ_PROP_ROLE_APP_MEMBERS = 500;
export const AZ_PROP_ROLE_MEMBERS = 501;
export const AZ_PROP_ROLE_OPERATIONS = 502;
export const AZ_PROP_ROLE_TASKS = 504;
export const AZ_PROP_ROLE_MEMBERS_NAME = 505;
export const AZ_PROP_SCOPE_BIZRULES_WRITABLE = 600;
export const AZ_PROP_SCOPE_CAN_BE_DELEGATED = 601;
export const AZ_PROP_CLIENT_CONTEXT_USER_DN = 700;
export const AZ_PROP_CLIENT_CONTEXT_USER_SAM_COMPAT = 701;
export const AZ_PROP_CLIENT_CONTEXT_USER_DISPLAY = 702;
export const AZ_PROP_CLIENT_CONTEXT_USER_GUID = 703;
export const AZ_PROP_CLIENT_CONTEXT_USER_CANONICAL = 704;
export const AZ_PROP_CLIENT_CONTEXT_USER_UPN = 705;
export const AZ_PROP_CLIENT_CONTEXT_USER_DNS_SAM_COMPAT = 707;
export const AZ_PROP_CLIENT_CONTEXT_ROLE_FOR_ACCESS_CHECK = 708;
export const AZ_PROP_CLIENT_CONTEXT_LDAP_QUERY_DN = 709;
export const AZ_PROP_APPLICATION_AUTHZ_INTERFACE_CLSID = 800;
export const AZ_PROP_APPLICATION_VERSION = 801;
export const AZ_MAX_APPLICATION_VERSION_LENGTH = 512;
export const AZ_PROP_APPLICATION_NAME = 802;
export const AZ_PROP_APPLICATION_BIZRULE_ENABLED = 803;
export const AZ_PROP_APPLY_STORE_SACL = 900;
export const AZ_PROP_GENERATE_AUDITS = 901;
export const AZ_PROP_POLICY_ADMINS = 902;
export const AZ_PROP_POLICY_READERS = 903;
export const AZ_PROP_DELEGATED_POLICY_USERS = 904;
export const AZ_PROP_POLICY_ADMINS_NAME = 905;
export const AZ_PROP_POLICY_READERS_NAME = 906;
export const AZ_PROP_DELEGATED_POLICY_USERS_NAME = 907;
export const AZ_CLIENT_CONTEXT_SKIP_GROUP = 1;
export const AZ_CLIENT_CONTEXT_SKIP_LDAP_QUERY = 1;
export const AZ_CLIENT_CONTEXT_GET_GROUP_RECURSIVE = 2;
export const AZ_CLIENT_CONTEXT_GET_GROUPS_STORE_LEVEL_ONLY = 2;
export const SI_PAGE_PERM = 0;
export const SI_PAGE_ADVPERM = 1;
export const SI_PAGE_AUDIT = 2;
export const SI_PAGE_OWNER = 3;
export const SI_PAGE_EFFECTIVE = 4;
export const SI_PAGE_TAKEOWNERSHIP = 5;
export const SI_PAGE_SHARE = 6;
export const SI_SHOW_DEFAULT = 0;
export const SI_SHOW_PERM_ACTIVATED = 1;
export const SI_SHOW_AUDIT_ACTIVATED = 2;
export const SI_SHOW_OWNER_ACTIVATED = 3;
export const SI_SHOW_EFFECTIVE_ACTIVATED = 4;
export const SI_SHOW_SHARE_ACTIVATED = 5;
export const SI_SHOW_CENTRAL_POLICY_ACTIVATED = 6;
export const ATTRIBUTE_SECURITY_INFORMATION = 32;
export const BACKUP_SECURITY_INFORMATION = 65536;
export const DACL_SECURITY_INFORMATION = 4;
export const GROUP_SECURITY_INFORMATION = 2;
export const LABEL_SECURITY_INFORMATION = 16;
export const OWNER_SECURITY_INFORMATION = 1;
export const PROTECTED_DACL_SECURITY_INFORMATION = 2147483648;
export const PROTECTED_SACL_SECURITY_INFORMATION = 1073741824;
export const SACL_SECURITY_INFORMATION = 8;
export const SCOPE_SECURITY_INFORMATION = 64;
export const UNPROTECTED_DACL_SECURITY_INFORMATION = 536870912;
export const UNPROTECTED_SACL_SECURITY_INFORMATION = 268435456;

// Structs

/**
 * Windows.Win32.Security.Authorization.OBJECTS_AND_SID (size: 32)
 */
export interface OBJECTS_AND_SID {
  /** Windows.Win32.Security.SYSTEM_AUDIT_OBJECT_ACE_FLAGS */
  ObjectsPresent: SYSTEM_AUDIT_OBJECT_ACE_FLAGS;
  /** System.Guid */
  ObjectTypeGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  InheritedObjectTypeGuid: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pSid: Deno.PointerValue | Uint8Array | null;
}

export const sizeofOBJECTS_AND_SID = 32;

export function allocOBJECTS_AND_SID(data?: Partial<OBJECTS_AND_SID>): Uint8Array {
  const buf = new Uint8Array(sizeofOBJECTS_AND_SID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ObjectsPresent !== undefined) view.setUint32(0, Number(data.ObjectsPresent), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ObjectTypeGuid !== undefined) view.setBigUint64(8, data.ObjectTypeGuid === null ? 0n : BigInt(util.toPointer(data.ObjectTypeGuid)), true);
  // 0x10: pointer
  if (data?.InheritedObjectTypeGuid !== undefined) view.setBigUint64(16, data.InheritedObjectTypeGuid === null ? 0n : BigInt(util.toPointer(data.InheritedObjectTypeGuid)), true);
  // 0x18: pointer
  if (data?.pSid !== undefined) view.setBigUint64(24, data.pSid === null ? 0n : BigInt(util.toPointer(data.pSid)), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Security.Authorization.OBJECTS_AND_NAME_A (size: 32)
 */
export interface OBJECTS_AND_NAME_A {
  /** Windows.Win32.Security.SYSTEM_AUDIT_OBJECT_ACE_FLAGS */
  ObjectsPresent: SYSTEM_AUDIT_OBJECT_ACE_FLAGS;
  /** Windows.Win32.Security.Authorization.SE_OBJECT_TYPE */
  ObjectType: SE_OBJECT_TYPE;
  /** Windows.Win32.Foundation.PSTR */
  ObjectTypeName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  InheritedObjectTypeName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  ptstrName: string | null;
}

export const sizeofOBJECTS_AND_NAME_A = 32;

export function allocOBJECTS_AND_NAME_A(data?: Partial<OBJECTS_AND_NAME_A>): Uint8Array {
  const buf = new Uint8Array(sizeofOBJECTS_AND_NAME_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ObjectsPresent !== undefined) view.setUint32(0, Number(data.ObjectsPresent), true);
  // 0x04: i32
  if (data?.ObjectType !== undefined) view.setInt32(4, Number(data.ObjectType), true);
  // 0x08: buffer
  if (data?.ObjectTypeName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.ObjectTypeName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.InheritedObjectTypeName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.InheritedObjectTypeName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.ptstrName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.ptstrName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Security.Authorization.OBJECTS_AND_NAME_W (size: 32)
 */
export interface OBJECTS_AND_NAME_W {
  /** Windows.Win32.Security.SYSTEM_AUDIT_OBJECT_ACE_FLAGS */
  ObjectsPresent: SYSTEM_AUDIT_OBJECT_ACE_FLAGS;
  /** Windows.Win32.Security.Authorization.SE_OBJECT_TYPE */
  ObjectType: SE_OBJECT_TYPE;
  /** Windows.Win32.Foundation.PWSTR */
  ObjectTypeName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  InheritedObjectTypeName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  ptstrName: string | null;
}

export const sizeofOBJECTS_AND_NAME_W = 32;

export function allocOBJECTS_AND_NAME_W(data?: Partial<OBJECTS_AND_NAME_W>): Uint8Array {
  const buf = new Uint8Array(sizeofOBJECTS_AND_NAME_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ObjectsPresent !== undefined) view.setUint32(0, Number(data.ObjectsPresent), true);
  // 0x04: i32
  if (data?.ObjectType !== undefined) view.setInt32(4, Number(data.ObjectType), true);
  // 0x08: buffer
  if (data?.ObjectTypeName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ObjectTypeName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.InheritedObjectTypeName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.InheritedObjectTypeName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.ptstrName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ptstrName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.TRUSTEE_A (size: 32)
 */
export interface TRUSTEE_A {
  /** ptr */
  pMultipleTrustee: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Authorization.MULTIPLE_TRUSTEE_OPERATION */
  MultipleTrusteeOperation: MULTIPLE_TRUSTEE_OPERATION;
  /** Windows.Win32.Security.Authorization.TRUSTEE_FORM */
  TrusteeForm: TRUSTEE_FORM;
  /** Windows.Win32.Security.Authorization.TRUSTEE_TYPE */
  TrusteeType: TRUSTEE_TYPE;
  /** Windows.Win32.Foundation.PSTR */
  ptstrName: string | null;
}

export const sizeofTRUSTEE_A = 32;

export function allocTRUSTEE_A(data?: Partial<TRUSTEE_A>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTEE_A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pMultipleTrustee !== undefined) view.setBigUint64(0, data.pMultipleTrustee === null ? 0n : BigInt(util.toPointer(data.pMultipleTrustee)), true);
  // 0x08: i32
  if (data?.MultipleTrusteeOperation !== undefined) view.setInt32(8, Number(data.MultipleTrusteeOperation), true);
  // 0x0c: i32
  if (data?.TrusteeForm !== undefined) view.setInt32(12, Number(data.TrusteeForm), true);
  // 0x10: i32
  if (data?.TrusteeType !== undefined) view.setInt32(16, Number(data.TrusteeType), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.ptstrName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.ptstrName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.TRUSTEE_W (size: 32)
 */
export interface TRUSTEE_W {
  /** ptr */
  pMultipleTrustee: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Authorization.MULTIPLE_TRUSTEE_OPERATION */
  MultipleTrusteeOperation: MULTIPLE_TRUSTEE_OPERATION;
  /** Windows.Win32.Security.Authorization.TRUSTEE_FORM */
  TrusteeForm: TRUSTEE_FORM;
  /** Windows.Win32.Security.Authorization.TRUSTEE_TYPE */
  TrusteeType: TRUSTEE_TYPE;
  /** Windows.Win32.Foundation.PWSTR */
  ptstrName: string | null;
}

export const sizeofTRUSTEE_W = 32;

export function allocTRUSTEE_W(data?: Partial<TRUSTEE_W>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTEE_W);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pMultipleTrustee !== undefined) view.setBigUint64(0, data.pMultipleTrustee === null ? 0n : BigInt(util.toPointer(data.pMultipleTrustee)), true);
  // 0x08: i32
  if (data?.MultipleTrusteeOperation !== undefined) view.setInt32(8, Number(data.MultipleTrusteeOperation), true);
  // 0x0c: i32
  if (data?.TrusteeForm !== undefined) view.setInt32(12, Number(data.TrusteeForm), true);
  // 0x10: i32
  if (data?.TrusteeType !== undefined) view.setInt32(16, Number(data.TrusteeType), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.ptstrName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ptstrName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.EXPLICIT_ACCESS_A (size: 24)
 */
export interface EXPLICIT_ACCESS_A {
  /** u32 */
  grfAccessPermissions: number;
  /** Windows.Win32.Security.Authorization.ACCESS_MODE */
  grfAccessMode: ACCESS_MODE;
  /** Windows.Win32.Security.ACE_FLAGS */
  grfInheritance: ACE_FLAGS;
  /** Windows.Win32.Security.Authorization.TRUSTEE_A */
  Trustee: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEXPLICIT_ACCESS_A = 24;

export function allocEXPLICIT_ACCESS_A(data?: Partial<EXPLICIT_ACCESS_A>): Uint8Array {
  const buf = new Uint8Array(sizeofEXPLICIT_ACCESS_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.grfAccessPermissions !== undefined) view.setUint32(0, Number(data.grfAccessPermissions), true);
  // 0x04: i32
  if (data?.grfAccessMode !== undefined) view.setInt32(4, Number(data.grfAccessMode), true);
  // 0x08: u32
  if (data?.grfInheritance !== undefined) view.setUint32(8, Number(data.grfInheritance), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Trustee !== undefined) view.setBigUint64(16, data.Trustee === null ? 0n : BigInt(util.toPointer(data.Trustee)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.EXPLICIT_ACCESS_W (size: 24)
 */
export interface EXPLICIT_ACCESS_W {
  /** u32 */
  grfAccessPermissions: number;
  /** Windows.Win32.Security.Authorization.ACCESS_MODE */
  grfAccessMode: ACCESS_MODE;
  /** Windows.Win32.Security.ACE_FLAGS */
  grfInheritance: ACE_FLAGS;
  /** Windows.Win32.Security.Authorization.TRUSTEE_W */
  Trustee: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEXPLICIT_ACCESS_W = 24;

export function allocEXPLICIT_ACCESS_W(data?: Partial<EXPLICIT_ACCESS_W>): Uint8Array {
  const buf = new Uint8Array(sizeofEXPLICIT_ACCESS_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.grfAccessPermissions !== undefined) view.setUint32(0, Number(data.grfAccessPermissions), true);
  // 0x04: i32
  if (data?.grfAccessMode !== undefined) view.setInt32(4, Number(data.grfAccessMode), true);
  // 0x08: u32
  if (data?.grfInheritance !== undefined) view.setUint32(8, Number(data.grfInheritance), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Trustee !== undefined) view.setBigUint64(16, data.Trustee === null ? 0n : BigInt(util.toPointer(data.Trustee)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.ACTRL_ACCESS_ENTRYA (size: 32)
 */
export interface ACTRL_ACCESS_ENTRYA {
  /** Windows.Win32.Security.Authorization.TRUSTEE_A */
  Trustee: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authorization.ACTRL_ACCESS_ENTRY_ACCESS_FLAGS */
  fAccessFlags: ACTRL_ACCESS_ENTRY_ACCESS_FLAGS;
  /** u32 */
  Access: number;
  /** u32 */
  ProvSpecificAccess: number;
  /** Windows.Win32.Security.ACE_FLAGS */
  Inheritance: ACE_FLAGS;
  /** Windows.Win32.Foundation.PSTR */
  lpInheritProperty: string | null;
}

export const sizeofACTRL_ACCESS_ENTRYA = 32;

export function allocACTRL_ACCESS_ENTRYA(data?: Partial<ACTRL_ACCESS_ENTRYA>): Uint8Array {
  const buf = new Uint8Array(sizeofACTRL_ACCESS_ENTRYA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Trustee !== undefined) view.setBigUint64(0, data.Trustee === null ? 0n : BigInt(util.toPointer(data.Trustee)), true);
  // 0x08: u32
  if (data?.fAccessFlags !== undefined) view.setUint32(8, Number(data.fAccessFlags), true);
  // 0x0c: u32
  if (data?.Access !== undefined) view.setUint32(12, Number(data.Access), true);
  // 0x10: u32
  if (data?.ProvSpecificAccess !== undefined) view.setUint32(16, Number(data.ProvSpecificAccess), true);
  // 0x14: u32
  if (data?.Inheritance !== undefined) view.setUint32(20, Number(data.Inheritance), true);
  // 0x18: buffer
  if (data?.lpInheritProperty !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpInheritProperty);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.ACTRL_ACCESS_ENTRYW (size: 32)
 */
export interface ACTRL_ACCESS_ENTRYW {
  /** Windows.Win32.Security.Authorization.TRUSTEE_W */
  Trustee: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authorization.ACTRL_ACCESS_ENTRY_ACCESS_FLAGS */
  fAccessFlags: ACTRL_ACCESS_ENTRY_ACCESS_FLAGS;
  /** u32 */
  Access: number;
  /** u32 */
  ProvSpecificAccess: number;
  /** Windows.Win32.Security.ACE_FLAGS */
  Inheritance: ACE_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  lpInheritProperty: string | null;
}

export const sizeofACTRL_ACCESS_ENTRYW = 32;

export function allocACTRL_ACCESS_ENTRYW(data?: Partial<ACTRL_ACCESS_ENTRYW>): Uint8Array {
  const buf = new Uint8Array(sizeofACTRL_ACCESS_ENTRYW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Trustee !== undefined) view.setBigUint64(0, data.Trustee === null ? 0n : BigInt(util.toPointer(data.Trustee)), true);
  // 0x08: u32
  if (data?.fAccessFlags !== undefined) view.setUint32(8, Number(data.fAccessFlags), true);
  // 0x0c: u32
  if (data?.Access !== undefined) view.setUint32(12, Number(data.Access), true);
  // 0x10: u32
  if (data?.ProvSpecificAccess !== undefined) view.setUint32(16, Number(data.ProvSpecificAccess), true);
  // 0x14: u32
  if (data?.Inheritance !== undefined) view.setUint32(20, Number(data.Inheritance), true);
  // 0x18: buffer
  if (data?.lpInheritProperty !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpInheritProperty);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.ACTRL_ACCESS_ENTRY_LISTA (size: 16)
 */
export interface ACTRL_ACCESS_ENTRY_LISTA {
  /** u32 */
  cEntries: number;
  /** ptr */
  pAccessList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofACTRL_ACCESS_ENTRY_LISTA = 16;

export function allocACTRL_ACCESS_ENTRY_LISTA(data?: Partial<ACTRL_ACCESS_ENTRY_LISTA>): Uint8Array {
  const buf = new Uint8Array(sizeofACTRL_ACCESS_ENTRY_LISTA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cEntries !== undefined) view.setUint32(0, Number(data.cEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pAccessList !== undefined) view.setBigUint64(8, data.pAccessList === null ? 0n : BigInt(util.toPointer(data.pAccessList)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.ACTRL_ACCESS_ENTRY_LISTW (size: 16)
 */
export interface ACTRL_ACCESS_ENTRY_LISTW {
  /** u32 */
  cEntries: number;
  /** ptr */
  pAccessList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofACTRL_ACCESS_ENTRY_LISTW = 16;

export function allocACTRL_ACCESS_ENTRY_LISTW(data?: Partial<ACTRL_ACCESS_ENTRY_LISTW>): Uint8Array {
  const buf = new Uint8Array(sizeofACTRL_ACCESS_ENTRY_LISTW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cEntries !== undefined) view.setUint32(0, Number(data.cEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pAccessList !== undefined) view.setBigUint64(8, data.pAccessList === null ? 0n : BigInt(util.toPointer(data.pAccessList)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.ACTRL_PROPERTY_ENTRYA (size: 24)
 */
export interface ACTRL_PROPERTY_ENTRYA {
  /** Windows.Win32.Foundation.PSTR */
  lpProperty: string | null;
  /** ptr */
  pAccessEntryList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  fListFlags: number;
}

export const sizeofACTRL_PROPERTY_ENTRYA = 24;

export function allocACTRL_PROPERTY_ENTRYA(data?: Partial<ACTRL_PROPERTY_ENTRYA>): Uint8Array {
  const buf = new Uint8Array(sizeofACTRL_PROPERTY_ENTRYA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpProperty !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpProperty);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.pAccessEntryList !== undefined) view.setBigUint64(8, data.pAccessEntryList === null ? 0n : BigInt(util.toPointer(data.pAccessEntryList)), true);
  // 0x10: u32
  if (data?.fListFlags !== undefined) view.setUint32(16, Number(data.fListFlags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.ACTRL_PROPERTY_ENTRYW (size: 24)
 */
export interface ACTRL_PROPERTY_ENTRYW {
  /** Windows.Win32.Foundation.PWSTR */
  lpProperty: string | null;
  /** ptr */
  pAccessEntryList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  fListFlags: number;
}

export const sizeofACTRL_PROPERTY_ENTRYW = 24;

export function allocACTRL_PROPERTY_ENTRYW(data?: Partial<ACTRL_PROPERTY_ENTRYW>): Uint8Array {
  const buf = new Uint8Array(sizeofACTRL_PROPERTY_ENTRYW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpProperty !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.lpProperty);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.pAccessEntryList !== undefined) view.setBigUint64(8, data.pAccessEntryList === null ? 0n : BigInt(util.toPointer(data.pAccessEntryList)), true);
  // 0x10: u32
  if (data?.fListFlags !== undefined) view.setUint32(16, Number(data.fListFlags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.ACTRL_ACCESSA (size: 16)
 */
export interface ACTRL_ACCESSA {
  /** u32 */
  cEntries: number;
  /** ptr */
  pPropertyAccessList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofACTRL_ACCESSA = 16;

export function allocACTRL_ACCESSA(data?: Partial<ACTRL_ACCESSA>): Uint8Array {
  const buf = new Uint8Array(sizeofACTRL_ACCESSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cEntries !== undefined) view.setUint32(0, Number(data.cEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pPropertyAccessList !== undefined) view.setBigUint64(8, data.pPropertyAccessList === null ? 0n : BigInt(util.toPointer(data.pPropertyAccessList)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.ACTRL_ACCESSW (size: 16)
 */
export interface ACTRL_ACCESSW {
  /** u32 */
  cEntries: number;
  /** ptr */
  pPropertyAccessList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofACTRL_ACCESSW = 16;

export function allocACTRL_ACCESSW(data?: Partial<ACTRL_ACCESSW>): Uint8Array {
  const buf = new Uint8Array(sizeofACTRL_ACCESSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cEntries !== undefined) view.setUint32(0, Number(data.cEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pPropertyAccessList !== undefined) view.setBigUint64(8, data.pPropertyAccessList === null ? 0n : BigInt(util.toPointer(data.pPropertyAccessList)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.TRUSTEE_ACCESSA (size: 24)
 */
export interface TRUSTEE_ACCESSA {
  /** Windows.Win32.Foundation.PSTR */
  lpProperty: string | null;
  /** u32 */
  Access: number;
  /** u32 */
  fAccessFlags: number;
  /** u32 */
  fReturnedAccess: number;
}

export const sizeofTRUSTEE_ACCESSA = 24;

export function allocTRUSTEE_ACCESSA(data?: Partial<TRUSTEE_ACCESSA>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTEE_ACCESSA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpProperty !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpProperty);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.Access !== undefined) view.setUint32(8, Number(data.Access), true);
  // 0x0c: u32
  if (data?.fAccessFlags !== undefined) view.setUint32(12, Number(data.fAccessFlags), true);
  // 0x10: u32
  if (data?.fReturnedAccess !== undefined) view.setUint32(16, Number(data.fReturnedAccess), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.TRUSTEE_ACCESSW (size: 24)
 */
export interface TRUSTEE_ACCESSW {
  /** Windows.Win32.Foundation.PWSTR */
  lpProperty: string | null;
  /** u32 */
  Access: number;
  /** u32 */
  fAccessFlags: number;
  /** u32 */
  fReturnedAccess: number;
}

export const sizeofTRUSTEE_ACCESSW = 24;

export function allocTRUSTEE_ACCESSW(data?: Partial<TRUSTEE_ACCESSW>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTEE_ACCESSW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpProperty !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.lpProperty);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.Access !== undefined) view.setUint32(8, Number(data.Access), true);
  // 0x0c: u32
  if (data?.fAccessFlags !== undefined) view.setUint32(12, Number(data.fAccessFlags), true);
  // 0x10: u32
  if (data?.fReturnedAccess !== undefined) view.setUint32(16, Number(data.fReturnedAccess), true);
  // 0x14: pad4
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.Security.Authorization.ACTRL_OVERLAPPED (size: 24)
 */
export interface ACTRL_OVERLAPPED {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Reserved2: number;
  /** Windows.Win32.Foundation.HANDLE */
  hEvent: Uint8Array | Deno.PointerValue | null;
}

export const sizeofACTRL_OVERLAPPED = 24;

export function allocACTRL_OVERLAPPED(data?: Partial<ACTRL_OVERLAPPED>): Uint8Array {
  const buf = new Uint8Array(sizeofACTRL_OVERLAPPED);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u32
  if (data?.Reserved2 !== undefined) view.setUint32(8, Number(data.Reserved2), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hEvent !== undefined) view.setBigUint64(16, data.hEvent === null ? 0n : BigInt(util.toPointer(data.hEvent)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.ACTRL_ACCESS_INFOA (size: 16)
 */
export interface ACTRL_ACCESS_INFOA {
  /** u32 */
  fAccessPermission: number;
  /** Windows.Win32.Foundation.PSTR */
  lpAccessPermissionName: string | null;
}

export const sizeofACTRL_ACCESS_INFOA = 16;

export function allocACTRL_ACCESS_INFOA(data?: Partial<ACTRL_ACCESS_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofACTRL_ACCESS_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fAccessPermission !== undefined) view.setUint32(0, Number(data.fAccessPermission), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpAccessPermissionName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpAccessPermissionName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.ACTRL_ACCESS_INFOW (size: 16)
 */
export interface ACTRL_ACCESS_INFOW {
  /** u32 */
  fAccessPermission: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpAccessPermissionName: string | null;
}

export const sizeofACTRL_ACCESS_INFOW = 16;

export function allocACTRL_ACCESS_INFOW(data?: Partial<ACTRL_ACCESS_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofACTRL_ACCESS_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fAccessPermission !== undefined) view.setUint32(0, Number(data.fAccessPermission), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpAccessPermissionName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpAccessPermissionName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.ACTRL_CONTROL_INFOA (size: 16)
 */
export interface ACTRL_CONTROL_INFOA {
  /** Windows.Win32.Foundation.PSTR */
  lpControlId: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpControlName: string | null;
}

export const sizeofACTRL_CONTROL_INFOA = 16;

export function allocACTRL_CONTROL_INFOA(data?: Partial<ACTRL_CONTROL_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofACTRL_CONTROL_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpControlId !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpControlId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.lpControlName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpControlName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.ACTRL_CONTROL_INFOW (size: 16)
 */
export interface ACTRL_CONTROL_INFOW {
  /** Windows.Win32.Foundation.PWSTR */
  lpControlId: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpControlName: string | null;
}

export const sizeofACTRL_CONTROL_INFOW = 16;

export function allocACTRL_CONTROL_INFOW(data?: Partial<ACTRL_CONTROL_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofACTRL_CONTROL_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpControlId !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.lpControlId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.lpControlName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpControlName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.FN_OBJECT_MGR_FUNCTIONS (size: 8)
 */
export interface FN_OBJECT_MGR_FUNCTIONS {
  /** u32 */
  Placeholder: number;
}

export const sizeofFN_OBJECT_MGR_FUNCTIONS = 8;

export function allocFN_OBJECT_MGR_FUNCTIONS(data?: Partial<FN_OBJECT_MGR_FUNCTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofFN_OBJECT_MGR_FUNCTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Placeholder !== undefined) view.setUint32(0, Number(data.Placeholder), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.INHERITED_FROMA (size: 16)
 */
export interface INHERITED_FROMA {
  /** i32 */
  GenerationGap: number;
  /** Windows.Win32.Foundation.PSTR */
  AncestorName: string | null;
}

export const sizeofINHERITED_FROMA = 16;

export function allocINHERITED_FROMA(data?: Partial<INHERITED_FROMA>): Uint8Array {
  const buf = new Uint8Array(sizeofINHERITED_FROMA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.GenerationGap !== undefined) view.setInt32(0, Number(data.GenerationGap), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.AncestorName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.AncestorName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.INHERITED_FROMW (size: 16)
 */
export interface INHERITED_FROMW {
  /** i32 */
  GenerationGap: number;
  /** Windows.Win32.Foundation.PWSTR */
  AncestorName: string | null;
}

export const sizeofINHERITED_FROMW = 16;

export function allocINHERITED_FROMW(data?: Partial<INHERITED_FROMW>): Uint8Array {
  const buf = new Uint8Array(sizeofINHERITED_FROMW);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.GenerationGap !== undefined) view.setInt32(0, Number(data.GenerationGap), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.AncestorName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.AncestorName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.AUDIT_OBJECT_TYPE (size: 16)
 */
export interface AUDIT_OBJECT_TYPE {
  /** System.Guid */
  ObjectType: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  Flags: number;
  /** u16 */
  Level: number;
  /** u32 */
  AccessMask: number;
}

export const sizeofAUDIT_OBJECT_TYPE = 16;

export function allocAUDIT_OBJECT_TYPE(data?: Partial<AUDIT_OBJECT_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIT_OBJECT_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectType !== undefined) view.setBigUint64(0, data.ObjectType === null ? 0n : BigInt(util.toPointer(data.ObjectType)), true);
  // 0x08: u16
  if (data?.Flags !== undefined) view.setUint16(8, Number(data.Flags), true);
  // 0x0a: u16
  if (data?.Level !== undefined) view.setUint16(10, Number(data.Level), true);
  // 0x0c: u32
  if (data?.AccessMask !== undefined) view.setUint32(12, Number(data.AccessMask), true);
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.AUDIT_OBJECT_TYPES (size: 16)
 */
export interface AUDIT_OBJECT_TYPES {
  /** u16 */
  Count: number;
  /** u16 */
  Flags: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAUDIT_OBJECT_TYPES = 16;

export function allocAUDIT_OBJECT_TYPES(data?: Partial<AUDIT_OBJECT_TYPES>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIT_OBJECT_TYPES);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Count !== undefined) view.setUint16(0, Number(data.Count), true);
  // 0x02: u16
  if (data?.Flags !== undefined) view.setUint16(2, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(8, data.pObjectTypes === null ? 0n : BigInt(util.toPointer(data.pObjectTypes)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.AUDIT_IP_ADDRESS (size: 8)
 */
export interface AUDIT_IP_ADDRESS {
  /** array */
  pIpAddress: Deno.PointerValue | null;
}

export const sizeofAUDIT_IP_ADDRESS = 8;

export function allocAUDIT_IP_ADDRESS(data?: Partial<AUDIT_IP_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIT_IP_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(0, data.pIpAddress === null ? 0n : BigInt(util.toPointer(data.pIpAddress)), true);
  return buf;
}

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null;
  /** usize */
  u: Deno.PointerValue;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, BigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, BigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : BigInt(util.toPointer(data.psid)), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : BigInt(util.toPointer(data.pguid)), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : BigInt(util.toPointer(data.pObjectTypes)), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : BigInt(util.toPointer(data.pIpAddress)), true);
  return buf;
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: Deno.PointerValue;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, BigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.AUDIT_PARAM (size: 32)
 */
export interface AUDIT_PARAM {
  /** Windows.Win32.Security.Authorization.AUDIT_PARAM_TYPE */
  Type: AUDIT_PARAM_TYPE;
  /** u32 */
  Length: number;
  /** u32 */
  Flags: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUDIT_PARAM = 32;

export function allocAUDIT_PARAM(data?: Partial<AUDIT_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIT_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(16, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.AUDIT_PARAMS (size: 24)
 */
export interface AUDIT_PARAMS {
  /** u32 */
  Length: number;
  /** u32 */
  Flags: number;
  /** u16 */
  Count: number;
  /** ptr */
  Parameters: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAUDIT_PARAMS = 24;

export function allocAUDIT_PARAMS(data?: Partial<AUDIT_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIT_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u16
  if (data?.Count !== undefined) view.setUint16(8, Number(data.Count), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(16, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.AUTHZ_AUDIT_EVENT_TYPE_LEGACY (size: 8)
 */
export interface AUTHZ_AUDIT_EVENT_TYPE_LEGACY {
  /** u16 */
  CategoryId: number;
  /** u16 */
  AuditId: number;
  /** u16 */
  ParameterCount: number;
}

export const sizeofAUTHZ_AUDIT_EVENT_TYPE_LEGACY = 8;

export function allocAUTHZ_AUDIT_EVENT_TYPE_LEGACY(data?: Partial<AUTHZ_AUDIT_EVENT_TYPE_LEGACY>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_AUDIT_EVENT_TYPE_LEGACY);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.CategoryId !== undefined) view.setUint16(0, Number(data.CategoryId), true);
  // 0x02: u16
  if (data?.AuditId !== undefined) view.setUint16(2, Number(data.AuditId), true);
  // 0x04: u16
  if (data?.ParameterCount !== undefined) view.setUint16(4, Number(data.ParameterCount), true);
  // 0x06: pad2
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.AUTHZ_AUDIT_EVENT_TYPE_UNION (size: 8)
 */
export interface AUTHZ_AUDIT_EVENT_TYPE_UNION {
  /** Windows.Win32.Security.Authorization.AUTHZ_AUDIT_EVENT_TYPE_LEGACY */
  Legacy: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUTHZ_AUDIT_EVENT_TYPE_UNION = 8;

export function allocAUTHZ_AUDIT_EVENT_TYPE_UNION(data?: Partial<AUTHZ_AUDIT_EVENT_TYPE_UNION>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_AUDIT_EVENT_TYPE_UNION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Legacy !== undefined) view.setBigUint64(0, data.Legacy === null ? 0n : BigInt(util.toPointer(data.Legacy)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.LUID (size: 8)
 */
export interface LUID {
  /** u32 */
  LowPart: number;
  /** i32 */
  HighPart: number;
}

export const sizeofLUID = 8;

export function allocLUID(data?: Partial<LUID>): Uint8Array {
  const buf = new Uint8Array(sizeofLUID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LowPart !== undefined) view.setUint32(0, Number(data.LowPart), true);
  // 0x04: i32
  if (data?.HighPart !== undefined) view.setInt32(4, Number(data.HighPart), true);
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.AUTHZ_AUDIT_EVENT_TYPE_OLD (size: 40)
 */
export interface AUTHZ_AUDIT_EVENT_TYPE_OLD {
  /** u32 */
  Version: number;
  /** u32 */
  dwFlags: number;
  /** i32 */
  RefCount: number;
  /** usize */
  hAudit: Deno.PointerValue;
  /** Windows.Win32.Foundation.LUID */
  LinkId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authorization.AUTHZ_AUDIT_EVENT_TYPE_UNION */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUTHZ_AUDIT_EVENT_TYPE_OLD = 40;

export function allocAUTHZ_AUDIT_EVENT_TYPE_OLD(data?: Partial<AUTHZ_AUDIT_EVENT_TYPE_OLD>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_AUDIT_EVENT_TYPE_OLD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: i32
  if (data?.RefCount !== undefined) view.setInt32(8, Number(data.RefCount), true);
  // 0x0c: pad4
  // 0x10: usize
  if (data?.hAudit !== undefined) view.setBigUint64(16, BigInt(data.hAudit), true);
  // 0x18: pointer
  if (data?.LinkId !== undefined) view.setBigUint64(24, data.LinkId === null ? 0n : BigInt(util.toPointer(data.LinkId)), true);
  // 0x20: pointer
  if (data?.u !== undefined) view.setBigUint64(32, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__ (size: 8)
 */
export interface AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__ {
  /** i32 */
  unused: number;
}

export const sizeofAUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__ = 8;

export function allocAUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__(data?: Partial<AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.unused !== undefined) view.setInt32(0, Number(data.unused), true);
  // 0x04: pad4
  return buf;
}

export type PSID = Deno.PointerValue;

/**
 * Windows.Win32.Security.Authorization.AUTHZ_ACCESS_REQUEST (size: 40)
 */
export interface AUTHZ_ACCESS_REQUEST {
  /** u32 */
  DesiredAccess: number;
  /** Windows.Win32.Foundation.PSID */
  PrincipalSelfSid: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  ObjectTypeList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ObjectTypeListLength: number;
  /** ptr */
  OptionalArguments: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAUTHZ_ACCESS_REQUEST = 40;

export function allocAUTHZ_ACCESS_REQUEST(data?: Partial<AUTHZ_ACCESS_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_ACCESS_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DesiredAccess !== undefined) view.setUint32(0, Number(data.DesiredAccess), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.PrincipalSelfSid !== undefined) view.setBigUint64(8, data.PrincipalSelfSid === null ? 0n : BigInt(util.toPointer(data.PrincipalSelfSid)), true);
  // 0x10: pointer
  if (data?.ObjectTypeList !== undefined) view.setBigUint64(16, data.ObjectTypeList === null ? 0n : BigInt(util.toPointer(data.ObjectTypeList)), true);
  // 0x18: u32
  if (data?.ObjectTypeListLength !== undefined) view.setUint32(24, Number(data.ObjectTypeListLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.OptionalArguments !== undefined) view.setBigUint64(32, data.OptionalArguments === null ? 0n : BigInt(util.toPointer(data.OptionalArguments)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.AUTHZ_ACCESS_REPLY (size: 32)
 */
export interface AUTHZ_ACCESS_REPLY {
  /** u32 */
  ResultListLength: number;
  /** ptr */
  GrantedAccessMask: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  SaclEvaluationResults: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Error: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAUTHZ_ACCESS_REPLY = 32;

export function allocAUTHZ_ACCESS_REPLY(data?: Partial<AUTHZ_ACCESS_REPLY>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_ACCESS_REPLY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ResultListLength !== undefined) view.setUint32(0, Number(data.ResultListLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.GrantedAccessMask !== undefined) view.setBigUint64(8, data.GrantedAccessMask === null ? 0n : BigInt(util.toPointer(data.GrantedAccessMask)), true);
  // 0x10: pointer
  if (data?.SaclEvaluationResults !== undefined) view.setBigUint64(16, data.SaclEvaluationResults === null ? 0n : BigInt(util.toPointer(data.SaclEvaluationResults)), true);
  // 0x18: pointer
  if (data?.Error !== undefined) view.setBigUint64(24, data.Error === null ? 0n : BigInt(util.toPointer(data.Error)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.AUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE (size: 16)
 */
export interface AUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE {
  /** u64 */
  Version: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pName: string | null;
}

export const sizeofAUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE = 16;

export function allocAUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE(data?: Partial<AUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Version !== undefined) view.setBigUint64(0, BigInt(data.Version), true);
  // 0x08: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.AUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE (size: 16)
 */
export interface AUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {
  /** ptr */
  pValue: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ValueLength: number;
}

export const sizeofAUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = 16;

export function allocAUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE(data?: Partial<AUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pValue !== undefined) view.setBigUint64(0, data.pValue === null ? 0n : BigInt(util.toPointer(data.pValue)), true);
  // 0x08: u32
  if (data?.ValueLength !== undefined) view.setUint32(8, Number(data.ValueLength), true);
  // 0x0c: pad4
  return buf;
}

/**
 * _Values_e__Union (size: 40)
 */
export interface _Values_e__Union {
  /** ptr */
  pInt64: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pUint64: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ppString: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pFqbn: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pOctetString: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_Values_e__Union = 40;

export function alloc_Values_e__Union(data?: Partial<_Values_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Values_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pInt64 !== undefined) view.setBigUint64(0, data.pInt64 === null ? 0n : BigInt(util.toPointer(data.pInt64)), true);
  // 0x08: pointer
  if (data?.pUint64 !== undefined) view.setBigUint64(8, data.pUint64 === null ? 0n : BigInt(util.toPointer(data.pUint64)), true);
  // 0x10: pointer
  if (data?.ppString !== undefined) view.setBigUint64(16, data.ppString === null ? 0n : BigInt(util.toPointer(data.ppString)), true);
  // 0x18: pointer
  if (data?.pFqbn !== undefined) view.setBigUint64(24, data.pFqbn === null ? 0n : BigInt(util.toPointer(data.pFqbn)), true);
  // 0x20: pointer
  if (data?.pOctetString !== undefined) view.setBigUint64(32, data.pOctetString === null ? 0n : BigInt(util.toPointer(data.pOctetString)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.AUTHZ_SECURITY_ATTRIBUTE_V1 (size: 32)
 */
export interface AUTHZ_SECURITY_ATTRIBUTE_V1 {
  /** Windows.Win32.Foundation.PWSTR */
  pName: string | null;
  /** u16 */
  ValueType: number;
  /** u16 */
  Reserved: number;
  /** Windows.Win32.Security.Authorization.AUTHZ_SECURITY_ATTRIBUTE_FLAGS */
  Flags: AUTHZ_SECURITY_ATTRIBUTE_FLAGS;
  /** u32 */
  ValueCount: number;
  /** _Values_e__Union */
  Values: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUTHZ_SECURITY_ATTRIBUTE_V1 = 32;

export function allocAUTHZ_SECURITY_ATTRIBUTE_V1(data?: Partial<AUTHZ_SECURITY_ATTRIBUTE_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_SECURITY_ATTRIBUTE_V1);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.ValueType !== undefined) view.setUint16(8, Number(data.ValueType), true);
  // 0x0a: u16
  if (data?.Reserved !== undefined) view.setUint16(10, Number(data.Reserved), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.ValueCount !== undefined) view.setUint32(16, Number(data.ValueCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Values !== undefined) view.setBigUint64(24, data.Values === null ? 0n : BigInt(util.toPointer(data.Values)), true);
  return buf;
}

/**
 * _Attribute_e__Union (size: 8)
 */
export interface _Attribute_e__Union {
  /** ptr */
  pAttributeV1: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_Attribute_e__Union = 8;

export function alloc_Attribute_e__Union(data?: Partial<_Attribute_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Attribute_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pAttributeV1 !== undefined) view.setBigUint64(0, data.pAttributeV1 === null ? 0n : BigInt(util.toPointer(data.pAttributeV1)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.AUTHZ_SECURITY_ATTRIBUTES_INFORMATION (size: 16)
 */
export interface AUTHZ_SECURITY_ATTRIBUTES_INFORMATION {
  /** u16 */
  Version: number;
  /** u16 */
  Reserved: number;
  /** u32 */
  AttributeCount: number;
  /** _Attribute_e__Union */
  Attribute: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUTHZ_SECURITY_ATTRIBUTES_INFORMATION = 16;

export function allocAUTHZ_SECURITY_ATTRIBUTES_INFORMATION(data?: Partial<AUTHZ_SECURITY_ATTRIBUTES_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_SECURITY_ATTRIBUTES_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Version !== undefined) view.setUint16(0, Number(data.Version), true);
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: u32
  if (data?.AttributeCount !== undefined) view.setUint32(4, Number(data.AttributeCount), true);
  // 0x08: pointer
  if (data?.Attribute !== undefined) view.setBigUint64(8, data.Attribute === null ? 0n : BigInt(util.toPointer(data.Attribute)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.AUTHZ_RPC_INIT_INFO_CLIENT (size: 56)
 */
export interface AUTHZ_RPC_INIT_INFO_CLIENT {
  /** u16 */
  version: number;
  /** Windows.Win32.Foundation.PWSTR */
  ObjectUuid: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  ProtSeq: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  NetworkAddr: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Endpoint: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Options: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  ServerSpn: string | null;
}

export const sizeofAUTHZ_RPC_INIT_INFO_CLIENT = 56;

export function allocAUTHZ_RPC_INIT_INFO_CLIENT(data?: Partial<AUTHZ_RPC_INIT_INFO_CLIENT>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_RPC_INIT_INFO_CLIENT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.version !== undefined) view.setUint16(0, Number(data.version), true);
  // 0x02: pad6
  // 0x08: buffer
  if (data?.ObjectUuid !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ObjectUuid);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.ProtSeq !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.ProtSeq);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.NetworkAddr !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.NetworkAddr);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.Endpoint !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.Endpoint);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.Options !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.Options);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.ServerSpn !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.ServerSpn);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.AUTHZ_INIT_INFO (size: 56)
 */
export interface AUTHZ_INIT_INFO {
  /** u16 */
  version: number;
  /** Windows.Win32.Foundation.PWSTR */
  szResourceManagerName: string | null;
  /** Windows.Win32.Security.Authorization.PFN_AUTHZ_DYNAMIC_ACCESS_CHECK */
  pfnDynamicAccessCheck: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authorization.PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS */
  pfnComputeDynamicGroups: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authorization.PFN_AUTHZ_FREE_DYNAMIC_GROUPS */
  pfnFreeDynamicGroups: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authorization.PFN_AUTHZ_GET_CENTRAL_ACCESS_POLICY */
  pfnGetCentralAccessPolicy: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authorization.PFN_AUTHZ_FREE_CENTRAL_ACCESS_POLICY */
  pfnFreeCentralAccessPolicy: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUTHZ_INIT_INFO = 56;

export function allocAUTHZ_INIT_INFO(data?: Partial<AUTHZ_INIT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_INIT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.version !== undefined) view.setUint16(0, Number(data.version), true);
  // 0x02: pad6
  // 0x08: buffer
  if (data?.szResourceManagerName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szResourceManagerName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.pfnDynamicAccessCheck !== undefined) view.setBigUint64(16, data.pfnDynamicAccessCheck === null ? 0n : BigInt(util.toPointer(data.pfnDynamicAccessCheck)), true);
  // 0x18: pointer
  if (data?.pfnComputeDynamicGroups !== undefined) view.setBigUint64(24, data.pfnComputeDynamicGroups === null ? 0n : BigInt(util.toPointer(data.pfnComputeDynamicGroups)), true);
  // 0x20: pointer
  if (data?.pfnFreeDynamicGroups !== undefined) view.setBigUint64(32, data.pfnFreeDynamicGroups === null ? 0n : BigInt(util.toPointer(data.pfnFreeDynamicGroups)), true);
  // 0x28: pointer
  if (data?.pfnGetCentralAccessPolicy !== undefined) view.setBigUint64(40, data.pfnGetCentralAccessPolicy === null ? 0n : BigInt(util.toPointer(data.pfnGetCentralAccessPolicy)), true);
  // 0x30: pointer
  if (data?.pfnFreeCentralAccessPolicy !== undefined) view.setBigUint64(48, data.pfnFreeCentralAccessPolicy === null ? 0n : BigInt(util.toPointer(data.pfnFreeCentralAccessPolicy)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.AUTHZ_REGISTRATION_OBJECT_TYPE_NAME_OFFSET (size: 16)
 */
export interface AUTHZ_REGISTRATION_OBJECT_TYPE_NAME_OFFSET {
  /** Windows.Win32.Foundation.PWSTR */
  szObjectTypeName: string | null;
  /** u32 */
  dwOffset: number;
}

export const sizeofAUTHZ_REGISTRATION_OBJECT_TYPE_NAME_OFFSET = 16;

export function allocAUTHZ_REGISTRATION_OBJECT_TYPE_NAME_OFFSET(data?: Partial<AUTHZ_REGISTRATION_OBJECT_TYPE_NAME_OFFSET>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_REGISTRATION_OBJECT_TYPE_NAME_OFFSET);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szObjectTypeName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.szObjectTypeName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwOffset !== undefined) view.setUint32(8, Number(data.dwOffset), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.AUTHZ_SOURCE_SCHEMA_REGISTRATION (size: 72)
 */
export interface AUTHZ_SOURCE_SCHEMA_REGISTRATION {
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  szEventSourceName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  szEventMessageFile: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  szEventSourceXmlSchemaFile: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  szEventAccessStringsFile: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  szExecutableImagePath: string | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwObjectTypeNameCount: number;
  /** array */
  ObjectTypeNames: Deno.PointerValue | null;
}

export const sizeofAUTHZ_SOURCE_SCHEMA_REGISTRATION = 72;

export function allocAUTHZ_SOURCE_SCHEMA_REGISTRATION(data?: Partial<AUTHZ_SOURCE_SCHEMA_REGISTRATION>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_SOURCE_SCHEMA_REGISTRATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.szEventSourceName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szEventSourceName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.szEventMessageFile !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.szEventMessageFile);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.szEventSourceXmlSchemaFile !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.szEventSourceXmlSchemaFile);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.szEventAccessStringsFile !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.szEventAccessStringsFile);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.szExecutableImagePath !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.szExecutableImagePath);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(48, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x38: u32
  if (data?.dwObjectTypeNameCount !== undefined) view.setUint32(56, Number(data.dwObjectTypeNameCount), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.ObjectTypeNames !== undefined) view.setBigUint64(64, data.ObjectTypeNames === null ? 0n : BigInt(util.toPointer(data.ObjectTypeNames)), true);
  return buf;
}

export type HINSTANCE = Deno.PointerValue;

/**
 * Windows.Win32.Security.Authorization.UI.SI_OBJECT_INFO (size: 48)
 */
export interface SI_OBJECT_INFO {
  /** Windows.Win32.Security.Authorization.UI.SI_OBJECT_INFO_FLAGS */
  dwFlags: SI_OBJECT_INFO_FLAGS;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszServerName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszObjectName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszPageTitle: string | null;
  /** System.Guid */
  guidObjectType: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSI_OBJECT_INFO = 48;

export function allocSI_OBJECT_INFO(data?: Partial<SI_OBJECT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSI_OBJECT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(8, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x10: buffer
  if (data?.pszServerName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszServerName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszObjectName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszObjectName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pszPageTitle !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszPageTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.guidObjectType !== undefined) view.setBigUint64(40, data.guidObjectType === null ? 0n : BigInt(util.toPointer(data.guidObjectType)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.UI.SI_ACCESS (size: 32)
 */
export interface SI_ACCESS {
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  mask: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null;
  /** u32 */
  dwFlags: number;
}

export const sizeofSI_ACCESS = 32;

export function allocSI_ACCESS(data?: Partial<SI_ACCESS>): Uint8Array {
  const buf = new Uint8Array(sizeofSI_ACCESS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pguid !== undefined) view.setBigUint64(0, data.pguid === null ? 0n : BigInt(util.toPointer(data.pguid)), true);
  // 0x08: u32
  if (data?.mask !== undefined) view.setUint32(8, Number(data.mask), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.UI.SI_INHERIT_TYPE (size: 24)
 */
export interface SI_INHERIT_TYPE {
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.ACE_FLAGS */
  dwFlags: ACE_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null;
}

export const sizeofSI_INHERIT_TYPE = 24;

export function allocSI_INHERIT_TYPE(data?: Partial<SI_INHERIT_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofSI_INHERIT_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pguid !== undefined) view.setBigUint64(0, data.pguid === null ? 0n : BigInt(util.toPointer(data.pguid)), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.UI.SID_INFO (size: 32)
 */
export interface SID_INFO {
  /** Windows.Win32.Foundation.PSID */
  pSid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwzCommonName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwzClass: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwzUPN: string | null;
}

export const sizeofSID_INFO = 32;

export function allocSID_INFO(data?: Partial<SID_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSID_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pSid !== undefined) view.setBigUint64(0, data.pSid === null ? 0n : BigInt(util.toPointer(data.pSid)), true);
  // 0x08: buffer
  if (data?.pwzCommonName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwzCommonName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pwzClass !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwzClass);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pwzUPN !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwzUPN);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.UI.SID_INFO_LIST (size: 16)
 */
export interface SID_INFO_LIST {
  /** u32 */
  cItems: number;
  /** array */
  aSidInfo: Deno.PointerValue | null;
}

export const sizeofSID_INFO_LIST = 16;

export function allocSID_INFO_LIST(data?: Partial<SID_INFO_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofSID_INFO_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cItems !== undefined) view.setUint32(0, Number(data.cItems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.aSidInfo !== undefined) view.setBigUint64(8, data.aSidInfo === null ? 0n : BigInt(util.toPointer(data.aSidInfo)), true);
  return buf;
}

export type BOOLEAN = number;

/**
 * Windows.Win32.Security.Authorization.UI.SECURITY_OBJECT (size: 48)
 */
export interface SECURITY_OBJECT {
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbData: number;
  /** ptr */
  pData2: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbData2: number;
  /** u32 */
  Id: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  fWellKnown: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSECURITY_OBJECT = 48;

export function allocSECURITY_OBJECT(data?: Partial<SECURITY_OBJECT>): Uint8Array {
  const buf = new Uint8Array(sizeofSECURITY_OBJECT);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.pData !== undefined) view.setBigUint64(8, data.pData === null ? 0n : BigInt(util.toPointer(data.pData)), true);
  // 0x10: u32
  if (data?.cbData !== undefined) view.setUint32(16, Number(data.cbData), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pData2 !== undefined) view.setBigUint64(24, data.pData2 === null ? 0n : BigInt(util.toPointer(data.pData2)), true);
  // 0x20: u32
  if (data?.cbData2 !== undefined) view.setUint32(32, Number(data.cbData2), true);
  // 0x24: u32
  if (data?.Id !== undefined) view.setUint32(36, Number(data.Id), true);
  // 0x28: pointer
  if (data?.fWellKnown !== undefined) view.setBigUint64(40, data.fWellKnown === null ? 0n : BigInt(util.toPointer(data.fWellKnown)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Authorization.UI.EFFPERM_RESULT_LIST (size: 32)
 */
export interface EFFPERM_RESULT_LIST {
  /** Windows.Win32.Foundation.BOOLEAN */
  fEvaluated: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cObjectTypeListLength: number;
  /** ptr */
  pObjectTypeList: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pGrantedAccessList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEFFPERM_RESULT_LIST = 32;

export function allocEFFPERM_RESULT_LIST(data?: Partial<EFFPERM_RESULT_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofEFFPERM_RESULT_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fEvaluated !== undefined) view.setBigUint64(0, data.fEvaluated === null ? 0n : BigInt(util.toPointer(data.fEvaluated)), true);
  // 0x08: u32
  if (data?.cObjectTypeListLength !== undefined) view.setUint32(8, Number(data.cObjectTypeListLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pObjectTypeList !== undefined) view.setBigUint64(16, data.pObjectTypeList === null ? 0n : BigInt(util.toPointer(data.pObjectTypeList)), true);
  // 0x18: pointer
  if (data?.pGrantedAccessList !== undefined) view.setBigUint64(24, data.pGrantedAccessList === null ? 0n : BigInt(util.toPointer(data.pGrantedAccessList)), true);
  return buf;
}

export type AUTHZ_ACCESS_CHECK_RESULTS_HANDLE = Deno.PointerValue;

export type AUTHZ_CLIENT_CONTEXT_HANDLE = Deno.PointerValue;

export type AUTHZ_RESOURCE_MANAGER_HANDLE = Deno.PointerValue;

export type AUTHZ_AUDIT_EVENT_HANDLE = Deno.PointerValue;

export type AUTHZ_AUDIT_EVENT_TYPE_HANDLE = Deno.PointerValue;

export type AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE = Deno.PointerValue;

export type BOOL = number;

// Native Libraries

try {
  var libAUTHZ = Deno.dlopen("AUTHZ", {
    AuthzAccessCheck: {
      parameters: ["u32", "pointer", "pointer", "pointer", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    AuthzCachedAccessCheck: {
      parameters: ["u32", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    AuthzOpenObjectAudit: {
      parameters: ["u32", "pointer", "pointer", "pointer", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    AuthzFreeHandle: {
      parameters: ["pointer"],
      result: "i32",
    },
    AuthzInitializeResourceManager: {
      parameters: ["u32", "pointer", "pointer", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    AuthzInitializeResourceManagerEx: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    AuthzInitializeRemoteResourceManager: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    AuthzFreeResourceManager: {
      parameters: ["pointer"],
      result: "i32",
    },
    AuthzInitializeContextFromToken: {
      parameters: ["u32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    AuthzInitializeContextFromSid: {
      parameters: ["u32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    AuthzInitializeContextFromAuthzContext: {
      parameters: ["u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    AuthzInitializeCompoundContext: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    AuthzAddSidsToContext: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    AuthzModifySecurityAttributes: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    AuthzModifyClaims: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    AuthzModifySids: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    AuthzSetAppContainerInformation: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    AuthzGetInformationFromContext: {
      parameters: ["pointer", "i32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    AuthzFreeContext: {
      parameters: ["pointer"],
      result: "i32",
    },
    AuthzInitializeObjectAccessAuditEvent: {
      parameters: ["u32", "pointer", "buffer", "buffer", "buffer", "buffer", "pointer", "u32"],
      result: "i32",
    },
    AuthzInitializeObjectAccessAuditEvent2: {
      parameters: ["u32", "pointer", "buffer", "buffer", "buffer", "buffer", "buffer", "pointer", "u32"],
      result: "i32",
    },
    AuthzFreeAuditEvent: {
      parameters: ["pointer"],
      result: "i32",
    },
    AuthzEvaluateSacl: {
      parameters: ["pointer", "pointer", "pointer", "u32", "i32", "pointer"],
      result: "i32",
    },
    AuthzInstallSecurityEventSource: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    AuthzUninstallSecurityEventSource: {
      parameters: ["u32", "buffer"],
      result: "i32",
    },
    AuthzEnumerateSecurityEventSources: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    AuthzRegisterSecurityEventSource: {
      parameters: ["u32", "buffer", "pointer"],
      result: "i32",
    },
    AuthzUnregisterSecurityEventSource: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    AuthzReportSecurityEvent: {
      parameters: ["u32", "pointer", "u32", "pointer", "u32"],
      result: "i32",
    },
    AuthzReportSecurityEventFromParams: {
      parameters: ["u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    AuthzRegisterCapChangeNotification: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    AuthzUnregisterCapChangeNotification: {
      parameters: ["pointer"],
      result: "i32",
    },
    AuthzFreeCentralAccessPolicyCache: {
      parameters: [],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libADVAPI32 = Deno.dlopen("ADVAPI32", {
    SetEntriesInAclA: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    SetEntriesInAclW: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    GetExplicitEntriesFromAclA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    GetExplicitEntriesFromAclW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    GetEffectiveRightsFromAclA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    GetEffectiveRightsFromAclW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    GetAuditedPermissionsFromAclA: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    GetAuditedPermissionsFromAclW: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    GetNamedSecurityInfoA: {
      parameters: ["buffer", "i32", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    GetNamedSecurityInfoW: {
      parameters: ["buffer", "i32", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    GetSecurityInfo: {
      parameters: ["pointer", "i32", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    SetNamedSecurityInfoA: {
      parameters: ["buffer", "i32", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    SetNamedSecurityInfoW: {
      parameters: ["buffer", "i32", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    SetSecurityInfo: {
      parameters: ["pointer", "i32", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    GetInheritanceSourceA: {
      parameters: ["buffer", "i32", "u32", "i32", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    GetInheritanceSourceW: {
      parameters: ["buffer", "i32", "u32", "i32", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FreeInheritedFromArray: {
      parameters: ["pointer", "u16", "pointer"],
      result: "u32",
    },
    TreeResetNamedSecurityInfoA: {
      parameters: ["buffer", "i32", "u32", "pointer", "pointer", "pointer", "pointer", "i32", "pointer", "i32", "pointer"],
      result: "u32",
    },
    TreeResetNamedSecurityInfoW: {
      parameters: ["buffer", "i32", "u32", "pointer", "pointer", "pointer", "pointer", "i32", "pointer", "i32", "pointer"],
      result: "u32",
    },
    TreeSetNamedSecurityInfoA: {
      parameters: ["buffer", "i32", "u32", "pointer", "pointer", "pointer", "pointer", "u32", "pointer", "i32", "pointer"],
      result: "u32",
    },
    TreeSetNamedSecurityInfoW: {
      parameters: ["buffer", "i32", "u32", "pointer", "pointer", "pointer", "pointer", "u32", "pointer", "i32", "pointer"],
      result: "u32",
    },
    BuildSecurityDescriptorA: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    BuildSecurityDescriptorW: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    LookupSecurityDescriptorPartsA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    LookupSecurityDescriptorPartsW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    BuildExplicitAccessWithNameA: {
      parameters: ["pointer", "buffer", "u32", "i32", "u32"],
      result: "void",
    },
    BuildExplicitAccessWithNameW: {
      parameters: ["pointer", "buffer", "u32", "i32", "u32"],
      result: "void",
    },
    BuildImpersonateExplicitAccessWithNameA: {
      parameters: ["pointer", "buffer", "pointer", "u32", "i32", "u32"],
      result: "void",
    },
    BuildImpersonateExplicitAccessWithNameW: {
      parameters: ["pointer", "buffer", "pointer", "u32", "i32", "u32"],
      result: "void",
    },
    BuildTrusteeWithNameA: {
      parameters: ["pointer", "buffer"],
      result: "void",
    },
    BuildTrusteeWithNameW: {
      parameters: ["pointer", "buffer"],
      result: "void",
    },
    BuildImpersonateTrusteeA: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    BuildImpersonateTrusteeW: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    BuildTrusteeWithSidA: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    BuildTrusteeWithSidW: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    BuildTrusteeWithObjectsAndSidA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    BuildTrusteeWithObjectsAndSidW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    BuildTrusteeWithObjectsAndNameA: {
      parameters: ["pointer", "pointer", "i32", "buffer", "buffer", "buffer"],
      result: "void",
    },
    BuildTrusteeWithObjectsAndNameW: {
      parameters: ["pointer", "pointer", "i32", "buffer", "buffer", "buffer"],
      result: "void",
    },
    GetTrusteeNameA: {
      parameters: ["pointer"],
      result: "buffer",
    },
    GetTrusteeNameW: {
      parameters: ["pointer"],
      result: "buffer",
    },
    GetTrusteeTypeA: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetTrusteeTypeW: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetTrusteeFormA: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetTrusteeFormW: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetMultipleTrusteeOperationA: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetMultipleTrusteeOperationW: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetMultipleTrusteeA: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetMultipleTrusteeW: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ConvertSidToStringSidA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ConvertSidToStringSidW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ConvertStringSidToSidA: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    ConvertStringSidToSidW: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    ConvertStringSecurityDescriptorToSecurityDescriptorA: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    ConvertStringSecurityDescriptorToSecurityDescriptorW: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    ConvertSecurityDescriptorToStringSecurityDescriptorA: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    ConvertSecurityDescriptorToStringSecurityDescriptorW: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function AuthzAccessCheck(
  Flags: AUTHZ_ACCESS_CHECK_FLAGS /* Windows.Win32.Security.Authorization.AUTHZ_ACCESS_CHECK_FLAGS */,
  hAuthzClientContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.AUTHZ_CLIENT_CONTEXT_HANDLE */,
  pRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  hAuditEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.AUTHZ_AUDIT_EVENT_HANDLE */,
  pSecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  OptionalSecurityDescriptorArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  OptionalSecurityDescriptorCount: number /* u32 */,
  pReply: Deno.PointerValue | Uint8Array | null /* ptr */,
  phAccessCheckResults: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzAccessCheck(Flags, util.toPointer(hAuthzClientContext), util.toPointer(pRequest), util.toPointer(hAuditEvent), util.toPointer(pSecurityDescriptor), util.toPointer(OptionalSecurityDescriptorArray), OptionalSecurityDescriptorCount, util.toPointer(pReply), util.toPointer(phAccessCheckResults)));
}

export function AuthzCachedAccessCheck(
  Flags: number /* u32 */,
  hAccessCheckResults: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.AUTHZ_ACCESS_CHECK_RESULTS_HANDLE */,
  pRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  hAuditEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.AUTHZ_AUDIT_EVENT_HANDLE */,
  pReply: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzCachedAccessCheck(Flags, util.toPointer(hAccessCheckResults), util.toPointer(pRequest), util.toPointer(hAuditEvent), util.toPointer(pReply)));
}

export function AuthzOpenObjectAudit(
  Flags: number /* u32 */,
  hAuthzClientContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.AUTHZ_CLIENT_CONTEXT_HANDLE */,
  pRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  hAuditEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.AUTHZ_AUDIT_EVENT_HANDLE */,
  pSecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  OptionalSecurityDescriptorArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  OptionalSecurityDescriptorCount: number /* u32 */,
  pReply: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzOpenObjectAudit(Flags, util.toPointer(hAuthzClientContext), util.toPointer(pRequest), util.toPointer(hAuditEvent), util.toPointer(pSecurityDescriptor), util.toPointer(OptionalSecurityDescriptorArray), OptionalSecurityDescriptorCount, util.toPointer(pReply)));
}

export function AuthzFreeHandle(
  hAccessCheckResults: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.AUTHZ_ACCESS_CHECK_RESULTS_HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzFreeHandle(util.toPointer(hAccessCheckResults)));
}

export function AuthzInitializeResourceManager(
  Flags: number /* u32 */,
  pfnDynamicAccessCheck: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.PFN_AUTHZ_DYNAMIC_ACCESS_CHECK */,
  pfnComputeDynamicGroups: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS */,
  pfnFreeDynamicGroups: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.PFN_AUTHZ_FREE_DYNAMIC_GROUPS */,
  szResourceManagerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  phAuthzResourceManager: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzInitializeResourceManager(Flags, util.toPointer(pfnDynamicAccessCheck), util.toPointer(pfnComputeDynamicGroups), util.toPointer(pfnFreeDynamicGroups), util.pwstrToFfi(szResourceManagerName), util.toPointer(phAuthzResourceManager)));
}

export function AuthzInitializeResourceManagerEx(
  Flags: AUTHZ_RESOURCE_MANAGER_FLAGS /* Windows.Win32.Security.Authorization.AUTHZ_RESOURCE_MANAGER_FLAGS */,
  pAuthzInitInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  phAuthzResourceManager: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzInitializeResourceManagerEx(Flags, util.toPointer(pAuthzInitInfo), util.toPointer(phAuthzResourceManager)));
}

export function AuthzInitializeRemoteResourceManager(
  pRpcInitInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  phAuthzResourceManager: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzInitializeRemoteResourceManager(util.toPointer(pRpcInitInfo), util.toPointer(phAuthzResourceManager)));
}

export function AuthzFreeResourceManager(
  hAuthzResourceManager: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.AUTHZ_RESOURCE_MANAGER_HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzFreeResourceManager(util.toPointer(hAuthzResourceManager)));
}

export function AuthzInitializeContextFromToken(
  Flags: number /* u32 */,
  TokenHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hAuthzResourceManager: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.AUTHZ_RESOURCE_MANAGER_HANDLE */,
  pExpirationTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  Identifier: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LUID */,
  DynamicGroupArgs: Deno.PointerValue | Uint8Array | null /* ptr */,
  phAuthzClientContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzInitializeContextFromToken(Flags, util.toPointer(TokenHandle), util.toPointer(hAuthzResourceManager), util.toPointer(pExpirationTime), util.toPointer(Identifier), util.toPointer(DynamicGroupArgs), util.toPointer(phAuthzClientContext)));
}

export function AuthzInitializeContextFromSid(
  Flags: number /* u32 */,
  UserSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  hAuthzResourceManager: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.AUTHZ_RESOURCE_MANAGER_HANDLE */,
  pExpirationTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  Identifier: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LUID */,
  DynamicGroupArgs: Deno.PointerValue | Uint8Array | null /* ptr */,
  phAuthzClientContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzInitializeContextFromSid(Flags, util.toPointer(UserSid), util.toPointer(hAuthzResourceManager), util.toPointer(pExpirationTime), util.toPointer(Identifier), util.toPointer(DynamicGroupArgs), util.toPointer(phAuthzClientContext)));
}

export function AuthzInitializeContextFromAuthzContext(
  Flags: number /* u32 */,
  hAuthzClientContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.AUTHZ_CLIENT_CONTEXT_HANDLE */,
  pExpirationTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  Identifier: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LUID */,
  DynamicGroupArgs: Deno.PointerValue | Uint8Array | null /* ptr */,
  phNewAuthzClientContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzInitializeContextFromAuthzContext(Flags, util.toPointer(hAuthzClientContext), util.toPointer(pExpirationTime), util.toPointer(Identifier), util.toPointer(DynamicGroupArgs), util.toPointer(phNewAuthzClientContext)));
}

export function AuthzInitializeCompoundContext(
  UserContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.AUTHZ_CLIENT_CONTEXT_HANDLE */,
  DeviceContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.AUTHZ_CLIENT_CONTEXT_HANDLE */,
  phCompoundContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzInitializeCompoundContext(util.toPointer(UserContext), util.toPointer(DeviceContext), util.toPointer(phCompoundContext)));
}

export function AuthzAddSidsToContext(
  hAuthzClientContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.AUTHZ_CLIENT_CONTEXT_HANDLE */,
  Sids: Deno.PointerValue | Uint8Array | null /* ptr */,
  SidCount: number /* u32 */,
  RestrictedSids: Deno.PointerValue | Uint8Array | null /* ptr */,
  RestrictedSidCount: number /* u32 */,
  phNewAuthzClientContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzAddSidsToContext(util.toPointer(hAuthzClientContext), util.toPointer(Sids), SidCount, util.toPointer(RestrictedSids), RestrictedSidCount, util.toPointer(phNewAuthzClientContext)));
}

export function AuthzModifySecurityAttributes(
  hAuthzClientContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.AUTHZ_CLIENT_CONTEXT_HANDLE */,
  pOperations: Deno.PointerValue | Uint8Array | null /* ptr */,
  pAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzModifySecurityAttributes(util.toPointer(hAuthzClientContext), util.toPointer(pOperations), util.toPointer(pAttributes)));
}

export function AuthzModifyClaims(
  hAuthzClientContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.AUTHZ_CLIENT_CONTEXT_HANDLE */,
  ClaimClass: AUTHZ_CONTEXT_INFORMATION_CLASS /* Windows.Win32.Security.Authorization.AUTHZ_CONTEXT_INFORMATION_CLASS */,
  pClaimOperations: Deno.PointerValue | Uint8Array | null /* ptr */,
  pClaims: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzModifyClaims(util.toPointer(hAuthzClientContext), ClaimClass, util.toPointer(pClaimOperations), util.toPointer(pClaims)));
}

export function AuthzModifySids(
  hAuthzClientContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.AUTHZ_CLIENT_CONTEXT_HANDLE */,
  SidClass: AUTHZ_CONTEXT_INFORMATION_CLASS /* Windows.Win32.Security.Authorization.AUTHZ_CONTEXT_INFORMATION_CLASS */,
  pSidOperations: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSids: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzModifySids(util.toPointer(hAuthzClientContext), SidClass, util.toPointer(pSidOperations), util.toPointer(pSids)));
}

export function AuthzSetAppContainerInformation(
  hAuthzClientContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.AUTHZ_CLIENT_CONTEXT_HANDLE */,
  pAppContainerSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  CapabilityCount: number /* u32 */,
  pCapabilitySids: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzSetAppContainerInformation(util.toPointer(hAuthzClientContext), util.toPointer(pAppContainerSid), CapabilityCount, util.toPointer(pCapabilitySids)));
}

export function AuthzGetInformationFromContext(
  hAuthzClientContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.AUTHZ_CLIENT_CONTEXT_HANDLE */,
  InfoClass: AUTHZ_CONTEXT_INFORMATION_CLASS /* Windows.Win32.Security.Authorization.AUTHZ_CONTEXT_INFORMATION_CLASS */,
  BufferSize: number /* u32 */,
  pSizeRequired: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzGetInformationFromContext(util.toPointer(hAuthzClientContext), InfoClass, BufferSize, util.toPointer(pSizeRequired), util.toPointer(Buffer)));
}

export function AuthzFreeContext(
  hAuthzClientContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.AUTHZ_CLIENT_CONTEXT_HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzFreeContext(util.toPointer(hAuthzClientContext)));
}

export function AuthzInitializeObjectAccessAuditEvent(
  Flags: AUTHZ_INITIALIZE_OBJECT_ACCESS_AUDIT_EVENT_FLAGS /* Windows.Win32.Security.Authorization.AUTHZ_INITIALIZE_OBJECT_ACCESS_AUDIT_EVENT_FLAGS */,
  hAuditEventType: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.AUTHZ_AUDIT_EVENT_TYPE_HANDLE */,
  szOperationType: string | null /* Windows.Win32.Foundation.PWSTR */,
  szObjectType: string | null /* Windows.Win32.Foundation.PWSTR */,
  szObjectName: string | null /* Windows.Win32.Foundation.PWSTR */,
  szAdditionalInfo: string | null /* Windows.Win32.Foundation.PWSTR */,
  phAuditEvent: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAdditionalParameterCount: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzInitializeObjectAccessAuditEvent(Flags, util.toPointer(hAuditEventType), util.pwstrToFfi(szOperationType), util.pwstrToFfi(szObjectType), util.pwstrToFfi(szObjectName), util.pwstrToFfi(szAdditionalInfo), util.toPointer(phAuditEvent), dwAdditionalParameterCount));
}

export function AuthzInitializeObjectAccessAuditEvent2(
  Flags: number /* u32 */,
  hAuditEventType: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.AUTHZ_AUDIT_EVENT_TYPE_HANDLE */,
  szOperationType: string | null /* Windows.Win32.Foundation.PWSTR */,
  szObjectType: string | null /* Windows.Win32.Foundation.PWSTR */,
  szObjectName: string | null /* Windows.Win32.Foundation.PWSTR */,
  szAdditionalInfo: string | null /* Windows.Win32.Foundation.PWSTR */,
  szAdditionalInfo2: string | null /* Windows.Win32.Foundation.PWSTR */,
  phAuditEvent: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAdditionalParameterCount: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzInitializeObjectAccessAuditEvent2(Flags, util.toPointer(hAuditEventType), util.pwstrToFfi(szOperationType), util.pwstrToFfi(szObjectType), util.pwstrToFfi(szObjectName), util.pwstrToFfi(szAdditionalInfo), util.pwstrToFfi(szAdditionalInfo2), util.toPointer(phAuditEvent), dwAdditionalParameterCount));
}

export function AuthzFreeAuditEvent(
  hAuditEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.AUTHZ_AUDIT_EVENT_HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzFreeAuditEvent(util.toPointer(hAuditEvent)));
}

export function AuthzEvaluateSacl(
  AuthzClientContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.AUTHZ_CLIENT_CONTEXT_HANDLE */,
  pRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  Sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  GrantedAccess: number /* u32 */,
  AccessGranted: boolean /* Windows.Win32.Foundation.BOOL */,
  pbGenerateAudit: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzEvaluateSacl(util.toPointer(AuthzClientContext), util.toPointer(pRequest), util.toPointer(Sacl), GrantedAccess, util.boolToFfi(AccessGranted), util.toPointer(pbGenerateAudit)));
}

export function AuthzInstallSecurityEventSource(
  dwFlags: number /* u32 */,
  pRegistration: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzInstallSecurityEventSource(dwFlags, util.toPointer(pRegistration)));
}

export function AuthzUninstallSecurityEventSource(
  dwFlags: number /* u32 */,
  szEventSourceName: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzUninstallSecurityEventSource(dwFlags, util.pwstrToFfi(szEventSourceName)));
}

export function AuthzEnumerateSecurityEventSources(
  dwFlags: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzEnumerateSecurityEventSources(dwFlags, util.toPointer(Buffer), util.toPointer(pdwCount), util.toPointer(pdwLength)));
}

export function AuthzRegisterSecurityEventSource(
  dwFlags: number /* u32 */,
  szEventSourceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  phEventProvider: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzRegisterSecurityEventSource(dwFlags, util.pwstrToFfi(szEventSourceName), util.toPointer(phEventProvider)));
}

export function AuthzUnregisterSecurityEventSource(
  dwFlags: number /* u32 */,
  phEventProvider: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzUnregisterSecurityEventSource(dwFlags, util.toPointer(phEventProvider)));
}

export function AuthzReportSecurityEvent(
  dwFlags: number /* u32 */,
  hEventProvider: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE */,
  dwAuditId: number /* u32 */,
  pUserSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  dwCount: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzReportSecurityEvent(dwFlags, util.toPointer(hEventProvider), dwAuditId, util.toPointer(pUserSid), dwCount));
}

export function AuthzReportSecurityEventFromParams(
  dwFlags: number /* u32 */,
  hEventProvider: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE */,
  dwAuditId: number /* u32 */,
  pUserSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  pParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzReportSecurityEventFromParams(dwFlags, util.toPointer(hEventProvider), dwAuditId, util.toPointer(pUserSid), util.toPointer(pParams)));
}

export function AuthzRegisterCapChangeNotification(
  phCapChangeSubscription: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfnCapChangeCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */,
  pCallbackContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzRegisterCapChangeNotification(util.toPointer(phCapChangeSubscription), util.toPointer(pfnCapChangeCallback), util.toPointer(pCallbackContext)));
}

export function AuthzUnregisterCapChangeNotification(
  hCapChangeSubscription: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzUnregisterCapChangeNotification(util.toPointer(hCapChangeSubscription)));
}

export function AuthzFreeCentralAccessPolicyCache(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAUTHZ.AuthzFreeCentralAccessPolicyCache());
}

export function SetEntriesInAclA(
  cCountOfExplicitEntries: number /* u32 */,
  pListOfExplicitEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  OldAcl: Deno.PointerValue | Uint8Array | null /* ptr */,
  NewAcl: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.SetEntriesInAclA(cCountOfExplicitEntries, util.toPointer(pListOfExplicitEntries), util.toPointer(OldAcl), util.toPointer(NewAcl));
}

export function SetEntriesInAclW(
  cCountOfExplicitEntries: number /* u32 */,
  pListOfExplicitEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  OldAcl: Deno.PointerValue | Uint8Array | null /* ptr */,
  NewAcl: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.SetEntriesInAclW(cCountOfExplicitEntries, util.toPointer(pListOfExplicitEntries), util.toPointer(OldAcl), util.toPointer(NewAcl));
}

export function GetExplicitEntriesFromAclA(
  pacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcCountOfExplicitEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  pListOfExplicitEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.GetExplicitEntriesFromAclA(util.toPointer(pacl), util.toPointer(pcCountOfExplicitEntries), util.toPointer(pListOfExplicitEntries));
}

export function GetExplicitEntriesFromAclW(
  pacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcCountOfExplicitEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  pListOfExplicitEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.GetExplicitEntriesFromAclW(util.toPointer(pacl), util.toPointer(pcCountOfExplicitEntries), util.toPointer(pListOfExplicitEntries));
}

export function GetEffectiveRightsFromAclA(
  pacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
  pAccessRights: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.GetEffectiveRightsFromAclA(util.toPointer(pacl), util.toPointer(pTrustee), util.toPointer(pAccessRights));
}

export function GetEffectiveRightsFromAclW(
  pacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
  pAccessRights: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.GetEffectiveRightsFromAclW(util.toPointer(pacl), util.toPointer(pTrustee), util.toPointer(pAccessRights));
}

export function GetAuditedPermissionsFromAclA(
  pacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSuccessfulAuditedRights: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFailedAuditRights: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.GetAuditedPermissionsFromAclA(util.toPointer(pacl), util.toPointer(pTrustee), util.toPointer(pSuccessfulAuditedRights), util.toPointer(pFailedAuditRights));
}

export function GetAuditedPermissionsFromAclW(
  pacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSuccessfulAuditedRights: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFailedAuditRights: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.GetAuditedPermissionsFromAclW(util.toPointer(pacl), util.toPointer(pTrustee), util.toPointer(pSuccessfulAuditedRights), util.toPointer(pFailedAuditRights));
}

export function GetNamedSecurityInfoA(
  pObjectName: string | null /* Windows.Win32.Foundation.PSTR */,
  ObjectType: SE_OBJECT_TYPE /* Windows.Win32.Security.Authorization.SE_OBJECT_TYPE */,
  SecurityInfo: OBJECT_SECURITY_INFORMATION /* Windows.Win32.Security.OBJECT_SECURITY_INFORMATION */,
  ppsidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppsidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppDacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppSacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppSecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.GetNamedSecurityInfoA(util.pstrToFfi(pObjectName), ObjectType, SecurityInfo, util.toPointer(ppsidOwner), util.toPointer(ppsidGroup), util.toPointer(ppDacl), util.toPointer(ppSacl), util.toPointer(ppSecurityDescriptor));
}

export function GetNamedSecurityInfoW(
  pObjectName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ObjectType: SE_OBJECT_TYPE /* Windows.Win32.Security.Authorization.SE_OBJECT_TYPE */,
  SecurityInfo: OBJECT_SECURITY_INFORMATION /* Windows.Win32.Security.OBJECT_SECURITY_INFORMATION */,
  ppsidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppsidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppDacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppSacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppSecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.GetNamedSecurityInfoW(util.pwstrToFfi(pObjectName), ObjectType, SecurityInfo, util.toPointer(ppsidOwner), util.toPointer(ppsidGroup), util.toPointer(ppDacl), util.toPointer(ppSacl), util.toPointer(ppSecurityDescriptor));
}

export function GetSecurityInfo(
  handle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ObjectType: SE_OBJECT_TYPE /* Windows.Win32.Security.Authorization.SE_OBJECT_TYPE */,
  SecurityInfo: number /* u32 */,
  ppsidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppsidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppDacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppSacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppSecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.GetSecurityInfo(util.toPointer(handle), ObjectType, SecurityInfo, util.toPointer(ppsidOwner), util.toPointer(ppsidGroup), util.toPointer(ppDacl), util.toPointer(ppSacl), util.toPointer(ppSecurityDescriptor));
}

export function SetNamedSecurityInfoA(
  pObjectName: string | null /* Windows.Win32.Foundation.PSTR */,
  ObjectType: SE_OBJECT_TYPE /* Windows.Win32.Security.Authorization.SE_OBJECT_TYPE */,
  SecurityInfo: OBJECT_SECURITY_INFORMATION /* Windows.Win32.Security.OBJECT_SECURITY_INFORMATION */,
  psidOwner: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  psidGroup: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  pDacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSacl: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.SetNamedSecurityInfoA(util.pstrToFfi(pObjectName), ObjectType, SecurityInfo, util.toPointer(psidOwner), util.toPointer(psidGroup), util.toPointer(pDacl), util.toPointer(pSacl));
}

export function SetNamedSecurityInfoW(
  pObjectName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ObjectType: SE_OBJECT_TYPE /* Windows.Win32.Security.Authorization.SE_OBJECT_TYPE */,
  SecurityInfo: OBJECT_SECURITY_INFORMATION /* Windows.Win32.Security.OBJECT_SECURITY_INFORMATION */,
  psidOwner: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  psidGroup: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  pDacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSacl: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.SetNamedSecurityInfoW(util.pwstrToFfi(pObjectName), ObjectType, SecurityInfo, util.toPointer(psidOwner), util.toPointer(psidGroup), util.toPointer(pDacl), util.toPointer(pSacl));
}

export function SetSecurityInfo(
  handle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ObjectType: SE_OBJECT_TYPE /* Windows.Win32.Security.Authorization.SE_OBJECT_TYPE */,
  SecurityInfo: number /* u32 */,
  psidOwner: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  psidGroup: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  pDacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSacl: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.SetSecurityInfo(util.toPointer(handle), ObjectType, SecurityInfo, util.toPointer(psidOwner), util.toPointer(psidGroup), util.toPointer(pDacl), util.toPointer(pSacl));
}

export function GetInheritanceSourceA(
  pObjectName: string | null /* Windows.Win32.Foundation.PSTR */,
  ObjectType: SE_OBJECT_TYPE /* Windows.Win32.Security.Authorization.SE_OBJECT_TYPE */,
  SecurityInfo: number /* u32 */,
  Container: boolean /* Windows.Win32.Foundation.BOOL */,
  pObjectClassGuids: Deno.PointerValue | Uint8Array | null /* ptr */,
  GuidCount: number /* u32 */,
  pAcl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfnArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  pGenericMapping: Deno.PointerValue | Uint8Array | null /* ptr */,
  pInheritArray: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.GetInheritanceSourceA(util.pstrToFfi(pObjectName), ObjectType, SecurityInfo, util.boolToFfi(Container), util.toPointer(pObjectClassGuids), GuidCount, util.toPointer(pAcl), util.toPointer(pfnArray), util.toPointer(pGenericMapping), util.toPointer(pInheritArray));
}

export function GetInheritanceSourceW(
  pObjectName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ObjectType: SE_OBJECT_TYPE /* Windows.Win32.Security.Authorization.SE_OBJECT_TYPE */,
  SecurityInfo: number /* u32 */,
  Container: boolean /* Windows.Win32.Foundation.BOOL */,
  pObjectClassGuids: Deno.PointerValue | Uint8Array | null /* ptr */,
  GuidCount: number /* u32 */,
  pAcl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfnArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  pGenericMapping: Deno.PointerValue | Uint8Array | null /* ptr */,
  pInheritArray: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.GetInheritanceSourceW(util.pwstrToFfi(pObjectName), ObjectType, SecurityInfo, util.boolToFfi(Container), util.toPointer(pObjectClassGuids), GuidCount, util.toPointer(pAcl), util.toPointer(pfnArray), util.toPointer(pGenericMapping), util.toPointer(pInheritArray));
}

export function FreeInheritedFromArray(
  pInheritArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  AceCnt: number /* u16 */,
  pfnArray: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.FreeInheritedFromArray(util.toPointer(pInheritArray), AceCnt, util.toPointer(pfnArray));
}

export function TreeResetNamedSecurityInfoA(
  pObjectName: string | null /* Windows.Win32.Foundation.PSTR */,
  ObjectType: SE_OBJECT_TYPE /* Windows.Win32.Security.Authorization.SE_OBJECT_TYPE */,
  SecurityInfo: number /* u32 */,
  pOwner: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  pGroup: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  pDacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  KeepExplicit: boolean /* Windows.Win32.Foundation.BOOL */,
  fnProgress: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.FN_PROGRESS */,
  ProgressInvokeSetting: PROG_INVOKE_SETTING /* Windows.Win32.Security.Authorization.PROG_INVOKE_SETTING */,
  Args: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.TreeResetNamedSecurityInfoA(util.pstrToFfi(pObjectName), ObjectType, SecurityInfo, util.toPointer(pOwner), util.toPointer(pGroup), util.toPointer(pDacl), util.toPointer(pSacl), util.boolToFfi(KeepExplicit), util.toPointer(fnProgress), ProgressInvokeSetting, util.toPointer(Args));
}

export function TreeResetNamedSecurityInfoW(
  pObjectName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ObjectType: SE_OBJECT_TYPE /* Windows.Win32.Security.Authorization.SE_OBJECT_TYPE */,
  SecurityInfo: number /* u32 */,
  pOwner: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  pGroup: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  pDacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  KeepExplicit: boolean /* Windows.Win32.Foundation.BOOL */,
  fnProgress: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.FN_PROGRESS */,
  ProgressInvokeSetting: PROG_INVOKE_SETTING /* Windows.Win32.Security.Authorization.PROG_INVOKE_SETTING */,
  Args: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.TreeResetNamedSecurityInfoW(util.pwstrToFfi(pObjectName), ObjectType, SecurityInfo, util.toPointer(pOwner), util.toPointer(pGroup), util.toPointer(pDacl), util.toPointer(pSacl), util.boolToFfi(KeepExplicit), util.toPointer(fnProgress), ProgressInvokeSetting, util.toPointer(Args));
}

export function TreeSetNamedSecurityInfoA(
  pObjectName: string | null /* Windows.Win32.Foundation.PSTR */,
  ObjectType: SE_OBJECT_TYPE /* Windows.Win32.Security.Authorization.SE_OBJECT_TYPE */,
  SecurityInfo: number /* u32 */,
  pOwner: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  pGroup: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  pDacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAction: TREE_SEC_INFO /* Windows.Win32.Security.Authorization.TREE_SEC_INFO */,
  fnProgress: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.FN_PROGRESS */,
  ProgressInvokeSetting: PROG_INVOKE_SETTING /* Windows.Win32.Security.Authorization.PROG_INVOKE_SETTING */,
  Args: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.TreeSetNamedSecurityInfoA(util.pstrToFfi(pObjectName), ObjectType, SecurityInfo, util.toPointer(pOwner), util.toPointer(pGroup), util.toPointer(pDacl), util.toPointer(pSacl), dwAction, util.toPointer(fnProgress), ProgressInvokeSetting, util.toPointer(Args));
}

export function TreeSetNamedSecurityInfoW(
  pObjectName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ObjectType: SE_OBJECT_TYPE /* Windows.Win32.Security.Authorization.SE_OBJECT_TYPE */,
  SecurityInfo: number /* u32 */,
  pOwner: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  pGroup: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  pDacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAction: TREE_SEC_INFO /* Windows.Win32.Security.Authorization.TREE_SEC_INFO */,
  fnProgress: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Authorization.FN_PROGRESS */,
  ProgressInvokeSetting: PROG_INVOKE_SETTING /* Windows.Win32.Security.Authorization.PROG_INVOKE_SETTING */,
  Args: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.TreeSetNamedSecurityInfoW(util.pwstrToFfi(pObjectName), ObjectType, SecurityInfo, util.toPointer(pOwner), util.toPointer(pGroup), util.toPointer(pDacl), util.toPointer(pSacl), dwAction, util.toPointer(fnProgress), ProgressInvokeSetting, util.toPointer(Args));
}

export function BuildSecurityDescriptorA(
  pOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  pGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  cCountOfAccessEntries: number /* u32 */,
  pListOfAccessEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  cCountOfAuditEntries: number /* u32 */,
  pListOfAuditEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  pOldSD: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSizeNewSD: Deno.PointerValue | Uint8Array | null /* ptr */,
  pNewSD: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.BuildSecurityDescriptorA(util.toPointer(pOwner), util.toPointer(pGroup), cCountOfAccessEntries, util.toPointer(pListOfAccessEntries), cCountOfAuditEntries, util.toPointer(pListOfAuditEntries), util.toPointer(pOldSD), util.toPointer(pSizeNewSD), util.toPointer(pNewSD));
}

export function BuildSecurityDescriptorW(
  pOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  pGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  cCountOfAccessEntries: number /* u32 */,
  pListOfAccessEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  cCountOfAuditEntries: number /* u32 */,
  pListOfAuditEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  pOldSD: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSizeNewSD: Deno.PointerValue | Uint8Array | null /* ptr */,
  pNewSD: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.BuildSecurityDescriptorW(util.toPointer(pOwner), util.toPointer(pGroup), cCountOfAccessEntries, util.toPointer(pListOfAccessEntries), cCountOfAuditEntries, util.toPointer(pListOfAuditEntries), util.toPointer(pOldSD), util.toPointer(pSizeNewSD), util.toPointer(pNewSD));
}

export function LookupSecurityDescriptorPartsA(
  ppOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcCountOfAccessEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppListOfAccessEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcCountOfAuditEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppListOfAuditEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSD: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.LookupSecurityDescriptorPartsA(util.toPointer(ppOwner), util.toPointer(ppGroup), util.toPointer(pcCountOfAccessEntries), util.toPointer(ppListOfAccessEntries), util.toPointer(pcCountOfAuditEntries), util.toPointer(ppListOfAuditEntries), util.toPointer(pSD));
}

export function LookupSecurityDescriptorPartsW(
  ppOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcCountOfAccessEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppListOfAccessEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcCountOfAuditEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppListOfAuditEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSD: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.LookupSecurityDescriptorPartsW(util.toPointer(ppOwner), util.toPointer(ppGroup), util.toPointer(pcCountOfAccessEntries), util.toPointer(ppListOfAccessEntries), util.toPointer(pcCountOfAuditEntries), util.toPointer(ppListOfAuditEntries), util.toPointer(pSD));
}

export function BuildExplicitAccessWithNameA(
  pExplicitAccess: Deno.PointerValue | Uint8Array | null /* ptr */,
  pTrusteeName: string | null /* Windows.Win32.Foundation.PSTR */,
  AccessPermissions: number /* u32 */,
  AccessMode: ACCESS_MODE /* Windows.Win32.Security.Authorization.ACCESS_MODE */,
  Inheritance: ACE_FLAGS /* Windows.Win32.Security.ACE_FLAGS */,
): void /* void */ {
  return libADVAPI32.BuildExplicitAccessWithNameA(util.toPointer(pExplicitAccess), util.pstrToFfi(pTrusteeName), AccessPermissions, AccessMode, Inheritance);
}

export function BuildExplicitAccessWithNameW(
  pExplicitAccess: Deno.PointerValue | Uint8Array | null /* ptr */,
  pTrusteeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  AccessPermissions: number /* u32 */,
  AccessMode: ACCESS_MODE /* Windows.Win32.Security.Authorization.ACCESS_MODE */,
  Inheritance: ACE_FLAGS /* Windows.Win32.Security.ACE_FLAGS */,
): void /* void */ {
  return libADVAPI32.BuildExplicitAccessWithNameW(util.toPointer(pExplicitAccess), util.pwstrToFfi(pTrusteeName), AccessPermissions, AccessMode, Inheritance);
}

export function BuildImpersonateExplicitAccessWithNameA(
  pExplicitAccess: Deno.PointerValue | Uint8Array | null /* ptr */,
  pTrusteeName: string | null /* Windows.Win32.Foundation.PSTR */,
  pTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
  AccessPermissions: number /* u32 */,
  AccessMode: ACCESS_MODE /* Windows.Win32.Security.Authorization.ACCESS_MODE */,
  Inheritance: number /* u32 */,
): void /* void */ {
  return libADVAPI32.BuildImpersonateExplicitAccessWithNameA(util.toPointer(pExplicitAccess), util.pstrToFfi(pTrusteeName), util.toPointer(pTrustee), AccessPermissions, AccessMode, Inheritance);
}

export function BuildImpersonateExplicitAccessWithNameW(
  pExplicitAccess: Deno.PointerValue | Uint8Array | null /* ptr */,
  pTrusteeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
  AccessPermissions: number /* u32 */,
  AccessMode: ACCESS_MODE /* Windows.Win32.Security.Authorization.ACCESS_MODE */,
  Inheritance: number /* u32 */,
): void /* void */ {
  return libADVAPI32.BuildImpersonateExplicitAccessWithNameW(util.toPointer(pExplicitAccess), util.pwstrToFfi(pTrusteeName), util.toPointer(pTrustee), AccessPermissions, AccessMode, Inheritance);
}

export function BuildTrusteeWithNameA(
  pTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
  pName: string | null /* Windows.Win32.Foundation.PSTR */,
): void /* void */ {
  return libADVAPI32.BuildTrusteeWithNameA(util.toPointer(pTrustee), util.pstrToFfi(pName));
}

export function BuildTrusteeWithNameW(
  pTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
  pName: string | null /* Windows.Win32.Foundation.PWSTR */,
): void /* void */ {
  return libADVAPI32.BuildTrusteeWithNameW(util.toPointer(pTrustee), util.pwstrToFfi(pName));
}

export function BuildImpersonateTrusteeA(
  pTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
  pImpersonateTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libADVAPI32.BuildImpersonateTrusteeA(util.toPointer(pTrustee), util.toPointer(pImpersonateTrustee));
}

export function BuildImpersonateTrusteeW(
  pTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
  pImpersonateTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libADVAPI32.BuildImpersonateTrusteeW(util.toPointer(pTrustee), util.toPointer(pImpersonateTrustee));
}

export function BuildTrusteeWithSidA(
  pTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
): void /* void */ {
  return libADVAPI32.BuildTrusteeWithSidA(util.toPointer(pTrustee), util.toPointer(pSid));
}

export function BuildTrusteeWithSidW(
  pTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
): void /* void */ {
  return libADVAPI32.BuildTrusteeWithSidW(util.toPointer(pTrustee), util.toPointer(pSid));
}

export function BuildTrusteeWithObjectsAndSidA(
  pTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
  pObjSid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pObjectGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pInheritedObjectGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
): void /* void */ {
  return libADVAPI32.BuildTrusteeWithObjectsAndSidA(util.toPointer(pTrustee), util.toPointer(pObjSid), util.toPointer(pObjectGuid), util.toPointer(pInheritedObjectGuid), util.toPointer(pSid));
}

export function BuildTrusteeWithObjectsAndSidW(
  pTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
  pObjSid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pObjectGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pInheritedObjectGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
): void /* void */ {
  return libADVAPI32.BuildTrusteeWithObjectsAndSidW(util.toPointer(pTrustee), util.toPointer(pObjSid), util.toPointer(pObjectGuid), util.toPointer(pInheritedObjectGuid), util.toPointer(pSid));
}

export function BuildTrusteeWithObjectsAndNameA(
  pTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
  pObjName: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectType: SE_OBJECT_TYPE /* Windows.Win32.Security.Authorization.SE_OBJECT_TYPE */,
  ObjectTypeName: string | null /* Windows.Win32.Foundation.PSTR */,
  InheritedObjectTypeName: string | null /* Windows.Win32.Foundation.PSTR */,
  Name: string | null /* Windows.Win32.Foundation.PSTR */,
): void /* void */ {
  return libADVAPI32.BuildTrusteeWithObjectsAndNameA(util.toPointer(pTrustee), util.toPointer(pObjName), ObjectType, util.pstrToFfi(ObjectTypeName), util.pstrToFfi(InheritedObjectTypeName), util.pstrToFfi(Name));
}

export function BuildTrusteeWithObjectsAndNameW(
  pTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
  pObjName: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectType: SE_OBJECT_TYPE /* Windows.Win32.Security.Authorization.SE_OBJECT_TYPE */,
  ObjectTypeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  InheritedObjectTypeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Name: string | null /* Windows.Win32.Foundation.PWSTR */,
): void /* void */ {
  return libADVAPI32.BuildTrusteeWithObjectsAndNameW(util.toPointer(pTrustee), util.toPointer(pObjName), ObjectType, util.pwstrToFfi(ObjectTypeName), util.pwstrToFfi(InheritedObjectTypeName), util.pwstrToFfi(Name));
}

export function GetTrusteeNameA(
  pTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libADVAPI32.GetTrusteeNameA(util.toPointer(pTrustee)));
}

export function GetTrusteeNameW(
  pTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libADVAPI32.GetTrusteeNameW(util.toPointer(pTrustee)));
}

export function GetTrusteeTypeA(
  pTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
): TRUSTEE_TYPE /* Windows.Win32.Security.Authorization.TRUSTEE_TYPE */ {
  return libADVAPI32.GetTrusteeTypeA(util.toPointer(pTrustee));
}

export function GetTrusteeTypeW(
  pTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
): TRUSTEE_TYPE /* Windows.Win32.Security.Authorization.TRUSTEE_TYPE */ {
  return libADVAPI32.GetTrusteeTypeW(util.toPointer(pTrustee));
}

export function GetTrusteeFormA(
  pTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
): TRUSTEE_FORM /* Windows.Win32.Security.Authorization.TRUSTEE_FORM */ {
  return libADVAPI32.GetTrusteeFormA(util.toPointer(pTrustee));
}

export function GetTrusteeFormW(
  pTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
): TRUSTEE_FORM /* Windows.Win32.Security.Authorization.TRUSTEE_FORM */ {
  return libADVAPI32.GetTrusteeFormW(util.toPointer(pTrustee));
}

export function GetMultipleTrusteeOperationA(
  pTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
): MULTIPLE_TRUSTEE_OPERATION /* Windows.Win32.Security.Authorization.MULTIPLE_TRUSTEE_OPERATION */ {
  return libADVAPI32.GetMultipleTrusteeOperationA(util.toPointer(pTrustee));
}

export function GetMultipleTrusteeOperationW(
  pTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
): MULTIPLE_TRUSTEE_OPERATION /* Windows.Win32.Security.Authorization.MULTIPLE_TRUSTEE_OPERATION */ {
  return libADVAPI32.GetMultipleTrusteeOperationW(util.toPointer(pTrustee));
}

export function GetMultipleTrusteeA(
  pTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libADVAPI32.GetMultipleTrusteeA(util.toPointer(pTrustee)));
}

export function GetMultipleTrusteeW(
  pTrustee: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libADVAPI32.GetMultipleTrusteeW(util.toPointer(pTrustee)));
}

export function ConvertSidToStringSidA(
  Sid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  StringSid: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32.ConvertSidToStringSidA(util.toPointer(Sid), util.toPointer(StringSid)));
}

export function ConvertSidToStringSidW(
  Sid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  StringSid: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32.ConvertSidToStringSidW(util.toPointer(Sid), util.toPointer(StringSid)));
}

export function ConvertStringSidToSidA(
  StringSid: string | null /* Windows.Win32.Foundation.PSTR */,
  Sid: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32.ConvertStringSidToSidA(util.pstrToFfi(StringSid), util.toPointer(Sid)));
}

export function ConvertStringSidToSidW(
  StringSid: string | null /* Windows.Win32.Foundation.PWSTR */,
  Sid: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32.ConvertStringSidToSidW(util.pwstrToFfi(StringSid), util.toPointer(Sid)));
}

export function ConvertStringSecurityDescriptorToSecurityDescriptorA(
  StringSecurityDescriptor: string | null /* Windows.Win32.Foundation.PSTR */,
  StringSDRevision: number /* u32 */,
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  SecurityDescriptorSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32.ConvertStringSecurityDescriptorToSecurityDescriptorA(util.pstrToFfi(StringSecurityDescriptor), StringSDRevision, util.toPointer(SecurityDescriptor), util.toPointer(SecurityDescriptorSize)));
}

export function ConvertStringSecurityDescriptorToSecurityDescriptorW(
  StringSecurityDescriptor: string | null /* Windows.Win32.Foundation.PWSTR */,
  StringSDRevision: number /* u32 */,
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  SecurityDescriptorSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32.ConvertStringSecurityDescriptorToSecurityDescriptorW(util.pwstrToFfi(StringSecurityDescriptor), StringSDRevision, util.toPointer(SecurityDescriptor), util.toPointer(SecurityDescriptorSize)));
}

export function ConvertSecurityDescriptorToStringSecurityDescriptorA(
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  RequestedStringSDRevision: number /* u32 */,
  SecurityInformation: number /* u32 */,
  StringSecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  StringSecurityDescriptorLen: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32.ConvertSecurityDescriptorToStringSecurityDescriptorA(util.toPointer(SecurityDescriptor), RequestedStringSDRevision, SecurityInformation, util.toPointer(StringSecurityDescriptor), util.toPointer(StringSecurityDescriptorLen)));
}

export function ConvertSecurityDescriptorToStringSecurityDescriptorW(
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  RequestedStringSDRevision: number /* u32 */,
  SecurityInformation: number /* u32 */,
  StringSecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  StringSecurityDescriptorLen: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32.ConvertSecurityDescriptorToStringSecurityDescriptorW(util.toPointer(SecurityDescriptor), RequestedStringSDRevision, SecurityInformation, util.toPointer(StringSecurityDescriptor), util.toPointer(StringSecurityDescriptorLen)));
}

