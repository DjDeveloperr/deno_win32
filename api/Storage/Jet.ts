/// Auto-generated by Deno Win32: Windows.Win32.Storage.Jet.Apis

import * as util from "../../util.ts";

// Enums
export type JET_RELOP = number;
export type JET_ERRCAT = number;
export type JET_INDEXCHECKING = number;

// Constants
export const JET_VERSION = 1280;
export const JET_wszConfigStoreReadControl = `CsReadControl`;
export const JET_bitConfigStoreReadControlInhibitRead = 1;
export const JET_bitConfigStoreReadControlDisableAll = 2;
export const JET_bitConfigStoreReadControlDefault = 0;
export const JET_wszConfigStoreRelPathSysParamDefault = `SysParamDefault`;
export const JET_wszConfigStoreRelPathSysParamOverride = `SysParamOverride`;
export const JET_bitDefragmentBatchStart = 1;
export const JET_bitDefragmentBatchStop = 2;
export const JET_bitDefragmentAvailSpaceTreesOnly = 64;
export const JET_bitDefragmentNoPartialMerges = 128;
export const JET_bitDefragmentBTree = 256;
export const JET_cbtypNull = 0;
export const JET_cbtypFinalize = 1;
export const JET_cbtypBeforeInsert = 2;
export const JET_cbtypAfterInsert = 4;
export const JET_cbtypBeforeReplace = 8;
export const JET_cbtypAfterReplace = 16;
export const JET_cbtypBeforeDelete = 32;
export const JET_cbtypAfterDelete = 64;
export const JET_cbtypUserDefinedDefaultValue = 128;
export const JET_cbtypOnlineDefragCompleted = 256;
export const JET_cbtypFreeCursorLS = 512;
export const JET_cbtypFreeTableLS = 1024;
export const JET_bitTableInfoUpdatable = 1;
export const JET_bitTableInfoBookmark = 2;
export const JET_bitTableInfoRollback = 4;
export const JET_bitObjectSystem = 2147483648;
export const JET_bitObjectTableFixedDDL = 1073741824;
export const JET_bitObjectTableTemplate = 536870912;
export const JET_bitObjectTableDerived = 268435456;
export const JET_bitObjectTableNoFixedVarColumnsInDerivedTables = 67108864;
export const cObjectInfoCols = 9;
export const cColumnInfoCols = 14;
export const cIndexInfoCols = 15;
export const JET_MAX_COMPUTERNAME_LENGTH = 15;
export const JET_bitDurableCommitCallbackLogUnavailable = 1;
export const JET_cbBookmarkMost = 256;
export const JET_cbNameMost = 64;
export const JET_cbFullNameMost = 255;
export const JET_cbColumnLVPageOverhead = 82;
export const JET_cbLVDefaultValueMost = 255;
export const JET_cbColumnMost = 255;
export const JET_cbLVColumnMost = 2147483647;
export const JET_cbKeyMost8KBytePage = 2000;
export const JET_cbKeyMost4KBytePage = 1000;
export const JET_cbKeyMost2KBytePage = 500;
export const JET_cbKeyMostMin = 255;
export const JET_cbKeyMost = 255;
export const JET_cbLimitKeyMost = 256;
export const JET_cbPrimaryKeyMost = 255;
export const JET_cbSecondaryKeyMost = 255;
export const JET_ccolKeyMost = 16;
export const JET_ccolMost = 65248;
export const JET_ccolFixedMost = 127;
export const JET_ccolVarMost = 128;
export const JET_EventLoggingDisable = 0;
export const JET_EventLoggingLevelMin = 1;
export const JET_EventLoggingLevelLow = 25;
export const JET_EventLoggingLevelMedium = 50;
export const JET_EventLoggingLevelHigh = 75;
export const JET_EventLoggingLevelMax = 100;
export const JET_IOPriorityNormal = 0;
export const JET_IOPriorityLow = 1;
export const JET_configDefault = 1;
export const JET_configRemoveQuotas = 2;
export const JET_configLowDiskFootprint = 4;
export const JET_configMediumDiskFootprint = 8;
export const JET_configLowMemory = 16;
export const JET_configDynamicMediumMemory = 32;
export const JET_configLowPower = 64;
export const JET_configSSDProfileIO = 128;
export const JET_configRunSilent = 256;
export const JET_configUnthrottledMemory = 512;
export const JET_configHighConcurrencyScaling = 1024;
export const JET_paramSystemPath = 0;
export const JET_paramTempPath = 1;
export const JET_paramLogFilePath = 2;
export const JET_paramBaseName = 3;
export const JET_paramEventSource = 4;
export const JET_paramMaxSessions = 5;
export const JET_paramMaxOpenTables = 6;
export const JET_paramPreferredMaxOpenTables = 7;
export const JET_paramCachedClosedTables = 125;
export const JET_paramMaxCursors = 8;
export const JET_paramMaxVerPages = 9;
export const JET_paramPreferredVerPages = 63;
export const JET_paramGlobalMinVerPages = 81;
export const JET_paramVersionStoreTaskQueueMax = 105;
export const JET_paramMaxTemporaryTables = 10;
export const JET_paramLogFileSize = 11;
export const JET_paramLogBuffers = 12;
export const JET_paramWaitLogFlush = 13;
export const JET_paramLogCheckpointPeriod = 14;
export const JET_paramLogWaitingUserMax = 15;
export const JET_paramCommitDefault = 16;
export const JET_paramCircularLog = 17;
export const JET_paramDbExtensionSize = 18;
export const JET_paramPageTempDBMin = 19;
export const JET_paramPageFragment = 20;
export const JET_paramEnableFileCache = 126;
export const JET_paramVerPageSize = 128;
export const JET_paramConfiguration = 129;
export const JET_paramEnableAdvanced = 130;
export const JET_paramMaxColtyp = 131;
export const JET_paramBatchIOBufferMax = 22;
export const JET_paramCacheSize = 41;
export const JET_paramCacheSizeMin = 60;
export const JET_paramCacheSizeMax = 23;
export const JET_paramCheckpointDepthMax = 24;
export const JET_paramLRUKCorrInterval = 25;
export const JET_paramLRUKHistoryMax = 26;
export const JET_paramLRUKPolicy = 27;
export const JET_paramLRUKTimeout = 28;
export const JET_paramLRUKTrxCorrInterval = 29;
export const JET_paramOutstandingIOMax = 30;
export const JET_paramStartFlushThreshold = 31;
export const JET_paramStopFlushThreshold = 32;
export const JET_paramEnableViewCache = 127;
export const JET_paramCheckpointIOMax = 135;
export const JET_paramTableClass1Name = 137;
export const JET_paramTableClass2Name = 138;
export const JET_paramTableClass3Name = 139;
export const JET_paramTableClass4Name = 140;
export const JET_paramTableClass5Name = 141;
export const JET_paramTableClass6Name = 142;
export const JET_paramTableClass7Name = 143;
export const JET_paramTableClass8Name = 144;
export const JET_paramTableClass9Name = 145;
export const JET_paramTableClass10Name = 146;
export const JET_paramTableClass11Name = 147;
export const JET_paramTableClass12Name = 148;
export const JET_paramTableClass13Name = 149;
export const JET_paramTableClass14Name = 150;
export const JET_paramTableClass15Name = 151;
export const JET_paramIOPriority = 152;
export const JET_paramRecovery = 34;
export const JET_paramEnableOnlineDefrag = 35;
export const JET_paramCheckFormatWhenOpenFail = 44;
export const JET_paramEnableTempTableVersioning = 46;
export const JET_paramIgnoreLogVersion = 47;
export const JET_paramDeleteOldLogs = 48;
export const JET_paramEventSourceKey = 49;
export const JET_paramNoInformationEvent = 50;
export const JET_paramEventLoggingLevel = 51;
export const JET_paramDeleteOutOfRangeLogs = 52;
export const JET_paramAccessDeniedRetryPeriod = 53;
export const JET_paramEnableIndexChecking = 45;
export const JET_paramEnableIndexCleanup = 54;
export const JET_paramDatabasePageSize = 64;
export const JET_paramDisableCallbacks = 65;
export const JET_paramLogFileCreateAsynch = 69;
export const JET_paramErrorToString = 70;
export const JET_paramZeroDatabaseDuringBackup = 71;
export const JET_paramUnicodeIndexDefault = 72;
export const JET_paramRuntimeCallback = 73;
export const JET_paramCleanupMismatchedLogFiles = 77;
export const JET_paramRecordUpgradeDirtyLevel = 78;
export const JET_paramOSSnapshotTimeout = 82;
export const JET_paramExceptionAction = 98;
export const JET_paramEventLogCache = 99;
export const JET_paramCreatePathIfNotExist = 100;
export const JET_paramPageHintCacheSize = 101;
export const JET_paramOneDatabasePerSession = 102;
export const JET_paramMaxInstances = 104;
export const JET_paramDisablePerfmon = 107;
export const JET_paramIndexTuplesLengthMin = 110;
export const JET_paramIndexTuplesLengthMax = 111;
export const JET_paramIndexTuplesToIndexMax = 112;
export const JET_paramAlternateDatabaseRecoveryPath = 113;
export const JET_paramIndexTupleIncrement = 132;
export const JET_paramIndexTupleStart = 133;
export const JET_paramKeyMost = 134;
export const JET_paramLegacyFileNames = 136;
export const JET_paramEnablePersistedCallbacks = 156;
export const JET_paramWaypointLatency = 153;
export const JET_paramDefragmentSequentialBTrees = 160;
export const JET_paramDefragmentSequentialBTreesDensityCheckFrequency = 161;
export const JET_paramIOThrottlingTimeQuanta = 162;
export const JET_paramLVChunkSizeMost = 163;
export const JET_paramMaxCoalesceReadSize = 164;
export const JET_paramMaxCoalesceWriteSize = 165;
export const JET_paramMaxCoalesceReadGapSize = 166;
export const JET_paramMaxCoalesceWriteGapSize = 167;
export const JET_paramEnableDBScanInRecovery = 169;
export const JET_paramDbScanThrottle = 170;
export const JET_paramDbScanIntervalMinSec = 171;
export const JET_paramDbScanIntervalMaxSec = 172;
export const JET_paramCachePriority = 177;
export const JET_paramMaxTransactionSize = 178;
export const JET_paramPrereadIOMax = 179;
export const JET_paramEnableDBScanSerialization = 180;
export const JET_paramHungIOThreshold = 181;
export const JET_paramHungIOActions = 182;
export const JET_paramMinDataForXpress = 183;
export const JET_paramEnableShrinkDatabase = 184;
export const JET_paramProcessFriendlyName = 186;
export const JET_paramDurableCommitCallback = 187;
export const JET_paramEnableSqm = 188;
export const JET_paramConfigStoreSpec = 189;
export const JET_paramUseFlushForWriteDurability = 214;
export const JET_paramEnableRBS = 215;
export const JET_paramRBSFilePath = 216;
export const JET_paramMaxValueInvalid = 217;
export const JET_sesparamCommitDefault = 4097;
export const JET_sesparamTransactionLevel = 4099;
export const JET_sesparamOperationContext = 4100;
export const JET_sesparamCorrelationID = 4101;
export const JET_sesparamMaxValueInvalid = 4110;
export const JET_bitESE98FileNames = 1;
export const JET_bitEightDotThreeSoftCompat = 2;
export const JET_bitHungIOEvent = 1;
export const JET_bitShrinkDatabaseOff = 0;
export const JET_bitShrinkDatabaseOn = 1;
export const JET_bitShrinkDatabaseRealtime = 2;
export const JET_bitShrinkDatabaseTrim = 1;
export const JET_bitReplayIgnoreMissingDB = 4;
export const JET_bitRecoveryWithoutUndo = 8;
export const JET_bitTruncateLogsAfterRecovery = 16;
export const JET_bitReplayMissingMapEntryDB = 32;
export const JET_bitLogStreamMustExist = 64;
export const JET_bitReplayIgnoreLostLogs = 128;
export const JET_bitKeepDbAttachedAtEndOfRecovery = 4096;
export const JET_bitTermComplete = 1;
export const JET_bitTermAbrupt = 2;
export const JET_bitTermStopBackup = 4;
export const JET_bitTermDirty = 8;
export const JET_bitIdleFlushBuffers = 1;
export const JET_bitIdleCompact = 2;
export const JET_bitIdleStatus = 4;
export const JET_bitDbReadOnly = 1;
export const JET_bitDbExclusive = 2;
export const JET_bitDbDeleteCorruptIndexes = 16;
export const JET_bitDbDeleteUnicodeIndexes = 1024;
export const JET_bitDbUpgrade = 512;
export const JET_bitDbEnableBackgroundMaintenance = 2048;
export const JET_bitDbPurgeCacheOnAttach = 4096;
export const JET_bitForceDetach = 1;
export const JET_bitDbRecoveryOff = 8;
export const JET_bitDbShadowingOff = 128;
export const JET_bitDbOverwriteExisting = 512;
export const JET_bitBackupIncremental = 1;
export const JET_bitBackupAtomic = 4;
export const JET_bitBackupSnapshot = 16;
export const JET_bitBackupEndNormal = 1;
export const JET_bitBackupEndAbort = 2;
export const JET_bitBackupTruncateDone = 256;
export const JET_bitTableCreateFixedDDL = 1;
export const JET_bitTableCreateTemplateTable = 2;
export const JET_bitTableCreateNoFixedVarColumnsInDerivedTables = 4;
export const JET_bitTableCreateImmutableStructure = 8;
export const JET_bitColumnFixed = 1;
export const JET_bitColumnTagged = 2;
export const JET_bitColumnNotNULL = 4;
export const JET_bitColumnVersion = 8;
export const JET_bitColumnAutoincrement = 16;
export const JET_bitColumnUpdatable = 32;
export const JET_bitColumnTTKey = 64;
export const JET_bitColumnTTDescending = 128;
export const JET_bitColumnMultiValued = 1024;
export const JET_bitColumnEscrowUpdate = 2048;
export const JET_bitColumnUnversioned = 4096;
export const JET_bitColumnMaybeNull = 8192;
export const JET_bitColumnFinalize = 16384;
export const JET_bitColumnUserDefinedDefault = 32768;
export const JET_bitColumnDeleteOnZero = 131072;
export const JET_bitColumnCompressed = 524288;
export const JET_bitDeleteColumnIgnoreTemplateColumns = 1;
export const JET_bitMoveFirst = 0;
export const JET_bitNoMove = 2;
export const JET_bitNewKey = 1;
export const JET_bitStrLimit = 2;
export const JET_bitSubStrLimit = 4;
export const JET_bitNormalizedKey = 8;
export const JET_bitKeyDataZeroLength = 16;
export const JET_bitFullColumnStartLimit = 256;
export const JET_bitFullColumnEndLimit = 512;
export const JET_bitPartialColumnStartLimit = 1024;
export const JET_bitPartialColumnEndLimit = 2048;
export const JET_bitRangeInclusive = 1;
export const JET_bitRangeUpperLimit = 2;
export const JET_bitRangeInstantDuration = 4;
export const JET_bitRangeRemove = 8;
export const JET_bitReadLock = 1;
export const JET_bitWriteLock = 2;
export const JET_MoveFirst = 2147483648;
export const JET_MovePrevious = `-1`;
export const JET_MoveLast = 2147483647;
export const JET_bitMoveKeyNE = 1;
export const JET_bitSeekEQ = 1;
export const JET_bitSeekLT = 2;
export const JET_bitSeekLE = 4;
export const JET_bitSeekGE = 8;
export const JET_bitSeekGT = 16;
export const JET_bitSetIndexRange = 32;
export const JET_bitCheckUniqueness = 64;
export const JET_bitBookmarkPermitVirtualCurrency = 1;
export const JET_bitIndexColumnMustBeNull = 1;
export const JET_bitIndexColumnMustBeNonNull = 2;
export const JET_bitRecordInIndex = 1;
export const JET_bitRecordNotInIndex = 2;
export const JET_bitIndexUnique = 1;
export const JET_bitIndexPrimary = 2;
export const JET_bitIndexDisallowNull = 4;
export const JET_bitIndexIgnoreNull = 8;
export const JET_bitIndexIgnoreAnyNull = 32;
export const JET_bitIndexIgnoreFirstNull = 64;
export const JET_bitIndexLazyFlush = 128;
export const JET_bitIndexEmpty = 256;
export const JET_bitIndexUnversioned = 512;
export const JET_bitIndexSortNullsHigh = 1024;
export const JET_bitIndexUnicode = 2048;
export const JET_bitIndexTuples = 4096;
export const JET_bitIndexTupleLimits = 8192;
export const JET_bitIndexCrossProduct = 16384;
export const JET_bitIndexKeyMost = 32768;
export const JET_bitIndexDisallowTruncation = 65536;
export const JET_bitIndexNestedTable = 131072;
export const JET_bitIndexDotNetGuid = 262144;
export const JET_bitIndexImmutableStructure = 524288;
export const JET_bitKeyAscending = 0;
export const JET_bitKeyDescending = 1;
export const JET_bitTableDenyWrite = 1;
export const JET_bitTableDenyRead = 2;
export const JET_bitTableReadOnly = 4;
export const JET_bitTableUpdatable = 8;
export const JET_bitTablePermitDDL = 16;
export const JET_bitTableNoCache = 32;
export const JET_bitTablePreread = 64;
export const JET_bitTableOpportuneRead = 128;
export const JET_bitTableSequential = 32768;
export const JET_bitTableClassMask = 2031616;
export const JET_bitTableClassNone = 0;
export const JET_bitTableClass1 = 65536;
export const JET_bitTableClass2 = 131072;
export const JET_bitTableClass3 = 196608;
export const JET_bitTableClass4 = 262144;
export const JET_bitTableClass5 = 327680;
export const JET_bitTableClass6 = 393216;
export const JET_bitTableClass7 = 458752;
export const JET_bitTableClass8 = 524288;
export const JET_bitTableClass9 = 589824;
export const JET_bitTableClass10 = 655360;
export const JET_bitTableClass11 = 720896;
export const JET_bitTableClass12 = 786432;
export const JET_bitTableClass13 = 851968;
export const JET_bitTableClass14 = 917504;
export const JET_bitTableClass15 = 983040;
export const JET_bitLSReset = 1;
export const JET_bitLSCursor = 2;
export const JET_bitLSTable = 4;
export const JET_bitPrereadForward = 1;
export const JET_bitPrereadBackward = 2;
export const JET_bitPrereadFirstPage = 4;
export const JET_bitPrereadNormalizedKey = 8;
export const JET_bitTTIndexed = 1;
export const JET_bitTTUnique = 2;
export const JET_bitTTUpdatable = 4;
export const JET_bitTTScrollable = 8;
export const JET_bitTTSortNullsHigh = 16;
export const JET_bitTTForceMaterialization = 32;
export const JET_bitTTErrorOnDuplicateInsertion = 32;
export const JET_bitTTForwardOnly = 64;
export const JET_bitTTIntrinsicLVsOnly = 128;
export const JET_bitTTDotNetGuid = 256;
export const JET_bitSetAppendLV = 1;
export const JET_bitSetOverwriteLV = 4;
export const JET_bitSetSizeLV = 8;
export const JET_bitSetZeroLength = 32;
export const JET_bitSetSeparateLV = 64;
export const JET_bitSetUniqueMultiValues = 128;
export const JET_bitSetUniqueNormalizedMultiValues = 256;
export const JET_bitSetRevertToDefaultValue = 512;
export const JET_bitSetIntrinsicLV = 1024;
export const JET_bitSetUncompressed = 65536;
export const JET_bitSetCompressed = 131072;
export const JET_bitSetContiguousLV = 262144;
export const JET_bitSpaceHintsUtilizeParentSpace = 1;
export const JET_bitCreateHintAppendSequential = 2;
export const JET_bitCreateHintHotpointSequential = 4;
export const JET_bitRetrieveHintReserve1 = 8;
export const JET_bitRetrieveHintTableScanForward = 16;
export const JET_bitRetrieveHintTableScanBackward = 32;
export const JET_bitRetrieveHintReserve2 = 64;
export const JET_bitRetrieveHintReserve3 = 128;
export const JET_bitDeleteHintTableSequential = 256;
export const JET_prepInsert = 0;
export const JET_prepReplace = 2;
export const JET_prepCancel = 3;
export const JET_prepReplaceNoLock = 4;
export const JET_prepInsertCopy = 5;
export const JET_prepInsertCopyDeleteOriginal = 7;
export const JET_prepInsertCopyReplaceOriginal = 9;
export const JET_sqmDisable = 0;
export const JET_sqmEnable = 1;
export const JET_sqmFromCEIP = 2;
export const JET_bitUpdateCheckESE97Compatibility = 1;
export const JET_bitEscrowNoRollback = 1;
export const JET_bitRetrieveCopy = 1;
export const JET_bitRetrieveFromIndex = 2;
export const JET_bitRetrieveFromPrimaryBookmark = 4;
export const JET_bitRetrieveTag = 8;
export const JET_bitRetrieveNull = 16;
export const JET_bitRetrieveIgnoreDefault = 32;
export const JET_bitRetrieveTuple = 2048;
export const JET_bitZeroLength = 1;
export const JET_bitEnumerateCopy = 1;
export const JET_bitEnumerateIgnoreDefault = 32;
export const JET_bitEnumeratePresenceOnly = 131072;
export const JET_bitEnumerateTaggedOnly = 262144;
export const JET_bitEnumerateCompressOutput = 524288;
export const JET_bitEnumerateIgnoreUserDefinedDefault = 1048576;
export const JET_bitEnumerateInRecordOnly = 2097152;
export const JET_bitRecordSizeInCopyBuffer = 1;
export const JET_bitRecordSizeRunningTotal = 2;
export const JET_bitRecordSizeLocal = 4;
export const JET_bitTransactionReadOnly = 1;
export const JET_bitCommitLazyFlush = 1;
export const JET_bitWaitLastLevel0Commit = 2;
export const JET_bitWaitAllLevel0Commit = 8;
export const JET_bitForceNewLog = 16;
export const JET_bitRollbackAll = 1;
export const JET_bitIncrementalSnapshot = 1;
export const JET_bitCopySnapshot = 2;
export const JET_bitContinueAfterThaw = 4;
export const JET_bitExplicitPrepare = 8;
export const JET_bitAllDatabasesSnapshot = 1;
export const JET_bitAbortSnapshot = 1;
export const JET_DbInfoFilename = 0;
export const JET_DbInfoConnect = 1;
export const JET_DbInfoCountry = 2;
export const JET_DbInfoLCID = 3;
export const JET_DbInfoLangid = 3;
export const JET_DbInfoCp = 4;
export const JET_DbInfoCollate = 5;
export const JET_DbInfoOptions = 6;
export const JET_DbInfoTransactions = 7;
export const JET_DbInfoVersion = 8;
export const JET_DbInfoIsam = 9;
export const JET_DbInfoFilesize = 10;
export const JET_DbInfoSpaceOwned = 11;
export const JET_DbInfoSpaceAvailable = 12;
export const JET_DbInfoUpgrade = 13;
export const JET_DbInfoMisc = 14;
export const JET_DbInfoDBInUse = 15;
export const JET_DbInfoPageSize = 17;
export const JET_DbInfoFileType = 19;
export const JET_DbInfoFilesizeOnDisk = 21;
export const JET_dbstateJustCreated = 1;
export const JET_dbstateDirtyShutdown = 2;
export const JET_dbstateCleanShutdown = 3;
export const JET_dbstateBeingConverted = 4;
export const JET_dbstateForceDetach = 5;
export const JET_filetypeUnknown = 0;
export const JET_filetypeDatabase = 1;
export const JET_filetypeLog = 3;
export const JET_filetypeCheckpoint = 4;
export const JET_filetypeTempDatabase = 5;
export const JET_filetypeFlushMap = 7;
export const JET_revertstateNone = 0;
export const JET_revertstateInProgress = 1;
export const JET_revertstateCopingLogs = 2;
export const JET_revertstateCompleted = 3;
export const JET_bitDeleteAllExistingLogs = 1;
export const JET_coltypNil = 0;
export const JET_coltypBit = 1;
export const JET_coltypUnsignedByte = 2;
export const JET_coltypShort = 3;
export const JET_coltypLong = 4;
export const JET_coltypCurrency = 5;
export const JET_coltypIEEESingle = 6;
export const JET_coltypIEEEDouble = 7;
export const JET_coltypDateTime = 8;
export const JET_coltypBinary = 9;
export const JET_coltypText = 10;
export const JET_coltypLongBinary = 11;
export const JET_coltypLongText = 12;
export const JET_coltypMax = 13;
export const JET_coltypSLV = 13;
export const JET_coltypUnsignedLong = 14;
export const JET_coltypLongLong = 15;
export const JET_coltypGUID = 16;
export const JET_coltypUnsignedShort = 17;
export const JET_coltypUnsignedLongLong = 18;
export const JET_ColInfoGrbitNonDerivedColumnsOnly = 2147483648;
export const JET_ColInfoGrbitMinimalInfo = 1073741824;
export const JET_ColInfoGrbitSortByColumnid = 536870912;
export const JET_objtypNil = 0;
export const JET_objtypTable = 1;
export const JET_bitCompactStats = 32;
export const JET_bitCompactRepair = 64;
export const JET_snpRepair = 2;
export const JET_snpCompact = 4;
export const JET_snpRestore = 8;
export const JET_snpBackup = 9;
export const JET_snpUpgrade = 10;
export const JET_snpScrub = 11;
export const JET_snpUpgradeRecordFormat = 12;
export const JET_sntBegin = 5;
export const JET_sntRequirements = 7;
export const JET_sntProgress = 0;
export const JET_sntComplete = 6;
export const JET_sntFail = 3;
export const JET_ExceptionMsgBox = 1;
export const JET_ExceptionNone = 2;
export const JET_ExceptionFailFast = 4;
export const JET_OnlineDefragDisable = 0;
export const JET_OnlineDefragAllOBSOLETE = 1;
export const JET_OnlineDefragDatabases = 2;
export const JET_OnlineDefragSpaceTrees = 4;
export const JET_OnlineDefragAll = 65535;
export const JET_bitResizeDatabaseOnlyGrow = 1;
export const JET_bitResizeDatabaseOnlyShrink = 2;
export const JET_bitStopServiceAll = 0;
export const JET_bitStopServiceBackgroundUserTasks = 2;
export const JET_bitStopServiceQuiesceCaches = 4;
export const JET_bitStopServiceResume = 2147483648;
export const JET_errSuccess = 0;
export const JET_wrnNyi = `-1`;
export const JET_errRfsFailure = `-100`;
export const JET_errRfsNotArmed = `-101`;
export const JET_errFileClose = `-102`;
export const JET_errOutOfThreads = `-103`;
export const JET_errTooManyIO = `-105`;
export const JET_errTaskDropped = `-106`;
export const JET_errInternalError = `-107`;
export const JET_errDisabledFunctionality = `-112`;
export const JET_errUnloadableOSFunctionality = `-113`;
export const JET_errDatabaseBufferDependenciesCorrupted = `-255`;
export const JET_wrnRemainingVersions = 321;
export const JET_errPreviousVersion = `-322`;
export const JET_errPageBoundary = `-323`;
export const JET_errKeyBoundary = `-324`;
export const JET_errBadPageLink = `-327`;
export const JET_errBadBookmark = `-328`;
export const JET_errNTSystemCallFailed = `-334`;
export const JET_errBadParentPageLink = `-338`;
export const JET_errSPAvailExtCacheOutOfSync = `-340`;
export const JET_errSPAvailExtCorrupted = `-341`;
export const JET_errSPAvailExtCacheOutOfMemory = `-342`;
export const JET_errSPOwnExtCorrupted = `-343`;
export const JET_errDbTimeCorrupted = `-344`;
export const JET_wrnUniqueKey = 345;
export const JET_errKeyTruncated = `-346`;
export const JET_errDatabaseLeakInSpace = `-348`;
export const JET_errBadEmptyPage = `-351`;
export const wrnBTNotVisibleRejected = 352;
export const wrnBTNotVisibleAccumulated = 353;
export const JET_errBadLineCount = `-354`;
export const JET_errPageTagCorrupted = `-357`;
export const JET_errNodeCorrupted = `-358`;
export const JET_wrnSeparateLongValue = 406;
export const JET_errKeyTooBig = `-408`;
export const JET_errCannotSeparateIntrinsicLV = `-416`;
export const JET_errSeparatedLongValue = `-421`;
export const JET_errMustBeSeparateLongValue = `-423`;
export const JET_errInvalidPreread = `-424`;
export const JET_errInvalidLoggedOperation = `-500`;
export const JET_errLogFileCorrupt = `-501`;
export const JET_errNoBackupDirectory = `-503`;
export const JET_errBackupDirectoryNotEmpty = `-504`;
export const JET_errBackupInProgress = `-505`;
export const JET_errRestoreInProgress = `-506`;
export const JET_errMissingPreviousLogFile = `-509`;
export const JET_errLogWriteFail = `-510`;
export const JET_errLogDisabledDueToRecoveryFailure = `-511`;
export const JET_errCannotLogDuringRecoveryRedo = `-512`;
export const JET_errLogGenerationMismatch = `-513`;
export const JET_errBadLogVersion = `-514`;
export const JET_errInvalidLogSequence = `-515`;
export const JET_errLoggingDisabled = `-516`;
export const JET_errLogBufferTooSmall = `-517`;
export const JET_errLogSequenceEnd = `-519`;
export const JET_errNoBackup = `-520`;
export const JET_errInvalidBackupSequence = `-521`;
export const JET_errBackupNotAllowedYet = `-523`;
export const JET_errDeleteBackupFileFail = `-524`;
export const JET_errMakeBackupDirectoryFail = `-525`;
export const JET_errInvalidBackup = `-526`;
export const JET_errRecoveredWithErrors = `-527`;
export const JET_errMissingLogFile = `-528`;
export const JET_errLogDiskFull = `-529`;
export const JET_errBadLogSignature = `-530`;
export const JET_errBadDbSignature = `-531`;
export const JET_errBadCheckpointSignature = `-532`;
export const JET_errCheckpointCorrupt = `-533`;
export const JET_errMissingPatchPage = `-534`;
export const JET_errBadPatchPage = `-535`;
export const JET_errRedoAbruptEnded = `-536`;
export const JET_errPatchFileMissing = `-538`;
export const JET_errDatabaseLogSetMismatch = `-539`;
export const JET_errDatabaseStreamingFileMismatch = `-540`;
export const JET_errLogFileSizeMismatch = `-541`;
export const JET_errCheckpointFileNotFound = `-542`;
export const JET_errRequiredLogFilesMissing = `-543`;
export const JET_errSoftRecoveryOnBackupDatabase = `-544`;
export const JET_errLogFileSizeMismatchDatabasesConsistent = `-545`;
export const JET_errLogSectorSizeMismatch = `-546`;
export const JET_errLogSectorSizeMismatchDatabasesConsistent = `-547`;
export const JET_errLogSequenceEndDatabasesConsistent = `-548`;
export const JET_errStreamingDataNotLogged = `-549`;
export const JET_errDatabaseDirtyShutdown = `-550`;
export const JET_errDatabaseInconsistent = `-550`;
export const JET_errConsistentTimeMismatch = `-551`;
export const JET_errDatabasePatchFileMismatch = `-552`;
export const JET_errEndingRestoreLogTooLow = `-553`;
export const JET_errStartingRestoreLogTooHigh = `-554`;
export const JET_errGivenLogFileHasBadSignature = `-555`;
export const JET_errGivenLogFileIsNotContiguous = `-556`;
export const JET_errMissingRestoreLogFiles = `-557`;
export const JET_wrnExistingLogFileHasBadSignature = 558;
export const JET_wrnExistingLogFileIsNotContiguous = 559;
export const JET_errMissingFullBackup = `-560`;
export const JET_errBadBackupDatabaseSize = `-561`;
export const JET_errDatabaseAlreadyUpgraded = `-562`;
export const JET_errDatabaseIncompleteUpgrade = `-563`;
export const JET_wrnSkipThisRecord = 564;
export const JET_errMissingCurrentLogFiles = `-565`;
export const JET_errDbTimeTooOld = `-566`;
export const JET_errDbTimeTooNew = `-567`;
export const JET_errMissingFileToBackup = `-569`;
export const JET_errLogTornWriteDuringHardRestore = `-570`;
export const JET_errLogTornWriteDuringHardRecovery = `-571`;
export const JET_errLogCorruptDuringHardRestore = `-573`;
export const JET_errLogCorruptDuringHardRecovery = `-574`;
export const JET_errMustDisableLoggingForDbUpgrade = `-575`;
export const JET_errBadRestoreTargetInstance = `-577`;
export const JET_wrnTargetInstanceRunning = 578;
export const JET_errRecoveredWithoutUndo = `-579`;
export const JET_errDatabasesNotFromSameSnapshot = `-580`;
export const JET_errSoftRecoveryOnSnapshot = `-581`;
export const JET_errCommittedLogFilesMissing = `-582`;
export const JET_errSectorSizeNotSupported = `-583`;
export const JET_errRecoveredWithoutUndoDatabasesConsistent = `-584`;
export const JET_wrnCommittedLogFilesLost = 585;
export const JET_errCommittedLogFileCorrupt = `-586`;
export const JET_wrnCommittedLogFilesRemoved = 587;
export const JET_wrnFinishWithUndo = 588;
export const JET_errLogSequenceChecksumMismatch = `-590`;
export const JET_wrnDatabaseRepaired = 595;
export const JET_errPageInitializedMismatch = `-596`;
export const JET_errUnicodeTranslationBufferTooSmall = `-601`;
export const JET_errUnicodeTranslationFail = `-602`;
export const JET_errUnicodeNormalizationNotSupported = `-603`;
export const JET_errUnicodeLanguageValidationFailure = `-604`;
export const JET_errExistingLogFileHasBadSignature = `-610`;
export const JET_errExistingLogFileIsNotContiguous = `-611`;
export const JET_errLogReadVerifyFailure = `-612`;
export const JET_errCheckpointDepthTooDeep = `-614`;
export const JET_errRestoreOfNonBackupDatabase = `-615`;
export const JET_errLogFileNotCopied = `-616`;
export const JET_errTransactionTooLong = `-618`;
export const JET_errEngineFormatVersionNoLongerSupportedTooLow = `-619`;
export const JET_errEngineFormatVersionNotYetImplementedTooHigh = `-620`;
export const JET_errEngineFormatVersionParamTooLowForRequestedFeature = `-621`;
export const JET_errEngineFormatVersionSpecifiedTooLowForLogVersion = `-622`;
export const JET_errEngineFormatVersionSpecifiedTooLowForDatabaseVersion = `-623`;
export const JET_errBackupAbortByServer = `-801`;
export const JET_errInvalidGrbit = `-900`;
export const JET_errTermInProgress = `-1000`;
export const JET_errFeatureNotAvailable = `-1001`;
export const JET_errInvalidName = `-1002`;
export const JET_errInvalidParameter = `-1003`;
export const JET_wrnColumnNull = 1004;
export const JET_wrnBufferTruncated = 1006;
export const JET_wrnDatabaseAttached = 1007;
export const JET_errDatabaseFileReadOnly = `-1008`;
export const JET_wrnSortOverflow = 1009;
export const JET_errInvalidDatabaseId = `-1010`;
export const JET_errOutOfMemory = `-1011`;
export const JET_errOutOfDatabaseSpace = `-1012`;
export const JET_errOutOfCursors = `-1013`;
export const JET_errOutOfBuffers = `-1014`;
export const JET_errTooManyIndexes = `-1015`;
export const JET_errTooManyKeys = `-1016`;
export const JET_errRecordDeleted = `-1017`;
export const JET_errReadVerifyFailure = `-1018`;
export const JET_errPageNotInitialized = `-1019`;
export const JET_errOutOfFileHandles = `-1020`;
export const JET_errDiskReadVerificationFailure = `-1021`;
export const JET_errDiskIO = `-1022`;
export const JET_errInvalidPath = `-1023`;
export const JET_errInvalidSystemPath = `-1024`;
export const JET_errInvalidLogDirectory = `-1025`;
export const JET_errRecordTooBig = `-1026`;
export const JET_errTooManyOpenDatabases = `-1027`;
export const JET_errInvalidDatabase = `-1028`;
export const JET_errNotInitialized = `-1029`;
export const JET_errAlreadyInitialized = `-1030`;
export const JET_errInitInProgress = `-1031`;
export const JET_errFileAccessDenied = `-1032`;
export const JET_errBufferTooSmall = `-1038`;
export const JET_wrnSeekNotEqual = 1039;
export const JET_errTooManyColumns = `-1040`;
export const JET_errContainerNotEmpty = `-1043`;
export const JET_errInvalidFilename = `-1044`;
export const JET_errInvalidBookmark = `-1045`;
export const JET_errColumnInUse = `-1046`;
export const JET_errInvalidBufferSize = `-1047`;
export const JET_errColumnNotUpdatable = `-1048`;
export const JET_errIndexInUse = `-1051`;
export const JET_errLinkNotSupported = `-1052`;
export const JET_errNullKeyDisallowed = `-1053`;
export const JET_errNotInTransaction = `-1054`;
export const JET_wrnNoErrorInfo = 1055;
export const JET_errMustRollback = `-1057`;
export const JET_wrnNoIdleActivity = 1058;
export const JET_errTooManyActiveUsers = `-1059`;
export const JET_errInvalidCountry = `-1061`;
export const JET_errInvalidLanguageId = `-1062`;
export const JET_errInvalidCodePage = `-1063`;
export const JET_errInvalidLCMapStringFlags = `-1064`;
export const JET_errVersionStoreEntryTooBig = `-1065`;
export const JET_errVersionStoreOutOfMemoryAndCleanupTimedOut = `-1066`;
export const JET_wrnNoWriteLock = 1067;
export const JET_wrnColumnSetNull = 1068;
export const JET_errVersionStoreOutOfMemory = `-1069`;
export const JET_errCannotIndex = `-1071`;
export const JET_errRecordNotDeleted = `-1072`;
export const JET_errTooManyMempoolEntries = `-1073`;
export const JET_errOutOfObjectIDs = `-1074`;
export const JET_errOutOfLongValueIDs = `-1075`;
export const JET_errOutOfAutoincrementValues = `-1076`;
export const JET_errOutOfDbtimeValues = `-1077`;
export const JET_errOutOfSequentialIndexValues = `-1078`;
export const JET_errRunningInOneInstanceMode = `-1080`;
export const JET_errRunningInMultiInstanceMode = `-1081`;
export const JET_errSystemParamsAlreadySet = `-1082`;
export const JET_errSystemPathInUse = `-1083`;
export const JET_errLogFilePathInUse = `-1084`;
export const JET_errTempPathInUse = `-1085`;
export const JET_errInstanceNameInUse = `-1086`;
export const JET_errSystemParameterConflict = `-1087`;
export const JET_errInstanceUnavailable = `-1090`;
export const JET_errDatabaseUnavailable = `-1091`;
export const JET_errInstanceUnavailableDueToFatalLogDiskFull = `-1092`;
export const JET_errInvalidSesparamId = `-1093`;
export const JET_errTooManyRecords = `-1094`;
export const JET_errInvalidDbparamId = `-1095`;
export const JET_errOutOfSessions = `-1101`;
export const JET_errWriteConflict = `-1102`;
export const JET_errTransTooDeep = `-1103`;
export const JET_errInvalidSesid = `-1104`;
export const JET_errWriteConflictPrimaryIndex = `-1105`;
export const JET_errInTransaction = `-1108`;
export const JET_errRollbackRequired = `-1109`;
export const JET_errTransReadOnly = `-1110`;
export const JET_errSessionWriteConflict = `-1111`;
export const JET_errRecordTooBigForBackwardCompatibility = `-1112`;
export const JET_errCannotMaterializeForwardOnlySort = `-1113`;
export const JET_errSesidTableIdMismatch = `-1114`;
export const JET_errInvalidInstance = `-1115`;
export const JET_errDirtyShutdown = `-1116`;
export const JET_errReadPgnoVerifyFailure = `-1118`;
export const JET_errReadLostFlushVerifyFailure = `-1119`;
export const JET_errFileSystemCorruption = `-1121`;
export const JET_wrnShrinkNotPossible = 1122;
export const JET_errRecoveryVerifyFailure = `-1123`;
export const JET_errFilteredMoveNotSupported = `-1124`;
export const JET_errDatabaseDuplicate = `-1201`;
export const JET_errDatabaseInUse = `-1202`;
export const JET_errDatabaseNotFound = `-1203`;
export const JET_errDatabaseInvalidName = `-1204`;
export const JET_errDatabaseInvalidPages = `-1205`;
export const JET_errDatabaseCorrupted = `-1206`;
export const JET_errDatabaseLocked = `-1207`;
export const JET_errCannotDisableVersioning = `-1208`;
export const JET_errInvalidDatabaseVersion = `-1209`;
export const JET_errDatabase200Format = `-1210`;
export const JET_errDatabase400Format = `-1211`;
export const JET_errDatabase500Format = `-1212`;
export const JET_errPageSizeMismatch = `-1213`;
export const JET_errTooManyInstances = `-1214`;
export const JET_errDatabaseSharingViolation = `-1215`;
export const JET_errAttachedDatabaseMismatch = `-1216`;
export const JET_errDatabaseInvalidPath = `-1217`;
export const JET_errDatabaseIdInUse = `-1218`;
export const JET_errForceDetachNotAllowed = `-1219`;
export const JET_errCatalogCorrupted = `-1220`;
export const JET_errPartiallyAttachedDB = `-1221`;
export const JET_errDatabaseSignInUse = `-1222`;
export const JET_errDatabaseCorruptedNoRepair = `-1224`;
export const JET_errInvalidCreateDbVersion = `-1225`;
export const JET_errDatabaseNotReady = `-1230`;
export const JET_errDatabaseAttachedForRecovery = `-1231`;
export const JET_errTransactionsNotReadyDuringRecovery = `-1232`;
export const JET_wrnTableEmpty = 1301;
export const JET_errTableLocked = `-1302`;
export const JET_errTableDuplicate = `-1303`;
export const JET_errTableInUse = `-1304`;
export const JET_errObjectNotFound = `-1305`;
export const JET_errDensityInvalid = `-1307`;
export const JET_errTableNotEmpty = `-1308`;
export const JET_errInvalidTableId = `-1310`;
export const JET_errTooManyOpenTables = `-1311`;
export const JET_errIllegalOperation = `-1312`;
export const JET_errTooManyOpenTablesAndCleanupTimedOut = `-1313`;
export const JET_errObjectDuplicate = `-1314`;
export const JET_errInvalidObject = `-1316`;
export const JET_errCannotDeleteTempTable = `-1317`;
export const JET_errCannotDeleteSystemTable = `-1318`;
export const JET_errCannotDeleteTemplateTable = `-1319`;
export const JET_errExclusiveTableLockRequired = `-1322`;
export const JET_errFixedDDL = `-1323`;
export const JET_errFixedInheritedDDL = `-1324`;
export const JET_errCannotNestDDL = `-1325`;
export const JET_errDDLNotInheritable = `-1326`;
export const JET_wrnTableInUseBySystem = 1327;
export const JET_errInvalidSettings = `-1328`;
export const JET_errClientRequestToStopJetService = `-1329`;
export const JET_errCannotAddFixedVarColumnToDerivedTable = `-1330`;
export const JET_errIndexCantBuild = `-1401`;
export const JET_errIndexHasPrimary = `-1402`;
export const JET_errIndexDuplicate = `-1403`;
export const JET_errIndexNotFound = `-1404`;
export const JET_errIndexMustStay = `-1405`;
export const JET_errIndexInvalidDef = `-1406`;
export const JET_errInvalidCreateIndex = `-1409`;
export const JET_errTooManyOpenIndexes = `-1410`;
export const JET_errMultiValuedIndexViolation = `-1411`;
export const JET_errIndexBuildCorrupted = `-1412`;
export const JET_errPrimaryIndexCorrupted = `-1413`;
export const JET_errSecondaryIndexCorrupted = `-1414`;
export const JET_wrnCorruptIndexDeleted = 1415;
export const JET_errInvalidIndexId = `-1416`;
export const JET_wrnPrimaryIndexOutOfDate = 1417;
export const JET_wrnSecondaryIndexOutOfDate = 1418;
export const JET_errIndexTuplesSecondaryIndexOnly = `-1430`;
export const JET_errIndexTuplesTooManyColumns = `-1431`;
export const JET_errIndexTuplesOneColumnOnly = `-1431`;
export const JET_errIndexTuplesNonUniqueOnly = `-1432`;
export const JET_errIndexTuplesTextBinaryColumnsOnly = `-1433`;
export const JET_errIndexTuplesTextColumnsOnly = `-1433`;
export const JET_errIndexTuplesVarSegMacNotAllowed = `-1434`;
export const JET_errIndexTuplesInvalidLimits = `-1435`;
export const JET_errIndexTuplesCannotRetrieveFromIndex = `-1436`;
export const JET_errIndexTuplesKeyTooSmall = `-1437`;
export const JET_errInvalidLVChunkSize = `-1438`;
export const JET_errColumnCannotBeEncrypted = `-1439`;
export const JET_errCannotIndexOnEncryptedColumn = `-1440`;
export const JET_errColumnLong = `-1501`;
export const JET_errColumnNoChunk = `-1502`;
export const JET_errColumnDoesNotFit = `-1503`;
export const JET_errNullInvalid = `-1504`;
export const JET_errColumnIndexed = `-1505`;
export const JET_errColumnTooBig = `-1506`;
export const JET_errColumnNotFound = `-1507`;
export const JET_errColumnDuplicate = `-1508`;
export const JET_errMultiValuedColumnMustBeTagged = `-1509`;
export const JET_errColumnRedundant = `-1510`;
export const JET_errInvalidColumnType = `-1511`;
export const JET_wrnColumnMaxTruncated = 1512;
export const JET_errTaggedNotNULL = `-1514`;
export const JET_errNoCurrentIndex = `-1515`;
export const JET_errKeyIsMade = `-1516`;
export const JET_errBadColumnId = `-1517`;
export const JET_errBadItagSequence = `-1518`;
export const JET_errColumnInRelationship = `-1519`;
export const JET_wrnCopyLongValue = 1520;
export const JET_errCannotBeTagged = `-1521`;
export const JET_errDefaultValueTooBig = `-1524`;
export const JET_errMultiValuedDuplicate = `-1525`;
export const JET_errLVCorrupted = `-1526`;
export const JET_errMultiValuedDuplicateAfterTruncation = `-1528`;
export const JET_errDerivedColumnCorruption = `-1529`;
export const JET_errInvalidPlaceholderColumn = `-1530`;
export const JET_wrnColumnSkipped = 1531;
export const JET_wrnColumnNotLocal = 1532;
export const JET_wrnColumnMoreTags = 1533;
export const JET_wrnColumnTruncated = 1534;
export const JET_wrnColumnPresent = 1535;
export const JET_wrnColumnSingleValue = 1536;
export const JET_wrnColumnDefault = 1537;
export const JET_errColumnCannotBeCompressed = `-1538`;
export const JET_wrnColumnNotInRecord = 1539;
export const JET_errColumnNoEncryptionKey = `-1540`;
export const JET_wrnColumnReference = 1541;
export const JET_errRecordNotFound = `-1601`;
export const JET_errRecordNoCopy = `-1602`;
export const JET_errNoCurrentRecord = `-1603`;
export const JET_errRecordPrimaryChanged = `-1604`;
export const JET_errKeyDuplicate = `-1605`;
export const JET_errAlreadyPrepared = `-1607`;
export const JET_errKeyNotMade = `-1608`;
export const JET_errUpdateNotPrepared = `-1609`;
export const JET_wrnDataHasChanged = 1610;
export const JET_errDataHasChanged = `-1611`;
export const JET_wrnKeyChanged = 1618;
export const JET_errLanguageNotSupported = `-1619`;
export const JET_errDecompressionFailed = `-1620`;
export const JET_errUpdateMustVersion = `-1621`;
export const JET_errDecryptionFailed = `-1622`;
export const JET_errEncryptionBadItag = `-1623`;
export const JET_errTooManySorts = `-1701`;
export const JET_errInvalidOnSort = `-1702`;
export const JET_errTempFileOpenError = `-1803`;
export const JET_errTooManyAttachedDatabases = `-1805`;
export const JET_errDiskFull = `-1808`;
export const JET_errPermissionDenied = `-1809`;
export const JET_errFileNotFound = `-1811`;
export const JET_errFileInvalidType = `-1812`;
export const JET_wrnFileOpenReadOnly = 1813;
export const JET_errFileAlreadyExists = `-1814`;
export const JET_errAfterInitialization = `-1850`;
export const JET_errLogCorrupted = `-1852`;
export const JET_errInvalidOperation = `-1906`;
export const JET_errAccessDenied = `-1907`;
export const JET_wrnIdleFull = 1908;
export const JET_errTooManySplits = `-1909`;
export const JET_errSessionSharingViolation = `-1910`;
export const JET_errEntryPointNotFound = `-1911`;
export const JET_errSessionContextAlreadySet = `-1912`;
export const JET_errSessionContextNotSetByThisThread = `-1913`;
export const JET_errSessionInUse = `-1914`;
export const JET_errRecordFormatConversionFailed = `-1915`;
export const JET_errOneDatabasePerSession = `-1916`;
export const JET_errRollbackError = `-1917`;
export const JET_errFlushMapVersionUnsupported = `-1918`;
export const JET_errFlushMapDatabaseMismatch = `-1919`;
export const JET_errFlushMapUnrecoverable = `-1920`;
export const JET_wrnDefragAlreadyRunning = 2000;
export const JET_wrnDefragNotRunning = 2001;
export const JET_errDatabaseAlreadyRunningMaintenance = `-2004`;
export const JET_wrnCallbackNotRegistered = 2100;
export const JET_errCallbackFailed = `-2101`;
export const JET_errCallbackNotResolved = `-2102`;
export const JET_errSpaceHintsInvalid = `-2103`;
export const JET_errOSSnapshotInvalidSequence = `-2401`;
export const JET_errOSSnapshotTimeOut = `-2402`;
export const JET_errOSSnapshotNotAllowed = `-2403`;
export const JET_errOSSnapshotInvalidSnapId = `-2404`;
export const JET_errLSCallbackNotSpecified = `-3000`;
export const JET_errLSAlreadySet = `-3001`;
export const JET_errLSNotSet = `-3002`;
export const JET_errFileIOSparse = `-4000`;
export const JET_errFileIOBeyondEOF = `-4001`;
export const JET_errFileIOAbort = `-4002`;
export const JET_errFileIORetry = `-4003`;
export const JET_errFileIOFail = `-4004`;
export const JET_errFileCompressed = `-4005`;
export const JET_BASE_NAME_LENGTH = 3;
export const JET_bitDumpMinimum = 1;
export const JET_bitDumpMaximum = 2;
export const JET_bitDumpCacheMinimum = 4;
export const JET_bitDumpCacheMaximum = 8;
export const JET_bitDumpCacheIncludeDirtyPages = 16;
export const JET_bitDumpCacheIncludeCachedPages = 32;
export const JET_bitDumpCacheIncludeCorruptedPages = 64;
export const JET_bitDumpCacheNoDecommit = 128;
export const JET_relopEquals = 0;
export const JET_relopPrefixEquals = 1;
export const JET_relopNotEquals = 2;
export const JET_relopLessThanOrEqual = 3;
export const JET_relopLessThan = 4;
export const JET_relopGreaterThanOrEqual = 5;
export const JET_relopGreaterThan = 6;
export const JET_relopBitmaskEqualsZero = 7;
export const JET_relopBitmaskNotEqualsZero = 8;
export const JET_errcatUnknown = 0;
export const JET_errcatError = 1;
export const JET_errcatOperation = 2;
export const JET_errcatFatal = 3;
export const JET_errcatIO = 4;
export const JET_errcatResource = 5;
export const JET_errcatMemory = 6;
export const JET_errcatQuota = 7;
export const JET_errcatDisk = 8;
export const JET_errcatData = 9;
export const JET_errcatCorruption = 10;
export const JET_errcatInconsistent = 11;
export const JET_errcatFragmentation = 12;
export const JET_errcatApi = 13;
export const JET_errcatUsage = 14;
export const JET_errcatState = 15;
export const JET_errcatObsolete = 16;
export const JET_errcatMax = 17;
export const JET_IndexCheckingOff = 0;
export const JET_IndexCheckingOn = 1;
export const JET_IndexCheckingDeferToOpenTable = 2;
export const JET_IndexCheckingMax = 3;

// Structs

export type JET_OSSNAPID = bigint | number;

export type JET_LS = bigint | number;

/**
 * Windows.Win32.Storage.Jet.JET_INDEXID (size: 16)
 */
export interface JET_INDEXID {
  /** u32 */
  cbStruct: number;
  /** array */
  rgbIndexId: Deno.PointerValue;
}

export const sizeofJET_INDEXID = 16;

export function allocJET_INDEXID(data?: Partial<JET_INDEXID>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_INDEXID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgbIndexId !== undefined) view.setBigUint64(8, data.rgbIndexId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgbIndexId))), true);
  return buf;
}

export class JET_INDEXIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgbIndexId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgbIndexId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_OBJECTINFO (size: 40)
 */
export interface JET_OBJECTINFO {
  /** u32 */
  cbStruct: number;
  /** u32 */
  objtyp: number;
  /** f64 */
  dtCreate: number;
  /** f64 */
  dtUpdate: number;
  /** u32 */
  grbit: number;
  /** u32 */
  flags: number;
  /** u32 */
  cRecord: number;
  /** u32 */
  cPage: number;
}

export const sizeofJET_OBJECTINFO = 40;

export function allocJET_OBJECTINFO(data?: Partial<JET_OBJECTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_OBJECTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.objtyp !== undefined) view.setUint32(4, Number(data.objtyp), true);
  // 0x08: f64
  if (data?.dtCreate !== undefined) view.setFloat64(8, Number(data.dtCreate), true);
  // 0x10: f64
  if (data?.dtUpdate !== undefined) view.setFloat64(16, Number(data.dtUpdate), true);
  // 0x18: u32
  if (data?.grbit !== undefined) view.setUint32(24, Number(data.grbit), true);
  // 0x1c: u32
  if (data?.flags !== undefined) view.setUint32(28, Number(data.flags), true);
  // 0x20: u32
  if (data?.cRecord !== undefined) view.setUint32(32, Number(data.cRecord), true);
  // 0x24: u32
  if (data?.cPage !== undefined) view.setUint32(36, Number(data.cPage), true);
  return buf;
}

export class JET_OBJECTINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get objtyp(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: f64
  get dtCreate(): number {
    return this.view.getFloat64(8, true);
  }

  // 0x10: f64
  get dtUpdate(): number {
    return this.view.getFloat64(16, true);
  }

  // 0x18: u32
  get grbit(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get flags(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get cRecord(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get cPage(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set objtyp(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: f64
  set dtCreate(value: number) {
    this.view.setFloat64(8, value, true);
  }

  // 0x10: f64
  set dtUpdate(value: number) {
    this.view.setFloat64(16, value, true);
  }

  // 0x18: u32
  set grbit(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set flags(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set cRecord(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set cPage(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_THREADSTATS2 (size: 48)
 */
export interface JET_THREADSTATS2 {
  /** u32 */
  cbStruct: number;
  /** u32 */
  cPageReferenced: number;
  /** u32 */
  cPageRead: number;
  /** u32 */
  cPagePreread: number;
  /** u32 */
  cPageDirtied: number;
  /** u32 */
  cPageRedirtied: number;
  /** u32 */
  cLogRecord: number;
  /** u32 */
  cbLogRecord: number;
  /** u64 */
  cusecPageCacheMiss: bigint | number;
  /** u32 */
  cPageCacheMiss: number;
}

export const sizeofJET_THREADSTATS2 = 48;

export function allocJET_THREADSTATS2(data?: Partial<JET_THREADSTATS2>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_THREADSTATS2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.cPageReferenced !== undefined) view.setUint32(4, Number(data.cPageReferenced), true);
  // 0x08: u32
  if (data?.cPageRead !== undefined) view.setUint32(8, Number(data.cPageRead), true);
  // 0x0c: u32
  if (data?.cPagePreread !== undefined) view.setUint32(12, Number(data.cPagePreread), true);
  // 0x10: u32
  if (data?.cPageDirtied !== undefined) view.setUint32(16, Number(data.cPageDirtied), true);
  // 0x14: u32
  if (data?.cPageRedirtied !== undefined) view.setUint32(20, Number(data.cPageRedirtied), true);
  // 0x18: u32
  if (data?.cLogRecord !== undefined) view.setUint32(24, Number(data.cLogRecord), true);
  // 0x1c: u32
  if (data?.cbLogRecord !== undefined) view.setUint32(28, Number(data.cbLogRecord), true);
  // 0x20: u64
  if (data?.cusecPageCacheMiss !== undefined) view.setBigUint64(32, BigInt(data.cusecPageCacheMiss), true);
  // 0x28: u32
  if (data?.cPageCacheMiss !== undefined) view.setUint32(40, Number(data.cPageCacheMiss), true);
  // 0x2c: pad4
  return buf;
}

export class JET_THREADSTATS2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cPageReferenced(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cPageRead(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cPagePreread(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get cPageDirtied(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cPageRedirtied(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get cLogRecord(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get cbLogRecord(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u64
  get cusecPageCacheMiss(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u32
  get cPageCacheMiss(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cPageReferenced(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cPageRead(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cPagePreread(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set cPageDirtied(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cPageRedirtied(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set cLogRecord(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set cbLogRecord(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u64
  set cusecPageCacheMiss(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u32
  set cPageCacheMiss(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

export type CHAR = number;

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: bigint | number;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null | Uint8Array | Uint16Array;
  /** usize */
  u: bigint | number;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, BigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, BigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.psid))), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pguid))), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pObjectTypes))), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pIpAddress))), true);
  return buf;
}

export class _Anonymous1_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data0(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: buffer
  get String(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: usize
  get u(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get psid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pguid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get LogonId_LowPart(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get pObjectTypes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pIpAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: usize
  set Data0(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: buffer
  set String(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: usize
  set u(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set psid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pguid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set LogonId_LowPart(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set pObjectTypes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pIpAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: bigint | number;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, BigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

export class _Anonymous2_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data1(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: i32
  get LogonId_HighPart(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: usize
  set Data1(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: i32
  set LogonId_HighPart(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Storage.Jet.JET_LOGTIME (size: 24)
 */
export interface JET_LOGTIME {
  /** Windows.Win32.Foundation.CHAR */
  bSeconds: string | number;
  /** Windows.Win32.Foundation.CHAR */
  bMinutes: string | number;
  /** Windows.Win32.Foundation.CHAR */
  bHours: string | number;
  /** Windows.Win32.Foundation.CHAR */
  bDay: string | number;
  /** Windows.Win32.Foundation.CHAR */
  bMonth: string | number;
  /** Windows.Win32.Foundation.CHAR */
  bYear: string | number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
}

export const sizeofJET_LOGTIME = 24;

export function allocJET_LOGTIME(data?: Partial<JET_LOGTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_LOGTIME);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bSeconds !== undefined) view.setUint8(0, Number(data.bSeconds));
  // 0x01: u8
  if (data?.bMinutes !== undefined) view.setUint8(1, Number(data.bMinutes));
  // 0x02: u8
  if (data?.bHours !== undefined) view.setUint8(2, Number(data.bHours));
  // 0x03: u8
  if (data?.bDay !== undefined) view.setUint8(3, Number(data.bDay));
  // 0x04: u8
  if (data?.bMonth !== undefined) view.setUint8(4, Number(data.bMonth));
  // 0x05: u8
  if (data?.bYear !== undefined) view.setUint8(5, Number(data.bYear));
  // 0x06: pad2
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x10: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(16, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  return buf;
}

export class JET_LOGTIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bSeconds(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bMinutes(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get bHours(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get bDay(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u8
  get bMonth(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get bYear(): number {
    return this.view.getUint8(5);
  }

  // 0x06: pad2

  // 0x08: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set bSeconds(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bMinutes(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set bHours(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set bDay(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u8
  set bMonth(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set bYear(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: pad2

  // 0x08: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_SIGNATURE (size: 24)
 */
export interface JET_SIGNATURE {
  /** u32 */
  ulRandom: number;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeCreate: Uint8Array | Deno.PointerValue;
  /** array */
  szComputerName: Deno.PointerValue;
}

export const sizeofJET_SIGNATURE = 24;

export function allocJET_SIGNATURE(data?: Partial<JET_SIGNATURE>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_SIGNATURE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulRandom !== undefined) view.setUint32(0, Number(data.ulRandom), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.logtimeCreate !== undefined) view.setBigUint64(8, data.logtimeCreate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeCreate))), true);
  // 0x10: pointer
  if (data?.szComputerName !== undefined) view.setBigUint64(16, data.szComputerName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szComputerName))), true);
  return buf;
}

export class JET_SIGNATUREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulRandom(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get logtimeCreate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get szComputerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ulRandom(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set logtimeCreate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set szComputerName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_COMMIT_ID (size: 24)
 */
export interface JET_COMMIT_ID {
  /** Windows.Win32.Storage.Jet.JET_SIGNATURE */
  signLog: Uint8Array | Deno.PointerValue;
  /** i32 */
  reserved: number;
  /** i64 */
  commitId: bigint | number;
}

export const sizeofJET_COMMIT_ID = 24;

export function allocJET_COMMIT_ID(data?: Partial<JET_COMMIT_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_COMMIT_ID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.signLog !== undefined) view.setBigUint64(0, data.signLog === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.signLog))), true);
  // 0x08: i32
  if (data?.reserved !== undefined) view.setInt32(8, Number(data.reserved), true);
  // 0x0c: pad4
  // 0x10: i64
  if (data?.commitId !== undefined) view.setBigInt64(16, BigInt(data.commitId), true);
  return buf;
}

export class JET_COMMIT_IDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get signLog(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get reserved(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: i64
  get commitId(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x00: pointer
  set signLog(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set reserved(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: i64
  set commitId(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_RBSINFOMISC (size: 40)
 */
export interface JET_RBSINFOMISC {
  /** i32 */
  lRBSGeneration: number;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeCreate: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeCreatePrevRBS: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulMajor: number;
  /** u32 */
  ulMinor: number;
  /** u64 */
  cbLogicalFileSize: bigint | number;
}

export const sizeofJET_RBSINFOMISC = 40;

export function allocJET_RBSINFOMISC(data?: Partial<JET_RBSINFOMISC>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_RBSINFOMISC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lRBSGeneration !== undefined) view.setInt32(0, Number(data.lRBSGeneration), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.logtimeCreate !== undefined) view.setBigUint64(8, data.logtimeCreate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeCreate))), true);
  // 0x10: pointer
  if (data?.logtimeCreatePrevRBS !== undefined) view.setBigUint64(16, data.logtimeCreatePrevRBS === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeCreatePrevRBS))), true);
  // 0x18: u32
  if (data?.ulMajor !== undefined) view.setUint32(24, Number(data.ulMajor), true);
  // 0x1c: u32
  if (data?.ulMinor !== undefined) view.setUint32(28, Number(data.ulMinor), true);
  // 0x20: u64
  if (data?.cbLogicalFileSize !== undefined) view.setBigUint64(32, BigInt(data.cbLogicalFileSize), true);
  return buf;
}

export class JET_RBSINFOMISCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lRBSGeneration(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get logtimeCreate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get logtimeCreatePrevRBS(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get ulMajor(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ulMinor(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u64
  get cbLogicalFileSize(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x00: i32
  set lRBSGeneration(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set logtimeCreate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set logtimeCreatePrevRBS(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set ulMajor(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ulMinor(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u64
  set cbLogicalFileSize(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_RBSREVERTINFOMISC (size: 40)
 */
export interface JET_RBSREVERTINFOMISC {
  /** i32 */
  lGenMinRevertStart: number;
  /** i32 */
  lGenMaxRevertStart: number;
  /** i32 */
  lGenMinRevertEnd: number;
  /** i32 */
  lGenMaxRevertEnd: number;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeRevertFrom: Uint8Array | Deno.PointerValue;
  /** u64 */
  cSecRevert: bigint | number;
  /** u64 */
  cPagesReverted: bigint | number;
}

export const sizeofJET_RBSREVERTINFOMISC = 40;

export function allocJET_RBSREVERTINFOMISC(data?: Partial<JET_RBSREVERTINFOMISC>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_RBSREVERTINFOMISC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lGenMinRevertStart !== undefined) view.setInt32(0, Number(data.lGenMinRevertStart), true);
  // 0x04: i32
  if (data?.lGenMaxRevertStart !== undefined) view.setInt32(4, Number(data.lGenMaxRevertStart), true);
  // 0x08: i32
  if (data?.lGenMinRevertEnd !== undefined) view.setInt32(8, Number(data.lGenMinRevertEnd), true);
  // 0x0c: i32
  if (data?.lGenMaxRevertEnd !== undefined) view.setInt32(12, Number(data.lGenMaxRevertEnd), true);
  // 0x10: pointer
  if (data?.logtimeRevertFrom !== undefined) view.setBigUint64(16, data.logtimeRevertFrom === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeRevertFrom))), true);
  // 0x18: u64
  if (data?.cSecRevert !== undefined) view.setBigUint64(24, BigInt(data.cSecRevert), true);
  // 0x20: u64
  if (data?.cPagesReverted !== undefined) view.setBigUint64(32, BigInt(data.cPagesReverted), true);
  return buf;
}

export class JET_RBSREVERTINFOMISCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lGenMinRevertStart(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get lGenMaxRevertStart(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get lGenMinRevertEnd(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get lGenMaxRevertEnd(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get logtimeRevertFrom(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u64
  get cSecRevert(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u64
  get cPagesReverted(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x00: i32
  set lGenMinRevertStart(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set lGenMaxRevertStart(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set lGenMinRevertEnd(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set lGenMaxRevertEnd(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set logtimeRevertFrom(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u64
  set cSecRevert(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u64
  set cPagesReverted(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_RECSIZE (size: 64)
 */
export interface JET_RECSIZE {
  /** u64 */
  cbData: bigint | number;
  /** u64 */
  cbLongValueData: bigint | number;
  /** u64 */
  cbOverhead: bigint | number;
  /** u64 */
  cbLongValueOverhead: bigint | number;
  /** u64 */
  cNonTaggedColumns: bigint | number;
  /** u64 */
  cTaggedColumns: bigint | number;
  /** u64 */
  cLongValues: bigint | number;
  /** u64 */
  cMultiValues: bigint | number;
}

export const sizeofJET_RECSIZE = 64;

export function allocJET_RECSIZE(data?: Partial<JET_RECSIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_RECSIZE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.cbData !== undefined) view.setBigUint64(0, BigInt(data.cbData), true);
  // 0x08: u64
  if (data?.cbLongValueData !== undefined) view.setBigUint64(8, BigInt(data.cbLongValueData), true);
  // 0x10: u64
  if (data?.cbOverhead !== undefined) view.setBigUint64(16, BigInt(data.cbOverhead), true);
  // 0x18: u64
  if (data?.cbLongValueOverhead !== undefined) view.setBigUint64(24, BigInt(data.cbLongValueOverhead), true);
  // 0x20: u64
  if (data?.cNonTaggedColumns !== undefined) view.setBigUint64(32, BigInt(data.cNonTaggedColumns), true);
  // 0x28: u64
  if (data?.cTaggedColumns !== undefined) view.setBigUint64(40, BigInt(data.cTaggedColumns), true);
  // 0x30: u64
  if (data?.cLongValues !== undefined) view.setBigUint64(48, BigInt(data.cLongValues), true);
  // 0x38: u64
  if (data?.cMultiValues !== undefined) view.setBigUint64(56, BigInt(data.cMultiValues), true);
  return buf;
}

export class JET_RECSIZEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get cbData(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get cbLongValueData(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get cbOverhead(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get cbLongValueOverhead(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u64
  get cNonTaggedColumns(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u64
  get cTaggedColumns(): bigint | number {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: u64
  get cLongValues(): bigint | number {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: u64
  get cMultiValues(): bigint | number {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x00: u64
  set cbData(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set cbLongValueData(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set cbOverhead(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set cbLongValueOverhead(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u64
  set cNonTaggedColumns(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u64
  set cTaggedColumns(value: bigint | number) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: u64
  set cLongValues(value: bigint | number) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: u64
  set cMultiValues(value: bigint | number) {
    this.view.setBigUint64(56, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_RECSIZE2 (size: 88)
 */
export interface JET_RECSIZE2 {
  /** u64 */
  cbData: bigint | number;
  /** u64 */
  cbLongValueData: bigint | number;
  /** u64 */
  cbOverhead: bigint | number;
  /** u64 */
  cbLongValueOverhead: bigint | number;
  /** u64 */
  cNonTaggedColumns: bigint | number;
  /** u64 */
  cTaggedColumns: bigint | number;
  /** u64 */
  cLongValues: bigint | number;
  /** u64 */
  cMultiValues: bigint | number;
  /** u64 */
  cCompressedColumns: bigint | number;
  /** u64 */
  cbDataCompressed: bigint | number;
  /** u64 */
  cbLongValueDataCompressed: bigint | number;
}

export const sizeofJET_RECSIZE2 = 88;

export function allocJET_RECSIZE2(data?: Partial<JET_RECSIZE2>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_RECSIZE2);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.cbData !== undefined) view.setBigUint64(0, BigInt(data.cbData), true);
  // 0x08: u64
  if (data?.cbLongValueData !== undefined) view.setBigUint64(8, BigInt(data.cbLongValueData), true);
  // 0x10: u64
  if (data?.cbOverhead !== undefined) view.setBigUint64(16, BigInt(data.cbOverhead), true);
  // 0x18: u64
  if (data?.cbLongValueOverhead !== undefined) view.setBigUint64(24, BigInt(data.cbLongValueOverhead), true);
  // 0x20: u64
  if (data?.cNonTaggedColumns !== undefined) view.setBigUint64(32, BigInt(data.cNonTaggedColumns), true);
  // 0x28: u64
  if (data?.cTaggedColumns !== undefined) view.setBigUint64(40, BigInt(data.cTaggedColumns), true);
  // 0x30: u64
  if (data?.cLongValues !== undefined) view.setBigUint64(48, BigInt(data.cLongValues), true);
  // 0x38: u64
  if (data?.cMultiValues !== undefined) view.setBigUint64(56, BigInt(data.cMultiValues), true);
  // 0x40: u64
  if (data?.cCompressedColumns !== undefined) view.setBigUint64(64, BigInt(data.cCompressedColumns), true);
  // 0x48: u64
  if (data?.cbDataCompressed !== undefined) view.setBigUint64(72, BigInt(data.cbDataCompressed), true);
  // 0x50: u64
  if (data?.cbLongValueDataCompressed !== undefined) view.setBigUint64(80, BigInt(data.cbLongValueDataCompressed), true);
  return buf;
}

export class JET_RECSIZE2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get cbData(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get cbLongValueData(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get cbOverhead(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get cbLongValueOverhead(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u64
  get cNonTaggedColumns(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u64
  get cTaggedColumns(): bigint | number {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: u64
  get cLongValues(): bigint | number {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: u64
  get cMultiValues(): bigint | number {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x40: u64
  get cCompressedColumns(): bigint | number {
    return Number(this.view.getBigUint64(64, true));
  }

  // 0x48: u64
  get cbDataCompressed(): bigint | number {
    return Number(this.view.getBigUint64(72, true));
  }

  // 0x50: u64
  get cbLongValueDataCompressed(): bigint | number {
    return Number(this.view.getBigUint64(80, true));
  }

  // 0x00: u64
  set cbData(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set cbLongValueData(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set cbOverhead(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set cbLongValueOverhead(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u64
  set cNonTaggedColumns(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u64
  set cTaggedColumns(value: bigint | number) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: u64
  set cLongValues(value: bigint | number) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: u64
  set cMultiValues(value: bigint | number) {
    this.view.setBigUint64(56, BigInt(value), true);
  }

  // 0x40: u64
  set cCompressedColumns(value: bigint | number) {
    this.view.setBigUint64(64, BigInt(value), true);
  }

  // 0x48: u64
  set cbDataCompressed(value: bigint | number) {
    this.view.setBigUint64(72, BigInt(value), true);
  }

  // 0x50: u64
  set cbLongValueDataCompressed(value: bigint | number) {
    this.view.setBigUint64(80, BigInt(value), true);
  }
}

export type PSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Storage.Jet.JET_RSTMAP_A (size: 16)
 */
export interface JET_RSTMAP_A {
  /** Windows.Win32.Foundation.PSTR */
  szDatabaseName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  szNewDatabaseName: string | null | Uint8Array;
}

export const sizeofJET_RSTMAP_A = 16;

export function allocJET_RSTMAP_A(data?: Partial<JET_RSTMAP_A>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_RSTMAP_A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szDatabaseName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.szDatabaseName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.szNewDatabaseName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.szNewDatabaseName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class JET_RSTMAP_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get szDatabaseName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get szNewDatabaseName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set szDatabaseName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set szNewDatabaseName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_RSTMAP_W (size: 16)
 */
export interface JET_RSTMAP_W {
  /** Windows.Win32.Foundation.PWSTR */
  szDatabaseName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  szNewDatabaseName: string | null | Uint8Array | Uint16Array;
}

export const sizeofJET_RSTMAP_W = 16;

export function allocJET_RSTMAP_W(data?: Partial<JET_RSTMAP_W>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_RSTMAP_W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szDatabaseName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.szDatabaseName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.szNewDatabaseName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szNewDatabaseName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class JET_RSTMAP_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get szDatabaseName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get szNewDatabaseName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set szDatabaseName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set szNewDatabaseName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: bigint | number;
  /** u64 */
  Region: bigint | number;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  X: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.X))), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_CONVERT_A (size: 16)
 */
export interface JET_CONVERT_A {
  /** Windows.Win32.Foundation.PSTR */
  szOldDll: string | null | Uint8Array;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofJET_CONVERT_A = 16;

export function allocJET_CONVERT_A(data?: Partial<JET_CONVERT_A>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_CONVERT_A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szOldDll !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.szOldDll);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class JET_CONVERT_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get szOldDll(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set szOldDll(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_CONVERT_W (size: 16)
 */
export interface JET_CONVERT_W {
  /** Windows.Win32.Foundation.PWSTR */
  szOldDll: string | null | Uint8Array | Uint16Array;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofJET_CONVERT_W = 16;

export function allocJET_CONVERT_W(data?: Partial<JET_CONVERT_W>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_CONVERT_W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szOldDll !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.szOldDll);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class JET_CONVERT_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get szOldDll(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set szOldDll(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_SNPROG (size: 16)
 */
export interface JET_SNPROG {
  /** u32 */
  cbStruct: number;
  /** u32 */
  cunitDone: number;
  /** u32 */
  cunitTotal: number;
}

export const sizeofJET_SNPROG = 16;

export function allocJET_SNPROG(data?: Partial<JET_SNPROG>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_SNPROG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.cunitDone !== undefined) view.setUint32(4, Number(data.cunitDone), true);
  // 0x08: u32
  if (data?.cunitTotal !== undefined) view.setUint32(8, Number(data.cunitTotal), true);
  // 0x0c: pad4
  return buf;
}

export class JET_SNPROGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cunitDone(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cunitTotal(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cunitDone(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cunitTotal(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Storage.Jet.JET_DBINFOUPGRADE (size: 32)
 */
export interface JET_DBINFOUPGRADE {
  /** u32 */
  cbStruct: number;
  /** u32 */
  cbFilesizeLow: number;
  /** u32 */
  cbFilesizeHigh: number;
  /** u32 */
  cbFreeSpaceRequiredLow: number;
  /** u32 */
  cbFreeSpaceRequiredHigh: number;
  /** u32 */
  csecToUpgrade: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofJET_DBINFOUPGRADE = 32;

export function allocJET_DBINFOUPGRADE(data?: Partial<JET_DBINFOUPGRADE>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_DBINFOUPGRADE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.cbFilesizeLow !== undefined) view.setUint32(4, Number(data.cbFilesizeLow), true);
  // 0x08: u32
  if (data?.cbFilesizeHigh !== undefined) view.setUint32(8, Number(data.cbFilesizeHigh), true);
  // 0x0c: u32
  if (data?.cbFreeSpaceRequiredLow !== undefined) view.setUint32(12, Number(data.cbFreeSpaceRequiredLow), true);
  // 0x10: u32
  if (data?.cbFreeSpaceRequiredHigh !== undefined) view.setUint32(16, Number(data.cbFreeSpaceRequiredHigh), true);
  // 0x14: u32
  if (data?.csecToUpgrade !== undefined) view.setUint32(20, Number(data.csecToUpgrade), true);
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class JET_DBINFOUPGRADEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbFilesizeLow(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cbFilesizeHigh(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cbFreeSpaceRequiredLow(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get cbFreeSpaceRequiredHigh(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get csecToUpgrade(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbFilesizeLow(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cbFilesizeHigh(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cbFreeSpaceRequiredLow(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set cbFreeSpaceRequiredHigh(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set csecToUpgrade(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type JET_TABLEID = bigint | number;

/**
 * Windows.Win32.Storage.Jet.JET_OBJECTLIST (size: 56)
 */
export interface JET_OBJECTLIST {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Storage.StructuredStorage.JET_TABLEID */
  tableid: Uint8Array | Deno.PointerValue;
  /** u32 */
  cRecord: number;
  /** u32 */
  columnidcontainername: number;
  /** u32 */
  columnidobjectname: number;
  /** u32 */
  columnidobjtyp: number;
  /** u32 */
  columniddtCreate: number;
  /** u32 */
  columniddtUpdate: number;
  /** u32 */
  columnidgrbit: number;
  /** u32 */
  columnidflags: number;
  /** u32 */
  columnidcRecord: number;
  /** u32 */
  columnidcPage: number;
}

export const sizeofJET_OBJECTLIST = 56;

export function allocJET_OBJECTLIST(data?: Partial<JET_OBJECTLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_OBJECTLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.tableid !== undefined) view.setBigUint64(8, data.tableid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tableid))), true);
  // 0x10: u32
  if (data?.cRecord !== undefined) view.setUint32(16, Number(data.cRecord), true);
  // 0x14: u32
  if (data?.columnidcontainername !== undefined) view.setUint32(20, Number(data.columnidcontainername), true);
  // 0x18: u32
  if (data?.columnidobjectname !== undefined) view.setUint32(24, Number(data.columnidobjectname), true);
  // 0x1c: u32
  if (data?.columnidobjtyp !== undefined) view.setUint32(28, Number(data.columnidobjtyp), true);
  // 0x20: u32
  if (data?.columniddtCreate !== undefined) view.setUint32(32, Number(data.columniddtCreate), true);
  // 0x24: u32
  if (data?.columniddtUpdate !== undefined) view.setUint32(36, Number(data.columniddtUpdate), true);
  // 0x28: u32
  if (data?.columnidgrbit !== undefined) view.setUint32(40, Number(data.columnidgrbit), true);
  // 0x2c: u32
  if (data?.columnidflags !== undefined) view.setUint32(44, Number(data.columnidflags), true);
  // 0x30: u32
  if (data?.columnidcRecord !== undefined) view.setUint32(48, Number(data.columnidcRecord), true);
  // 0x34: u32
  if (data?.columnidcPage !== undefined) view.setUint32(52, Number(data.columnidcPage), true);
  return buf;
}

export class JET_OBJECTLISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get tableid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cRecord(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get columnidcontainername(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get columnidobjectname(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get columnidobjtyp(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get columniddtCreate(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get columniddtUpdate(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get columnidgrbit(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get columnidflags(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get columnidcRecord(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get columnidcPage(): number {
    return this.view.getUint32(52, true);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set tableid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set cRecord(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set columnidcontainername(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set columnidobjectname(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set columnidobjtyp(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set columniddtCreate(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set columniddtUpdate(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set columnidgrbit(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set columnidflags(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set columnidcRecord(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set columnidcPage(value: number) {
    this.view.setUint32(52, value, true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_COLUMNLIST (size: 80)
 */
export interface JET_COLUMNLIST {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Storage.StructuredStorage.JET_TABLEID */
  tableid: Uint8Array | Deno.PointerValue;
  /** u32 */
  cRecord: number;
  /** u32 */
  columnidPresentationOrder: number;
  /** u32 */
  columnidcolumnname: number;
  /** u32 */
  columnidcolumnid: number;
  /** u32 */
  columnidcoltyp: number;
  /** u32 */
  columnidCountry: number;
  /** u32 */
  columnidLangid: number;
  /** u32 */
  columnidCp: number;
  /** u32 */
  columnidCollate: number;
  /** u32 */
  columnidcbMax: number;
  /** u32 */
  columnidgrbit: number;
  /** u32 */
  columnidDefault: number;
  /** u32 */
  columnidBaseTableName: number;
  /** u32 */
  columnidBaseColumnName: number;
  /** u32 */
  columnidDefinitionName: number;
}

export const sizeofJET_COLUMNLIST = 80;

export function allocJET_COLUMNLIST(data?: Partial<JET_COLUMNLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_COLUMNLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.tableid !== undefined) view.setBigUint64(8, data.tableid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tableid))), true);
  // 0x10: u32
  if (data?.cRecord !== undefined) view.setUint32(16, Number(data.cRecord), true);
  // 0x14: u32
  if (data?.columnidPresentationOrder !== undefined) view.setUint32(20, Number(data.columnidPresentationOrder), true);
  // 0x18: u32
  if (data?.columnidcolumnname !== undefined) view.setUint32(24, Number(data.columnidcolumnname), true);
  // 0x1c: u32
  if (data?.columnidcolumnid !== undefined) view.setUint32(28, Number(data.columnidcolumnid), true);
  // 0x20: u32
  if (data?.columnidcoltyp !== undefined) view.setUint32(32, Number(data.columnidcoltyp), true);
  // 0x24: u32
  if (data?.columnidCountry !== undefined) view.setUint32(36, Number(data.columnidCountry), true);
  // 0x28: u32
  if (data?.columnidLangid !== undefined) view.setUint32(40, Number(data.columnidLangid), true);
  // 0x2c: u32
  if (data?.columnidCp !== undefined) view.setUint32(44, Number(data.columnidCp), true);
  // 0x30: u32
  if (data?.columnidCollate !== undefined) view.setUint32(48, Number(data.columnidCollate), true);
  // 0x34: u32
  if (data?.columnidcbMax !== undefined) view.setUint32(52, Number(data.columnidcbMax), true);
  // 0x38: u32
  if (data?.columnidgrbit !== undefined) view.setUint32(56, Number(data.columnidgrbit), true);
  // 0x3c: u32
  if (data?.columnidDefault !== undefined) view.setUint32(60, Number(data.columnidDefault), true);
  // 0x40: u32
  if (data?.columnidBaseTableName !== undefined) view.setUint32(64, Number(data.columnidBaseTableName), true);
  // 0x44: u32
  if (data?.columnidBaseColumnName !== undefined) view.setUint32(68, Number(data.columnidBaseColumnName), true);
  // 0x48: u32
  if (data?.columnidDefinitionName !== undefined) view.setUint32(72, Number(data.columnidDefinitionName), true);
  // 0x4c: pad4
  return buf;
}

export class JET_COLUMNLISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get tableid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cRecord(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get columnidPresentationOrder(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get columnidcolumnname(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get columnidcolumnid(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get columnidcoltyp(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get columnidCountry(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get columnidLangid(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get columnidCp(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get columnidCollate(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get columnidcbMax(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get columnidgrbit(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get columnidDefault(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get columnidBaseTableName(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get columnidBaseColumnName(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get columnidDefinitionName(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set tableid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set cRecord(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set columnidPresentationOrder(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set columnidcolumnname(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set columnidcolumnid(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set columnidcoltyp(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set columnidCountry(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set columnidLangid(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set columnidCp(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set columnidCollate(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set columnidcbMax(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set columnidgrbit(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set columnidDefault(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set columnidBaseTableName(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set columnidBaseColumnName(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set columnidDefinitionName(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4
}

/**
 * Windows.Win32.Storage.Jet.JET_COLUMNDEF (size: 32)
 */
export interface JET_COLUMNDEF {
  /** u32 */
  cbStruct: number;
  /** u32 */
  columnid: number;
  /** u32 */
  coltyp: number;
  /** u16 */
  wCountry: number;
  /** u16 */
  langid: number;
  /** u16 */
  cp: number;
  /** u16 */
  wCollate: number;
  /** u32 */
  cbMax: number;
  /** u32 */
  grbit: number;
}

export const sizeofJET_COLUMNDEF = 32;

export function allocJET_COLUMNDEF(data?: Partial<JET_COLUMNDEF>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_COLUMNDEF);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.columnid !== undefined) view.setUint32(4, Number(data.columnid), true);
  // 0x08: u32
  if (data?.coltyp !== undefined) view.setUint32(8, Number(data.coltyp), true);
  // 0x0c: u16
  if (data?.wCountry !== undefined) view.setUint16(12, Number(data.wCountry), true);
  // 0x0e: u16
  if (data?.langid !== undefined) view.setUint16(14, Number(data.langid), true);
  // 0x10: u16
  if (data?.cp !== undefined) view.setUint16(16, Number(data.cp), true);
  // 0x12: u16
  if (data?.wCollate !== undefined) view.setUint16(18, Number(data.wCollate), true);
  // 0x14: u32
  if (data?.cbMax !== undefined) view.setUint32(20, Number(data.cbMax), true);
  // 0x18: u32
  if (data?.grbit !== undefined) view.setUint32(24, Number(data.grbit), true);
  // 0x1c: pad4
  return buf;
}

export class JET_COLUMNDEFView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get columnid(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get coltyp(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u16
  get wCountry(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get langid(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: u16
  get cp(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get wCollate(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: u32
  get cbMax(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get grbit(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set columnid(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set coltyp(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u16
  set wCountry(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set langid(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: u16
  set cp(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set wCollate(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: u32
  set cbMax(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set grbit(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Storage.Jet.JET_COLUMNBASE_A (size: 48)
 */
export interface JET_COLUMNBASE_A {
  /** u32 */
  cbStruct: number;
  /** u32 */
  columnid: number;
  /** u32 */
  coltyp: number;
  /** u16 */
  wCountry: number;
  /** u16 */
  langid: number;
  /** u16 */
  cp: number;
  /** u16 */
  wFiller: number;
  /** u32 */
  cbMax: number;
  /** u32 */
  grbit: number;
  /** array */
  szBaseTableName: Deno.PointerValue;
  /** array */
  szBaseColumnName: Deno.PointerValue;
}

export const sizeofJET_COLUMNBASE_A = 48;

export function allocJET_COLUMNBASE_A(data?: Partial<JET_COLUMNBASE_A>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_COLUMNBASE_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.columnid !== undefined) view.setUint32(4, Number(data.columnid), true);
  // 0x08: u32
  if (data?.coltyp !== undefined) view.setUint32(8, Number(data.coltyp), true);
  // 0x0c: u16
  if (data?.wCountry !== undefined) view.setUint16(12, Number(data.wCountry), true);
  // 0x0e: u16
  if (data?.langid !== undefined) view.setUint16(14, Number(data.langid), true);
  // 0x10: u16
  if (data?.cp !== undefined) view.setUint16(16, Number(data.cp), true);
  // 0x12: u16
  if (data?.wFiller !== undefined) view.setUint16(18, Number(data.wFiller), true);
  // 0x14: u32
  if (data?.cbMax !== undefined) view.setUint32(20, Number(data.cbMax), true);
  // 0x18: u32
  if (data?.grbit !== undefined) view.setUint32(24, Number(data.grbit), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.szBaseTableName !== undefined) view.setBigUint64(32, data.szBaseTableName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szBaseTableName))), true);
  // 0x28: pointer
  if (data?.szBaseColumnName !== undefined) view.setBigUint64(40, data.szBaseColumnName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szBaseColumnName))), true);
  return buf;
}

export class JET_COLUMNBASE_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get columnid(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get coltyp(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u16
  get wCountry(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get langid(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: u16
  get cp(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get wFiller(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: u32
  get cbMax(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get grbit(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get szBaseTableName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get szBaseColumnName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set columnid(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set coltyp(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u16
  set wCountry(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set langid(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: u16
  set cp(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set wFiller(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: u32
  set cbMax(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set grbit(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set szBaseTableName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set szBaseColumnName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_COLUMNBASE_W (size: 48)
 */
export interface JET_COLUMNBASE_W {
  /** u32 */
  cbStruct: number;
  /** u32 */
  columnid: number;
  /** u32 */
  coltyp: number;
  /** u16 */
  wCountry: number;
  /** u16 */
  langid: number;
  /** u16 */
  cp: number;
  /** u16 */
  wFiller: number;
  /** u32 */
  cbMax: number;
  /** u32 */
  grbit: number;
  /** array */
  szBaseTableName: Deno.PointerValue;
  /** array */
  szBaseColumnName: Deno.PointerValue;
}

export const sizeofJET_COLUMNBASE_W = 48;

export function allocJET_COLUMNBASE_W(data?: Partial<JET_COLUMNBASE_W>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_COLUMNBASE_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.columnid !== undefined) view.setUint32(4, Number(data.columnid), true);
  // 0x08: u32
  if (data?.coltyp !== undefined) view.setUint32(8, Number(data.coltyp), true);
  // 0x0c: u16
  if (data?.wCountry !== undefined) view.setUint16(12, Number(data.wCountry), true);
  // 0x0e: u16
  if (data?.langid !== undefined) view.setUint16(14, Number(data.langid), true);
  // 0x10: u16
  if (data?.cp !== undefined) view.setUint16(16, Number(data.cp), true);
  // 0x12: u16
  if (data?.wFiller !== undefined) view.setUint16(18, Number(data.wFiller), true);
  // 0x14: u32
  if (data?.cbMax !== undefined) view.setUint32(20, Number(data.cbMax), true);
  // 0x18: u32
  if (data?.grbit !== undefined) view.setUint32(24, Number(data.grbit), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.szBaseTableName !== undefined) view.setBigUint64(32, data.szBaseTableName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szBaseTableName))), true);
  // 0x28: pointer
  if (data?.szBaseColumnName !== undefined) view.setBigUint64(40, data.szBaseColumnName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szBaseColumnName))), true);
  return buf;
}

export class JET_COLUMNBASE_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get columnid(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get coltyp(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u16
  get wCountry(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get langid(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: u16
  get cp(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get wFiller(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: u32
  get cbMax(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get grbit(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get szBaseTableName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get szBaseColumnName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set columnid(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set coltyp(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u16
  set wCountry(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set langid(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: u16
  set cp(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set wFiller(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: u32
  set cbMax(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set grbit(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set szBaseTableName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set szBaseColumnName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_INDEXLIST (size: 88)
 */
export interface JET_INDEXLIST {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Storage.StructuredStorage.JET_TABLEID */
  tableid: Uint8Array | Deno.PointerValue;
  /** u32 */
  cRecord: number;
  /** u32 */
  columnidindexname: number;
  /** u32 */
  columnidgrbitIndex: number;
  /** u32 */
  columnidcKey: number;
  /** u32 */
  columnidcEntry: number;
  /** u32 */
  columnidcPage: number;
  /** u32 */
  columnidcColumn: number;
  /** u32 */
  columnidiColumn: number;
  /** u32 */
  columnidcolumnid: number;
  /** u32 */
  columnidcoltyp: number;
  /** u32 */
  columnidCountry: number;
  /** u32 */
  columnidLangid: number;
  /** u32 */
  columnidCp: number;
  /** u32 */
  columnidCollate: number;
  /** u32 */
  columnidgrbitColumn: number;
  /** u32 */
  columnidcolumnname: number;
  /** u32 */
  columnidLCMapFlags: number;
}

export const sizeofJET_INDEXLIST = 88;

export function allocJET_INDEXLIST(data?: Partial<JET_INDEXLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_INDEXLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.tableid !== undefined) view.setBigUint64(8, data.tableid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tableid))), true);
  // 0x10: u32
  if (data?.cRecord !== undefined) view.setUint32(16, Number(data.cRecord), true);
  // 0x14: u32
  if (data?.columnidindexname !== undefined) view.setUint32(20, Number(data.columnidindexname), true);
  // 0x18: u32
  if (data?.columnidgrbitIndex !== undefined) view.setUint32(24, Number(data.columnidgrbitIndex), true);
  // 0x1c: u32
  if (data?.columnidcKey !== undefined) view.setUint32(28, Number(data.columnidcKey), true);
  // 0x20: u32
  if (data?.columnidcEntry !== undefined) view.setUint32(32, Number(data.columnidcEntry), true);
  // 0x24: u32
  if (data?.columnidcPage !== undefined) view.setUint32(36, Number(data.columnidcPage), true);
  // 0x28: u32
  if (data?.columnidcColumn !== undefined) view.setUint32(40, Number(data.columnidcColumn), true);
  // 0x2c: u32
  if (data?.columnidiColumn !== undefined) view.setUint32(44, Number(data.columnidiColumn), true);
  // 0x30: u32
  if (data?.columnidcolumnid !== undefined) view.setUint32(48, Number(data.columnidcolumnid), true);
  // 0x34: u32
  if (data?.columnidcoltyp !== undefined) view.setUint32(52, Number(data.columnidcoltyp), true);
  // 0x38: u32
  if (data?.columnidCountry !== undefined) view.setUint32(56, Number(data.columnidCountry), true);
  // 0x3c: u32
  if (data?.columnidLangid !== undefined) view.setUint32(60, Number(data.columnidLangid), true);
  // 0x40: u32
  if (data?.columnidCp !== undefined) view.setUint32(64, Number(data.columnidCp), true);
  // 0x44: u32
  if (data?.columnidCollate !== undefined) view.setUint32(68, Number(data.columnidCollate), true);
  // 0x48: u32
  if (data?.columnidgrbitColumn !== undefined) view.setUint32(72, Number(data.columnidgrbitColumn), true);
  // 0x4c: u32
  if (data?.columnidcolumnname !== undefined) view.setUint32(76, Number(data.columnidcolumnname), true);
  // 0x50: u32
  if (data?.columnidLCMapFlags !== undefined) view.setUint32(80, Number(data.columnidLCMapFlags), true);
  // 0x54: pad4
  return buf;
}

export class JET_INDEXLISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get tableid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cRecord(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get columnidindexname(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get columnidgrbitIndex(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get columnidcKey(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get columnidcEntry(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get columnidcPage(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get columnidcColumn(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get columnidiColumn(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get columnidcolumnid(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get columnidcoltyp(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get columnidCountry(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get columnidLangid(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get columnidCp(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get columnidCollate(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get columnidgrbitColumn(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get columnidcolumnname(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get columnidLCMapFlags(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set tableid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set cRecord(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set columnidindexname(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set columnidgrbitIndex(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set columnidcKey(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set columnidcEntry(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set columnidcPage(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set columnidcColumn(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set columnidiColumn(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set columnidcolumnid(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set columnidcoltyp(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set columnidCountry(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set columnidLangid(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set columnidCp(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set columnidCollate(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set columnidgrbitColumn(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set columnidcolumnname(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set columnidLCMapFlags(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4
}

/**
 * Windows.Win32.Storage.Jet.JET_COLUMNCREATE_A (size: 56)
 */
export interface JET_COLUMNCREATE_A {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PSTR */
  szColumnName: string | null | Uint8Array;
  /** u32 */
  coltyp: number;
  /** u32 */
  cbMax: number;
  /** u32 */
  grbit: number;
  /** ptr */
  pvDefault: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbDefault: number;
  /** u32 */
  cp: number;
  /** u32 */
  columnid: number;
  /** i32 */
  err: number;
}

export const sizeofJET_COLUMNCREATE_A = 56;

export function allocJET_COLUMNCREATE_A(data?: Partial<JET_COLUMNCREATE_A>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_COLUMNCREATE_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.szColumnName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.szColumnName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.coltyp !== undefined) view.setUint32(16, Number(data.coltyp), true);
  // 0x14: u32
  if (data?.cbMax !== undefined) view.setUint32(20, Number(data.cbMax), true);
  // 0x18: u32
  if (data?.grbit !== undefined) view.setUint32(24, Number(data.grbit), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pvDefault !== undefined) view.setBigUint64(32, data.pvDefault === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvDefault))), true);
  // 0x28: u32
  if (data?.cbDefault !== undefined) view.setUint32(40, Number(data.cbDefault), true);
  // 0x2c: u32
  if (data?.cp !== undefined) view.setUint32(44, Number(data.cp), true);
  // 0x30: u32
  if (data?.columnid !== undefined) view.setUint32(48, Number(data.columnid), true);
  // 0x34: i32
  if (data?.err !== undefined) view.setInt32(52, Number(data.err), true);
  return buf;
}

export class JET_COLUMNCREATE_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get szColumnName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get coltyp(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cbMax(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get grbit(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get pvDefault(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get cbDefault(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get cp(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get columnid(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: i32
  get err(): number {
    return this.view.getInt32(52, true);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set szColumnName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set coltyp(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cbMax(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set grbit(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set pvDefault(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set cbDefault(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set cp(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set columnid(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: i32
  set err(value: number) {
    this.view.setInt32(52, value, true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_COLUMNCREATE_W (size: 56)
 */
export interface JET_COLUMNCREATE_W {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  szColumnName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  coltyp: number;
  /** u32 */
  cbMax: number;
  /** u32 */
  grbit: number;
  /** ptr */
  pvDefault: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbDefault: number;
  /** u32 */
  cp: number;
  /** u32 */
  columnid: number;
  /** i32 */
  err: number;
}

export const sizeofJET_COLUMNCREATE_W = 56;

export function allocJET_COLUMNCREATE_W(data?: Partial<JET_COLUMNCREATE_W>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_COLUMNCREATE_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.szColumnName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szColumnName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.coltyp !== undefined) view.setUint32(16, Number(data.coltyp), true);
  // 0x14: u32
  if (data?.cbMax !== undefined) view.setUint32(20, Number(data.cbMax), true);
  // 0x18: u32
  if (data?.grbit !== undefined) view.setUint32(24, Number(data.grbit), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pvDefault !== undefined) view.setBigUint64(32, data.pvDefault === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvDefault))), true);
  // 0x28: u32
  if (data?.cbDefault !== undefined) view.setUint32(40, Number(data.cbDefault), true);
  // 0x2c: u32
  if (data?.cp !== undefined) view.setUint32(44, Number(data.cp), true);
  // 0x30: u32
  if (data?.columnid !== undefined) view.setUint32(48, Number(data.columnid), true);
  // 0x34: i32
  if (data?.err !== undefined) view.setInt32(52, Number(data.err), true);
  return buf;
}

export class JET_COLUMNCREATE_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get szColumnName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get coltyp(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cbMax(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get grbit(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get pvDefault(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get cbDefault(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get cp(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get columnid(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: i32
  get err(): number {
    return this.view.getInt32(52, true);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set szColumnName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set coltyp(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cbMax(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set grbit(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set pvDefault(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set cbDefault(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set cp(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set columnid(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: i32
  set err(value: number) {
    this.view.setInt32(52, value, true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_USERDEFINEDDEFAULT_A (size: 32)
 */
export interface JET_USERDEFINEDDEFAULT_A {
  /** Windows.Win32.Foundation.PSTR */
  szCallback: string | null | Uint8Array;
  /** ptr */
  pbUserData: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbUserData: number;
  /** Windows.Win32.Foundation.PSTR */
  szDependantColumns: string | null | Uint8Array;
}

export const sizeofJET_USERDEFINEDDEFAULT_A = 32;

export function allocJET_USERDEFINEDDEFAULT_A(data?: Partial<JET_USERDEFINEDDEFAULT_A>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_USERDEFINEDDEFAULT_A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szCallback !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.szCallback);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.pbUserData !== undefined) view.setBigUint64(8, data.pbUserData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbUserData))), true);
  // 0x10: u32
  if (data?.cbUserData !== undefined) view.setUint32(16, Number(data.cbUserData), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.szDependantColumns !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.szDependantColumns);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  return buf;
}

export class JET_USERDEFINEDDEFAULT_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get szCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pbUserData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cbUserData(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get szDependantColumns(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set szCallback(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set pbUserData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set cbUserData(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set szDependantColumns(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_USERDEFINEDDEFAULT_W (size: 32)
 */
export interface JET_USERDEFINEDDEFAULT_W {
  /** Windows.Win32.Foundation.PWSTR */
  szCallback: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pbUserData: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbUserData: number;
  /** Windows.Win32.Foundation.PWSTR */
  szDependantColumns: string | null | Uint8Array | Uint16Array;
}

export const sizeofJET_USERDEFINEDDEFAULT_W = 32;

export function allocJET_USERDEFINEDDEFAULT_W(data?: Partial<JET_USERDEFINEDDEFAULT_W>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_USERDEFINEDDEFAULT_W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szCallback !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.szCallback);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.pbUserData !== undefined) view.setBigUint64(8, data.pbUserData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbUserData))), true);
  // 0x10: u32
  if (data?.cbUserData !== undefined) view.setUint32(16, Number(data.cbUserData), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.szDependantColumns !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.szDependantColumns);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  return buf;
}

export class JET_USERDEFINEDDEFAULT_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get szCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pbUserData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cbUserData(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get szDependantColumns(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set szCallback(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set pbUserData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set cbUserData(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set szDependantColumns(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_CONDITIONALCOLUMN_A (size: 24)
 */
export interface JET_CONDITIONALCOLUMN_A {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PSTR */
  szColumnName: string | null | Uint8Array;
  /** u32 */
  grbit: number;
}

export const sizeofJET_CONDITIONALCOLUMN_A = 24;

export function allocJET_CONDITIONALCOLUMN_A(data?: Partial<JET_CONDITIONALCOLUMN_A>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_CONDITIONALCOLUMN_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.szColumnName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.szColumnName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.grbit !== undefined) view.setUint32(16, Number(data.grbit), true);
  // 0x14: pad4
  return buf;
}

export class JET_CONDITIONALCOLUMN_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get szColumnName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get grbit(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set szColumnName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set grbit(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Storage.Jet.JET_CONDITIONALCOLUMN_W (size: 24)
 */
export interface JET_CONDITIONALCOLUMN_W {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  szColumnName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  grbit: number;
}

export const sizeofJET_CONDITIONALCOLUMN_W = 24;

export function allocJET_CONDITIONALCOLUMN_W(data?: Partial<JET_CONDITIONALCOLUMN_W>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_CONDITIONALCOLUMN_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.szColumnName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szColumnName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.grbit !== undefined) view.setUint32(16, Number(data.grbit), true);
  // 0x14: pad4
  return buf;
}

export class JET_CONDITIONALCOLUMN_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get szColumnName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get grbit(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set szColumnName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set grbit(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Storage.Jet.JET_UNICODEINDEX (size: 8)
 */
export interface JET_UNICODEINDEX {
  /** u32 */
  lcid: number;
  /** u32 */
  dwMapFlags: number;
}

export const sizeofJET_UNICODEINDEX = 8;

export function allocJET_UNICODEINDEX(data?: Partial<JET_UNICODEINDEX>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_UNICODEINDEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lcid !== undefined) view.setUint32(0, Number(data.lcid), true);
  // 0x04: u32
  if (data?.dwMapFlags !== undefined) view.setUint32(4, Number(data.dwMapFlags), true);
  return buf;
}

export class JET_UNICODEINDEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lcid(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMapFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set lcid(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMapFlags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_UNICODEINDEX2 (size: 16)
 */
export interface JET_UNICODEINDEX2 {
  /** Windows.Win32.Foundation.PWSTR */
  szLocaleName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwMapFlags: number;
}

export const sizeofJET_UNICODEINDEX2 = 16;

export function allocJET_UNICODEINDEX2(data?: Partial<JET_UNICODEINDEX2>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_UNICODEINDEX2);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szLocaleName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.szLocaleName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u32
  if (data?.dwMapFlags !== undefined) view.setUint32(8, Number(data.dwMapFlags), true);
  // 0x0c: pad4
  return buf;
}

export class JET_UNICODEINDEX2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get szLocaleName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwMapFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: buffer
  set szLocaleName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u32
  set dwMapFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Storage.Jet.JET_TUPLELIMITS (size: 24)
 */
export interface JET_TUPLELIMITS {
  /** u32 */
  chLengthMin: number;
  /** u32 */
  chLengthMax: number;
  /** u32 */
  chToIndexMax: number;
  /** u32 */
  cchIncrement: number;
  /** u32 */
  ichStart: number;
}

export const sizeofJET_TUPLELIMITS = 24;

export function allocJET_TUPLELIMITS(data?: Partial<JET_TUPLELIMITS>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_TUPLELIMITS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.chLengthMin !== undefined) view.setUint32(0, Number(data.chLengthMin), true);
  // 0x04: u32
  if (data?.chLengthMax !== undefined) view.setUint32(4, Number(data.chLengthMax), true);
  // 0x08: u32
  if (data?.chToIndexMax !== undefined) view.setUint32(8, Number(data.chToIndexMax), true);
  // 0x0c: u32
  if (data?.cchIncrement !== undefined) view.setUint32(12, Number(data.cchIncrement), true);
  // 0x10: u32
  if (data?.ichStart !== undefined) view.setUint32(16, Number(data.ichStart), true);
  // 0x14: pad4
  return buf;
}

export class JET_TUPLELIMITSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get chLengthMin(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get chLengthMax(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get chToIndexMax(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cchIncrement(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ichStart(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set chLengthMin(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set chLengthMax(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set chToIndexMax(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cchIncrement(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ichStart(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Storage.Jet.JET_SPACEHINTS (size: 32)
 */
export interface JET_SPACEHINTS {
  /** u32 */
  cbStruct: number;
  /** u32 */
  ulInitialDensity: number;
  /** u32 */
  cbInitial: number;
  /** u32 */
  grbit: number;
  /** u32 */
  ulMaintDensity: number;
  /** u32 */
  ulGrowth: number;
  /** u32 */
  cbMinExtent: number;
  /** u32 */
  cbMaxExtent: number;
}

export const sizeofJET_SPACEHINTS = 32;

export function allocJET_SPACEHINTS(data?: Partial<JET_SPACEHINTS>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_SPACEHINTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.ulInitialDensity !== undefined) view.setUint32(4, Number(data.ulInitialDensity), true);
  // 0x08: u32
  if (data?.cbInitial !== undefined) view.setUint32(8, Number(data.cbInitial), true);
  // 0x0c: u32
  if (data?.grbit !== undefined) view.setUint32(12, Number(data.grbit), true);
  // 0x10: u32
  if (data?.ulMaintDensity !== undefined) view.setUint32(16, Number(data.ulMaintDensity), true);
  // 0x14: u32
  if (data?.ulGrowth !== undefined) view.setUint32(20, Number(data.ulGrowth), true);
  // 0x18: u32
  if (data?.cbMinExtent !== undefined) view.setUint32(24, Number(data.cbMinExtent), true);
  // 0x1c: u32
  if (data?.cbMaxExtent !== undefined) view.setUint32(28, Number(data.cbMaxExtent), true);
  return buf;
}

export class JET_SPACEHINTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ulInitialDensity(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cbInitial(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get grbit(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ulMaintDensity(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ulGrowth(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get cbMinExtent(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get cbMaxExtent(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ulInitialDensity(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cbInitial(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set grbit(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ulMaintDensity(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ulGrowth(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set cbMinExtent(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set cbMaxExtent(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_INDEXCREATE_A (size: 80)
 */
export interface JET_INDEXCREATE_A {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PSTR */
  szIndexName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  szKey: string | null | Uint8Array;
  /** u32 */
  cbKey: number;
  /** u32 */
  grbit: number;
  /** u32 */
  ulDensity: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** ptr */
  rgconditionalcolumn: Deno.PointerValue | Uint8Array;
  /** u32 */
  cConditionalColumn: number;
  /** i32 */
  err: number;
  /** u32 */
  cbKeyMost: number;
}

export const sizeofJET_INDEXCREATE_A = 80;

export function allocJET_INDEXCREATE_A(data?: Partial<JET_INDEXCREATE_A>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_INDEXCREATE_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.szIndexName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.szIndexName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.szKey !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.szKey);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.cbKey !== undefined) view.setUint32(24, Number(data.cbKey), true);
  // 0x1c: u32
  if (data?.grbit !== undefined) view.setUint32(28, Number(data.grbit), true);
  // 0x20: u32
  if (data?.ulDensity !== undefined) view.setUint32(32, Number(data.ulDensity), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(40, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x30: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(48, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x38: pointer
  if (data?.rgconditionalcolumn !== undefined) view.setBigUint64(56, data.rgconditionalcolumn === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgconditionalcolumn))), true);
  // 0x40: u32
  if (data?.cConditionalColumn !== undefined) view.setUint32(64, Number(data.cConditionalColumn), true);
  // 0x44: i32
  if (data?.err !== undefined) view.setInt32(68, Number(data.err), true);
  // 0x48: u32
  if (data?.cbKeyMost !== undefined) view.setUint32(72, Number(data.cbKeyMost), true);
  // 0x4c: pad4
  return buf;
}

export class JET_INDEXCREATE_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get szIndexName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get szKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get cbKey(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get grbit(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get ulDensity(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get rgconditionalcolumn(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get cConditionalColumn(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: i32
  get err(): number {
    return this.view.getInt32(68, true);
  }

  // 0x48: u32
  get cbKeyMost(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set szIndexName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set szKey(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set cbKey(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set grbit(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set ulDensity(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set rgconditionalcolumn(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set cConditionalColumn(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: i32
  set err(value: number) {
    this.view.setInt32(68, value, true);
  }

  // 0x48: u32
  set cbKeyMost(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4
}

/**
 * Windows.Win32.Storage.Jet.JET_INDEXCREATE_W (size: 80)
 */
export interface JET_INDEXCREATE_W {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  szIndexName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  szKey: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cbKey: number;
  /** u32 */
  grbit: number;
  /** u32 */
  ulDensity: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** ptr */
  rgconditionalcolumn: Deno.PointerValue | Uint8Array;
  /** u32 */
  cConditionalColumn: number;
  /** i32 */
  err: number;
  /** u32 */
  cbKeyMost: number;
}

export const sizeofJET_INDEXCREATE_W = 80;

export function allocJET_INDEXCREATE_W(data?: Partial<JET_INDEXCREATE_W>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_INDEXCREATE_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.szIndexName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szIndexName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.szKey !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.szKey);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.cbKey !== undefined) view.setUint32(24, Number(data.cbKey), true);
  // 0x1c: u32
  if (data?.grbit !== undefined) view.setUint32(28, Number(data.grbit), true);
  // 0x20: u32
  if (data?.ulDensity !== undefined) view.setUint32(32, Number(data.ulDensity), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(40, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x30: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(48, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x38: pointer
  if (data?.rgconditionalcolumn !== undefined) view.setBigUint64(56, data.rgconditionalcolumn === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgconditionalcolumn))), true);
  // 0x40: u32
  if (data?.cConditionalColumn !== undefined) view.setUint32(64, Number(data.cConditionalColumn), true);
  // 0x44: i32
  if (data?.err !== undefined) view.setInt32(68, Number(data.err), true);
  // 0x48: u32
  if (data?.cbKeyMost !== undefined) view.setUint32(72, Number(data.cbKeyMost), true);
  // 0x4c: pad4
  return buf;
}

export class JET_INDEXCREATE_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get szIndexName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get szKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get cbKey(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get grbit(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get ulDensity(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get rgconditionalcolumn(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get cConditionalColumn(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: i32
  get err(): number {
    return this.view.getInt32(68, true);
  }

  // 0x48: u32
  get cbKeyMost(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set szIndexName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set szKey(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set cbKey(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set grbit(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set ulDensity(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set rgconditionalcolumn(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set cConditionalColumn(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: i32
  set err(value: number) {
    this.view.setInt32(68, value, true);
  }

  // 0x48: u32
  set cbKeyMost(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4
}

/**
 * Windows.Win32.Storage.Jet.JET_INDEXCREATE2_A (size: 88)
 */
export interface JET_INDEXCREATE2_A {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PSTR */
  szIndexName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  szKey: string | null | Uint8Array;
  /** u32 */
  cbKey: number;
  /** u32 */
  grbit: number;
  /** u32 */
  ulDensity: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** ptr */
  rgconditionalcolumn: Deno.PointerValue | Uint8Array;
  /** u32 */
  cConditionalColumn: number;
  /** i32 */
  err: number;
  /** u32 */
  cbKeyMost: number;
  /** ptr */
  pSpacehints: Deno.PointerValue | Uint8Array;
}

export const sizeofJET_INDEXCREATE2_A = 88;

export function allocJET_INDEXCREATE2_A(data?: Partial<JET_INDEXCREATE2_A>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_INDEXCREATE2_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.szIndexName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.szIndexName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.szKey !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.szKey);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.cbKey !== undefined) view.setUint32(24, Number(data.cbKey), true);
  // 0x1c: u32
  if (data?.grbit !== undefined) view.setUint32(28, Number(data.grbit), true);
  // 0x20: u32
  if (data?.ulDensity !== undefined) view.setUint32(32, Number(data.ulDensity), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(40, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x30: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(48, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x38: pointer
  if (data?.rgconditionalcolumn !== undefined) view.setBigUint64(56, data.rgconditionalcolumn === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgconditionalcolumn))), true);
  // 0x40: u32
  if (data?.cConditionalColumn !== undefined) view.setUint32(64, Number(data.cConditionalColumn), true);
  // 0x44: i32
  if (data?.err !== undefined) view.setInt32(68, Number(data.err), true);
  // 0x48: u32
  if (data?.cbKeyMost !== undefined) view.setUint32(72, Number(data.cbKeyMost), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.pSpacehints !== undefined) view.setBigUint64(80, data.pSpacehints === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSpacehints))), true);
  return buf;
}

export class JET_INDEXCREATE2_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get szIndexName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get szKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get cbKey(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get grbit(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get ulDensity(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get rgconditionalcolumn(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get cConditionalColumn(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: i32
  get err(): number {
    return this.view.getInt32(68, true);
  }

  // 0x48: u32
  get cbKeyMost(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get pSpacehints(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set szIndexName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set szKey(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set cbKey(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set grbit(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set ulDensity(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set rgconditionalcolumn(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set cConditionalColumn(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: i32
  set err(value: number) {
    this.view.setInt32(68, value, true);
  }

  // 0x48: u32
  set cbKeyMost(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set pSpacehints(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_INDEXCREATE2_W (size: 88)
 */
export interface JET_INDEXCREATE2_W {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  szIndexName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  szKey: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cbKey: number;
  /** u32 */
  grbit: number;
  /** u32 */
  ulDensity: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** ptr */
  rgconditionalcolumn: Deno.PointerValue | Uint8Array;
  /** u32 */
  cConditionalColumn: number;
  /** i32 */
  err: number;
  /** u32 */
  cbKeyMost: number;
  /** ptr */
  pSpacehints: Deno.PointerValue | Uint8Array;
}

export const sizeofJET_INDEXCREATE2_W = 88;

export function allocJET_INDEXCREATE2_W(data?: Partial<JET_INDEXCREATE2_W>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_INDEXCREATE2_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.szIndexName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szIndexName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.szKey !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.szKey);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.cbKey !== undefined) view.setUint32(24, Number(data.cbKey), true);
  // 0x1c: u32
  if (data?.grbit !== undefined) view.setUint32(28, Number(data.grbit), true);
  // 0x20: u32
  if (data?.ulDensity !== undefined) view.setUint32(32, Number(data.ulDensity), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(40, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x30: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(48, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x38: pointer
  if (data?.rgconditionalcolumn !== undefined) view.setBigUint64(56, data.rgconditionalcolumn === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgconditionalcolumn))), true);
  // 0x40: u32
  if (data?.cConditionalColumn !== undefined) view.setUint32(64, Number(data.cConditionalColumn), true);
  // 0x44: i32
  if (data?.err !== undefined) view.setInt32(68, Number(data.err), true);
  // 0x48: u32
  if (data?.cbKeyMost !== undefined) view.setUint32(72, Number(data.cbKeyMost), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.pSpacehints !== undefined) view.setBigUint64(80, data.pSpacehints === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSpacehints))), true);
  return buf;
}

export class JET_INDEXCREATE2_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get szIndexName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get szKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get cbKey(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get grbit(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get ulDensity(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get rgconditionalcolumn(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get cConditionalColumn(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: i32
  get err(): number {
    return this.view.getInt32(68, true);
  }

  // 0x48: u32
  get cbKeyMost(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get pSpacehints(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set szIndexName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set szKey(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set cbKey(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set grbit(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set ulDensity(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set rgconditionalcolumn(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set cConditionalColumn(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: i32
  set err(value: number) {
    this.view.setInt32(68, value, true);
  }

  // 0x48: u32
  set cbKeyMost(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set pSpacehints(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_INDEXCREATE3_A (size: 88)
 */
export interface JET_INDEXCREATE3_A {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PSTR */
  szIndexName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  szKey: string | null | Uint8Array;
  /** u32 */
  cbKey: number;
  /** u32 */
  grbit: number;
  /** u32 */
  ulDensity: number;
  /** ptr */
  pidxunicode: Deno.PointerValue | Uint8Array;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** ptr */
  rgconditionalcolumn: Deno.PointerValue | Uint8Array;
  /** u32 */
  cConditionalColumn: number;
  /** i32 */
  err: number;
  /** u32 */
  cbKeyMost: number;
  /** ptr */
  pSpacehints: Deno.PointerValue | Uint8Array;
}

export const sizeofJET_INDEXCREATE3_A = 88;

export function allocJET_INDEXCREATE3_A(data?: Partial<JET_INDEXCREATE3_A>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_INDEXCREATE3_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.szIndexName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.szIndexName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.szKey !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.szKey);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.cbKey !== undefined) view.setUint32(24, Number(data.cbKey), true);
  // 0x1c: u32
  if (data?.grbit !== undefined) view.setUint32(28, Number(data.grbit), true);
  // 0x20: u32
  if (data?.ulDensity !== undefined) view.setUint32(32, Number(data.ulDensity), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pidxunicode !== undefined) view.setBigUint64(40, data.pidxunicode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pidxunicode))), true);
  // 0x30: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(48, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x38: pointer
  if (data?.rgconditionalcolumn !== undefined) view.setBigUint64(56, data.rgconditionalcolumn === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgconditionalcolumn))), true);
  // 0x40: u32
  if (data?.cConditionalColumn !== undefined) view.setUint32(64, Number(data.cConditionalColumn), true);
  // 0x44: i32
  if (data?.err !== undefined) view.setInt32(68, Number(data.err), true);
  // 0x48: u32
  if (data?.cbKeyMost !== undefined) view.setUint32(72, Number(data.cbKeyMost), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.pSpacehints !== undefined) view.setBigUint64(80, data.pSpacehints === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSpacehints))), true);
  return buf;
}

export class JET_INDEXCREATE3_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get szIndexName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get szKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get cbKey(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get grbit(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get ulDensity(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get pidxunicode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get rgconditionalcolumn(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get cConditionalColumn(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: i32
  get err(): number {
    return this.view.getInt32(68, true);
  }

  // 0x48: u32
  get cbKeyMost(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get pSpacehints(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set szIndexName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set szKey(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set cbKey(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set grbit(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set ulDensity(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set pidxunicode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set rgconditionalcolumn(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set cConditionalColumn(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: i32
  set err(value: number) {
    this.view.setInt32(68, value, true);
  }

  // 0x48: u32
  set cbKeyMost(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set pSpacehints(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_INDEXCREATE3_W (size: 88)
 */
export interface JET_INDEXCREATE3_W {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  szIndexName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  szKey: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cbKey: number;
  /** u32 */
  grbit: number;
  /** u32 */
  ulDensity: number;
  /** ptr */
  pidxunicode: Deno.PointerValue | Uint8Array;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** ptr */
  rgconditionalcolumn: Deno.PointerValue | Uint8Array;
  /** u32 */
  cConditionalColumn: number;
  /** i32 */
  err: number;
  /** u32 */
  cbKeyMost: number;
  /** ptr */
  pSpacehints: Deno.PointerValue | Uint8Array;
}

export const sizeofJET_INDEXCREATE3_W = 88;

export function allocJET_INDEXCREATE3_W(data?: Partial<JET_INDEXCREATE3_W>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_INDEXCREATE3_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.szIndexName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szIndexName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.szKey !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.szKey);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.cbKey !== undefined) view.setUint32(24, Number(data.cbKey), true);
  // 0x1c: u32
  if (data?.grbit !== undefined) view.setUint32(28, Number(data.grbit), true);
  // 0x20: u32
  if (data?.ulDensity !== undefined) view.setUint32(32, Number(data.ulDensity), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pidxunicode !== undefined) view.setBigUint64(40, data.pidxunicode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pidxunicode))), true);
  // 0x30: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(48, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x38: pointer
  if (data?.rgconditionalcolumn !== undefined) view.setBigUint64(56, data.rgconditionalcolumn === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgconditionalcolumn))), true);
  // 0x40: u32
  if (data?.cConditionalColumn !== undefined) view.setUint32(64, Number(data.cConditionalColumn), true);
  // 0x44: i32
  if (data?.err !== undefined) view.setInt32(68, Number(data.err), true);
  // 0x48: u32
  if (data?.cbKeyMost !== undefined) view.setUint32(72, Number(data.cbKeyMost), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.pSpacehints !== undefined) view.setBigUint64(80, data.pSpacehints === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSpacehints))), true);
  return buf;
}

export class JET_INDEXCREATE3_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get szIndexName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get szKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get cbKey(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get grbit(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get ulDensity(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get pidxunicode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get rgconditionalcolumn(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get cConditionalColumn(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: i32
  get err(): number {
    return this.view.getInt32(68, true);
  }

  // 0x48: u32
  get cbKeyMost(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get pSpacehints(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set szIndexName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set szKey(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set cbKey(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set grbit(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set ulDensity(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set pidxunicode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set rgconditionalcolumn(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set cConditionalColumn(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: i32
  set err(value: number) {
    this.view.setInt32(68, value, true);
  }

  // 0x48: u32
  set cbKeyMost(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set pSpacehints(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_TABLECREATE_A (size: 80)
 */
export interface JET_TABLECREATE_A {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PSTR */
  szTableName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  szTemplateTableName: string | null | Uint8Array;
  /** u32 */
  ulPages: number;
  /** u32 */
  ulDensity: number;
  /** ptr */
  rgcolumncreate: Deno.PointerValue | Uint8Array;
  /** u32 */
  cColumns: number;
  /** ptr */
  rgindexcreate: Deno.PointerValue | Uint8Array;
  /** u32 */
  cIndexes: number;
  /** u32 */
  grbit: number;
  /** Windows.Win32.Storage.StructuredStorage.JET_TABLEID */
  tableid: Uint8Array | Deno.PointerValue;
  /** u32 */
  cCreated: number;
}

export const sizeofJET_TABLECREATE_A = 80;

export function allocJET_TABLECREATE_A(data?: Partial<JET_TABLECREATE_A>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_TABLECREATE_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.szTableName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.szTableName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.szTemplateTableName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.szTemplateTableName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.ulPages !== undefined) view.setUint32(24, Number(data.ulPages), true);
  // 0x1c: u32
  if (data?.ulDensity !== undefined) view.setUint32(28, Number(data.ulDensity), true);
  // 0x20: pointer
  if (data?.rgcolumncreate !== undefined) view.setBigUint64(32, data.rgcolumncreate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgcolumncreate))), true);
  // 0x28: u32
  if (data?.cColumns !== undefined) view.setUint32(40, Number(data.cColumns), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.rgindexcreate !== undefined) view.setBigUint64(48, data.rgindexcreate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgindexcreate))), true);
  // 0x38: u32
  if (data?.cIndexes !== undefined) view.setUint32(56, Number(data.cIndexes), true);
  // 0x3c: u32
  if (data?.grbit !== undefined) view.setUint32(60, Number(data.grbit), true);
  // 0x40: pointer
  if (data?.tableid !== undefined) view.setBigUint64(64, data.tableid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tableid))), true);
  // 0x48: u32
  if (data?.cCreated !== undefined) view.setUint32(72, Number(data.cCreated), true);
  // 0x4c: pad4
  return buf;
}

export class JET_TABLECREATE_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get szTableName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get szTemplateTableName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get ulPages(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ulDensity(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get rgcolumncreate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get cColumns(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get rgindexcreate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get cIndexes(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get grbit(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: pointer
  get tableid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get cCreated(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set szTableName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set szTemplateTableName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set ulPages(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ulDensity(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set rgcolumncreate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set cColumns(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set rgindexcreate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set cIndexes(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set grbit(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: pointer
  set tableid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set cCreated(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4
}

/**
 * Windows.Win32.Storage.Jet.JET_TABLECREATE_W (size: 80)
 */
export interface JET_TABLECREATE_W {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  szTableName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  szTemplateTableName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  ulPages: number;
  /** u32 */
  ulDensity: number;
  /** ptr */
  rgcolumncreate: Deno.PointerValue | Uint8Array;
  /** u32 */
  cColumns: number;
  /** ptr */
  rgindexcreate: Deno.PointerValue | Uint8Array;
  /** u32 */
  cIndexes: number;
  /** u32 */
  grbit: number;
  /** Windows.Win32.Storage.StructuredStorage.JET_TABLEID */
  tableid: Uint8Array | Deno.PointerValue;
  /** u32 */
  cCreated: number;
}

export const sizeofJET_TABLECREATE_W = 80;

export function allocJET_TABLECREATE_W(data?: Partial<JET_TABLECREATE_W>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_TABLECREATE_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.szTableName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szTableName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.szTemplateTableName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.szTemplateTableName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.ulPages !== undefined) view.setUint32(24, Number(data.ulPages), true);
  // 0x1c: u32
  if (data?.ulDensity !== undefined) view.setUint32(28, Number(data.ulDensity), true);
  // 0x20: pointer
  if (data?.rgcolumncreate !== undefined) view.setBigUint64(32, data.rgcolumncreate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgcolumncreate))), true);
  // 0x28: u32
  if (data?.cColumns !== undefined) view.setUint32(40, Number(data.cColumns), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.rgindexcreate !== undefined) view.setBigUint64(48, data.rgindexcreate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgindexcreate))), true);
  // 0x38: u32
  if (data?.cIndexes !== undefined) view.setUint32(56, Number(data.cIndexes), true);
  // 0x3c: u32
  if (data?.grbit !== undefined) view.setUint32(60, Number(data.grbit), true);
  // 0x40: pointer
  if (data?.tableid !== undefined) view.setBigUint64(64, data.tableid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tableid))), true);
  // 0x48: u32
  if (data?.cCreated !== undefined) view.setUint32(72, Number(data.cCreated), true);
  // 0x4c: pad4
  return buf;
}

export class JET_TABLECREATE_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get szTableName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get szTemplateTableName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get ulPages(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ulDensity(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get rgcolumncreate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get cColumns(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get rgindexcreate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get cIndexes(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get grbit(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: pointer
  get tableid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get cCreated(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set szTableName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set szTemplateTableName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set ulPages(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ulDensity(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set rgcolumncreate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set cColumns(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set rgindexcreate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set cIndexes(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set grbit(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: pointer
  set tableid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set cCreated(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4
}

/**
 * Windows.Win32.Storage.Jet.JET_TABLECREATE2_A (size: 96)
 */
export interface JET_TABLECREATE2_A {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PSTR */
  szTableName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  szTemplateTableName: string | null | Uint8Array;
  /** u32 */
  ulPages: number;
  /** u32 */
  ulDensity: number;
  /** ptr */
  rgcolumncreate: Deno.PointerValue | Uint8Array;
  /** u32 */
  cColumns: number;
  /** ptr */
  rgindexcreate: Deno.PointerValue | Uint8Array;
  /** u32 */
  cIndexes: number;
  /** Windows.Win32.Foundation.PSTR */
  szCallback: string | null | Uint8Array;
  /** u32 */
  cbtyp: number;
  /** u32 */
  grbit: number;
  /** Windows.Win32.Storage.StructuredStorage.JET_TABLEID */
  tableid: Uint8Array | Deno.PointerValue;
  /** u32 */
  cCreated: number;
}

export const sizeofJET_TABLECREATE2_A = 96;

export function allocJET_TABLECREATE2_A(data?: Partial<JET_TABLECREATE2_A>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_TABLECREATE2_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.szTableName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.szTableName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.szTemplateTableName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.szTemplateTableName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.ulPages !== undefined) view.setUint32(24, Number(data.ulPages), true);
  // 0x1c: u32
  if (data?.ulDensity !== undefined) view.setUint32(28, Number(data.ulDensity), true);
  // 0x20: pointer
  if (data?.rgcolumncreate !== undefined) view.setBigUint64(32, data.rgcolumncreate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgcolumncreate))), true);
  // 0x28: u32
  if (data?.cColumns !== undefined) view.setUint32(40, Number(data.cColumns), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.rgindexcreate !== undefined) view.setBigUint64(48, data.rgindexcreate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgindexcreate))), true);
  // 0x38: u32
  if (data?.cIndexes !== undefined) view.setUint32(56, Number(data.cIndexes), true);
  // 0x3c: pad4
  // 0x40: buffer
  if (data?.szCallback !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.szCallback);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: u32
  if (data?.cbtyp !== undefined) view.setUint32(72, Number(data.cbtyp), true);
  // 0x4c: u32
  if (data?.grbit !== undefined) view.setUint32(76, Number(data.grbit), true);
  // 0x50: pointer
  if (data?.tableid !== undefined) view.setBigUint64(80, data.tableid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tableid))), true);
  // 0x58: u32
  if (data?.cCreated !== undefined) view.setUint32(88, Number(data.cCreated), true);
  // 0x5c: pad4
  return buf;
}

export class JET_TABLECREATE2_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get szTableName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get szTemplateTableName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get ulPages(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ulDensity(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get rgcolumncreate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get cColumns(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get rgindexcreate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get cIndexes(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  get szCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get cbtyp(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get grbit(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: pointer
  get tableid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u32
  get cCreated(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set szTableName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set szTemplateTableName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set ulPages(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ulDensity(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set rgcolumncreate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set cColumns(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set rgindexcreate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set cIndexes(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  set szCallback(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: u32
  set cbtyp(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set grbit(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: pointer
  set tableid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u32
  set cCreated(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4
}

/**
 * Windows.Win32.Storage.Jet.JET_TABLECREATE2_W (size: 96)
 */
export interface JET_TABLECREATE2_W {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  szTableName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  szTemplateTableName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  ulPages: number;
  /** u32 */
  ulDensity: number;
  /** ptr */
  rgcolumncreate: Deno.PointerValue | Uint8Array;
  /** u32 */
  cColumns: number;
  /** ptr */
  rgindexcreate: Deno.PointerValue | Uint8Array;
  /** u32 */
  cIndexes: number;
  /** Windows.Win32.Foundation.PWSTR */
  szCallback: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cbtyp: number;
  /** u32 */
  grbit: number;
  /** Windows.Win32.Storage.StructuredStorage.JET_TABLEID */
  tableid: Uint8Array | Deno.PointerValue;
  /** u32 */
  cCreated: number;
}

export const sizeofJET_TABLECREATE2_W = 96;

export function allocJET_TABLECREATE2_W(data?: Partial<JET_TABLECREATE2_W>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_TABLECREATE2_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.szTableName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szTableName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.szTemplateTableName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.szTemplateTableName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.ulPages !== undefined) view.setUint32(24, Number(data.ulPages), true);
  // 0x1c: u32
  if (data?.ulDensity !== undefined) view.setUint32(28, Number(data.ulDensity), true);
  // 0x20: pointer
  if (data?.rgcolumncreate !== undefined) view.setBigUint64(32, data.rgcolumncreate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgcolumncreate))), true);
  // 0x28: u32
  if (data?.cColumns !== undefined) view.setUint32(40, Number(data.cColumns), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.rgindexcreate !== undefined) view.setBigUint64(48, data.rgindexcreate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgindexcreate))), true);
  // 0x38: u32
  if (data?.cIndexes !== undefined) view.setUint32(56, Number(data.cIndexes), true);
  // 0x3c: pad4
  // 0x40: buffer
  if (data?.szCallback !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.szCallback);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: u32
  if (data?.cbtyp !== undefined) view.setUint32(72, Number(data.cbtyp), true);
  // 0x4c: u32
  if (data?.grbit !== undefined) view.setUint32(76, Number(data.grbit), true);
  // 0x50: pointer
  if (data?.tableid !== undefined) view.setBigUint64(80, data.tableid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tableid))), true);
  // 0x58: u32
  if (data?.cCreated !== undefined) view.setUint32(88, Number(data.cCreated), true);
  // 0x5c: pad4
  return buf;
}

export class JET_TABLECREATE2_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get szTableName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get szTemplateTableName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get ulPages(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ulDensity(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get rgcolumncreate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get cColumns(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get rgindexcreate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get cIndexes(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  get szCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get cbtyp(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get grbit(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: pointer
  get tableid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u32
  get cCreated(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set szTableName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set szTemplateTableName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set ulPages(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ulDensity(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set rgcolumncreate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set cColumns(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set rgindexcreate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set cIndexes(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  set szCallback(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: u32
  set cbtyp(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set grbit(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: pointer
  set tableid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u32
  set cCreated(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4
}

/**
 * Windows.Win32.Storage.Jet.JET_TABLECREATE3_A (size: 120)
 */
export interface JET_TABLECREATE3_A {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PSTR */
  szTableName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  szTemplateTableName: string | null | Uint8Array;
  /** u32 */
  ulPages: number;
  /** u32 */
  ulDensity: number;
  /** ptr */
  rgcolumncreate: Deno.PointerValue | Uint8Array;
  /** u32 */
  cColumns: number;
  /** ptr */
  rgindexcreate: Deno.PointerValue | Uint8Array;
  /** u32 */
  cIndexes: number;
  /** Windows.Win32.Foundation.PSTR */
  szCallback: string | null | Uint8Array;
  /** u32 */
  cbtyp: number;
  /** u32 */
  grbit: number;
  /** ptr */
  pSeqSpacehints: Deno.PointerValue | Uint8Array;
  /** ptr */
  pLVSpacehints: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbSeparateLV: number;
  /** Windows.Win32.Storage.StructuredStorage.JET_TABLEID */
  tableid: Uint8Array | Deno.PointerValue;
  /** u32 */
  cCreated: number;
}

export const sizeofJET_TABLECREATE3_A = 120;

export function allocJET_TABLECREATE3_A(data?: Partial<JET_TABLECREATE3_A>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_TABLECREATE3_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.szTableName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.szTableName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.szTemplateTableName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.szTemplateTableName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.ulPages !== undefined) view.setUint32(24, Number(data.ulPages), true);
  // 0x1c: u32
  if (data?.ulDensity !== undefined) view.setUint32(28, Number(data.ulDensity), true);
  // 0x20: pointer
  if (data?.rgcolumncreate !== undefined) view.setBigUint64(32, data.rgcolumncreate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgcolumncreate))), true);
  // 0x28: u32
  if (data?.cColumns !== undefined) view.setUint32(40, Number(data.cColumns), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.rgindexcreate !== undefined) view.setBigUint64(48, data.rgindexcreate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgindexcreate))), true);
  // 0x38: u32
  if (data?.cIndexes !== undefined) view.setUint32(56, Number(data.cIndexes), true);
  // 0x3c: pad4
  // 0x40: buffer
  if (data?.szCallback !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.szCallback);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: u32
  if (data?.cbtyp !== undefined) view.setUint32(72, Number(data.cbtyp), true);
  // 0x4c: u32
  if (data?.grbit !== undefined) view.setUint32(76, Number(data.grbit), true);
  // 0x50: pointer
  if (data?.pSeqSpacehints !== undefined) view.setBigUint64(80, data.pSeqSpacehints === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSeqSpacehints))), true);
  // 0x58: pointer
  if (data?.pLVSpacehints !== undefined) view.setBigUint64(88, data.pLVSpacehints === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pLVSpacehints))), true);
  // 0x60: u32
  if (data?.cbSeparateLV !== undefined) view.setUint32(96, Number(data.cbSeparateLV), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.tableid !== undefined) view.setBigUint64(104, data.tableid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tableid))), true);
  // 0x70: u32
  if (data?.cCreated !== undefined) view.setUint32(112, Number(data.cCreated), true);
  // 0x74: pad4
  return buf;
}

export class JET_TABLECREATE3_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get szTableName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get szTemplateTableName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get ulPages(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ulDensity(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get rgcolumncreate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get cColumns(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get rgindexcreate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get cIndexes(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  get szCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get cbtyp(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get grbit(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: pointer
  get pSeqSpacehints(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get pLVSpacehints(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get cbSeparateLV(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get tableid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: u32
  get cCreated(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set szTableName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set szTemplateTableName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set ulPages(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ulDensity(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set rgcolumncreate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set cColumns(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set rgindexcreate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set cIndexes(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  set szCallback(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: u32
  set cbtyp(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set grbit(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: pointer
  set pSeqSpacehints(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set pLVSpacehints(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: u32
  set cbSeparateLV(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set tableid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: u32
  set cCreated(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4
}

/**
 * Windows.Win32.Storage.Jet.JET_TABLECREATE3_W (size: 120)
 */
export interface JET_TABLECREATE3_W {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  szTableName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  szTemplateTableName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  ulPages: number;
  /** u32 */
  ulDensity: number;
  /** ptr */
  rgcolumncreate: Deno.PointerValue | Uint8Array;
  /** u32 */
  cColumns: number;
  /** ptr */
  rgindexcreate: Deno.PointerValue | Uint8Array;
  /** u32 */
  cIndexes: number;
  /** Windows.Win32.Foundation.PWSTR */
  szCallback: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cbtyp: number;
  /** u32 */
  grbit: number;
  /** ptr */
  pSeqSpacehints: Deno.PointerValue | Uint8Array;
  /** ptr */
  pLVSpacehints: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbSeparateLV: number;
  /** Windows.Win32.Storage.StructuredStorage.JET_TABLEID */
  tableid: Uint8Array | Deno.PointerValue;
  /** u32 */
  cCreated: number;
}

export const sizeofJET_TABLECREATE3_W = 120;

export function allocJET_TABLECREATE3_W(data?: Partial<JET_TABLECREATE3_W>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_TABLECREATE3_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.szTableName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szTableName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.szTemplateTableName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.szTemplateTableName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.ulPages !== undefined) view.setUint32(24, Number(data.ulPages), true);
  // 0x1c: u32
  if (data?.ulDensity !== undefined) view.setUint32(28, Number(data.ulDensity), true);
  // 0x20: pointer
  if (data?.rgcolumncreate !== undefined) view.setBigUint64(32, data.rgcolumncreate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgcolumncreate))), true);
  // 0x28: u32
  if (data?.cColumns !== undefined) view.setUint32(40, Number(data.cColumns), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.rgindexcreate !== undefined) view.setBigUint64(48, data.rgindexcreate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgindexcreate))), true);
  // 0x38: u32
  if (data?.cIndexes !== undefined) view.setUint32(56, Number(data.cIndexes), true);
  // 0x3c: pad4
  // 0x40: buffer
  if (data?.szCallback !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.szCallback);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: u32
  if (data?.cbtyp !== undefined) view.setUint32(72, Number(data.cbtyp), true);
  // 0x4c: u32
  if (data?.grbit !== undefined) view.setUint32(76, Number(data.grbit), true);
  // 0x50: pointer
  if (data?.pSeqSpacehints !== undefined) view.setBigUint64(80, data.pSeqSpacehints === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSeqSpacehints))), true);
  // 0x58: pointer
  if (data?.pLVSpacehints !== undefined) view.setBigUint64(88, data.pLVSpacehints === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pLVSpacehints))), true);
  // 0x60: u32
  if (data?.cbSeparateLV !== undefined) view.setUint32(96, Number(data.cbSeparateLV), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.tableid !== undefined) view.setBigUint64(104, data.tableid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tableid))), true);
  // 0x70: u32
  if (data?.cCreated !== undefined) view.setUint32(112, Number(data.cCreated), true);
  // 0x74: pad4
  return buf;
}

export class JET_TABLECREATE3_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get szTableName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get szTemplateTableName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get ulPages(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ulDensity(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get rgcolumncreate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get cColumns(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get rgindexcreate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get cIndexes(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  get szCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get cbtyp(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get grbit(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: pointer
  get pSeqSpacehints(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get pLVSpacehints(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get cbSeparateLV(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get tableid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: u32
  get cCreated(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set szTableName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set szTemplateTableName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set ulPages(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ulDensity(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set rgcolumncreate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set cColumns(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set rgindexcreate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set cIndexes(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  set szCallback(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: u32
  set cbtyp(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set grbit(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: pointer
  set pSeqSpacehints(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set pLVSpacehints(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: u32
  set cbSeparateLV(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set tableid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: u32
  set cCreated(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4
}

/**
 * Windows.Win32.Storage.Jet.JET_TABLECREATE4_A (size: 120)
 */
export interface JET_TABLECREATE4_A {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PSTR */
  szTableName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  szTemplateTableName: string | null | Uint8Array;
  /** u32 */
  ulPages: number;
  /** u32 */
  ulDensity: number;
  /** ptr */
  rgcolumncreate: Deno.PointerValue | Uint8Array;
  /** u32 */
  cColumns: number;
  /** ptr */
  rgindexcreate: Deno.PointerValue | Uint8Array;
  /** u32 */
  cIndexes: number;
  /** Windows.Win32.Foundation.PSTR */
  szCallback: string | null | Uint8Array;
  /** u32 */
  cbtyp: number;
  /** u32 */
  grbit: number;
  /** ptr */
  pSeqSpacehints: Deno.PointerValue | Uint8Array;
  /** ptr */
  pLVSpacehints: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbSeparateLV: number;
  /** Windows.Win32.Storage.StructuredStorage.JET_TABLEID */
  tableid: Uint8Array | Deno.PointerValue;
  /** u32 */
  cCreated: number;
}

export const sizeofJET_TABLECREATE4_A = 120;

export function allocJET_TABLECREATE4_A(data?: Partial<JET_TABLECREATE4_A>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_TABLECREATE4_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.szTableName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.szTableName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.szTemplateTableName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.szTemplateTableName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.ulPages !== undefined) view.setUint32(24, Number(data.ulPages), true);
  // 0x1c: u32
  if (data?.ulDensity !== undefined) view.setUint32(28, Number(data.ulDensity), true);
  // 0x20: pointer
  if (data?.rgcolumncreate !== undefined) view.setBigUint64(32, data.rgcolumncreate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgcolumncreate))), true);
  // 0x28: u32
  if (data?.cColumns !== undefined) view.setUint32(40, Number(data.cColumns), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.rgindexcreate !== undefined) view.setBigUint64(48, data.rgindexcreate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgindexcreate))), true);
  // 0x38: u32
  if (data?.cIndexes !== undefined) view.setUint32(56, Number(data.cIndexes), true);
  // 0x3c: pad4
  // 0x40: buffer
  if (data?.szCallback !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.szCallback);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: u32
  if (data?.cbtyp !== undefined) view.setUint32(72, Number(data.cbtyp), true);
  // 0x4c: u32
  if (data?.grbit !== undefined) view.setUint32(76, Number(data.grbit), true);
  // 0x50: pointer
  if (data?.pSeqSpacehints !== undefined) view.setBigUint64(80, data.pSeqSpacehints === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSeqSpacehints))), true);
  // 0x58: pointer
  if (data?.pLVSpacehints !== undefined) view.setBigUint64(88, data.pLVSpacehints === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pLVSpacehints))), true);
  // 0x60: u32
  if (data?.cbSeparateLV !== undefined) view.setUint32(96, Number(data.cbSeparateLV), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.tableid !== undefined) view.setBigUint64(104, data.tableid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tableid))), true);
  // 0x70: u32
  if (data?.cCreated !== undefined) view.setUint32(112, Number(data.cCreated), true);
  // 0x74: pad4
  return buf;
}

export class JET_TABLECREATE4_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get szTableName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get szTemplateTableName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get ulPages(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ulDensity(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get rgcolumncreate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get cColumns(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get rgindexcreate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get cIndexes(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  get szCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get cbtyp(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get grbit(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: pointer
  get pSeqSpacehints(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get pLVSpacehints(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get cbSeparateLV(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get tableid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: u32
  get cCreated(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set szTableName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set szTemplateTableName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set ulPages(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ulDensity(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set rgcolumncreate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set cColumns(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set rgindexcreate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set cIndexes(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  set szCallback(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: u32
  set cbtyp(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set grbit(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: pointer
  set pSeqSpacehints(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set pLVSpacehints(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: u32
  set cbSeparateLV(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set tableid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: u32
  set cCreated(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4
}

/**
 * Windows.Win32.Storage.Jet.JET_TABLECREATE4_W (size: 120)
 */
export interface JET_TABLECREATE4_W {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  szTableName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  szTemplateTableName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  ulPages: number;
  /** u32 */
  ulDensity: number;
  /** ptr */
  rgcolumncreate: Deno.PointerValue | Uint8Array;
  /** u32 */
  cColumns: number;
  /** ptr */
  rgindexcreate: Deno.PointerValue | Uint8Array;
  /** u32 */
  cIndexes: number;
  /** Windows.Win32.Foundation.PWSTR */
  szCallback: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cbtyp: number;
  /** u32 */
  grbit: number;
  /** ptr */
  pSeqSpacehints: Deno.PointerValue | Uint8Array;
  /** ptr */
  pLVSpacehints: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbSeparateLV: number;
  /** Windows.Win32.Storage.StructuredStorage.JET_TABLEID */
  tableid: Uint8Array | Deno.PointerValue;
  /** u32 */
  cCreated: number;
}

export const sizeofJET_TABLECREATE4_W = 120;

export function allocJET_TABLECREATE4_W(data?: Partial<JET_TABLECREATE4_W>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_TABLECREATE4_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.szTableName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szTableName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.szTemplateTableName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.szTemplateTableName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.ulPages !== undefined) view.setUint32(24, Number(data.ulPages), true);
  // 0x1c: u32
  if (data?.ulDensity !== undefined) view.setUint32(28, Number(data.ulDensity), true);
  // 0x20: pointer
  if (data?.rgcolumncreate !== undefined) view.setBigUint64(32, data.rgcolumncreate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgcolumncreate))), true);
  // 0x28: u32
  if (data?.cColumns !== undefined) view.setUint32(40, Number(data.cColumns), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.rgindexcreate !== undefined) view.setBigUint64(48, data.rgindexcreate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgindexcreate))), true);
  // 0x38: u32
  if (data?.cIndexes !== undefined) view.setUint32(56, Number(data.cIndexes), true);
  // 0x3c: pad4
  // 0x40: buffer
  if (data?.szCallback !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.szCallback);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: u32
  if (data?.cbtyp !== undefined) view.setUint32(72, Number(data.cbtyp), true);
  // 0x4c: u32
  if (data?.grbit !== undefined) view.setUint32(76, Number(data.grbit), true);
  // 0x50: pointer
  if (data?.pSeqSpacehints !== undefined) view.setBigUint64(80, data.pSeqSpacehints === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSeqSpacehints))), true);
  // 0x58: pointer
  if (data?.pLVSpacehints !== undefined) view.setBigUint64(88, data.pLVSpacehints === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pLVSpacehints))), true);
  // 0x60: u32
  if (data?.cbSeparateLV !== undefined) view.setUint32(96, Number(data.cbSeparateLV), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.tableid !== undefined) view.setBigUint64(104, data.tableid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tableid))), true);
  // 0x70: u32
  if (data?.cCreated !== undefined) view.setUint32(112, Number(data.cCreated), true);
  // 0x74: pad4
  return buf;
}

export class JET_TABLECREATE4_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get szTableName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get szTemplateTableName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get ulPages(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ulDensity(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get rgcolumncreate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get cColumns(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get rgindexcreate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get cIndexes(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  get szCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get cbtyp(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get grbit(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: pointer
  get pSeqSpacehints(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get pLVSpacehints(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get cbSeparateLV(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get tableid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: u32
  get cCreated(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set szTableName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set szTemplateTableName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set ulPages(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ulDensity(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set rgcolumncreate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set cColumns(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set rgindexcreate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set cIndexes(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  set szCallback(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: u32
  set cbtyp(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set grbit(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: pointer
  set pSeqSpacehints(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set pLVSpacehints(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: u32
  set cbSeparateLV(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set tableid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: u32
  set cCreated(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4
}

/**
 * Windows.Win32.Storage.Jet.JET_OPENTEMPORARYTABLE (size: 64)
 */
export interface JET_OPENTEMPORARYTABLE {
  /** u32 */
  cbStruct: number;
  /** ptr */
  prgcolumndef: Deno.PointerValue | Uint8Array;
  /** u32 */
  ccolumn: number;
  /** ptr */
  pidxunicode: Deno.PointerValue | Uint8Array;
  /** u32 */
  grbit: number;
  /** ptr */
  prgcolumnid: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbKeyMost: number;
  /** u32 */
  cbVarSegMac: number;
  /** Windows.Win32.Storage.StructuredStorage.JET_TABLEID */
  tableid: Uint8Array | Deno.PointerValue;
}

export const sizeofJET_OPENTEMPORARYTABLE = 64;

export function allocJET_OPENTEMPORARYTABLE(data?: Partial<JET_OPENTEMPORARYTABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_OPENTEMPORARYTABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.prgcolumndef !== undefined) view.setBigUint64(8, data.prgcolumndef === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prgcolumndef))), true);
  // 0x10: u32
  if (data?.ccolumn !== undefined) view.setUint32(16, Number(data.ccolumn), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pidxunicode !== undefined) view.setBigUint64(24, data.pidxunicode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pidxunicode))), true);
  // 0x20: u32
  if (data?.grbit !== undefined) view.setUint32(32, Number(data.grbit), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.prgcolumnid !== undefined) view.setBigUint64(40, data.prgcolumnid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prgcolumnid))), true);
  // 0x30: u32
  if (data?.cbKeyMost !== undefined) view.setUint32(48, Number(data.cbKeyMost), true);
  // 0x34: u32
  if (data?.cbVarSegMac !== undefined) view.setUint32(52, Number(data.cbVarSegMac), true);
  // 0x38: pointer
  if (data?.tableid !== undefined) view.setBigUint64(56, data.tableid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tableid))), true);
  return buf;
}

export class JET_OPENTEMPORARYTABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get prgcolumndef(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get ccolumn(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pidxunicode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get grbit(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get prgcolumnid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get cbKeyMost(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get cbVarSegMac(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get tableid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set prgcolumndef(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set ccolumn(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pidxunicode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set grbit(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set prgcolumnid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set cbKeyMost(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set cbVarSegMac(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set tableid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_OPENTEMPORARYTABLE2 (size: 64)
 */
export interface JET_OPENTEMPORARYTABLE2 {
  /** u32 */
  cbStruct: number;
  /** ptr */
  prgcolumndef: Deno.PointerValue | Uint8Array;
  /** u32 */
  ccolumn: number;
  /** ptr */
  pidxunicode: Deno.PointerValue | Uint8Array;
  /** u32 */
  grbit: number;
  /** ptr */
  prgcolumnid: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbKeyMost: number;
  /** u32 */
  cbVarSegMac: number;
  /** Windows.Win32.Storage.StructuredStorage.JET_TABLEID */
  tableid: Uint8Array | Deno.PointerValue;
}

export const sizeofJET_OPENTEMPORARYTABLE2 = 64;

export function allocJET_OPENTEMPORARYTABLE2(data?: Partial<JET_OPENTEMPORARYTABLE2>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_OPENTEMPORARYTABLE2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.prgcolumndef !== undefined) view.setBigUint64(8, data.prgcolumndef === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prgcolumndef))), true);
  // 0x10: u32
  if (data?.ccolumn !== undefined) view.setUint32(16, Number(data.ccolumn), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pidxunicode !== undefined) view.setBigUint64(24, data.pidxunicode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pidxunicode))), true);
  // 0x20: u32
  if (data?.grbit !== undefined) view.setUint32(32, Number(data.grbit), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.prgcolumnid !== undefined) view.setBigUint64(40, data.prgcolumnid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prgcolumnid))), true);
  // 0x30: u32
  if (data?.cbKeyMost !== undefined) view.setUint32(48, Number(data.cbKeyMost), true);
  // 0x34: u32
  if (data?.cbVarSegMac !== undefined) view.setUint32(52, Number(data.cbVarSegMac), true);
  // 0x38: pointer
  if (data?.tableid !== undefined) view.setBigUint64(56, data.tableid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tableid))), true);
  return buf;
}

export class JET_OPENTEMPORARYTABLE2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get prgcolumndef(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get ccolumn(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pidxunicode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get grbit(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get prgcolumnid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get cbKeyMost(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get cbVarSegMac(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get tableid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set prgcolumndef(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set ccolumn(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pidxunicode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set grbit(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set prgcolumnid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set cbKeyMost(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set cbVarSegMac(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set tableid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_RETINFO (size: 16)
 */
export interface JET_RETINFO {
  /** u32 */
  cbStruct: number;
  /** u32 */
  ibLongValue: number;
  /** u32 */
  itagSequence: number;
  /** u32 */
  columnidNextTagged: number;
}

export const sizeofJET_RETINFO = 16;

export function allocJET_RETINFO(data?: Partial<JET_RETINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_RETINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.ibLongValue !== undefined) view.setUint32(4, Number(data.ibLongValue), true);
  // 0x08: u32
  if (data?.itagSequence !== undefined) view.setUint32(8, Number(data.itagSequence), true);
  // 0x0c: u32
  if (data?.columnidNextTagged !== undefined) view.setUint32(12, Number(data.columnidNextTagged), true);
  return buf;
}

export class JET_RETINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ibLongValue(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get itagSequence(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get columnidNextTagged(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ibLongValue(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set itagSequence(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set columnidNextTagged(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_SETINFO (size: 16)
 */
export interface JET_SETINFO {
  /** u32 */
  cbStruct: number;
  /** u32 */
  ibLongValue: number;
  /** u32 */
  itagSequence: number;
}

export const sizeofJET_SETINFO = 16;

export function allocJET_SETINFO(data?: Partial<JET_SETINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_SETINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.ibLongValue !== undefined) view.setUint32(4, Number(data.ibLongValue), true);
  // 0x08: u32
  if (data?.itagSequence !== undefined) view.setUint32(8, Number(data.itagSequence), true);
  // 0x0c: pad4
  return buf;
}

export class JET_SETINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ibLongValue(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get itagSequence(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ibLongValue(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set itagSequence(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Storage.Jet.JET_RECPOS (size: 16)
 */
export interface JET_RECPOS {
  /** u32 */
  cbStruct: number;
  /** u32 */
  centriesLT: number;
  /** u32 */
  centriesInRange: number;
  /** u32 */
  centriesTotal: number;
}

export const sizeofJET_RECPOS = 16;

export function allocJET_RECPOS(data?: Partial<JET_RECPOS>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_RECPOS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.centriesLT !== undefined) view.setUint32(4, Number(data.centriesLT), true);
  // 0x08: u32
  if (data?.centriesInRange !== undefined) view.setUint32(8, Number(data.centriesInRange), true);
  // 0x0c: u32
  if (data?.centriesTotal !== undefined) view.setUint32(12, Number(data.centriesTotal), true);
  return buf;
}

export class JET_RECPOSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get centriesLT(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get centriesInRange(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get centriesTotal(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set centriesLT(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set centriesInRange(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set centriesTotal(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_RECORDLIST (size: 24)
 */
export interface JET_RECORDLIST {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Storage.StructuredStorage.JET_TABLEID */
  tableid: Uint8Array | Deno.PointerValue;
  /** u32 */
  cRecord: number;
  /** u32 */
  columnidBookmark: number;
}

export const sizeofJET_RECORDLIST = 24;

export function allocJET_RECORDLIST(data?: Partial<JET_RECORDLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_RECORDLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.tableid !== undefined) view.setBigUint64(8, data.tableid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tableid))), true);
  // 0x10: u32
  if (data?.cRecord !== undefined) view.setUint32(16, Number(data.cRecord), true);
  // 0x14: u32
  if (data?.columnidBookmark !== undefined) view.setUint32(20, Number(data.columnidBookmark), true);
  return buf;
}

export class JET_RECORDLISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get tableid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cRecord(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get columnidBookmark(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set tableid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set cRecord(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set columnidBookmark(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_INDEXRANGE (size: 24)
 */
export interface JET_INDEXRANGE {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Storage.StructuredStorage.JET_TABLEID */
  tableid: Uint8Array | Deno.PointerValue;
  /** u32 */
  grbit: number;
}

export const sizeofJET_INDEXRANGE = 24;

export function allocJET_INDEXRANGE(data?: Partial<JET_INDEXRANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_INDEXRANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.tableid !== undefined) view.setBigUint64(8, data.tableid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tableid))), true);
  // 0x10: u32
  if (data?.grbit !== undefined) view.setUint32(16, Number(data.grbit), true);
  // 0x14: pad4
  return buf;
}

export class JET_INDEXRANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get tableid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get grbit(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set tableid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set grbit(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Storage.Jet.JET_INDEX_COLUMN (size: 24)
 */
export interface JET_INDEX_COLUMN {
  /** u32 */
  columnid: number;
  /** Windows.Win32.Storage.Jet.JET_RELOP */
  relop: JET_RELOP;
  /** ptr */
  pv: Deno.PointerValue | Uint8Array;
  /** u32 */
  cb: number;
  /** u32 */
  grbit: number;
}

export const sizeofJET_INDEX_COLUMN = 24;

export function allocJET_INDEX_COLUMN(data?: Partial<JET_INDEX_COLUMN>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_INDEX_COLUMN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.columnid !== undefined) view.setUint32(0, Number(data.columnid), true);
  // 0x04: i32
  if (data?.relop !== undefined) view.setInt32(4, Number(data.relop), true);
  // 0x08: pointer
  if (data?.pv !== undefined) view.setBigUint64(8, data.pv === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pv))), true);
  // 0x10: u32
  if (data?.cb !== undefined) view.setUint32(16, Number(data.cb), true);
  // 0x14: u32
  if (data?.grbit !== undefined) view.setUint32(20, Number(data.grbit), true);
  return buf;
}

export class JET_INDEX_COLUMNView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get columnid(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get relop(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get pv(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cb(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get grbit(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set columnid(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set relop(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set pv(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set cb(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set grbit(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_INDEX_RANGE (size: 32)
 */
export interface JET_INDEX_RANGE {
  /** ptr */
  rgStartColumns: Deno.PointerValue | Uint8Array;
  /** u32 */
  cStartColumns: number;
  /** ptr */
  rgEndColumns: Deno.PointerValue | Uint8Array;
  /** u32 */
  cEndColumns: number;
}

export const sizeofJET_INDEX_RANGE = 32;

export function allocJET_INDEX_RANGE(data?: Partial<JET_INDEX_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_INDEX_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rgStartColumns !== undefined) view.setBigUint64(0, data.rgStartColumns === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgStartColumns))), true);
  // 0x08: u32
  if (data?.cStartColumns !== undefined) view.setUint32(8, Number(data.cStartColumns), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.rgEndColumns !== undefined) view.setBigUint64(16, data.rgEndColumns === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgEndColumns))), true);
  // 0x18: u32
  if (data?.cEndColumns !== undefined) view.setUint32(24, Number(data.cEndColumns), true);
  // 0x1c: pad4
  return buf;
}

export class JET_INDEX_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rgStartColumns(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get cStartColumns(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get rgEndColumns(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get cEndColumns(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set rgStartColumns(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set cStartColumns(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set rgEndColumns(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set cEndColumns(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Storage.Jet.JET_BKLOGTIME (size: 24)
 */
export interface JET_BKLOGTIME {
  /** Windows.Win32.Foundation.CHAR */
  bSeconds: string | number;
  /** Windows.Win32.Foundation.CHAR */
  bMinutes: string | number;
  /** Windows.Win32.Foundation.CHAR */
  bHours: string | number;
  /** Windows.Win32.Foundation.CHAR */
  bDay: string | number;
  /** Windows.Win32.Foundation.CHAR */
  bMonth: string | number;
  /** Windows.Win32.Foundation.CHAR */
  bYear: string | number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
}

export const sizeofJET_BKLOGTIME = 24;

export function allocJET_BKLOGTIME(data?: Partial<JET_BKLOGTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_BKLOGTIME);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bSeconds !== undefined) view.setUint8(0, Number(data.bSeconds));
  // 0x01: u8
  if (data?.bMinutes !== undefined) view.setUint8(1, Number(data.bMinutes));
  // 0x02: u8
  if (data?.bHours !== undefined) view.setUint8(2, Number(data.bHours));
  // 0x03: u8
  if (data?.bDay !== undefined) view.setUint8(3, Number(data.bDay));
  // 0x04: u8
  if (data?.bMonth !== undefined) view.setUint8(4, Number(data.bMonth));
  // 0x05: u8
  if (data?.bYear !== undefined) view.setUint8(5, Number(data.bYear));
  // 0x06: pad2
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x10: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(16, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  return buf;
}

export class JET_BKLOGTIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bSeconds(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bMinutes(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get bHours(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get bDay(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u8
  get bMonth(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get bYear(): number {
    return this.view.getUint8(5);
  }

  // 0x06: pad2

  // 0x08: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set bSeconds(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bMinutes(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set bHours(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set bDay(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u8
  set bMonth(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set bYear(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: pad2

  // 0x08: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_LGPOS (size: 8)
 */
export interface JET_LGPOS {
  /** u16 */
  ib: number;
  /** u16 */
  isec: number;
  /** i32 */
  lGeneration: number;
}

export const sizeofJET_LGPOS = 8;

export function allocJET_LGPOS(data?: Partial<JET_LGPOS>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_LGPOS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ib !== undefined) view.setUint16(0, Number(data.ib), true);
  // 0x02: u16
  if (data?.isec !== undefined) view.setUint16(2, Number(data.isec), true);
  // 0x04: i32
  if (data?.lGeneration !== undefined) view.setInt32(4, Number(data.lGeneration), true);
  return buf;
}

export class JET_LGPOSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get ib(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get isec(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: i32
  get lGeneration(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u16
  set ib(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set isec(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: i32
  set lGeneration(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_BKINFO (size: 24)
 */
export interface JET_BKINFO {
  /** Windows.Win32.Storage.Jet.JET_LGPOS */
  lgposMark: Uint8Array | Deno.PointerValue;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** u32 */
  genLow: number;
  /** u32 */
  genHigh: number;
}

export const sizeofJET_BKINFO = 24;

export function allocJET_BKINFO(data?: Partial<JET_BKINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_BKINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lgposMark !== undefined) view.setBigUint64(0, data.lgposMark === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lgposMark))), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x10: u32
  if (data?.genLow !== undefined) view.setUint32(16, Number(data.genLow), true);
  // 0x14: u32
  if (data?.genHigh !== undefined) view.setUint32(20, Number(data.genHigh), true);
  return buf;
}

export class JET_BKINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lgposMark(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get genLow(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get genHigh(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set lgposMark(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set genLow(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set genHigh(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_DBINFOMISC (size: 136)
 */
export interface JET_DBINFOMISC {
  /** u32 */
  ulVersion: number;
  /** u32 */
  ulUpdate: number;
  /** Windows.Win32.Storage.Jet.JET_SIGNATURE */
  signDb: Uint8Array | Deno.PointerValue;
  /** u32 */
  dbstate: number;
  /** Windows.Win32.Storage.Jet.JET_LGPOS */
  lgposConsistent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeConsistent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeAttach: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_LGPOS */
  lgposAttach: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeDetach: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_LGPOS */
  lgposDetach: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_SIGNATURE */
  signLog: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_BKINFO */
  bkinfoFullPrev: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_BKINFO */
  bkinfoIncPrev: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_BKINFO */
  bkinfoFullCur: Uint8Array | Deno.PointerValue;
  /** u32 */
  fShadowingDisabled: number;
  /** u32 */
  fUpgradeDb: number;
  /** u32 */
  dwMajorVersion: number;
  /** u32 */
  dwMinorVersion: number;
  /** u32 */
  dwBuildNumber: number;
  /** i32 */
  lSPNumber: number;
  /** u32 */
  cbPageSize: number;
}

export const sizeofJET_DBINFOMISC = 136;

export function allocJET_DBINFOMISC(data?: Partial<JET_DBINFOMISC>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_DBINFOMISC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulVersion !== undefined) view.setUint32(0, Number(data.ulVersion), true);
  // 0x04: u32
  if (data?.ulUpdate !== undefined) view.setUint32(4, Number(data.ulUpdate), true);
  // 0x08: pointer
  if (data?.signDb !== undefined) view.setBigUint64(8, data.signDb === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.signDb))), true);
  // 0x10: u32
  if (data?.dbstate !== undefined) view.setUint32(16, Number(data.dbstate), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lgposConsistent !== undefined) view.setBigUint64(24, data.lgposConsistent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lgposConsistent))), true);
  // 0x20: pointer
  if (data?.logtimeConsistent !== undefined) view.setBigUint64(32, data.logtimeConsistent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeConsistent))), true);
  // 0x28: pointer
  if (data?.logtimeAttach !== undefined) view.setBigUint64(40, data.logtimeAttach === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeAttach))), true);
  // 0x30: pointer
  if (data?.lgposAttach !== undefined) view.setBigUint64(48, data.lgposAttach === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lgposAttach))), true);
  // 0x38: pointer
  if (data?.logtimeDetach !== undefined) view.setBigUint64(56, data.logtimeDetach === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeDetach))), true);
  // 0x40: pointer
  if (data?.lgposDetach !== undefined) view.setBigUint64(64, data.lgposDetach === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lgposDetach))), true);
  // 0x48: pointer
  if (data?.signLog !== undefined) view.setBigUint64(72, data.signLog === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.signLog))), true);
  // 0x50: pointer
  if (data?.bkinfoFullPrev !== undefined) view.setBigUint64(80, data.bkinfoFullPrev === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bkinfoFullPrev))), true);
  // 0x58: pointer
  if (data?.bkinfoIncPrev !== undefined) view.setBigUint64(88, data.bkinfoIncPrev === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bkinfoIncPrev))), true);
  // 0x60: pointer
  if (data?.bkinfoFullCur !== undefined) view.setBigUint64(96, data.bkinfoFullCur === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bkinfoFullCur))), true);
  // 0x68: u32
  if (data?.fShadowingDisabled !== undefined) view.setUint32(104, Number(data.fShadowingDisabled), true);
  // 0x6c: u32
  if (data?.fUpgradeDb !== undefined) view.setUint32(108, Number(data.fUpgradeDb), true);
  // 0x70: u32
  if (data?.dwMajorVersion !== undefined) view.setUint32(112, Number(data.dwMajorVersion), true);
  // 0x74: u32
  if (data?.dwMinorVersion !== undefined) view.setUint32(116, Number(data.dwMinorVersion), true);
  // 0x78: u32
  if (data?.dwBuildNumber !== undefined) view.setUint32(120, Number(data.dwBuildNumber), true);
  // 0x7c: i32
  if (data?.lSPNumber !== undefined) view.setInt32(124, Number(data.lSPNumber), true);
  // 0x80: u32
  if (data?.cbPageSize !== undefined) view.setUint32(128, Number(data.cbPageSize), true);
  // 0x84: pad4
  return buf;
}

export class JET_DBINFOMISCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ulUpdate(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get signDb(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dbstate(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get lgposConsistent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get logtimeConsistent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get logtimeAttach(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lgposAttach(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get logtimeDetach(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get lgposDetach(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get signLog(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get bkinfoFullPrev(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get bkinfoIncPrev(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get bkinfoFullCur(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get fShadowingDisabled(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get fUpgradeDb(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: u32
  get dwMajorVersion(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: u32
  get dwMinorVersion(): number {
    return this.view.getUint32(116, true);
  }

  // 0x78: u32
  get dwBuildNumber(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: i32
  get lSPNumber(): number {
    return this.view.getInt32(124, true);
  }

  // 0x80: u32
  get cbPageSize(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: pad4

  // 0x00: u32
  set ulVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ulUpdate(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set signDb(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dbstate(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set lgposConsistent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set logtimeConsistent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set logtimeAttach(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set lgposAttach(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set logtimeDetach(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set lgposDetach(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set signLog(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set bkinfoFullPrev(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set bkinfoIncPrev(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set bkinfoFullCur(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: u32
  set fShadowingDisabled(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set fUpgradeDb(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: u32
  set dwMajorVersion(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: u32
  set dwMinorVersion(value: number) {
    this.view.setUint32(116, value, true);
  }

  // 0x78: u32
  set dwBuildNumber(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: i32
  set lSPNumber(value: number) {
    this.view.setInt32(124, value, true);
  }

  // 0x80: u32
  set cbPageSize(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: pad4
}

/**
 * Windows.Win32.Storage.Jet.JET_DBINFOMISC2 (size: 224)
 */
export interface JET_DBINFOMISC2 {
  /** u32 */
  ulVersion: number;
  /** u32 */
  ulUpdate: number;
  /** Windows.Win32.Storage.Jet.JET_SIGNATURE */
  signDb: Uint8Array | Deno.PointerValue;
  /** u32 */
  dbstate: number;
  /** Windows.Win32.Storage.Jet.JET_LGPOS */
  lgposConsistent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeConsistent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeAttach: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_LGPOS */
  lgposAttach: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeDetach: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_LGPOS */
  lgposDetach: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_SIGNATURE */
  signLog: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_BKINFO */
  bkinfoFullPrev: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_BKINFO */
  bkinfoIncPrev: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_BKINFO */
  bkinfoFullCur: Uint8Array | Deno.PointerValue;
  /** u32 */
  fShadowingDisabled: number;
  /** u32 */
  fUpgradeDb: number;
  /** u32 */
  dwMajorVersion: number;
  /** u32 */
  dwMinorVersion: number;
  /** u32 */
  dwBuildNumber: number;
  /** i32 */
  lSPNumber: number;
  /** u32 */
  cbPageSize: number;
  /** u32 */
  genMinRequired: number;
  /** u32 */
  genMaxRequired: number;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeGenMaxCreate: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulRepairCount: number;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeRepair: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulRepairCountOld: number;
  /** u32 */
  ulECCFixSuccess: number;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeECCFixSuccess: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulECCFixSuccessOld: number;
  /** u32 */
  ulECCFixFail: number;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeECCFixFail: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulECCFixFailOld: number;
  /** u32 */
  ulBadChecksum: number;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeBadChecksum: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulBadChecksumOld: number;
}

export const sizeofJET_DBINFOMISC2 = 224;

export function allocJET_DBINFOMISC2(data?: Partial<JET_DBINFOMISC2>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_DBINFOMISC2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulVersion !== undefined) view.setUint32(0, Number(data.ulVersion), true);
  // 0x04: u32
  if (data?.ulUpdate !== undefined) view.setUint32(4, Number(data.ulUpdate), true);
  // 0x08: pointer
  if (data?.signDb !== undefined) view.setBigUint64(8, data.signDb === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.signDb))), true);
  // 0x10: u32
  if (data?.dbstate !== undefined) view.setUint32(16, Number(data.dbstate), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lgposConsistent !== undefined) view.setBigUint64(24, data.lgposConsistent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lgposConsistent))), true);
  // 0x20: pointer
  if (data?.logtimeConsistent !== undefined) view.setBigUint64(32, data.logtimeConsistent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeConsistent))), true);
  // 0x28: pointer
  if (data?.logtimeAttach !== undefined) view.setBigUint64(40, data.logtimeAttach === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeAttach))), true);
  // 0x30: pointer
  if (data?.lgposAttach !== undefined) view.setBigUint64(48, data.lgposAttach === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lgposAttach))), true);
  // 0x38: pointer
  if (data?.logtimeDetach !== undefined) view.setBigUint64(56, data.logtimeDetach === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeDetach))), true);
  // 0x40: pointer
  if (data?.lgposDetach !== undefined) view.setBigUint64(64, data.lgposDetach === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lgposDetach))), true);
  // 0x48: pointer
  if (data?.signLog !== undefined) view.setBigUint64(72, data.signLog === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.signLog))), true);
  // 0x50: pointer
  if (data?.bkinfoFullPrev !== undefined) view.setBigUint64(80, data.bkinfoFullPrev === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bkinfoFullPrev))), true);
  // 0x58: pointer
  if (data?.bkinfoIncPrev !== undefined) view.setBigUint64(88, data.bkinfoIncPrev === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bkinfoIncPrev))), true);
  // 0x60: pointer
  if (data?.bkinfoFullCur !== undefined) view.setBigUint64(96, data.bkinfoFullCur === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bkinfoFullCur))), true);
  // 0x68: u32
  if (data?.fShadowingDisabled !== undefined) view.setUint32(104, Number(data.fShadowingDisabled), true);
  // 0x6c: u32
  if (data?.fUpgradeDb !== undefined) view.setUint32(108, Number(data.fUpgradeDb), true);
  // 0x70: u32
  if (data?.dwMajorVersion !== undefined) view.setUint32(112, Number(data.dwMajorVersion), true);
  // 0x74: u32
  if (data?.dwMinorVersion !== undefined) view.setUint32(116, Number(data.dwMinorVersion), true);
  // 0x78: u32
  if (data?.dwBuildNumber !== undefined) view.setUint32(120, Number(data.dwBuildNumber), true);
  // 0x7c: i32
  if (data?.lSPNumber !== undefined) view.setInt32(124, Number(data.lSPNumber), true);
  // 0x80: u32
  if (data?.cbPageSize !== undefined) view.setUint32(128, Number(data.cbPageSize), true);
  // 0x84: u32
  if (data?.genMinRequired !== undefined) view.setUint32(132, Number(data.genMinRequired), true);
  // 0x88: u32
  if (data?.genMaxRequired !== undefined) view.setUint32(136, Number(data.genMaxRequired), true);
  // 0x8c: pad4
  // 0x90: pointer
  if (data?.logtimeGenMaxCreate !== undefined) view.setBigUint64(144, data.logtimeGenMaxCreate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeGenMaxCreate))), true);
  // 0x98: u32
  if (data?.ulRepairCount !== undefined) view.setUint32(152, Number(data.ulRepairCount), true);
  // 0x9c: pad4
  // 0xa0: pointer
  if (data?.logtimeRepair !== undefined) view.setBigUint64(160, data.logtimeRepair === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeRepair))), true);
  // 0xa8: u32
  if (data?.ulRepairCountOld !== undefined) view.setUint32(168, Number(data.ulRepairCountOld), true);
  // 0xac: u32
  if (data?.ulECCFixSuccess !== undefined) view.setUint32(172, Number(data.ulECCFixSuccess), true);
  // 0xb0: pointer
  if (data?.logtimeECCFixSuccess !== undefined) view.setBigUint64(176, data.logtimeECCFixSuccess === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeECCFixSuccess))), true);
  // 0xb8: u32
  if (data?.ulECCFixSuccessOld !== undefined) view.setUint32(184, Number(data.ulECCFixSuccessOld), true);
  // 0xbc: u32
  if (data?.ulECCFixFail !== undefined) view.setUint32(188, Number(data.ulECCFixFail), true);
  // 0xc0: pointer
  if (data?.logtimeECCFixFail !== undefined) view.setBigUint64(192, data.logtimeECCFixFail === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeECCFixFail))), true);
  // 0xc8: u32
  if (data?.ulECCFixFailOld !== undefined) view.setUint32(200, Number(data.ulECCFixFailOld), true);
  // 0xcc: u32
  if (data?.ulBadChecksum !== undefined) view.setUint32(204, Number(data.ulBadChecksum), true);
  // 0xd0: pointer
  if (data?.logtimeBadChecksum !== undefined) view.setBigUint64(208, data.logtimeBadChecksum === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeBadChecksum))), true);
  // 0xd8: u32
  if (data?.ulBadChecksumOld !== undefined) view.setUint32(216, Number(data.ulBadChecksumOld), true);
  // 0xdc: pad4
  return buf;
}

export class JET_DBINFOMISC2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ulUpdate(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get signDb(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dbstate(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get lgposConsistent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get logtimeConsistent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get logtimeAttach(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lgposAttach(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get logtimeDetach(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get lgposDetach(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get signLog(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get bkinfoFullPrev(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get bkinfoIncPrev(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get bkinfoFullCur(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get fShadowingDisabled(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get fUpgradeDb(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: u32
  get dwMajorVersion(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: u32
  get dwMinorVersion(): number {
    return this.view.getUint32(116, true);
  }

  // 0x78: u32
  get dwBuildNumber(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: i32
  get lSPNumber(): number {
    return this.view.getInt32(124, true);
  }

  // 0x80: u32
  get cbPageSize(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get genMinRequired(): number {
    return this.view.getUint32(132, true);
  }

  // 0x88: u32
  get genMaxRequired(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  get logtimeGenMaxCreate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x98: u32
  get ulRepairCount(): number {
    return this.view.getUint32(152, true);
  }

  // 0x9c: pad4

  // 0xa0: pointer
  get logtimeRepair(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(160, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa8: u32
  get ulRepairCountOld(): number {
    return this.view.getUint32(168, true);
  }

  // 0xac: u32
  get ulECCFixSuccess(): number {
    return this.view.getUint32(172, true);
  }

  // 0xb0: pointer
  get logtimeECCFixSuccess(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(176, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb8: u32
  get ulECCFixSuccessOld(): number {
    return this.view.getUint32(184, true);
  }

  // 0xbc: u32
  get ulECCFixFail(): number {
    return this.view.getUint32(188, true);
  }

  // 0xc0: pointer
  get logtimeECCFixFail(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(192, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc8: u32
  get ulECCFixFailOld(): number {
    return this.view.getUint32(200, true);
  }

  // 0xcc: u32
  get ulBadChecksum(): number {
    return this.view.getUint32(204, true);
  }

  // 0xd0: pointer
  get logtimeBadChecksum(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(208, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xd8: u32
  get ulBadChecksumOld(): number {
    return this.view.getUint32(216, true);
  }

  // 0xdc: pad4

  // 0x00: u32
  set ulVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ulUpdate(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set signDb(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dbstate(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set lgposConsistent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set logtimeConsistent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set logtimeAttach(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set lgposAttach(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set logtimeDetach(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set lgposDetach(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set signLog(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set bkinfoFullPrev(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set bkinfoIncPrev(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set bkinfoFullCur(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: u32
  set fShadowingDisabled(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set fUpgradeDb(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: u32
  set dwMajorVersion(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: u32
  set dwMinorVersion(value: number) {
    this.view.setUint32(116, value, true);
  }

  // 0x78: u32
  set dwBuildNumber(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: i32
  set lSPNumber(value: number) {
    this.view.setInt32(124, value, true);
  }

  // 0x80: u32
  set cbPageSize(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set genMinRequired(value: number) {
    this.view.setUint32(132, value, true);
  }

  // 0x88: u32
  set genMaxRequired(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  set logtimeGenMaxCreate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x98: u32
  set ulRepairCount(value: number) {
    this.view.setUint32(152, value, true);
  }

  // 0x9c: pad4

  // 0xa0: pointer
  set logtimeRepair(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(160, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa8: u32
  set ulRepairCountOld(value: number) {
    this.view.setUint32(168, value, true);
  }

  // 0xac: u32
  set ulECCFixSuccess(value: number) {
    this.view.setUint32(172, value, true);
  }

  // 0xb0: pointer
  set logtimeECCFixSuccess(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(176, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb8: u32
  set ulECCFixSuccessOld(value: number) {
    this.view.setUint32(184, value, true);
  }

  // 0xbc: u32
  set ulECCFixFail(value: number) {
    this.view.setUint32(188, value, true);
  }

  // 0xc0: pointer
  set logtimeECCFixFail(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(192, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc8: u32
  set ulECCFixFailOld(value: number) {
    this.view.setUint32(200, value, true);
  }

  // 0xcc: u32
  set ulBadChecksum(value: number) {
    this.view.setUint32(204, value, true);
  }

  // 0xd0: pointer
  set logtimeBadChecksum(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(208, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xd8: u32
  set ulBadChecksumOld(value: number) {
    this.view.setUint32(216, value, true);
  }

  // 0xdc: pad4
}

/**
 * Windows.Win32.Storage.Jet.JET_DBINFOMISC3 (size: 224)
 */
export interface JET_DBINFOMISC3 {
  /** u32 */
  ulVersion: number;
  /** u32 */
  ulUpdate: number;
  /** Windows.Win32.Storage.Jet.JET_SIGNATURE */
  signDb: Uint8Array | Deno.PointerValue;
  /** u32 */
  dbstate: number;
  /** Windows.Win32.Storage.Jet.JET_LGPOS */
  lgposConsistent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeConsistent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeAttach: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_LGPOS */
  lgposAttach: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeDetach: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_LGPOS */
  lgposDetach: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_SIGNATURE */
  signLog: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_BKINFO */
  bkinfoFullPrev: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_BKINFO */
  bkinfoIncPrev: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_BKINFO */
  bkinfoFullCur: Uint8Array | Deno.PointerValue;
  /** u32 */
  fShadowingDisabled: number;
  /** u32 */
  fUpgradeDb: number;
  /** u32 */
  dwMajorVersion: number;
  /** u32 */
  dwMinorVersion: number;
  /** u32 */
  dwBuildNumber: number;
  /** i32 */
  lSPNumber: number;
  /** u32 */
  cbPageSize: number;
  /** u32 */
  genMinRequired: number;
  /** u32 */
  genMaxRequired: number;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeGenMaxCreate: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulRepairCount: number;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeRepair: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulRepairCountOld: number;
  /** u32 */
  ulECCFixSuccess: number;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeECCFixSuccess: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulECCFixSuccessOld: number;
  /** u32 */
  ulECCFixFail: number;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeECCFixFail: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulECCFixFailOld: number;
  /** u32 */
  ulBadChecksum: number;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeBadChecksum: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulBadChecksumOld: number;
  /** u32 */
  genCommitted: number;
}

export const sizeofJET_DBINFOMISC3 = 224;

export function allocJET_DBINFOMISC3(data?: Partial<JET_DBINFOMISC3>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_DBINFOMISC3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulVersion !== undefined) view.setUint32(0, Number(data.ulVersion), true);
  // 0x04: u32
  if (data?.ulUpdate !== undefined) view.setUint32(4, Number(data.ulUpdate), true);
  // 0x08: pointer
  if (data?.signDb !== undefined) view.setBigUint64(8, data.signDb === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.signDb))), true);
  // 0x10: u32
  if (data?.dbstate !== undefined) view.setUint32(16, Number(data.dbstate), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lgposConsistent !== undefined) view.setBigUint64(24, data.lgposConsistent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lgposConsistent))), true);
  // 0x20: pointer
  if (data?.logtimeConsistent !== undefined) view.setBigUint64(32, data.logtimeConsistent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeConsistent))), true);
  // 0x28: pointer
  if (data?.logtimeAttach !== undefined) view.setBigUint64(40, data.logtimeAttach === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeAttach))), true);
  // 0x30: pointer
  if (data?.lgposAttach !== undefined) view.setBigUint64(48, data.lgposAttach === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lgposAttach))), true);
  // 0x38: pointer
  if (data?.logtimeDetach !== undefined) view.setBigUint64(56, data.logtimeDetach === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeDetach))), true);
  // 0x40: pointer
  if (data?.lgposDetach !== undefined) view.setBigUint64(64, data.lgposDetach === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lgposDetach))), true);
  // 0x48: pointer
  if (data?.signLog !== undefined) view.setBigUint64(72, data.signLog === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.signLog))), true);
  // 0x50: pointer
  if (data?.bkinfoFullPrev !== undefined) view.setBigUint64(80, data.bkinfoFullPrev === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bkinfoFullPrev))), true);
  // 0x58: pointer
  if (data?.bkinfoIncPrev !== undefined) view.setBigUint64(88, data.bkinfoIncPrev === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bkinfoIncPrev))), true);
  // 0x60: pointer
  if (data?.bkinfoFullCur !== undefined) view.setBigUint64(96, data.bkinfoFullCur === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bkinfoFullCur))), true);
  // 0x68: u32
  if (data?.fShadowingDisabled !== undefined) view.setUint32(104, Number(data.fShadowingDisabled), true);
  // 0x6c: u32
  if (data?.fUpgradeDb !== undefined) view.setUint32(108, Number(data.fUpgradeDb), true);
  // 0x70: u32
  if (data?.dwMajorVersion !== undefined) view.setUint32(112, Number(data.dwMajorVersion), true);
  // 0x74: u32
  if (data?.dwMinorVersion !== undefined) view.setUint32(116, Number(data.dwMinorVersion), true);
  // 0x78: u32
  if (data?.dwBuildNumber !== undefined) view.setUint32(120, Number(data.dwBuildNumber), true);
  // 0x7c: i32
  if (data?.lSPNumber !== undefined) view.setInt32(124, Number(data.lSPNumber), true);
  // 0x80: u32
  if (data?.cbPageSize !== undefined) view.setUint32(128, Number(data.cbPageSize), true);
  // 0x84: u32
  if (data?.genMinRequired !== undefined) view.setUint32(132, Number(data.genMinRequired), true);
  // 0x88: u32
  if (data?.genMaxRequired !== undefined) view.setUint32(136, Number(data.genMaxRequired), true);
  // 0x8c: pad4
  // 0x90: pointer
  if (data?.logtimeGenMaxCreate !== undefined) view.setBigUint64(144, data.logtimeGenMaxCreate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeGenMaxCreate))), true);
  // 0x98: u32
  if (data?.ulRepairCount !== undefined) view.setUint32(152, Number(data.ulRepairCount), true);
  // 0x9c: pad4
  // 0xa0: pointer
  if (data?.logtimeRepair !== undefined) view.setBigUint64(160, data.logtimeRepair === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeRepair))), true);
  // 0xa8: u32
  if (data?.ulRepairCountOld !== undefined) view.setUint32(168, Number(data.ulRepairCountOld), true);
  // 0xac: u32
  if (data?.ulECCFixSuccess !== undefined) view.setUint32(172, Number(data.ulECCFixSuccess), true);
  // 0xb0: pointer
  if (data?.logtimeECCFixSuccess !== undefined) view.setBigUint64(176, data.logtimeECCFixSuccess === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeECCFixSuccess))), true);
  // 0xb8: u32
  if (data?.ulECCFixSuccessOld !== undefined) view.setUint32(184, Number(data.ulECCFixSuccessOld), true);
  // 0xbc: u32
  if (data?.ulECCFixFail !== undefined) view.setUint32(188, Number(data.ulECCFixFail), true);
  // 0xc0: pointer
  if (data?.logtimeECCFixFail !== undefined) view.setBigUint64(192, data.logtimeECCFixFail === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeECCFixFail))), true);
  // 0xc8: u32
  if (data?.ulECCFixFailOld !== undefined) view.setUint32(200, Number(data.ulECCFixFailOld), true);
  // 0xcc: u32
  if (data?.ulBadChecksum !== undefined) view.setUint32(204, Number(data.ulBadChecksum), true);
  // 0xd0: pointer
  if (data?.logtimeBadChecksum !== undefined) view.setBigUint64(208, data.logtimeBadChecksum === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeBadChecksum))), true);
  // 0xd8: u32
  if (data?.ulBadChecksumOld !== undefined) view.setUint32(216, Number(data.ulBadChecksumOld), true);
  // 0xdc: u32
  if (data?.genCommitted !== undefined) view.setUint32(220, Number(data.genCommitted), true);
  return buf;
}

export class JET_DBINFOMISC3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ulUpdate(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get signDb(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dbstate(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get lgposConsistent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get logtimeConsistent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get logtimeAttach(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lgposAttach(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get logtimeDetach(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get lgposDetach(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get signLog(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get bkinfoFullPrev(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get bkinfoIncPrev(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get bkinfoFullCur(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get fShadowingDisabled(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get fUpgradeDb(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: u32
  get dwMajorVersion(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: u32
  get dwMinorVersion(): number {
    return this.view.getUint32(116, true);
  }

  // 0x78: u32
  get dwBuildNumber(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: i32
  get lSPNumber(): number {
    return this.view.getInt32(124, true);
  }

  // 0x80: u32
  get cbPageSize(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get genMinRequired(): number {
    return this.view.getUint32(132, true);
  }

  // 0x88: u32
  get genMaxRequired(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  get logtimeGenMaxCreate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x98: u32
  get ulRepairCount(): number {
    return this.view.getUint32(152, true);
  }

  // 0x9c: pad4

  // 0xa0: pointer
  get logtimeRepair(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(160, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa8: u32
  get ulRepairCountOld(): number {
    return this.view.getUint32(168, true);
  }

  // 0xac: u32
  get ulECCFixSuccess(): number {
    return this.view.getUint32(172, true);
  }

  // 0xb0: pointer
  get logtimeECCFixSuccess(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(176, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb8: u32
  get ulECCFixSuccessOld(): number {
    return this.view.getUint32(184, true);
  }

  // 0xbc: u32
  get ulECCFixFail(): number {
    return this.view.getUint32(188, true);
  }

  // 0xc0: pointer
  get logtimeECCFixFail(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(192, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc8: u32
  get ulECCFixFailOld(): number {
    return this.view.getUint32(200, true);
  }

  // 0xcc: u32
  get ulBadChecksum(): number {
    return this.view.getUint32(204, true);
  }

  // 0xd0: pointer
  get logtimeBadChecksum(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(208, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xd8: u32
  get ulBadChecksumOld(): number {
    return this.view.getUint32(216, true);
  }

  // 0xdc: u32
  get genCommitted(): number {
    return this.view.getUint32(220, true);
  }

  // 0x00: u32
  set ulVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ulUpdate(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set signDb(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dbstate(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set lgposConsistent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set logtimeConsistent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set logtimeAttach(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set lgposAttach(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set logtimeDetach(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set lgposDetach(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set signLog(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set bkinfoFullPrev(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set bkinfoIncPrev(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set bkinfoFullCur(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: u32
  set fShadowingDisabled(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set fUpgradeDb(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: u32
  set dwMajorVersion(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: u32
  set dwMinorVersion(value: number) {
    this.view.setUint32(116, value, true);
  }

  // 0x78: u32
  set dwBuildNumber(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: i32
  set lSPNumber(value: number) {
    this.view.setInt32(124, value, true);
  }

  // 0x80: u32
  set cbPageSize(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set genMinRequired(value: number) {
    this.view.setUint32(132, value, true);
  }

  // 0x88: u32
  set genMaxRequired(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  set logtimeGenMaxCreate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x98: u32
  set ulRepairCount(value: number) {
    this.view.setUint32(152, value, true);
  }

  // 0x9c: pad4

  // 0xa0: pointer
  set logtimeRepair(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(160, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa8: u32
  set ulRepairCountOld(value: number) {
    this.view.setUint32(168, value, true);
  }

  // 0xac: u32
  set ulECCFixSuccess(value: number) {
    this.view.setUint32(172, value, true);
  }

  // 0xb0: pointer
  set logtimeECCFixSuccess(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(176, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb8: u32
  set ulECCFixSuccessOld(value: number) {
    this.view.setUint32(184, value, true);
  }

  // 0xbc: u32
  set ulECCFixFail(value: number) {
    this.view.setUint32(188, value, true);
  }

  // 0xc0: pointer
  set logtimeECCFixFail(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(192, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc8: u32
  set ulECCFixFailOld(value: number) {
    this.view.setUint32(200, value, true);
  }

  // 0xcc: u32
  set ulBadChecksum(value: number) {
    this.view.setUint32(204, value, true);
  }

  // 0xd0: pointer
  set logtimeBadChecksum(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(208, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xd8: u32
  set ulBadChecksumOld(value: number) {
    this.view.setUint32(216, value, true);
  }

  // 0xdc: u32
  set genCommitted(value: number) {
    this.view.setUint32(220, value, true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_DBINFOMISC4 (size: 240)
 */
export interface JET_DBINFOMISC4 {
  /** u32 */
  ulVersion: number;
  /** u32 */
  ulUpdate: number;
  /** Windows.Win32.Storage.Jet.JET_SIGNATURE */
  signDb: Uint8Array | Deno.PointerValue;
  /** u32 */
  dbstate: number;
  /** Windows.Win32.Storage.Jet.JET_LGPOS */
  lgposConsistent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeConsistent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeAttach: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_LGPOS */
  lgposAttach: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeDetach: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_LGPOS */
  lgposDetach: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_SIGNATURE */
  signLog: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_BKINFO */
  bkinfoFullPrev: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_BKINFO */
  bkinfoIncPrev: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_BKINFO */
  bkinfoFullCur: Uint8Array | Deno.PointerValue;
  /** u32 */
  fShadowingDisabled: number;
  /** u32 */
  fUpgradeDb: number;
  /** u32 */
  dwMajorVersion: number;
  /** u32 */
  dwMinorVersion: number;
  /** u32 */
  dwBuildNumber: number;
  /** i32 */
  lSPNumber: number;
  /** u32 */
  cbPageSize: number;
  /** u32 */
  genMinRequired: number;
  /** u32 */
  genMaxRequired: number;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeGenMaxCreate: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulRepairCount: number;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeRepair: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulRepairCountOld: number;
  /** u32 */
  ulECCFixSuccess: number;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeECCFixSuccess: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulECCFixSuccessOld: number;
  /** u32 */
  ulECCFixFail: number;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeECCFixFail: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulECCFixFailOld: number;
  /** u32 */
  ulBadChecksum: number;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeBadChecksum: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulBadChecksumOld: number;
  /** u32 */
  genCommitted: number;
  /** Windows.Win32.Storage.Jet.JET_BKINFO */
  bkinfoCopyPrev: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_BKINFO */
  bkinfoDiffPrev: Uint8Array | Deno.PointerValue;
}

export const sizeofJET_DBINFOMISC4 = 240;

export function allocJET_DBINFOMISC4(data?: Partial<JET_DBINFOMISC4>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_DBINFOMISC4);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulVersion !== undefined) view.setUint32(0, Number(data.ulVersion), true);
  // 0x04: u32
  if (data?.ulUpdate !== undefined) view.setUint32(4, Number(data.ulUpdate), true);
  // 0x08: pointer
  if (data?.signDb !== undefined) view.setBigUint64(8, data.signDb === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.signDb))), true);
  // 0x10: u32
  if (data?.dbstate !== undefined) view.setUint32(16, Number(data.dbstate), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lgposConsistent !== undefined) view.setBigUint64(24, data.lgposConsistent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lgposConsistent))), true);
  // 0x20: pointer
  if (data?.logtimeConsistent !== undefined) view.setBigUint64(32, data.logtimeConsistent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeConsistent))), true);
  // 0x28: pointer
  if (data?.logtimeAttach !== undefined) view.setBigUint64(40, data.logtimeAttach === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeAttach))), true);
  // 0x30: pointer
  if (data?.lgposAttach !== undefined) view.setBigUint64(48, data.lgposAttach === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lgposAttach))), true);
  // 0x38: pointer
  if (data?.logtimeDetach !== undefined) view.setBigUint64(56, data.logtimeDetach === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeDetach))), true);
  // 0x40: pointer
  if (data?.lgposDetach !== undefined) view.setBigUint64(64, data.lgposDetach === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lgposDetach))), true);
  // 0x48: pointer
  if (data?.signLog !== undefined) view.setBigUint64(72, data.signLog === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.signLog))), true);
  // 0x50: pointer
  if (data?.bkinfoFullPrev !== undefined) view.setBigUint64(80, data.bkinfoFullPrev === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bkinfoFullPrev))), true);
  // 0x58: pointer
  if (data?.bkinfoIncPrev !== undefined) view.setBigUint64(88, data.bkinfoIncPrev === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bkinfoIncPrev))), true);
  // 0x60: pointer
  if (data?.bkinfoFullCur !== undefined) view.setBigUint64(96, data.bkinfoFullCur === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bkinfoFullCur))), true);
  // 0x68: u32
  if (data?.fShadowingDisabled !== undefined) view.setUint32(104, Number(data.fShadowingDisabled), true);
  // 0x6c: u32
  if (data?.fUpgradeDb !== undefined) view.setUint32(108, Number(data.fUpgradeDb), true);
  // 0x70: u32
  if (data?.dwMajorVersion !== undefined) view.setUint32(112, Number(data.dwMajorVersion), true);
  // 0x74: u32
  if (data?.dwMinorVersion !== undefined) view.setUint32(116, Number(data.dwMinorVersion), true);
  // 0x78: u32
  if (data?.dwBuildNumber !== undefined) view.setUint32(120, Number(data.dwBuildNumber), true);
  // 0x7c: i32
  if (data?.lSPNumber !== undefined) view.setInt32(124, Number(data.lSPNumber), true);
  // 0x80: u32
  if (data?.cbPageSize !== undefined) view.setUint32(128, Number(data.cbPageSize), true);
  // 0x84: u32
  if (data?.genMinRequired !== undefined) view.setUint32(132, Number(data.genMinRequired), true);
  // 0x88: u32
  if (data?.genMaxRequired !== undefined) view.setUint32(136, Number(data.genMaxRequired), true);
  // 0x8c: pad4
  // 0x90: pointer
  if (data?.logtimeGenMaxCreate !== undefined) view.setBigUint64(144, data.logtimeGenMaxCreate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeGenMaxCreate))), true);
  // 0x98: u32
  if (data?.ulRepairCount !== undefined) view.setUint32(152, Number(data.ulRepairCount), true);
  // 0x9c: pad4
  // 0xa0: pointer
  if (data?.logtimeRepair !== undefined) view.setBigUint64(160, data.logtimeRepair === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeRepair))), true);
  // 0xa8: u32
  if (data?.ulRepairCountOld !== undefined) view.setUint32(168, Number(data.ulRepairCountOld), true);
  // 0xac: u32
  if (data?.ulECCFixSuccess !== undefined) view.setUint32(172, Number(data.ulECCFixSuccess), true);
  // 0xb0: pointer
  if (data?.logtimeECCFixSuccess !== undefined) view.setBigUint64(176, data.logtimeECCFixSuccess === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeECCFixSuccess))), true);
  // 0xb8: u32
  if (data?.ulECCFixSuccessOld !== undefined) view.setUint32(184, Number(data.ulECCFixSuccessOld), true);
  // 0xbc: u32
  if (data?.ulECCFixFail !== undefined) view.setUint32(188, Number(data.ulECCFixFail), true);
  // 0xc0: pointer
  if (data?.logtimeECCFixFail !== undefined) view.setBigUint64(192, data.logtimeECCFixFail === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeECCFixFail))), true);
  // 0xc8: u32
  if (data?.ulECCFixFailOld !== undefined) view.setUint32(200, Number(data.ulECCFixFailOld), true);
  // 0xcc: u32
  if (data?.ulBadChecksum !== undefined) view.setUint32(204, Number(data.ulBadChecksum), true);
  // 0xd0: pointer
  if (data?.logtimeBadChecksum !== undefined) view.setBigUint64(208, data.logtimeBadChecksum === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeBadChecksum))), true);
  // 0xd8: u32
  if (data?.ulBadChecksumOld !== undefined) view.setUint32(216, Number(data.ulBadChecksumOld), true);
  // 0xdc: u32
  if (data?.genCommitted !== undefined) view.setUint32(220, Number(data.genCommitted), true);
  // 0xe0: pointer
  if (data?.bkinfoCopyPrev !== undefined) view.setBigUint64(224, data.bkinfoCopyPrev === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bkinfoCopyPrev))), true);
  // 0xe8: pointer
  if (data?.bkinfoDiffPrev !== undefined) view.setBigUint64(232, data.bkinfoDiffPrev === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bkinfoDiffPrev))), true);
  return buf;
}

export class JET_DBINFOMISC4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ulUpdate(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get signDb(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dbstate(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get lgposConsistent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get logtimeConsistent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get logtimeAttach(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lgposAttach(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get logtimeDetach(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get lgposDetach(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get signLog(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get bkinfoFullPrev(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get bkinfoIncPrev(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get bkinfoFullCur(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get fShadowingDisabled(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get fUpgradeDb(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: u32
  get dwMajorVersion(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: u32
  get dwMinorVersion(): number {
    return this.view.getUint32(116, true);
  }

  // 0x78: u32
  get dwBuildNumber(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: i32
  get lSPNumber(): number {
    return this.view.getInt32(124, true);
  }

  // 0x80: u32
  get cbPageSize(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get genMinRequired(): number {
    return this.view.getUint32(132, true);
  }

  // 0x88: u32
  get genMaxRequired(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  get logtimeGenMaxCreate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x98: u32
  get ulRepairCount(): number {
    return this.view.getUint32(152, true);
  }

  // 0x9c: pad4

  // 0xa0: pointer
  get logtimeRepair(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(160, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa8: u32
  get ulRepairCountOld(): number {
    return this.view.getUint32(168, true);
  }

  // 0xac: u32
  get ulECCFixSuccess(): number {
    return this.view.getUint32(172, true);
  }

  // 0xb0: pointer
  get logtimeECCFixSuccess(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(176, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb8: u32
  get ulECCFixSuccessOld(): number {
    return this.view.getUint32(184, true);
  }

  // 0xbc: u32
  get ulECCFixFail(): number {
    return this.view.getUint32(188, true);
  }

  // 0xc0: pointer
  get logtimeECCFixFail(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(192, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc8: u32
  get ulECCFixFailOld(): number {
    return this.view.getUint32(200, true);
  }

  // 0xcc: u32
  get ulBadChecksum(): number {
    return this.view.getUint32(204, true);
  }

  // 0xd0: pointer
  get logtimeBadChecksum(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(208, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xd8: u32
  get ulBadChecksumOld(): number {
    return this.view.getUint32(216, true);
  }

  // 0xdc: u32
  get genCommitted(): number {
    return this.view.getUint32(220, true);
  }

  // 0xe0: pointer
  get bkinfoCopyPrev(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(224, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xe8: pointer
  get bkinfoDiffPrev(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(232, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ulVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ulUpdate(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set signDb(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dbstate(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set lgposConsistent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set logtimeConsistent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set logtimeAttach(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set lgposAttach(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set logtimeDetach(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set lgposDetach(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set signLog(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set bkinfoFullPrev(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set bkinfoIncPrev(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set bkinfoFullCur(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: u32
  set fShadowingDisabled(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set fUpgradeDb(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: u32
  set dwMajorVersion(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: u32
  set dwMinorVersion(value: number) {
    this.view.setUint32(116, value, true);
  }

  // 0x78: u32
  set dwBuildNumber(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: i32
  set lSPNumber(value: number) {
    this.view.setInt32(124, value, true);
  }

  // 0x80: u32
  set cbPageSize(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set genMinRequired(value: number) {
    this.view.setUint32(132, value, true);
  }

  // 0x88: u32
  set genMaxRequired(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  set logtimeGenMaxCreate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x98: u32
  set ulRepairCount(value: number) {
    this.view.setUint32(152, value, true);
  }

  // 0x9c: pad4

  // 0xa0: pointer
  set logtimeRepair(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(160, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa8: u32
  set ulRepairCountOld(value: number) {
    this.view.setUint32(168, value, true);
  }

  // 0xac: u32
  set ulECCFixSuccess(value: number) {
    this.view.setUint32(172, value, true);
  }

  // 0xb0: pointer
  set logtimeECCFixSuccess(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(176, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb8: u32
  set ulECCFixSuccessOld(value: number) {
    this.view.setUint32(184, value, true);
  }

  // 0xbc: u32
  set ulECCFixFail(value: number) {
    this.view.setUint32(188, value, true);
  }

  // 0xc0: pointer
  set logtimeECCFixFail(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(192, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc8: u32
  set ulECCFixFailOld(value: number) {
    this.view.setUint32(200, value, true);
  }

  // 0xcc: u32
  set ulBadChecksum(value: number) {
    this.view.setUint32(204, value, true);
  }

  // 0xd0: pointer
  set logtimeBadChecksum(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(208, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xd8: u32
  set ulBadChecksumOld(value: number) {
    this.view.setUint32(216, value, true);
  }

  // 0xdc: u32
  set genCommitted(value: number) {
    this.view.setUint32(220, value, true);
  }

  // 0xe0: pointer
  set bkinfoCopyPrev(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(224, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xe8: pointer
  set bkinfoDiffPrev(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(232, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_THREADSTATS (size: 32)
 */
export interface JET_THREADSTATS {
  /** u32 */
  cbStruct: number;
  /** u32 */
  cPageReferenced: number;
  /** u32 */
  cPageRead: number;
  /** u32 */
  cPagePreread: number;
  /** u32 */
  cPageDirtied: number;
  /** u32 */
  cPageRedirtied: number;
  /** u32 */
  cLogRecord: number;
  /** u32 */
  cbLogRecord: number;
}

export const sizeofJET_THREADSTATS = 32;

export function allocJET_THREADSTATS(data?: Partial<JET_THREADSTATS>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_THREADSTATS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.cPageReferenced !== undefined) view.setUint32(4, Number(data.cPageReferenced), true);
  // 0x08: u32
  if (data?.cPageRead !== undefined) view.setUint32(8, Number(data.cPageRead), true);
  // 0x0c: u32
  if (data?.cPagePreread !== undefined) view.setUint32(12, Number(data.cPagePreread), true);
  // 0x10: u32
  if (data?.cPageDirtied !== undefined) view.setUint32(16, Number(data.cPageDirtied), true);
  // 0x14: u32
  if (data?.cPageRedirtied !== undefined) view.setUint32(20, Number(data.cPageRedirtied), true);
  // 0x18: u32
  if (data?.cLogRecord !== undefined) view.setUint32(24, Number(data.cLogRecord), true);
  // 0x1c: u32
  if (data?.cbLogRecord !== undefined) view.setUint32(28, Number(data.cbLogRecord), true);
  return buf;
}

export class JET_THREADSTATSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cPageReferenced(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cPageRead(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cPagePreread(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get cPageDirtied(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cPageRedirtied(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get cLogRecord(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get cbLogRecord(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cPageReferenced(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cPageRead(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cPagePreread(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set cPageDirtied(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cPageRedirtied(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set cLogRecord(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set cbLogRecord(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_RSTINFO_A (size: 48)
 */
export interface JET_RSTINFO_A {
  /** u32 */
  cbStruct: number;
  /** ptr */
  rgrstmap: Deno.PointerValue | Uint8Array;
  /** i32 */
  crstmap: number;
  /** Windows.Win32.Storage.Jet.JET_LGPOS */
  lgposStop: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeStop: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_PFNSTATUS */
  pfnStatus: Uint8Array | Deno.PointerValue;
}

export const sizeofJET_RSTINFO_A = 48;

export function allocJET_RSTINFO_A(data?: Partial<JET_RSTINFO_A>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_RSTINFO_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgrstmap !== undefined) view.setBigUint64(8, data.rgrstmap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgrstmap))), true);
  // 0x10: i32
  if (data?.crstmap !== undefined) view.setInt32(16, Number(data.crstmap), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lgposStop !== undefined) view.setBigUint64(24, data.lgposStop === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lgposStop))), true);
  // 0x20: pointer
  if (data?.logtimeStop !== undefined) view.setBigUint64(32, data.logtimeStop === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeStop))), true);
  // 0x28: pointer
  if (data?.pfnStatus !== undefined) view.setBigUint64(40, data.pfnStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnStatus))), true);
  return buf;
}

export class JET_RSTINFO_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgrstmap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get crstmap(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get lgposStop(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get logtimeStop(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get pfnStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgrstmap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set crstmap(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set lgposStop(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set logtimeStop(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set pfnStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_RSTINFO_W (size: 48)
 */
export interface JET_RSTINFO_W {
  /** u32 */
  cbStruct: number;
  /** ptr */
  rgrstmap: Deno.PointerValue | Uint8Array;
  /** i32 */
  crstmap: number;
  /** Windows.Win32.Storage.Jet.JET_LGPOS */
  lgposStop: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_LOGTIME */
  logtimeStop: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.Jet.JET_PFNSTATUS */
  pfnStatus: Uint8Array | Deno.PointerValue;
}

export const sizeofJET_RSTINFO_W = 48;

export function allocJET_RSTINFO_W(data?: Partial<JET_RSTINFO_W>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_RSTINFO_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgrstmap !== undefined) view.setBigUint64(8, data.rgrstmap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgrstmap))), true);
  // 0x10: i32
  if (data?.crstmap !== undefined) view.setInt32(16, Number(data.crstmap), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lgposStop !== undefined) view.setBigUint64(24, data.lgposStop === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lgposStop))), true);
  // 0x20: pointer
  if (data?.logtimeStop !== undefined) view.setBigUint64(32, data.logtimeStop === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.logtimeStop))), true);
  // 0x28: pointer
  if (data?.pfnStatus !== undefined) view.setBigUint64(40, data.pfnStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnStatus))), true);
  return buf;
}

export class JET_RSTINFO_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgrstmap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get crstmap(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get lgposStop(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get logtimeStop(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get pfnStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgrstmap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set crstmap(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set lgposStop(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set logtimeStop(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set pfnStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_ERRINFOBASIC_W (size: 40)
 */
export interface JET_ERRINFOBASIC_W {
  /** u32 */
  cbStruct: number;
  /** i32 */
  errValue: number;
  /** Windows.Win32.Storage.Jet.JET_ERRCAT */
  errcatMostSpecific: JET_ERRCAT;
  /** array */
  rgCategoricalHierarchy: Deno.PointerValue;
  /** u32 */
  lSourceLine: number;
  /** array */
  rgszSourceFile: Deno.PointerValue;
}

export const sizeofJET_ERRINFOBASIC_W = 40;

export function allocJET_ERRINFOBASIC_W(data?: Partial<JET_ERRINFOBASIC_W>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_ERRINFOBASIC_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: i32
  if (data?.errValue !== undefined) view.setInt32(4, Number(data.errValue), true);
  // 0x08: i32
  if (data?.errcatMostSpecific !== undefined) view.setInt32(8, Number(data.errcatMostSpecific), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.rgCategoricalHierarchy !== undefined) view.setBigUint64(16, data.rgCategoricalHierarchy === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgCategoricalHierarchy))), true);
  // 0x18: u32
  if (data?.lSourceLine !== undefined) view.setUint32(24, Number(data.lSourceLine), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.rgszSourceFile !== undefined) view.setBigUint64(32, data.rgszSourceFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgszSourceFile))), true);
  return buf;
}

export class JET_ERRINFOBASIC_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get errValue(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get errcatMostSpecific(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get rgCategoricalHierarchy(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get lSourceLine(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get rgszSourceFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set errValue(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set errcatMostSpecific(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set rgCategoricalHierarchy(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set lSourceLine(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set rgszSourceFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_OPERATIONCONTEXT (size: 8)
 */
export interface JET_OPERATIONCONTEXT {
  /** u32 */
  ulUserID: number;
  /** u8 */
  nOperationID: number;
  /** u8 */
  nOperationType: number;
  /** u8 */
  nClientType: number;
  /** u8 */
  fFlags: number;
}

export const sizeofJET_OPERATIONCONTEXT = 8;

export function allocJET_OPERATIONCONTEXT(data?: Partial<JET_OPERATIONCONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_OPERATIONCONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulUserID !== undefined) view.setUint32(0, Number(data.ulUserID), true);
  // 0x04: u8
  if (data?.nOperationID !== undefined) view.setUint8(4, Number(data.nOperationID));
  // 0x05: u8
  if (data?.nOperationType !== undefined) view.setUint8(5, Number(data.nOperationType));
  // 0x06: u8
  if (data?.nClientType !== undefined) view.setUint8(6, Number(data.nClientType));
  // 0x07: u8
  if (data?.fFlags !== undefined) view.setUint8(7, Number(data.fFlags));
  return buf;
}

export class JET_OPERATIONCONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulUserID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u8
  get nOperationID(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get nOperationType(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get nClientType(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get fFlags(): number {
    return this.view.getUint8(7);
  }

  // 0x00: u32
  set ulUserID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u8
  set nOperationID(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set nOperationType(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set nClientType(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set fFlags(value: number) {
    this.view.setUint8(7, value);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_SETCOLUMN (size: 40)
 */
export interface JET_SETCOLUMN {
  /** u32 */
  columnid: number;
  /** ptr */
  pvData: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbData: number;
  /** u32 */
  grbit: number;
  /** u32 */
  ibLongValue: number;
  /** u32 */
  itagSequence: number;
  /** i32 */
  err: number;
}

export const sizeofJET_SETCOLUMN = 40;

export function allocJET_SETCOLUMN(data?: Partial<JET_SETCOLUMN>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_SETCOLUMN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.columnid !== undefined) view.setUint32(0, Number(data.columnid), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pvData !== undefined) view.setBigUint64(8, data.pvData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvData))), true);
  // 0x10: u32
  if (data?.cbData !== undefined) view.setUint32(16, Number(data.cbData), true);
  // 0x14: u32
  if (data?.grbit !== undefined) view.setUint32(20, Number(data.grbit), true);
  // 0x18: u32
  if (data?.ibLongValue !== undefined) view.setUint32(24, Number(data.ibLongValue), true);
  // 0x1c: u32
  if (data?.itagSequence !== undefined) view.setUint32(28, Number(data.itagSequence), true);
  // 0x20: i32
  if (data?.err !== undefined) view.setInt32(32, Number(data.err), true);
  // 0x24: pad4
  return buf;
}

export class JET_SETCOLUMNView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get columnid(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pvData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cbData(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get grbit(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get ibLongValue(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get itagSequence(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: i32
  get err(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set columnid(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pvData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set cbData(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set grbit(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set ibLongValue(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set itagSequence(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: i32
  set err(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4
}

export type JET_API_PTR = bigint | number;

/**
 * Windows.Win32.Storage.Jet.JET_SETSYSPARAM_A (size: 32)
 */
export interface JET_SETSYSPARAM_A {
  /** u32 */
  paramid: number;
  /** Windows.Win32.Storage.StructuredStorage.JET_API_PTR */
  lParam: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  sz: string | null | Uint8Array;
  /** i32 */
  err: number;
}

export const sizeofJET_SETSYSPARAM_A = 32;

export function allocJET_SETSYSPARAM_A(data?: Partial<JET_SETSYSPARAM_A>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_SETSYSPARAM_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.paramid !== undefined) view.setUint32(0, Number(data.paramid), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lParam !== undefined) view.setBigUint64(8, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x10: buffer
  if (data?.sz !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.sz);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: i32
  if (data?.err !== undefined) view.setInt32(24, Number(data.err), true);
  // 0x1c: pad4
  return buf;
}

export class JET_SETSYSPARAM_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get paramid(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get sz(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get err(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set paramid(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set sz(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: i32
  set err(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Storage.Jet.JET_SETSYSPARAM_W (size: 32)
 */
export interface JET_SETSYSPARAM_W {
  /** u32 */
  paramid: number;
  /** Windows.Win32.Storage.StructuredStorage.JET_API_PTR */
  lParam: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  sz: string | null | Uint8Array | Uint16Array;
  /** i32 */
  err: number;
}

export const sizeofJET_SETSYSPARAM_W = 32;

export function allocJET_SETSYSPARAM_W(data?: Partial<JET_SETSYSPARAM_W>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_SETSYSPARAM_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.paramid !== undefined) view.setUint32(0, Number(data.paramid), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lParam !== undefined) view.setBigUint64(8, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x10: buffer
  if (data?.sz !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.sz);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: i32
  if (data?.err !== undefined) view.setInt32(24, Number(data.err), true);
  // 0x1c: pad4
  return buf;
}

export class JET_SETSYSPARAM_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get paramid(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get sz(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get err(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set paramid(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set sz(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: i32
  set err(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Storage.Jet.JET_RETRIEVECOLUMN (size: 48)
 */
export interface JET_RETRIEVECOLUMN {
  /** u32 */
  columnid: number;
  /** ptr */
  pvData: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbData: number;
  /** u32 */
  cbActual: number;
  /** u32 */
  grbit: number;
  /** u32 */
  ibLongValue: number;
  /** u32 */
  itagSequence: number;
  /** u32 */
  columnidNextTagged: number;
  /** i32 */
  err: number;
}

export const sizeofJET_RETRIEVECOLUMN = 48;

export function allocJET_RETRIEVECOLUMN(data?: Partial<JET_RETRIEVECOLUMN>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_RETRIEVECOLUMN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.columnid !== undefined) view.setUint32(0, Number(data.columnid), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pvData !== undefined) view.setBigUint64(8, data.pvData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvData))), true);
  // 0x10: u32
  if (data?.cbData !== undefined) view.setUint32(16, Number(data.cbData), true);
  // 0x14: u32
  if (data?.cbActual !== undefined) view.setUint32(20, Number(data.cbActual), true);
  // 0x18: u32
  if (data?.grbit !== undefined) view.setUint32(24, Number(data.grbit), true);
  // 0x1c: u32
  if (data?.ibLongValue !== undefined) view.setUint32(28, Number(data.ibLongValue), true);
  // 0x20: u32
  if (data?.itagSequence !== undefined) view.setUint32(32, Number(data.itagSequence), true);
  // 0x24: u32
  if (data?.columnidNextTagged !== undefined) view.setUint32(36, Number(data.columnidNextTagged), true);
  // 0x28: i32
  if (data?.err !== undefined) view.setInt32(40, Number(data.err), true);
  // 0x2c: pad4
  return buf;
}

export class JET_RETRIEVECOLUMNView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get columnid(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pvData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cbData(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cbActual(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get grbit(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ibLongValue(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get itagSequence(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get columnidNextTagged(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: i32
  get err(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x00: u32
  set columnid(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pvData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set cbData(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cbActual(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set grbit(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ibLongValue(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set itagSequence(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set columnidNextTagged(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: i32
  set err(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Storage.Jet.JET_ENUMCOLUMNID (size: 16)
 */
export interface JET_ENUMCOLUMNID {
  /** u32 */
  columnid: number;
  /** u32 */
  ctagSequence: number;
  /** ptr */
  rgtagSequence: Deno.PointerValue | Uint8Array;
}

export const sizeofJET_ENUMCOLUMNID = 16;

export function allocJET_ENUMCOLUMNID(data?: Partial<JET_ENUMCOLUMNID>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_ENUMCOLUMNID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.columnid !== undefined) view.setUint32(0, Number(data.columnid), true);
  // 0x04: u32
  if (data?.ctagSequence !== undefined) view.setUint32(4, Number(data.ctagSequence), true);
  // 0x08: pointer
  if (data?.rgtagSequence !== undefined) view.setBigUint64(8, data.rgtagSequence === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgtagSequence))), true);
  return buf;
}

export class JET_ENUMCOLUMNIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get columnid(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ctagSequence(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get rgtagSequence(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set columnid(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ctagSequence(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set rgtagSequence(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_ENUMCOLUMNVALUE (size: 24)
 */
export interface JET_ENUMCOLUMNVALUE {
  /** u32 */
  itagSequence: number;
  /** i32 */
  err: number;
  /** u32 */
  cbData: number;
  /** ptr */
  pvData: Deno.PointerValue | Uint8Array;
}

export const sizeofJET_ENUMCOLUMNVALUE = 24;

export function allocJET_ENUMCOLUMNVALUE(data?: Partial<JET_ENUMCOLUMNVALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_ENUMCOLUMNVALUE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.itagSequence !== undefined) view.setUint32(0, Number(data.itagSequence), true);
  // 0x04: i32
  if (data?.err !== undefined) view.setInt32(4, Number(data.err), true);
  // 0x08: u32
  if (data?.cbData !== undefined) view.setUint32(8, Number(data.cbData), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pvData !== undefined) view.setBigUint64(16, data.pvData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvData))), true);
  return buf;
}

export class JET_ENUMCOLUMNVALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get itagSequence(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get err(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get cbData(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pvData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set itagSequence(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set err(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set cbData(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pvData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_ENUMCOLUMN (size: 16)
 */
export interface JET_ENUMCOLUMN {
  /** u32 */
  columnid: number;
  /** i32 */
  err: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofJET_ENUMCOLUMN = 16;

export function allocJET_ENUMCOLUMN(data?: Partial<JET_ENUMCOLUMN>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_ENUMCOLUMN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.columnid !== undefined) view.setUint32(0, Number(data.columnid), true);
  // 0x04: i32
  if (data?.err !== undefined) view.setInt32(4, Number(data.err), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class JET_ENUMCOLUMNView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get columnid(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get err(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set columnid(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set err(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_LOGINFO_A (size: 24)
 */
export interface JET_LOGINFO_A {
  /** u32 */
  cbSize: number;
  /** u32 */
  ulGenLow: number;
  /** u32 */
  ulGenHigh: number;
  /** array */
  szBaseName: Deno.PointerValue;
}

export const sizeofJET_LOGINFO_A = 24;

export function allocJET_LOGINFO_A(data?: Partial<JET_LOGINFO_A>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_LOGINFO_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.ulGenLow !== undefined) view.setUint32(4, Number(data.ulGenLow), true);
  // 0x08: u32
  if (data?.ulGenHigh !== undefined) view.setUint32(8, Number(data.ulGenHigh), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.szBaseName !== undefined) view.setBigUint64(16, data.szBaseName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szBaseName))), true);
  return buf;
}

export class JET_LOGINFO_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ulGenLow(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ulGenHigh(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get szBaseName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ulGenLow(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ulGenHigh(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set szBaseName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_LOGINFO_W (size: 24)
 */
export interface JET_LOGINFO_W {
  /** u32 */
  cbSize: number;
  /** u32 */
  ulGenLow: number;
  /** u32 */
  ulGenHigh: number;
  /** array */
  szBaseName: Deno.PointerValue;
}

export const sizeofJET_LOGINFO_W = 24;

export function allocJET_LOGINFO_W(data?: Partial<JET_LOGINFO_W>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_LOGINFO_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.ulGenLow !== undefined) view.setUint32(4, Number(data.ulGenLow), true);
  // 0x08: u32
  if (data?.ulGenHigh !== undefined) view.setUint32(8, Number(data.ulGenHigh), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.szBaseName !== undefined) view.setBigUint64(16, data.szBaseName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szBaseName))), true);
  return buf;
}

export class JET_LOGINFO_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ulGenLow(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ulGenHigh(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get szBaseName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ulGenLow(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ulGenHigh(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set szBaseName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type JET_INSTANCE = bigint | number;

/**
 * Windows.Win32.Storage.Jet.JET_INSTANCE_INFO_A (size: 48)
 */
export interface JET_INSTANCE_INFO_A {
  /** Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */
  hInstanceId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  szInstanceName: string | null | Uint8Array;
  /** Windows.Win32.Storage.StructuredStorage.JET_API_PTR */
  cDatabases: Uint8Array | Deno.PointerValue;
  /** ptr */
  szDatabaseFileName: Deno.PointerValue | Uint8Array;
  /** ptr */
  szDatabaseDisplayName: Deno.PointerValue | Uint8Array;
  /** ptr */
  szDatabaseSLVFileName_Obsolete: Deno.PointerValue | Uint8Array;
}

export const sizeofJET_INSTANCE_INFO_A = 48;

export function allocJET_INSTANCE_INFO_A(data?: Partial<JET_INSTANCE_INFO_A>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_INSTANCE_INFO_A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hInstanceId !== undefined) view.setBigUint64(0, data.hInstanceId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstanceId))), true);
  // 0x08: buffer
  if (data?.szInstanceName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.szInstanceName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.cDatabases !== undefined) view.setBigUint64(16, data.cDatabases === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.cDatabases))), true);
  // 0x18: pointer
  if (data?.szDatabaseFileName !== undefined) view.setBigUint64(24, data.szDatabaseFileName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szDatabaseFileName))), true);
  // 0x20: pointer
  if (data?.szDatabaseDisplayName !== undefined) view.setBigUint64(32, data.szDatabaseDisplayName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szDatabaseDisplayName))), true);
  // 0x28: pointer
  if (data?.szDatabaseSLVFileName_Obsolete !== undefined) view.setBigUint64(40, data.szDatabaseSLVFileName_Obsolete === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szDatabaseSLVFileName_Obsolete))), true);
  return buf;
}

export class JET_INSTANCE_INFO_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hInstanceId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get szInstanceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get cDatabases(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get szDatabaseFileName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get szDatabaseDisplayName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get szDatabaseSLVFileName_Obsolete(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hInstanceId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set szInstanceName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set cDatabases(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set szDatabaseFileName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set szDatabaseDisplayName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set szDatabaseSLVFileName_Obsolete(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.Jet.JET_INSTANCE_INFO_W (size: 48)
 */
export interface JET_INSTANCE_INFO_W {
  /** Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */
  hInstanceId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  szInstanceName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Storage.StructuredStorage.JET_API_PTR */
  cDatabases: Uint8Array | Deno.PointerValue;
  /** ptr */
  szDatabaseFileName: Deno.PointerValue | Uint8Array;
  /** ptr */
  szDatabaseDisplayName: Deno.PointerValue | Uint8Array;
  /** ptr */
  szDatabaseSLVFileName_Obsolete: Deno.PointerValue | Uint8Array;
}

export const sizeofJET_INSTANCE_INFO_W = 48;

export function allocJET_INSTANCE_INFO_W(data?: Partial<JET_INSTANCE_INFO_W>): Uint8Array {
  const buf = new Uint8Array(sizeofJET_INSTANCE_INFO_W);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hInstanceId !== undefined) view.setBigUint64(0, data.hInstanceId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstanceId))), true);
  // 0x08: buffer
  if (data?.szInstanceName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szInstanceName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.cDatabases !== undefined) view.setBigUint64(16, data.cDatabases === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.cDatabases))), true);
  // 0x18: pointer
  if (data?.szDatabaseFileName !== undefined) view.setBigUint64(24, data.szDatabaseFileName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szDatabaseFileName))), true);
  // 0x20: pointer
  if (data?.szDatabaseDisplayName !== undefined) view.setBigUint64(32, data.szDatabaseDisplayName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szDatabaseDisplayName))), true);
  // 0x28: pointer
  if (data?.szDatabaseSLVFileName_Obsolete !== undefined) view.setBigUint64(40, data.szDatabaseSLVFileName_Obsolete === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szDatabaseSLVFileName_Obsolete))), true);
  return buf;
}

export class JET_INSTANCE_INFO_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hInstanceId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get szInstanceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get cDatabases(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get szDatabaseFileName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get szDatabaseDisplayName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get szDatabaseSLVFileName_Obsolete(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hInstanceId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set szInstanceName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set cDatabases(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set szDatabaseFileName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set szDatabaseDisplayName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set szDatabaseSLVFileName_Obsolete(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type JET_SESID = bigint | number;

export type JET_HANDLE = bigint | number;

// Native Libraries

try {
  var libESENT_dll = Deno.dlopen("ESENT.dll", {
    JetInit: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    JetInit2: {
      parameters: ["pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetInit3A: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetInit3W: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetCreateInstanceA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetCreateInstanceW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetCreateInstance2A: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetCreateInstance2W: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetInstanceMiscInfo: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetTerm: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    JetTerm2: {
      parameters: ["pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetStopService: {
      parameters: [],
      result: "i32",
      optional: true,
    },
    JetStopServiceInstance: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    JetStopServiceInstance2: {
      parameters: ["pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetStopBackup: {
      parameters: [],
      result: "i32",
      optional: true,
    },
    JetStopBackupInstance: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    JetSetSystemParameterA: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetSetSystemParameterW: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetGetSystemParameterA: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetSystemParameterW: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetEnableMultiInstanceA: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetEnableMultiInstanceW: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetGetThreadStats: {
      parameters: ["pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetBeginSessionA: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetBeginSessionW: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetDupSession: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetEndSession: {
      parameters: ["pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetVersion: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetIdle: {
      parameters: ["pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetCreateDatabaseA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetCreateDatabaseW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetCreateDatabase2A: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetCreateDatabase2W: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetAttachDatabaseA: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetAttachDatabaseW: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetAttachDatabase2A: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetAttachDatabase2W: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetDetachDatabaseA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetDetachDatabaseW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetDetachDatabase2A: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetDetachDatabase2W: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetObjectInfoA: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetObjectInfoW: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetTableInfoA: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetTableInfoW: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetCreateTableA: {
      parameters: ["pointer", "u32", "pointer", "u32", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetCreateTableW: {
      parameters: ["pointer", "u32", "pointer", "u32", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetCreateTableColumnIndexA: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetCreateTableColumnIndexW: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetCreateTableColumnIndex2A: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetCreateTableColumnIndex2W: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetCreateTableColumnIndex3A: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetCreateTableColumnIndex3W: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetCreateTableColumnIndex4A: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetCreateTableColumnIndex4W: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetDeleteTableA: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetDeleteTableW: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetRenameTableA: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetRenameTableW: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetGetTableColumnInfoA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetTableColumnInfoW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetColumnInfoA: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetColumnInfoW: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetAddColumnA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetAddColumnW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetDeleteColumnA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetDeleteColumnW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetDeleteColumn2A: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetDeleteColumn2W: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetRenameColumnA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetRenameColumnW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetSetColumnDefaultValueA: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetSetColumnDefaultValueW: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetTableIndexInfoA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetTableIndexInfoW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetIndexInfoA: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetIndexInfoW: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetCreateIndexA: {
      parameters: ["pointer", "pointer", "pointer", "u32", "buffer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetCreateIndexW: {
      parameters: ["pointer", "pointer", "pointer", "u32", "buffer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetCreateIndex2A: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetCreateIndex2W: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetCreateIndex3A: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetCreateIndex3W: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetCreateIndex4A: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetCreateIndex4W: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetDeleteIndexA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetDeleteIndexW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetBeginTransaction: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    JetBeginTransaction2: {
      parameters: ["pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetBeginTransaction3: {
      parameters: ["pointer", "i64", "u32"],
      result: "i32",
      optional: true,
    },
    JetCommitTransaction: {
      parameters: ["pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetCommitTransaction2: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetRollback: {
      parameters: ["pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetDatabaseInfoA: {
      parameters: ["pointer", "u32", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetDatabaseInfoW: {
      parameters: ["pointer", "u32", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetDatabaseFileInfoA: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetDatabaseFileInfoW: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetOpenDatabaseA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetOpenDatabaseW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetCloseDatabase: {
      parameters: ["pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetOpenTableA: {
      parameters: ["pointer", "u32", "pointer", "pointer", "u32", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetOpenTableW: {
      parameters: ["pointer", "u32", "pointer", "pointer", "u32", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetSetTableSequential: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetResetTableSequential: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetCloseTable: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetDelete: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetUpdate: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetUpdate2: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetEscrowUpdate: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "pointer", "u32", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetRetrieveColumn: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetRetrieveColumns: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetEnumerateColumns: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetRecordSize: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetRecordSize2: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetSetColumn: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetSetColumns: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetPrepareUpdate: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetRecordPosition: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetGotoPosition: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetGetCursorInfo: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetDupCursor: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetCurrentIndexA: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetCurrentIndexW: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetSetCurrentIndexA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetSetCurrentIndexW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetSetCurrentIndex2A: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetSetCurrentIndex2W: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetSetCurrentIndex3A: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetSetCurrentIndex3W: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetSetCurrentIndex4A: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetSetCurrentIndex4W: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetMove: {
      parameters: ["pointer", "pointer", "i32", "u32"],
      result: "i32",
      optional: true,
    },
    JetSetCursorFilter: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetLock: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetMakeKey: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetSeek: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetPrereadKeys: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "i32", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetPrereadIndexRanges: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetBookmark: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetGetSecondaryIndexBookmark: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "pointer", "u32", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetCompactA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetCompactW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetDefragmentA: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetDefragmentW: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetDefragment2A: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetDefragment2W: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetDefragment3A: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetDefragment3W: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetSetDatabaseSizeA: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetSetDatabaseSizeW: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetGrowDatabase: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetResizeDatabase: {
      parameters: ["pointer", "u32", "u32", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetSetSessionContext: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetResetSessionContext: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    JetGotoBookmark: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetGotoSecondaryIndexBookmark: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetIntersectIndexes: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetComputeStats: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetOpenTempTable: {
      parameters: ["pointer", "pointer", "u32", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetOpenTempTable2: {
      parameters: ["pointer", "pointer", "u32", "u32", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetOpenTempTable3: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetOpenTemporaryTable: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetOpenTemporaryTable2: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetBackupA: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetBackupW: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetBackupInstanceA: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetBackupInstanceW: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetRestoreA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetRestoreW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetRestore2A: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetRestore2W: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetRestoreInstanceA: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetRestoreInstanceW: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetSetIndexRange: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetIndexRecordCount: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetRetrieveKey: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetBeginExternalBackup: {
      parameters: ["u32"],
      result: "i32",
      optional: true,
    },
    JetBeginExternalBackupInstance: {
      parameters: ["pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetAttachInfoA: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetGetAttachInfoW: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetGetAttachInfoInstanceA: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetGetAttachInfoInstanceW: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetOpenFileA: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetOpenFileW: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetOpenFileInstanceA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetOpenFileInstanceW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetReadFile: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetReadFileInstance: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetCloseFile: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    JetCloseFileInstance: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetGetLogInfoA: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetGetLogInfoW: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetGetLogInfoInstanceA: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetGetLogInfoInstanceW: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetGetLogInfoInstance2A: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetGetLogInfoInstance2W: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetGetTruncateLogInfoInstanceA: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetGetTruncateLogInfoInstanceW: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetTruncateLog: {
      parameters: [],
      result: "i32",
      optional: true,
    },
    JetTruncateLogInstance: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    JetEndExternalBackup: {
      parameters: [],
      result: "i32",
      optional: true,
    },
    JetEndExternalBackupInstance: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    JetEndExternalBackupInstance2: {
      parameters: ["pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetExternalRestoreA: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer", "i32", "i32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetExternalRestoreW: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer", "i32", "i32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetExternalRestore2A: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetExternalRestore2W: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetRegisterCallback: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetUnregisterCallback: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    JetGetInstanceInfoA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetGetInstanceInfoW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    JetFreeBuffer: {
      parameters: ["buffer"],
      result: "i32",
      optional: true,
    },
    JetSetLS: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetLS: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetOSSnapshotPrepare: {
      parameters: ["pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetOSSnapshotPrepareInstance: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetOSSnapshotFreezeA: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetOSSnapshotFreezeW: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetOSSnapshotThaw: {
      parameters: ["pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetOSSnapshotAbort: {
      parameters: ["pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetOSSnapshotTruncateLog: {
      parameters: ["pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetOSSnapshotTruncateLogInstance: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetOSSnapshotGetFreezeInfoA: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetOSSnapshotGetFreezeInfoW: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetOSSnapshotEnd: {
      parameters: ["pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetConfigureProcessForCrashDump: {
      parameters: ["u32"],
      result: "i32",
      optional: true,
    },
    JetGetErrorInfoW: {
      parameters: ["pointer", "pointer", "u32", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    JetSetSessionParameter: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    JetGetSessionParameter: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function JetInit(
  pinstance: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetInit!(util.toPointer(pinstance));
}

export function JetInit2(
  pinstance: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetInit2!(util.toPointer(pinstance), grbit);
}

export function JetInit3A(
  pinstance: Deno.PointerValue | Uint8Array /* ptr */,
  prstInfo: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetInit3A!(util.toPointer(pinstance), util.toPointer(prstInfo), grbit);
}

export function JetInit3W(
  pinstance: Deno.PointerValue | Uint8Array /* ptr */,
  prstInfo: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetInit3W!(util.toPointer(pinstance), util.toPointer(prstInfo), grbit);
}

export function JetCreateInstanceA(
  pinstance: Deno.PointerValue | Uint8Array /* ptr */,
  szInstanceName: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetCreateInstanceA!(util.toPointer(pinstance), util.toPointer(szInstanceName));
}

export function JetCreateInstanceW(
  pinstance: Deno.PointerValue | Uint8Array /* ptr */,
  szInstanceName: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetCreateInstanceW!(util.toPointer(pinstance), util.toPointer(szInstanceName));
}

export function JetCreateInstance2A(
  pinstance: Deno.PointerValue | Uint8Array /* ptr */,
  szInstanceName: Deno.PointerValue | Uint8Array /* ptr */,
  szDisplayName: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetCreateInstance2A!(util.toPointer(pinstance), util.toPointer(szInstanceName), util.toPointer(szDisplayName), grbit);
}

export function JetCreateInstance2W(
  pinstance: Deno.PointerValue | Uint8Array /* ptr */,
  szInstanceName: Deno.PointerValue | Uint8Array /* ptr */,
  szDisplayName: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetCreateInstance2W!(util.toPointer(pinstance), util.toPointer(szInstanceName), util.toPointer(szDisplayName), grbit);
}

export function JetGetInstanceMiscInfo(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
  pvResult: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  InfoLevel: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetInstanceMiscInfo!(util.toPointer(instance), util.toPointer(pvResult), cbMax, InfoLevel);
}

export function JetTerm(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
): number /* i32 */ {
  return libESENT_dll.JetTerm!(util.toPointer(instance));
}

export function JetTerm2(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetTerm2!(util.toPointer(instance), grbit);
}

export function JetStopService(): number /* i32 */ {
  return libESENT_dll.JetStopService!();
}

export function JetStopServiceInstance(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
): number /* i32 */ {
  return libESENT_dll.JetStopServiceInstance!(util.toPointer(instance));
}

export function JetStopServiceInstance2(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetStopServiceInstance2!(util.toPointer(instance), grbit);
}

export function JetStopBackup(): number /* i32 */ {
  return libESENT_dll.JetStopBackup!();
}

export function JetStopBackupInstance(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
): number /* i32 */ {
  return libESENT_dll.JetStopBackupInstance!(util.toPointer(instance));
}

export function JetSetSystemParameterA(
  pinstance: Deno.PointerValue | Uint8Array /* ptr */,
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  paramid: number /* u32 */,
  lParam: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_API_PTR */,
  szParam: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetSetSystemParameterA!(util.toPointer(pinstance), util.toPointer(sesid), paramid, util.toPointer(lParam), util.toPointer(szParam));
}

export function JetSetSystemParameterW(
  pinstance: Deno.PointerValue | Uint8Array /* ptr */,
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  paramid: number /* u32 */,
  lParam: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_API_PTR */,
  szParam: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetSetSystemParameterW!(util.toPointer(pinstance), util.toPointer(sesid), paramid, util.toPointer(lParam), util.toPointer(szParam));
}

export function JetGetSystemParameterA(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  paramid: number /* u32 */,
  plParam: Deno.PointerValue | Uint8Array /* ptr */,
  szParam: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetSystemParameterA!(util.toPointer(instance), util.toPointer(sesid), paramid, util.toPointer(plParam), util.toPointer(szParam), cbMax);
}

export function JetGetSystemParameterW(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  paramid: number /* u32 */,
  plParam: Deno.PointerValue | Uint8Array /* ptr */,
  szParam: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetSystemParameterW!(util.toPointer(instance), util.toPointer(sesid), paramid, util.toPointer(plParam), util.toPointer(szParam), cbMax);
}

export function JetEnableMultiInstanceA(
  psetsysparam: Deno.PointerValue | Uint8Array /* ptr */,
  csetsysparam: number /* u32 */,
  pcsetsucceed: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetEnableMultiInstanceA!(util.toPointer(psetsysparam), csetsysparam, util.toPointer(pcsetsucceed));
}

export function JetEnableMultiInstanceW(
  psetsysparam: Deno.PointerValue | Uint8Array /* ptr */,
  csetsysparam: number /* u32 */,
  pcsetsucceed: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetEnableMultiInstanceW!(util.toPointer(psetsysparam), csetsysparam, util.toPointer(pcsetsucceed));
}

export function JetGetThreadStats(
  pvResult: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetThreadStats!(util.toPointer(pvResult), cbMax);
}

export function JetBeginSessionA(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
  psesid: Deno.PointerValue | Uint8Array /* ptr */,
  szUserName: Deno.PointerValue | Uint8Array /* ptr */,
  szPassword: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetBeginSessionA!(util.toPointer(instance), util.toPointer(psesid), util.toPointer(szUserName), util.toPointer(szPassword));
}

export function JetBeginSessionW(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
  psesid: Deno.PointerValue | Uint8Array /* ptr */,
  szUserName: Deno.PointerValue | Uint8Array /* ptr */,
  szPassword: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetBeginSessionW!(util.toPointer(instance), util.toPointer(psesid), util.toPointer(szUserName), util.toPointer(szPassword));
}

export function JetDupSession(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  psesid: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetDupSession!(util.toPointer(sesid), util.toPointer(psesid));
}

export function JetEndSession(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetEndSession!(util.toPointer(sesid), grbit);
}

export function JetGetVersion(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  pwVersion: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetGetVersion!(util.toPointer(sesid), util.toPointer(pwVersion));
}

export function JetIdle(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetIdle!(util.toPointer(sesid), grbit);
}

export function JetCreateDatabaseA(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  szFilename: Deno.PointerValue | Uint8Array /* ptr */,
  szConnect: Deno.PointerValue | Uint8Array /* ptr */,
  pdbid: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetCreateDatabaseA!(util.toPointer(sesid), util.toPointer(szFilename), util.toPointer(szConnect), util.toPointer(pdbid), grbit);
}

export function JetCreateDatabaseW(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  szFilename: Deno.PointerValue | Uint8Array /* ptr */,
  szConnect: Deno.PointerValue | Uint8Array /* ptr */,
  pdbid: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetCreateDatabaseW!(util.toPointer(sesid), util.toPointer(szFilename), util.toPointer(szConnect), util.toPointer(pdbid), grbit);
}

export function JetCreateDatabase2A(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  szFilename: Deno.PointerValue | Uint8Array /* ptr */,
  cpgDatabaseSizeMax: number /* u32 */,
  pdbid: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetCreateDatabase2A!(util.toPointer(sesid), util.toPointer(szFilename), cpgDatabaseSizeMax, util.toPointer(pdbid), grbit);
}

export function JetCreateDatabase2W(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  szFilename: Deno.PointerValue | Uint8Array /* ptr */,
  cpgDatabaseSizeMax: number /* u32 */,
  pdbid: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetCreateDatabase2W!(util.toPointer(sesid), util.toPointer(szFilename), cpgDatabaseSizeMax, util.toPointer(pdbid), grbit);
}

export function JetAttachDatabaseA(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  szFilename: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetAttachDatabaseA!(util.toPointer(sesid), util.toPointer(szFilename), grbit);
}

export function JetAttachDatabaseW(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  szFilename: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetAttachDatabaseW!(util.toPointer(sesid), util.toPointer(szFilename), grbit);
}

export function JetAttachDatabase2A(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  szFilename: Deno.PointerValue | Uint8Array /* ptr */,
  cpgDatabaseSizeMax: number /* u32 */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetAttachDatabase2A!(util.toPointer(sesid), util.toPointer(szFilename), cpgDatabaseSizeMax, grbit);
}

export function JetAttachDatabase2W(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  szFilename: Deno.PointerValue | Uint8Array /* ptr */,
  cpgDatabaseSizeMax: number /* u32 */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetAttachDatabase2W!(util.toPointer(sesid), util.toPointer(szFilename), cpgDatabaseSizeMax, grbit);
}

export function JetDetachDatabaseA(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  szFilename: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetDetachDatabaseA!(util.toPointer(sesid), util.toPointer(szFilename));
}

export function JetDetachDatabaseW(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  szFilename: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetDetachDatabaseW!(util.toPointer(sesid), util.toPointer(szFilename));
}

export function JetDetachDatabase2A(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  szFilename: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetDetachDatabase2A!(util.toPointer(sesid), util.toPointer(szFilename), grbit);
}

export function JetDetachDatabase2W(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  szFilename: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetDetachDatabase2W!(util.toPointer(sesid), util.toPointer(szFilename), grbit);
}

export function JetGetObjectInfoA(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  objtyp: number /* u32 */,
  szContainerName: Deno.PointerValue | Uint8Array /* ptr */,
  szObjectName: Deno.PointerValue | Uint8Array /* ptr */,
  pvResult: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  InfoLevel: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetObjectInfoA!(util.toPointer(sesid), dbid, objtyp, util.toPointer(szContainerName), util.toPointer(szObjectName), util.toPointer(pvResult), cbMax, InfoLevel);
}

export function JetGetObjectInfoW(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  objtyp: number /* u32 */,
  szContainerName: Deno.PointerValue | Uint8Array /* ptr */,
  szObjectName: Deno.PointerValue | Uint8Array /* ptr */,
  pvResult: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  InfoLevel: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetObjectInfoW!(util.toPointer(sesid), dbid, objtyp, util.toPointer(szContainerName), util.toPointer(szObjectName), util.toPointer(pvResult), cbMax, InfoLevel);
}

export function JetGetTableInfoA(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  pvResult: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  InfoLevel: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetTableInfoA!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(pvResult), cbMax, InfoLevel);
}

export function JetGetTableInfoW(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  pvResult: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  InfoLevel: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetTableInfoW!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(pvResult), cbMax, InfoLevel);
}

export function JetCreateTableA(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  lPages: number /* u32 */,
  lDensity: number /* u32 */,
  ptableid: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetCreateTableA!(util.toPointer(sesid), dbid, util.toPointer(szTableName), lPages, lDensity, util.toPointer(ptableid));
}

export function JetCreateTableW(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  lPages: number /* u32 */,
  lDensity: number /* u32 */,
  ptableid: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetCreateTableW!(util.toPointer(sesid), dbid, util.toPointer(szTableName), lPages, lDensity, util.toPointer(ptableid));
}

export function JetCreateTableColumnIndexA(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  ptablecreate: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetCreateTableColumnIndexA!(util.toPointer(sesid), dbid, util.toPointer(ptablecreate));
}

export function JetCreateTableColumnIndexW(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  ptablecreate: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetCreateTableColumnIndexW!(util.toPointer(sesid), dbid, util.toPointer(ptablecreate));
}

export function JetCreateTableColumnIndex2A(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  ptablecreate: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetCreateTableColumnIndex2A!(util.toPointer(sesid), dbid, util.toPointer(ptablecreate));
}

export function JetCreateTableColumnIndex2W(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  ptablecreate: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetCreateTableColumnIndex2W!(util.toPointer(sesid), dbid, util.toPointer(ptablecreate));
}

export function JetCreateTableColumnIndex3A(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  ptablecreate: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetCreateTableColumnIndex3A!(util.toPointer(sesid), dbid, util.toPointer(ptablecreate));
}

export function JetCreateTableColumnIndex3W(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  ptablecreate: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetCreateTableColumnIndex3W!(util.toPointer(sesid), dbid, util.toPointer(ptablecreate));
}

export function JetCreateTableColumnIndex4A(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  ptablecreate: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetCreateTableColumnIndex4A!(util.toPointer(sesid), dbid, util.toPointer(ptablecreate));
}

export function JetCreateTableColumnIndex4W(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  ptablecreate: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetCreateTableColumnIndex4W!(util.toPointer(sesid), dbid, util.toPointer(ptablecreate));
}

export function JetDeleteTableA(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetDeleteTableA!(util.toPointer(sesid), dbid, util.toPointer(szTableName));
}

export function JetDeleteTableW(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetDeleteTableW!(util.toPointer(sesid), dbid, util.toPointer(szTableName));
}

export function JetRenameTableA(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  szName: Deno.PointerValue | Uint8Array /* ptr */,
  szNameNew: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetRenameTableA!(util.toPointer(sesid), dbid, util.toPointer(szName), util.toPointer(szNameNew));
}

export function JetRenameTableW(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  szName: Deno.PointerValue | Uint8Array /* ptr */,
  szNameNew: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetRenameTableW!(util.toPointer(sesid), dbid, util.toPointer(szName), util.toPointer(szNameNew));
}

export function JetGetTableColumnInfoA(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  szColumnName: Deno.PointerValue | Uint8Array /* ptr */,
  pvResult: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  InfoLevel: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetTableColumnInfoA!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(szColumnName), util.toPointer(pvResult), cbMax, InfoLevel);
}

export function JetGetTableColumnInfoW(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  szColumnName: Deno.PointerValue | Uint8Array /* ptr */,
  pvResult: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  InfoLevel: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetTableColumnInfoW!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(szColumnName), util.toPointer(pvResult), cbMax, InfoLevel);
}

export function JetGetColumnInfoA(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  pColumnNameOrId: Deno.PointerValue | Uint8Array /* ptr */,
  pvResult: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  InfoLevel: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetColumnInfoA!(util.toPointer(sesid), dbid, util.toPointer(szTableName), util.toPointer(pColumnNameOrId), util.toPointer(pvResult), cbMax, InfoLevel);
}

export function JetGetColumnInfoW(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  pwColumnNameOrId: Deno.PointerValue | Uint8Array /* ptr */,
  pvResult: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  InfoLevel: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetColumnInfoW!(util.toPointer(sesid), dbid, util.toPointer(szTableName), util.toPointer(pwColumnNameOrId), util.toPointer(pvResult), cbMax, InfoLevel);
}

export function JetAddColumnA(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  szColumnName: Deno.PointerValue | Uint8Array /* ptr */,
  pcolumndef: Deno.PointerValue | Uint8Array /* ptr */,
  pvDefault: Deno.PointerValue | Uint8Array /* ptr */,
  cbDefault: number /* u32 */,
  pcolumnid: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetAddColumnA!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(szColumnName), util.toPointer(pcolumndef), util.toPointer(pvDefault), cbDefault, util.toPointer(pcolumnid));
}

export function JetAddColumnW(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  szColumnName: Deno.PointerValue | Uint8Array /* ptr */,
  pcolumndef: Deno.PointerValue | Uint8Array /* ptr */,
  pvDefault: Deno.PointerValue | Uint8Array /* ptr */,
  cbDefault: number /* u32 */,
  pcolumnid: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetAddColumnW!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(szColumnName), util.toPointer(pcolumndef), util.toPointer(pvDefault), cbDefault, util.toPointer(pcolumnid));
}

export function JetDeleteColumnA(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  szColumnName: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetDeleteColumnA!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(szColumnName));
}

export function JetDeleteColumnW(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  szColumnName: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetDeleteColumnW!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(szColumnName));
}

export function JetDeleteColumn2A(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  szColumnName: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetDeleteColumn2A!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(szColumnName), grbit);
}

export function JetDeleteColumn2W(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  szColumnName: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetDeleteColumn2W!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(szColumnName), grbit);
}

export function JetRenameColumnA(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  szName: Deno.PointerValue | Uint8Array /* ptr */,
  szNameNew: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetRenameColumnA!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(szName), util.toPointer(szNameNew), grbit);
}

export function JetRenameColumnW(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  szName: Deno.PointerValue | Uint8Array /* ptr */,
  szNameNew: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetRenameColumnW!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(szName), util.toPointer(szNameNew), grbit);
}

export function JetSetColumnDefaultValueA(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  szColumnName: Deno.PointerValue | Uint8Array /* ptr */,
  pvData: Deno.PointerValue | Uint8Array /* ptr */,
  cbData: number /* u32 */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetSetColumnDefaultValueA!(util.toPointer(sesid), dbid, util.toPointer(szTableName), util.toPointer(szColumnName), util.toPointer(pvData), cbData, grbit);
}

export function JetSetColumnDefaultValueW(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  szColumnName: Deno.PointerValue | Uint8Array /* ptr */,
  pvData: Deno.PointerValue | Uint8Array /* ptr */,
  cbData: number /* u32 */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetSetColumnDefaultValueW!(util.toPointer(sesid), dbid, util.toPointer(szTableName), util.toPointer(szColumnName), util.toPointer(pvData), cbData, grbit);
}

export function JetGetTableIndexInfoA(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  szIndexName: Deno.PointerValue | Uint8Array /* ptr */,
  pvResult: Deno.PointerValue | Uint8Array /* ptr */,
  cbResult: number /* u32 */,
  InfoLevel: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetTableIndexInfoA!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(szIndexName), util.toPointer(pvResult), cbResult, InfoLevel);
}

export function JetGetTableIndexInfoW(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  szIndexName: Deno.PointerValue | Uint8Array /* ptr */,
  pvResult: Deno.PointerValue | Uint8Array /* ptr */,
  cbResult: number /* u32 */,
  InfoLevel: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetTableIndexInfoW!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(szIndexName), util.toPointer(pvResult), cbResult, InfoLevel);
}

export function JetGetIndexInfoA(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  szIndexName: Deno.PointerValue | Uint8Array /* ptr */,
  pvResult: Deno.PointerValue | Uint8Array /* ptr */,
  cbResult: number /* u32 */,
  InfoLevel: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetIndexInfoA!(util.toPointer(sesid), dbid, util.toPointer(szTableName), util.toPointer(szIndexName), util.toPointer(pvResult), cbResult, InfoLevel);
}

export function JetGetIndexInfoW(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  szIndexName: Deno.PointerValue | Uint8Array /* ptr */,
  pvResult: Deno.PointerValue | Uint8Array /* ptr */,
  cbResult: number /* u32 */,
  InfoLevel: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetIndexInfoW!(util.toPointer(sesid), dbid, util.toPointer(szTableName), util.toPointer(szIndexName), util.toPointer(pvResult), cbResult, InfoLevel);
}

export function JetCreateIndexA(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  szIndexName: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
  szKey: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cbKey: number /* u32 */,
  lDensity: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetCreateIndexA!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(szIndexName), grbit, util.pstrToFfi(szKey), cbKey, lDensity);
}

export function JetCreateIndexW(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  szIndexName: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
  szKey: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cbKey: number /* u32 */,
  lDensity: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetCreateIndexW!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(szIndexName), grbit, util.pwstrToFfi(szKey), cbKey, lDensity);
}

export function JetCreateIndex2A(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  pindexcreate: Deno.PointerValue | Uint8Array /* ptr */,
  cIndexCreate: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetCreateIndex2A!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(pindexcreate), cIndexCreate);
}

export function JetCreateIndex2W(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  pindexcreate: Deno.PointerValue | Uint8Array /* ptr */,
  cIndexCreate: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetCreateIndex2W!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(pindexcreate), cIndexCreate);
}

export function JetCreateIndex3A(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  pindexcreate: Deno.PointerValue | Uint8Array /* ptr */,
  cIndexCreate: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetCreateIndex3A!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(pindexcreate), cIndexCreate);
}

export function JetCreateIndex3W(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  pindexcreate: Deno.PointerValue | Uint8Array /* ptr */,
  cIndexCreate: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetCreateIndex3W!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(pindexcreate), cIndexCreate);
}

export function JetCreateIndex4A(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  pindexcreate: Deno.PointerValue | Uint8Array /* ptr */,
  cIndexCreate: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetCreateIndex4A!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(pindexcreate), cIndexCreate);
}

export function JetCreateIndex4W(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  pindexcreate: Deno.PointerValue | Uint8Array /* ptr */,
  cIndexCreate: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetCreateIndex4W!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(pindexcreate), cIndexCreate);
}

export function JetDeleteIndexA(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  szIndexName: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetDeleteIndexA!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(szIndexName));
}

export function JetDeleteIndexW(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  szIndexName: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetDeleteIndexW!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(szIndexName));
}

export function JetBeginTransaction(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
): number /* i32 */ {
  return libESENT_dll.JetBeginTransaction!(util.toPointer(sesid));
}

export function JetBeginTransaction2(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetBeginTransaction2!(util.toPointer(sesid), grbit);
}

export function JetBeginTransaction3(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  trxid: bigint | number /* i64 */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetBeginTransaction3!(util.toPointer(sesid), trxid, grbit);
}

export function JetCommitTransaction(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetCommitTransaction!(util.toPointer(sesid), grbit);
}

export function JetCommitTransaction2(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  grbit: number /* u32 */,
  cmsecDurableCommit: number /* u32 */,
  pCommitId: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetCommitTransaction2!(util.toPointer(sesid), grbit, cmsecDurableCommit, util.toPointer(pCommitId));
}

export function JetRollback(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetRollback!(util.toPointer(sesid), grbit);
}

export function JetGetDatabaseInfoA(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  pvResult: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  InfoLevel: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetDatabaseInfoA!(util.toPointer(sesid), dbid, util.toPointer(pvResult), cbMax, InfoLevel);
}

export function JetGetDatabaseInfoW(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  pvResult: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  InfoLevel: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetDatabaseInfoW!(util.toPointer(sesid), dbid, util.toPointer(pvResult), cbMax, InfoLevel);
}

export function JetGetDatabaseFileInfoA(
  szDatabaseName: Deno.PointerValue | Uint8Array /* ptr */,
  pvResult: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  InfoLevel: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetDatabaseFileInfoA!(util.toPointer(szDatabaseName), util.toPointer(pvResult), cbMax, InfoLevel);
}

export function JetGetDatabaseFileInfoW(
  szDatabaseName: Deno.PointerValue | Uint8Array /* ptr */,
  pvResult: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  InfoLevel: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetDatabaseFileInfoW!(util.toPointer(szDatabaseName), util.toPointer(pvResult), cbMax, InfoLevel);
}

export function JetOpenDatabaseA(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  szFilename: Deno.PointerValue | Uint8Array /* ptr */,
  szConnect: Deno.PointerValue | Uint8Array /* ptr */,
  pdbid: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetOpenDatabaseA!(util.toPointer(sesid), util.toPointer(szFilename), util.toPointer(szConnect), util.toPointer(pdbid), grbit);
}

export function JetOpenDatabaseW(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  szFilename: Deno.PointerValue | Uint8Array /* ptr */,
  szConnect: Deno.PointerValue | Uint8Array /* ptr */,
  pdbid: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetOpenDatabaseW!(util.toPointer(sesid), util.toPointer(szFilename), util.toPointer(szConnect), util.toPointer(pdbid), grbit);
}

export function JetCloseDatabase(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetCloseDatabase!(util.toPointer(sesid), dbid, grbit);
}

export function JetOpenTableA(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  pvParameters: Deno.PointerValue | Uint8Array /* ptr */,
  cbParameters: number /* u32 */,
  grbit: number /* u32 */,
  ptableid: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetOpenTableA!(util.toPointer(sesid), dbid, util.toPointer(szTableName), util.toPointer(pvParameters), cbParameters, grbit, util.toPointer(ptableid));
}

export function JetOpenTableW(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  pvParameters: Deno.PointerValue | Uint8Array /* ptr */,
  cbParameters: number /* u32 */,
  grbit: number /* u32 */,
  ptableid: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetOpenTableW!(util.toPointer(sesid), dbid, util.toPointer(szTableName), util.toPointer(pvParameters), cbParameters, grbit, util.toPointer(ptableid));
}

export function JetSetTableSequential(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetSetTableSequential!(util.toPointer(sesid), util.toPointer(tableid), grbit);
}

export function JetResetTableSequential(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetResetTableSequential!(util.toPointer(sesid), util.toPointer(tableid), grbit);
}

export function JetCloseTable(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
): number /* i32 */ {
  return libESENT_dll.JetCloseTable!(util.toPointer(sesid), util.toPointer(tableid));
}

export function JetDelete(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
): number /* i32 */ {
  return libESENT_dll.JetDelete!(util.toPointer(sesid), util.toPointer(tableid));
}

export function JetUpdate(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  pvBookmark: Deno.PointerValue | Uint8Array /* ptr */,
  cbBookmark: number /* u32 */,
  pcbActual: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetUpdate!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(pvBookmark), cbBookmark, util.toPointer(pcbActual));
}

export function JetUpdate2(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  pvBookmark: Deno.PointerValue | Uint8Array /* ptr */,
  cbBookmark: number /* u32 */,
  pcbActual: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetUpdate2!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(pvBookmark), cbBookmark, util.toPointer(pcbActual), grbit);
}

export function JetEscrowUpdate(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  columnid: number /* u32 */,
  pv: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  pvOld: Deno.PointerValue | Uint8Array /* ptr */,
  cbOldMax: number /* u32 */,
  pcbOldActual: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetEscrowUpdate!(util.toPointer(sesid), util.toPointer(tableid), columnid, util.toPointer(pv), cbMax, util.toPointer(pvOld), cbOldMax, util.toPointer(pcbOldActual), grbit);
}

export function JetRetrieveColumn(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  columnid: number /* u32 */,
  pvData: Deno.PointerValue | Uint8Array /* ptr */,
  cbData: number /* u32 */,
  pcbActual: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
  pretinfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetRetrieveColumn!(util.toPointer(sesid), util.toPointer(tableid), columnid, util.toPointer(pvData), cbData, util.toPointer(pcbActual), grbit, util.toPointer(pretinfo));
}

export function JetRetrieveColumns(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  pretrievecolumn: Deno.PointerValue | Uint8Array /* ptr */,
  cretrievecolumn: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetRetrieveColumns!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(pretrievecolumn), cretrievecolumn);
}

export function JetEnumerateColumns(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  cEnumColumnId: number /* u32 */,
  rgEnumColumnId: Deno.PointerValue | Uint8Array /* ptr */,
  pcEnumColumn: Deno.PointerValue | Uint8Array /* ptr */,
  prgEnumColumn: Deno.PointerValue | Uint8Array /* ptr */,
  pfnRealloc: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_PFNREALLOC */,
  pvReallocContext: Deno.PointerValue | Uint8Array /* ptr */,
  cbDataMost: number /* u32 */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetEnumerateColumns!(util.toPointer(sesid), util.toPointer(tableid), cEnumColumnId, util.toPointer(rgEnumColumnId), util.toPointer(pcEnumColumn), util.toPointer(prgEnumColumn), util.toPointer(pfnRealloc), util.toPointer(pvReallocContext), cbDataMost, grbit);
}

export function JetGetRecordSize(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  precsize: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetRecordSize!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(precsize), grbit);
}

export function JetGetRecordSize2(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  precsize: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetRecordSize2!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(precsize), grbit);
}

export function JetSetColumn(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  columnid: number /* u32 */,
  pvData: Deno.PointerValue | Uint8Array /* ptr */,
  cbData: number /* u32 */,
  grbit: number /* u32 */,
  psetinfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetSetColumn!(util.toPointer(sesid), util.toPointer(tableid), columnid, util.toPointer(pvData), cbData, grbit, util.toPointer(psetinfo));
}

export function JetSetColumns(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  psetcolumn: Deno.PointerValue | Uint8Array /* ptr */,
  csetcolumn: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetSetColumns!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(psetcolumn), csetcolumn);
}

export function JetPrepareUpdate(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  prep: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetPrepareUpdate!(util.toPointer(sesid), util.toPointer(tableid), prep);
}

export function JetGetRecordPosition(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  precpos: Deno.PointerValue | Uint8Array /* ptr */,
  cbRecpos: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetRecordPosition!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(precpos), cbRecpos);
}

export function JetGotoPosition(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  precpos: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetGotoPosition!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(precpos));
}

export function JetGetCursorInfo(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  pvResult: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  InfoLevel: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetCursorInfo!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(pvResult), cbMax, InfoLevel);
}

export function JetDupCursor(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  ptableid: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetDupCursor!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(ptableid), grbit);
}

export function JetGetCurrentIndexA(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  szIndexName: Deno.PointerValue | Uint8Array /* ptr */,
  cbIndexName: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetCurrentIndexA!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(szIndexName), cbIndexName);
}

export function JetGetCurrentIndexW(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  szIndexName: Deno.PointerValue | Uint8Array /* ptr */,
  cbIndexName: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetCurrentIndexW!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(szIndexName), cbIndexName);
}

export function JetSetCurrentIndexA(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  szIndexName: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetSetCurrentIndexA!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(szIndexName));
}

export function JetSetCurrentIndexW(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  szIndexName: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetSetCurrentIndexW!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(szIndexName));
}

export function JetSetCurrentIndex2A(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  szIndexName: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetSetCurrentIndex2A!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(szIndexName), grbit);
}

export function JetSetCurrentIndex2W(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  szIndexName: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetSetCurrentIndex2W!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(szIndexName), grbit);
}

export function JetSetCurrentIndex3A(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  szIndexName: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
  itagSequence: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetSetCurrentIndex3A!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(szIndexName), grbit, itagSequence);
}

export function JetSetCurrentIndex3W(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  szIndexName: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
  itagSequence: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetSetCurrentIndex3W!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(szIndexName), grbit, itagSequence);
}

export function JetSetCurrentIndex4A(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  szIndexName: Deno.PointerValue | Uint8Array /* ptr */,
  pindexid: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
  itagSequence: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetSetCurrentIndex4A!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(szIndexName), util.toPointer(pindexid), grbit, itagSequence);
}

export function JetSetCurrentIndex4W(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  szIndexName: Deno.PointerValue | Uint8Array /* ptr */,
  pindexid: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
  itagSequence: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetSetCurrentIndex4W!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(szIndexName), util.toPointer(pindexid), grbit, itagSequence);
}

export function JetMove(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  cRow: number /* i32 */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetMove!(util.toPointer(sesid), util.toPointer(tableid), cRow, grbit);
}

export function JetSetCursorFilter(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  rgColumnFilters: Deno.PointerValue | Uint8Array /* ptr */,
  cColumnFilters: number /* u32 */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetSetCursorFilter!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(rgColumnFilters), cColumnFilters, grbit);
}

export function JetGetLock(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetLock!(util.toPointer(sesid), util.toPointer(tableid), grbit);
}

export function JetMakeKey(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  pvData: Deno.PointerValue | Uint8Array /* ptr */,
  cbData: number /* u32 */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetMakeKey!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(pvData), cbData, grbit);
}

export function JetSeek(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetSeek!(util.toPointer(sesid), util.toPointer(tableid), grbit);
}

export function JetPrereadKeys(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  rgpvKeys: Deno.PointerValue | Uint8Array /* ptr */,
  rgcbKeys: Deno.PointerValue | Uint8Array /* ptr */,
  ckeys: number /* i32 */,
  pckeysPreread: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetPrereadKeys!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(rgpvKeys), util.toPointer(rgcbKeys), ckeys, util.toPointer(pckeysPreread), grbit);
}

export function JetPrereadIndexRanges(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  rgIndexRanges: Deno.PointerValue | Uint8Array /* ptr */,
  cIndexRanges: number /* u32 */,
  pcRangesPreread: Deno.PointerValue | Uint8Array /* ptr */,
  rgcolumnidPreread: Deno.PointerValue | Uint8Array /* ptr */,
  ccolumnidPreread: number /* u32 */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetPrereadIndexRanges!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(rgIndexRanges), cIndexRanges, util.toPointer(pcRangesPreread), util.toPointer(rgcolumnidPreread), ccolumnidPreread, grbit);
}

export function JetGetBookmark(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  pvBookmark: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  pcbActual: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetGetBookmark!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(pvBookmark), cbMax, util.toPointer(pcbActual));
}

export function JetGetSecondaryIndexBookmark(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  pvSecondaryKey: Deno.PointerValue | Uint8Array /* ptr */,
  cbSecondaryKeyMax: number /* u32 */,
  pcbSecondaryKeyActual: Deno.PointerValue | Uint8Array /* ptr */,
  pvPrimaryBookmark: Deno.PointerValue | Uint8Array /* ptr */,
  cbPrimaryBookmarkMax: number /* u32 */,
  pcbPrimaryBookmarkActual: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetSecondaryIndexBookmark!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(pvSecondaryKey), cbSecondaryKeyMax, util.toPointer(pcbSecondaryKeyActual), util.toPointer(pvPrimaryBookmark), cbPrimaryBookmarkMax, util.toPointer(pcbPrimaryBookmarkActual), grbit);
}

export function JetCompactA(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  szDatabaseSrc: Deno.PointerValue | Uint8Array /* ptr */,
  szDatabaseDest: Deno.PointerValue | Uint8Array /* ptr */,
  pfnStatus: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_PFNSTATUS */,
  pconvert: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetCompactA!(util.toPointer(sesid), util.toPointer(szDatabaseSrc), util.toPointer(szDatabaseDest), util.toPointer(pfnStatus), util.toPointer(pconvert), grbit);
}

export function JetCompactW(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  szDatabaseSrc: Deno.PointerValue | Uint8Array /* ptr */,
  szDatabaseDest: Deno.PointerValue | Uint8Array /* ptr */,
  pfnStatus: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_PFNSTATUS */,
  pconvert: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetCompactW!(util.toPointer(sesid), util.toPointer(szDatabaseSrc), util.toPointer(szDatabaseDest), util.toPointer(pfnStatus), util.toPointer(pconvert), grbit);
}

export function JetDefragmentA(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  pcPasses: Deno.PointerValue | Uint8Array /* ptr */,
  pcSeconds: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetDefragmentA!(util.toPointer(sesid), dbid, util.toPointer(szTableName), util.toPointer(pcPasses), util.toPointer(pcSeconds), grbit);
}

export function JetDefragmentW(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  pcPasses: Deno.PointerValue | Uint8Array /* ptr */,
  pcSeconds: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetDefragmentW!(util.toPointer(sesid), dbid, util.toPointer(szTableName), util.toPointer(pcPasses), util.toPointer(pcSeconds), grbit);
}

export function JetDefragment2A(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  pcPasses: Deno.PointerValue | Uint8Array /* ptr */,
  pcSeconds: Deno.PointerValue | Uint8Array /* ptr */,
  callback: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_CALLBACK */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetDefragment2A!(util.toPointer(sesid), dbid, util.toPointer(szTableName), util.toPointer(pcPasses), util.toPointer(pcSeconds), util.toPointer(callback), grbit);
}

export function JetDefragment2W(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  pcPasses: Deno.PointerValue | Uint8Array /* ptr */,
  pcSeconds: Deno.PointerValue | Uint8Array /* ptr */,
  callback: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_CALLBACK */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetDefragment2W!(util.toPointer(sesid), dbid, util.toPointer(szTableName), util.toPointer(pcPasses), util.toPointer(pcSeconds), util.toPointer(callback), grbit);
}

export function JetDefragment3A(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  szDatabaseName: Deno.PointerValue | Uint8Array /* ptr */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  pcPasses: Deno.PointerValue | Uint8Array /* ptr */,
  pcSeconds: Deno.PointerValue | Uint8Array /* ptr */,
  callback: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_CALLBACK */,
  pvContext: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetDefragment3A!(util.toPointer(sesid), util.toPointer(szDatabaseName), util.toPointer(szTableName), util.toPointer(pcPasses), util.toPointer(pcSeconds), util.toPointer(callback), util.toPointer(pvContext), grbit);
}

export function JetDefragment3W(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  szDatabaseName: Deno.PointerValue | Uint8Array /* ptr */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  pcPasses: Deno.PointerValue | Uint8Array /* ptr */,
  pcSeconds: Deno.PointerValue | Uint8Array /* ptr */,
  callback: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_CALLBACK */,
  pvContext: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetDefragment3W!(util.toPointer(sesid), util.toPointer(szDatabaseName), util.toPointer(szTableName), util.toPointer(pcPasses), util.toPointer(pcSeconds), util.toPointer(callback), util.toPointer(pvContext), grbit);
}

export function JetSetDatabaseSizeA(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  szDatabaseName: Deno.PointerValue | Uint8Array /* ptr */,
  cpg: number /* u32 */,
  pcpgReal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetSetDatabaseSizeA!(util.toPointer(sesid), util.toPointer(szDatabaseName), cpg, util.toPointer(pcpgReal));
}

export function JetSetDatabaseSizeW(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  szDatabaseName: Deno.PointerValue | Uint8Array /* ptr */,
  cpg: number /* u32 */,
  pcpgReal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetSetDatabaseSizeW!(util.toPointer(sesid), util.toPointer(szDatabaseName), cpg, util.toPointer(pcpgReal));
}

export function JetGrowDatabase(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  cpg: number /* u32 */,
  pcpgReal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetGrowDatabase!(util.toPointer(sesid), dbid, cpg, util.toPointer(pcpgReal));
}

export function JetResizeDatabase(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  dbid: number /* u32 */,
  cpgTarget: number /* u32 */,
  pcpgActual: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetResizeDatabase!(util.toPointer(sesid), dbid, cpgTarget, util.toPointer(pcpgActual), grbit);
}

export function JetSetSessionContext(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  ulContext: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_API_PTR */,
): number /* i32 */ {
  return libESENT_dll.JetSetSessionContext!(util.toPointer(sesid), util.toPointer(ulContext));
}

export function JetResetSessionContext(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
): number /* i32 */ {
  return libESENT_dll.JetResetSessionContext!(util.toPointer(sesid));
}

export function JetGotoBookmark(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  pvBookmark: Deno.PointerValue | Uint8Array /* ptr */,
  cbBookmark: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGotoBookmark!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(pvBookmark), cbBookmark);
}

export function JetGotoSecondaryIndexBookmark(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  pvSecondaryKey: Deno.PointerValue | Uint8Array /* ptr */,
  cbSecondaryKey: number /* u32 */,
  pvPrimaryBookmark: Deno.PointerValue | Uint8Array /* ptr */,
  cbPrimaryBookmark: number /* u32 */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGotoSecondaryIndexBookmark!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(pvSecondaryKey), cbSecondaryKey, util.toPointer(pvPrimaryBookmark), cbPrimaryBookmark, grbit);
}

export function JetIntersectIndexes(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  rgindexrange: Deno.PointerValue | Uint8Array /* ptr */,
  cindexrange: number /* u32 */,
  precordlist: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetIntersectIndexes!(util.toPointer(sesid), util.toPointer(rgindexrange), cindexrange, util.toPointer(precordlist), grbit);
}

export function JetComputeStats(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
): number /* i32 */ {
  return libESENT_dll.JetComputeStats!(util.toPointer(sesid), util.toPointer(tableid));
}

export function JetOpenTempTable(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  prgcolumndef: Deno.PointerValue | Uint8Array /* ptr */,
  ccolumn: number /* u32 */,
  grbit: number /* u32 */,
  ptableid: Deno.PointerValue | Uint8Array /* ptr */,
  prgcolumnid: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetOpenTempTable!(util.toPointer(sesid), util.toPointer(prgcolumndef), ccolumn, grbit, util.toPointer(ptableid), util.toPointer(prgcolumnid));
}

export function JetOpenTempTable2(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  prgcolumndef: Deno.PointerValue | Uint8Array /* ptr */,
  ccolumn: number /* u32 */,
  lcid: number /* u32 */,
  grbit: number /* u32 */,
  ptableid: Deno.PointerValue | Uint8Array /* ptr */,
  prgcolumnid: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetOpenTempTable2!(util.toPointer(sesid), util.toPointer(prgcolumndef), ccolumn, lcid, grbit, util.toPointer(ptableid), util.toPointer(prgcolumnid));
}

export function JetOpenTempTable3(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  prgcolumndef: Deno.PointerValue | Uint8Array /* ptr */,
  ccolumn: number /* u32 */,
  pidxunicode: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
  ptableid: Deno.PointerValue | Uint8Array /* ptr */,
  prgcolumnid: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetOpenTempTable3!(util.toPointer(sesid), util.toPointer(prgcolumndef), ccolumn, util.toPointer(pidxunicode), grbit, util.toPointer(ptableid), util.toPointer(prgcolumnid));
}

export function JetOpenTemporaryTable(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  popentemporarytable: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetOpenTemporaryTable!(util.toPointer(sesid), util.toPointer(popentemporarytable));
}

export function JetOpenTemporaryTable2(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  popentemporarytable: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetOpenTemporaryTable2!(util.toPointer(sesid), util.toPointer(popentemporarytable));
}

export function JetBackupA(
  szBackupPath: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
  pfnStatus: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_PFNSTATUS */,
): number /* i32 */ {
  return libESENT_dll.JetBackupA!(util.toPointer(szBackupPath), grbit, util.toPointer(pfnStatus));
}

export function JetBackupW(
  szBackupPath: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
  pfnStatus: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_PFNSTATUS */,
): number /* i32 */ {
  return libESENT_dll.JetBackupW!(util.toPointer(szBackupPath), grbit, util.toPointer(pfnStatus));
}

export function JetBackupInstanceA(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
  szBackupPath: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
  pfnStatus: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_PFNSTATUS */,
): number /* i32 */ {
  return libESENT_dll.JetBackupInstanceA!(util.toPointer(instance), util.toPointer(szBackupPath), grbit, util.toPointer(pfnStatus));
}

export function JetBackupInstanceW(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
  szBackupPath: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
  pfnStatus: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_PFNSTATUS */,
): number /* i32 */ {
  return libESENT_dll.JetBackupInstanceW!(util.toPointer(instance), util.toPointer(szBackupPath), grbit, util.toPointer(pfnStatus));
}

export function JetRestoreA(
  szSource: Deno.PointerValue | Uint8Array /* ptr */,
  pfn: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_PFNSTATUS */,
): number /* i32 */ {
  return libESENT_dll.JetRestoreA!(util.toPointer(szSource), util.toPointer(pfn));
}

export function JetRestoreW(
  szSource: Deno.PointerValue | Uint8Array /* ptr */,
  pfn: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_PFNSTATUS */,
): number /* i32 */ {
  return libESENT_dll.JetRestoreW!(util.toPointer(szSource), util.toPointer(pfn));
}

export function JetRestore2A(
  sz: Deno.PointerValue | Uint8Array /* ptr */,
  szDest: Deno.PointerValue | Uint8Array /* ptr */,
  pfn: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_PFNSTATUS */,
): number /* i32 */ {
  return libESENT_dll.JetRestore2A!(util.toPointer(sz), util.toPointer(szDest), util.toPointer(pfn));
}

export function JetRestore2W(
  sz: Deno.PointerValue | Uint8Array /* ptr */,
  szDest: Deno.PointerValue | Uint8Array /* ptr */,
  pfn: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_PFNSTATUS */,
): number /* i32 */ {
  return libESENT_dll.JetRestore2W!(util.toPointer(sz), util.toPointer(szDest), util.toPointer(pfn));
}

export function JetRestoreInstanceA(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
  sz: Deno.PointerValue | Uint8Array /* ptr */,
  szDest: Deno.PointerValue | Uint8Array /* ptr */,
  pfn: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_PFNSTATUS */,
): number /* i32 */ {
  return libESENT_dll.JetRestoreInstanceA!(util.toPointer(instance), util.toPointer(sz), util.toPointer(szDest), util.toPointer(pfn));
}

export function JetRestoreInstanceW(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
  sz: Deno.PointerValue | Uint8Array /* ptr */,
  szDest: Deno.PointerValue | Uint8Array /* ptr */,
  pfn: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_PFNSTATUS */,
): number /* i32 */ {
  return libESENT_dll.JetRestoreInstanceW!(util.toPointer(instance), util.toPointer(sz), util.toPointer(szDest), util.toPointer(pfn));
}

export function JetSetIndexRange(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableidSrc: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetSetIndexRange!(util.toPointer(sesid), util.toPointer(tableidSrc), grbit);
}

export function JetIndexRecordCount(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  pcrec: Deno.PointerValue | Uint8Array /* ptr */,
  crecMax: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetIndexRecordCount!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(pcrec), crecMax);
}

export function JetRetrieveKey(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  pvKey: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  pcbActual: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetRetrieveKey!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(pvKey), cbMax, util.toPointer(pcbActual), grbit);
}

export function JetBeginExternalBackup(
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetBeginExternalBackup!(grbit);
}

export function JetBeginExternalBackupInstance(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetBeginExternalBackupInstance!(util.toPointer(instance), grbit);
}

export function JetGetAttachInfoA(
  szzDatabases: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  pcbActual: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetGetAttachInfoA!(util.toPointer(szzDatabases), cbMax, util.toPointer(pcbActual));
}

export function JetGetAttachInfoW(
  wszzDatabases: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  pcbActual: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetGetAttachInfoW!(util.toPointer(wszzDatabases), cbMax, util.toPointer(pcbActual));
}

export function JetGetAttachInfoInstanceA(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
  szzDatabases: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  pcbActual: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetGetAttachInfoInstanceA!(util.toPointer(instance), util.toPointer(szzDatabases), cbMax, util.toPointer(pcbActual));
}

export function JetGetAttachInfoInstanceW(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
  szzDatabases: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  pcbActual: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetGetAttachInfoInstanceW!(util.toPointer(instance), util.toPointer(szzDatabases), cbMax, util.toPointer(pcbActual));
}

export function JetOpenFileA(
  szFileName: Deno.PointerValue | Uint8Array /* ptr */,
  phfFile: Deno.PointerValue | Uint8Array /* ptr */,
  pulFileSizeLow: Deno.PointerValue | Uint8Array /* ptr */,
  pulFileSizeHigh: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetOpenFileA!(util.toPointer(szFileName), util.toPointer(phfFile), util.toPointer(pulFileSizeLow), util.toPointer(pulFileSizeHigh));
}

export function JetOpenFileW(
  szFileName: Deno.PointerValue | Uint8Array /* ptr */,
  phfFile: Deno.PointerValue | Uint8Array /* ptr */,
  pulFileSizeLow: Deno.PointerValue | Uint8Array /* ptr */,
  pulFileSizeHigh: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetOpenFileW!(util.toPointer(szFileName), util.toPointer(phfFile), util.toPointer(pulFileSizeLow), util.toPointer(pulFileSizeHigh));
}

export function JetOpenFileInstanceA(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
  szFileName: Deno.PointerValue | Uint8Array /* ptr */,
  phfFile: Deno.PointerValue | Uint8Array /* ptr */,
  pulFileSizeLow: Deno.PointerValue | Uint8Array /* ptr */,
  pulFileSizeHigh: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetOpenFileInstanceA!(util.toPointer(instance), util.toPointer(szFileName), util.toPointer(phfFile), util.toPointer(pulFileSizeLow), util.toPointer(pulFileSizeHigh));
}

export function JetOpenFileInstanceW(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
  szFileName: Deno.PointerValue | Uint8Array /* ptr */,
  phfFile: Deno.PointerValue | Uint8Array /* ptr */,
  pulFileSizeLow: Deno.PointerValue | Uint8Array /* ptr */,
  pulFileSizeHigh: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetOpenFileInstanceW!(util.toPointer(instance), util.toPointer(szFileName), util.toPointer(phfFile), util.toPointer(pulFileSizeLow), util.toPointer(pulFileSizeHigh));
}

export function JetReadFile(
  hfFile: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_HANDLE */,
  pv: Deno.PointerValue | Uint8Array /* ptr */,
  cb: number /* u32 */,
  pcbActual: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetReadFile!(util.toPointer(hfFile), util.toPointer(pv), cb, util.toPointer(pcbActual));
}

export function JetReadFileInstance(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
  hfFile: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_HANDLE */,
  pv: Deno.PointerValue | Uint8Array /* ptr */,
  cb: number /* u32 */,
  pcbActual: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetReadFileInstance!(util.toPointer(instance), util.toPointer(hfFile), util.toPointer(pv), cb, util.toPointer(pcbActual));
}

export function JetCloseFile(
  hfFile: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_HANDLE */,
): number /* i32 */ {
  return libESENT_dll.JetCloseFile!(util.toPointer(hfFile));
}

export function JetCloseFileInstance(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
  hfFile: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_HANDLE */,
): number /* i32 */ {
  return libESENT_dll.JetCloseFileInstance!(util.toPointer(instance), util.toPointer(hfFile));
}

export function JetGetLogInfoA(
  szzLogs: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  pcbActual: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetGetLogInfoA!(util.toPointer(szzLogs), cbMax, util.toPointer(pcbActual));
}

export function JetGetLogInfoW(
  szzLogs: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  pcbActual: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetGetLogInfoW!(util.toPointer(szzLogs), cbMax, util.toPointer(pcbActual));
}

export function JetGetLogInfoInstanceA(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
  szzLogs: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  pcbActual: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetGetLogInfoInstanceA!(util.toPointer(instance), util.toPointer(szzLogs), cbMax, util.toPointer(pcbActual));
}

export function JetGetLogInfoInstanceW(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
  wszzLogs: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  pcbActual: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetGetLogInfoInstanceW!(util.toPointer(instance), util.toPointer(wszzLogs), cbMax, util.toPointer(pcbActual));
}

export function JetGetLogInfoInstance2A(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
  szzLogs: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  pcbActual: Deno.PointerValue | Uint8Array /* ptr */,
  pLogInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetGetLogInfoInstance2A!(util.toPointer(instance), util.toPointer(szzLogs), cbMax, util.toPointer(pcbActual), util.toPointer(pLogInfo));
}

export function JetGetLogInfoInstance2W(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
  wszzLogs: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  pcbActual: Deno.PointerValue | Uint8Array /* ptr */,
  pLogInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetGetLogInfoInstance2W!(util.toPointer(instance), util.toPointer(wszzLogs), cbMax, util.toPointer(pcbActual), util.toPointer(pLogInfo));
}

export function JetGetTruncateLogInfoInstanceA(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
  szzLogs: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  pcbActual: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetGetTruncateLogInfoInstanceA!(util.toPointer(instance), util.toPointer(szzLogs), cbMax, util.toPointer(pcbActual));
}

export function JetGetTruncateLogInfoInstanceW(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
  wszzLogs: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  pcbActual: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetGetTruncateLogInfoInstanceW!(util.toPointer(instance), util.toPointer(wszzLogs), cbMax, util.toPointer(pcbActual));
}

export function JetTruncateLog(): number /* i32 */ {
  return libESENT_dll.JetTruncateLog!();
}

export function JetTruncateLogInstance(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
): number /* i32 */ {
  return libESENT_dll.JetTruncateLogInstance!(util.toPointer(instance));
}

export function JetEndExternalBackup(): number /* i32 */ {
  return libESENT_dll.JetEndExternalBackup!();
}

export function JetEndExternalBackupInstance(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
): number /* i32 */ {
  return libESENT_dll.JetEndExternalBackupInstance!(util.toPointer(instance));
}

export function JetEndExternalBackupInstance2(
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetEndExternalBackupInstance2!(util.toPointer(instance), grbit);
}

export function JetExternalRestoreA(
  szCheckpointFilePath: Deno.PointerValue | Uint8Array /* ptr */,
  szLogPath: Deno.PointerValue | Uint8Array /* ptr */,
  rgrstmap: Deno.PointerValue | Uint8Array /* ptr */,
  crstfilemap: number /* i32 */,
  szBackupLogPath: Deno.PointerValue | Uint8Array /* ptr */,
  genLow: number /* i32 */,
  genHigh: number /* i32 */,
  pfn: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_PFNSTATUS */,
): number /* i32 */ {
  return libESENT_dll.JetExternalRestoreA!(util.toPointer(szCheckpointFilePath), util.toPointer(szLogPath), util.toPointer(rgrstmap), crstfilemap, util.toPointer(szBackupLogPath), genLow, genHigh, util.toPointer(pfn));
}

export function JetExternalRestoreW(
  szCheckpointFilePath: Deno.PointerValue | Uint8Array /* ptr */,
  szLogPath: Deno.PointerValue | Uint8Array /* ptr */,
  rgrstmap: Deno.PointerValue | Uint8Array /* ptr */,
  crstfilemap: number /* i32 */,
  szBackupLogPath: Deno.PointerValue | Uint8Array /* ptr */,
  genLow: number /* i32 */,
  genHigh: number /* i32 */,
  pfn: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_PFNSTATUS */,
): number /* i32 */ {
  return libESENT_dll.JetExternalRestoreW!(util.toPointer(szCheckpointFilePath), util.toPointer(szLogPath), util.toPointer(rgrstmap), crstfilemap, util.toPointer(szBackupLogPath), genLow, genHigh, util.toPointer(pfn));
}

export function JetExternalRestore2A(
  szCheckpointFilePath: Deno.PointerValue | Uint8Array /* ptr */,
  szLogPath: Deno.PointerValue | Uint8Array /* ptr */,
  rgrstmap: Deno.PointerValue | Uint8Array /* ptr */,
  crstfilemap: number /* i32 */,
  szBackupLogPath: Deno.PointerValue | Uint8Array /* ptr */,
  pLogInfo: Deno.PointerValue | Uint8Array /* ptr */,
  szTargetInstanceName: Deno.PointerValue | Uint8Array /* ptr */,
  szTargetInstanceLogPath: Deno.PointerValue | Uint8Array /* ptr */,
  szTargetInstanceCheckpointPath: Deno.PointerValue | Uint8Array /* ptr */,
  pfn: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_PFNSTATUS */,
): number /* i32 */ {
  return libESENT_dll.JetExternalRestore2A!(util.toPointer(szCheckpointFilePath), util.toPointer(szLogPath), util.toPointer(rgrstmap), crstfilemap, util.toPointer(szBackupLogPath), util.toPointer(pLogInfo), util.toPointer(szTargetInstanceName), util.toPointer(szTargetInstanceLogPath), util.toPointer(szTargetInstanceCheckpointPath), util.toPointer(pfn));
}

export function JetExternalRestore2W(
  szCheckpointFilePath: Deno.PointerValue | Uint8Array /* ptr */,
  szLogPath: Deno.PointerValue | Uint8Array /* ptr */,
  rgrstmap: Deno.PointerValue | Uint8Array /* ptr */,
  crstfilemap: number /* i32 */,
  szBackupLogPath: Deno.PointerValue | Uint8Array /* ptr */,
  pLogInfo: Deno.PointerValue | Uint8Array /* ptr */,
  szTargetInstanceName: Deno.PointerValue | Uint8Array /* ptr */,
  szTargetInstanceLogPath: Deno.PointerValue | Uint8Array /* ptr */,
  szTargetInstanceCheckpointPath: Deno.PointerValue | Uint8Array /* ptr */,
  pfn: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_PFNSTATUS */,
): number /* i32 */ {
  return libESENT_dll.JetExternalRestore2W!(util.toPointer(szCheckpointFilePath), util.toPointer(szLogPath), util.toPointer(rgrstmap), crstfilemap, util.toPointer(szBackupLogPath), util.toPointer(pLogInfo), util.toPointer(szTargetInstanceName), util.toPointer(szTargetInstanceLogPath), util.toPointer(szTargetInstanceCheckpointPath), util.toPointer(pfn));
}

export function JetRegisterCallback(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  cbtyp: number /* u32 */,
  pCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_CALLBACK */,
  pvContext: Deno.PointerValue | Uint8Array /* ptr */,
  phCallbackId: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetRegisterCallback!(util.toPointer(sesid), util.toPointer(tableid), cbtyp, util.toPointer(pCallback), util.toPointer(pvContext), util.toPointer(phCallbackId));
}

export function JetUnregisterCallback(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  cbtyp: number /* u32 */,
  hCallbackId: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_HANDLE */,
): number /* i32 */ {
  return libESENT_dll.JetUnregisterCallback!(util.toPointer(sesid), util.toPointer(tableid), cbtyp, util.toPointer(hCallbackId));
}

export function JetGetInstanceInfoA(
  pcInstanceInfo: Deno.PointerValue | Uint8Array /* ptr */,
  paInstanceInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetGetInstanceInfoA!(util.toPointer(pcInstanceInfo), util.toPointer(paInstanceInfo));
}

export function JetGetInstanceInfoW(
  pcInstanceInfo: Deno.PointerValue | Uint8Array /* ptr */,
  paInstanceInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetGetInstanceInfoW!(util.toPointer(pcInstanceInfo), util.toPointer(paInstanceInfo));
}

export function JetFreeBuffer(
  pbBuf: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libESENT_dll.JetFreeBuffer!(util.pstrToFfi(pbBuf));
}

export function JetSetLS(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  ls: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_LS */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetSetLS!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(ls), grbit);
}

export function JetGetLS(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  tableid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_TABLEID */,
  pls: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetLS!(util.toPointer(sesid), util.toPointer(tableid), util.toPointer(pls), grbit);
}

export function JetOSSnapshotPrepare(
  psnapId: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetOSSnapshotPrepare!(util.toPointer(psnapId), grbit);
}

export function JetOSSnapshotPrepareInstance(
  snapId: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_OSSNAPID */,
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetOSSnapshotPrepareInstance!(util.toPointer(snapId), util.toPointer(instance), grbit);
}

export function JetOSSnapshotFreezeA(
  snapId: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_OSSNAPID */,
  pcInstanceInfo: Deno.PointerValue | Uint8Array /* ptr */,
  paInstanceInfo: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetOSSnapshotFreezeA!(util.toPointer(snapId), util.toPointer(pcInstanceInfo), util.toPointer(paInstanceInfo), grbit);
}

export function JetOSSnapshotFreezeW(
  snapId: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_OSSNAPID */,
  pcInstanceInfo: Deno.PointerValue | Uint8Array /* ptr */,
  paInstanceInfo: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetOSSnapshotFreezeW!(util.toPointer(snapId), util.toPointer(pcInstanceInfo), util.toPointer(paInstanceInfo), grbit);
}

export function JetOSSnapshotThaw(
  snapId: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_OSSNAPID */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetOSSnapshotThaw!(util.toPointer(snapId), grbit);
}

export function JetOSSnapshotAbort(
  snapId: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_OSSNAPID */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetOSSnapshotAbort!(util.toPointer(snapId), grbit);
}

export function JetOSSnapshotTruncateLog(
  snapId: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_OSSNAPID */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetOSSnapshotTruncateLog!(util.toPointer(snapId), grbit);
}

export function JetOSSnapshotTruncateLogInstance(
  snapId: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_OSSNAPID */,
  instance: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_INSTANCE */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetOSSnapshotTruncateLogInstance!(util.toPointer(snapId), util.toPointer(instance), grbit);
}

export function JetOSSnapshotGetFreezeInfoA(
  snapId: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_OSSNAPID */,
  pcInstanceInfo: Deno.PointerValue | Uint8Array /* ptr */,
  paInstanceInfo: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetOSSnapshotGetFreezeInfoA!(util.toPointer(snapId), util.toPointer(pcInstanceInfo), util.toPointer(paInstanceInfo), grbit);
}

export function JetOSSnapshotGetFreezeInfoW(
  snapId: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_OSSNAPID */,
  pcInstanceInfo: Deno.PointerValue | Uint8Array /* ptr */,
  paInstanceInfo: Deno.PointerValue | Uint8Array /* ptr */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetOSSnapshotGetFreezeInfoW!(util.toPointer(snapId), util.toPointer(pcInstanceInfo), util.toPointer(paInstanceInfo), grbit);
}

export function JetOSSnapshotEnd(
  snapId: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.Jet.JET_OSSNAPID */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetOSSnapshotEnd!(util.toPointer(snapId), grbit);
}

export function JetConfigureProcessForCrashDump(
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetConfigureProcessForCrashDump!(grbit);
}

export function JetGetErrorInfoW(
  pvContext: Deno.PointerValue | Uint8Array /* ptr */,
  pvResult: Deno.PointerValue | Uint8Array /* ptr */,
  cbMax: number /* u32 */,
  InfoLevel: number /* u32 */,
  grbit: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetGetErrorInfoW!(util.toPointer(pvContext), util.toPointer(pvResult), cbMax, InfoLevel, grbit);
}

export function JetSetSessionParameter(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  sesparamid: number /* u32 */,
  pvParam: Deno.PointerValue | Uint8Array /* ptr */,
  cbParam: number /* u32 */,
): number /* i32 */ {
  return libESENT_dll.JetSetSessionParameter!(util.toPointer(sesid), sesparamid, util.toPointer(pvParam), cbParam);
}

export function JetGetSessionParameter(
  sesid: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.StructuredStorage.JET_SESID */,
  sesparamid: number /* u32 */,
  pvParam: Deno.PointerValue | Uint8Array /* ptr */,
  cbParamMax: number /* u32 */,
  pcbParamActual: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libESENT_dll.JetGetSessionParameter!(util.toPointer(sesid), sesparamid, util.toPointer(pvParam), cbParamMax, util.toPointer(pcbParamActual));
}

