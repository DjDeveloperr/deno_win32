/// Auto-generated by Deno Win32: Windows.Win32.Storage.Vhd.Apis

import * as util from "../../util.ts";

// Enums
export type OPEN_VIRTUAL_DISK_VERSION = number;
export type VIRTUAL_DISK_ACCESS_MASK = number;
export type OPEN_VIRTUAL_DISK_FLAG = number;
export type CREATE_VIRTUAL_DISK_VERSION = number;
export type CREATE_VIRTUAL_DISK_FLAG = number;
export type ATTACH_VIRTUAL_DISK_VERSION = number;
export type ATTACH_VIRTUAL_DISK_FLAG = number;
export type DETACH_VIRTUAL_DISK_FLAG = number;
export type DEPENDENT_DISK_FLAG = number;
export type STORAGE_DEPENDENCY_INFO_VERSION = number;
export type GET_STORAGE_DEPENDENCY_FLAG = number;
export type GET_VIRTUAL_DISK_INFO_VERSION = number;
export type SET_VIRTUAL_DISK_INFO_VERSION = number;
export type COMPACT_VIRTUAL_DISK_VERSION = number;
export type COMPACT_VIRTUAL_DISK_FLAG = number;
export type MERGE_VIRTUAL_DISK_VERSION = number;
export type MERGE_VIRTUAL_DISK_FLAG = number;
export type EXPAND_VIRTUAL_DISK_VERSION = number;
export type EXPAND_VIRTUAL_DISK_FLAG = number;
export type RESIZE_VIRTUAL_DISK_VERSION = number;
export type RESIZE_VIRTUAL_DISK_FLAG = number;
export type MIRROR_VIRTUAL_DISK_VERSION = number;
export type MIRROR_VIRTUAL_DISK_FLAG = number;
export type QUERY_CHANGES_VIRTUAL_DISK_FLAG = number;
export type TAKE_SNAPSHOT_VHDSET_FLAG = number;
export type TAKE_SNAPSHOT_VHDSET_VERSION = number;
export type DELETE_SNAPSHOT_VHDSET_FLAG = number;
export type DELETE_SNAPSHOT_VHDSET_VERSION = number;
export type MODIFY_VHDSET_VERSION = number;
export type MODIFY_VHDSET_FLAG = number;
export type APPLY_SNAPSHOT_VHDSET_FLAG = number;
export type APPLY_SNAPSHOT_VHDSET_VERSION = number;
export type RAW_SCSI_VIRTUAL_DISK_FLAG = number;
export type RAW_SCSI_VIRTUAL_DISK_VERSION = number;
export type FORK_VIRTUAL_DISK_VERSION = number;
export type FORK_VIRTUAL_DISK_FLAG = number;

// Constants
export const VIRTUAL_STORAGE_TYPE_DEVICE_UNKNOWN = 0;
export const VIRTUAL_STORAGE_TYPE_DEVICE_ISO = 1;
export const VIRTUAL_STORAGE_TYPE_DEVICE_VHD = 2;
export const VIRTUAL_STORAGE_TYPE_DEVICE_VHDX = 3;
export const VIRTUAL_STORAGE_TYPE_DEVICE_VHDSET = 4;
export const OPEN_VIRTUAL_DISK_RW_DEPTH_DEFAULT = 1;
export const CREATE_VIRTUAL_DISK_PARAMETERS_DEFAULT_BLOCK_SIZE = 0;
export const CREATE_VIRTUAL_DISK_PARAMETERS_DEFAULT_SECTOR_SIZE = 0;
export const VIRTUAL_DISK_MAXIMUM_CHANGE_TRACKING_ID_LENGTH = 256;
export const MERGE_VIRTUAL_DISK_DEFAULT_MERGE_DEPTH = 1;
export const OPEN_VIRTUAL_DISK_VERSION_UNSPECIFIED = 0;
export const OPEN_VIRTUAL_DISK_VERSION_1 = 1;
export const OPEN_VIRTUAL_DISK_VERSION_2 = 2;
export const OPEN_VIRTUAL_DISK_VERSION_3 = 3;
export const VIRTUAL_DISK_ACCESS_NONE = 0;
export const VIRTUAL_DISK_ACCESS_ATTACH_RO = 65536;
export const VIRTUAL_DISK_ACCESS_ATTACH_RW = 131072;
export const VIRTUAL_DISK_ACCESS_DETACH = 262144;
export const VIRTUAL_DISK_ACCESS_GET_INFO = 524288;
export const VIRTUAL_DISK_ACCESS_CREATE = 1048576;
export const VIRTUAL_DISK_ACCESS_METAOPS = 2097152;
export const VIRTUAL_DISK_ACCESS_READ = 851968;
export const VIRTUAL_DISK_ACCESS_ALL = 4128768;
export const VIRTUAL_DISK_ACCESS_WRITABLE = 3276800;
export const OPEN_VIRTUAL_DISK_FLAG_NONE = 0;
export const OPEN_VIRTUAL_DISK_FLAG_NO_PARENTS = 1;
export const OPEN_VIRTUAL_DISK_FLAG_BLANK_FILE = 2;
export const OPEN_VIRTUAL_DISK_FLAG_BOOT_DRIVE = 4;
export const OPEN_VIRTUAL_DISK_FLAG_CACHED_IO = 8;
export const OPEN_VIRTUAL_DISK_FLAG_CUSTOM_DIFF_CHAIN = 16;
export const OPEN_VIRTUAL_DISK_FLAG_PARENT_CACHED_IO = 32;
export const OPEN_VIRTUAL_DISK_FLAG_VHDSET_FILE_ONLY = 64;
export const OPEN_VIRTUAL_DISK_FLAG_IGNORE_RELATIVE_PARENT_LOCATOR = 128;
export const OPEN_VIRTUAL_DISK_FLAG_NO_WRITE_HARDENING = 256;
export const OPEN_VIRTUAL_DISK_FLAG_SUPPORT_COMPRESSED_VOLUMES = 512;
export const OPEN_VIRTUAL_DISK_FLAG_SUPPORT_SPARSE_FILES_ANY_FS = 1024;
export const OPEN_VIRTUAL_DISK_FLAG_SUPPORT_ENCRYPTED_FILES = 2048;
export const CREATE_VIRTUAL_DISK_VERSION_UNSPECIFIED = 0;
export const CREATE_VIRTUAL_DISK_VERSION_1 = 1;
export const CREATE_VIRTUAL_DISK_VERSION_2 = 2;
export const CREATE_VIRTUAL_DISK_VERSION_3 = 3;
export const CREATE_VIRTUAL_DISK_VERSION_4 = 4;
export const CREATE_VIRTUAL_DISK_FLAG_NONE = 0;
export const CREATE_VIRTUAL_DISK_FLAG_FULL_PHYSICAL_ALLOCATION = 1;
export const CREATE_VIRTUAL_DISK_FLAG_PREVENT_WRITES_TO_SOURCE_DISK = 2;
export const CREATE_VIRTUAL_DISK_FLAG_DO_NOT_COPY_METADATA_FROM_PARENT = 4;
export const CREATE_VIRTUAL_DISK_FLAG_CREATE_BACKING_STORAGE = 8;
export const CREATE_VIRTUAL_DISK_FLAG_USE_CHANGE_TRACKING_SOURCE_LIMIT = 16;
export const CREATE_VIRTUAL_DISK_FLAG_PRESERVE_PARENT_CHANGE_TRACKING_STATE = 32;
export const CREATE_VIRTUAL_DISK_FLAG_VHD_SET_USE_ORIGINAL_BACKING_STORAGE = 64;
export const CREATE_VIRTUAL_DISK_FLAG_SPARSE_FILE = 128;
export const CREATE_VIRTUAL_DISK_FLAG_PMEM_COMPATIBLE = 256;
export const CREATE_VIRTUAL_DISK_FLAG_SUPPORT_COMPRESSED_VOLUMES = 512;
export const CREATE_VIRTUAL_DISK_FLAG_SUPPORT_SPARSE_FILES_ANY_FS = 1024;
export const ATTACH_VIRTUAL_DISK_VERSION_UNSPECIFIED = 0;
export const ATTACH_VIRTUAL_DISK_VERSION_1 = 1;
export const ATTACH_VIRTUAL_DISK_VERSION_2 = 2;
export const ATTACH_VIRTUAL_DISK_FLAG_NONE = 0;
export const ATTACH_VIRTUAL_DISK_FLAG_READ_ONLY = 1;
export const ATTACH_VIRTUAL_DISK_FLAG_NO_DRIVE_LETTER = 2;
export const ATTACH_VIRTUAL_DISK_FLAG_PERMANENT_LIFETIME = 4;
export const ATTACH_VIRTUAL_DISK_FLAG_NO_LOCAL_HOST = 8;
export const ATTACH_VIRTUAL_DISK_FLAG_NO_SECURITY_DESCRIPTOR = 16;
export const ATTACH_VIRTUAL_DISK_FLAG_BYPASS_DEFAULT_ENCRYPTION_POLICY = 32;
export const ATTACH_VIRTUAL_DISK_FLAG_NON_PNP = 64;
export const ATTACH_VIRTUAL_DISK_FLAG_RESTRICTED_RANGE = 128;
export const ATTACH_VIRTUAL_DISK_FLAG_SINGLE_PARTITION = 256;
export const ATTACH_VIRTUAL_DISK_FLAG_REGISTER_VOLUME = 512;
export const DETACH_VIRTUAL_DISK_FLAG_NONE = 0;
export const DEPENDENT_DISK_FLAG_NONE = 0;
export const DEPENDENT_DISK_FLAG_MULT_BACKING_FILES = 1;
export const DEPENDENT_DISK_FLAG_FULLY_ALLOCATED = 2;
export const DEPENDENT_DISK_FLAG_READ_ONLY = 4;
export const DEPENDENT_DISK_FLAG_REMOTE = 8;
export const DEPENDENT_DISK_FLAG_SYSTEM_VOLUME = 16;
export const DEPENDENT_DISK_FLAG_SYSTEM_VOLUME_PARENT = 32;
export const DEPENDENT_DISK_FLAG_REMOVABLE = 64;
export const DEPENDENT_DISK_FLAG_NO_DRIVE_LETTER = 128;
export const DEPENDENT_DISK_FLAG_PARENT = 256;
export const DEPENDENT_DISK_FLAG_NO_HOST_DISK = 512;
export const DEPENDENT_DISK_FLAG_PERMANENT_LIFETIME = 1024;
export const DEPENDENT_DISK_FLAG_SUPPORT_COMPRESSED_VOLUMES = 2048;
export const DEPENDENT_DISK_FLAG_ALWAYS_ALLOW_SPARSE = 4096;
export const DEPENDENT_DISK_FLAG_SUPPORT_ENCRYPTED_FILES = 8192;
export const STORAGE_DEPENDENCY_INFO_VERSION_UNSPECIFIED = 0;
export const STORAGE_DEPENDENCY_INFO_VERSION_1 = 1;
export const STORAGE_DEPENDENCY_INFO_VERSION_2 = 2;
export const GET_STORAGE_DEPENDENCY_FLAG_NONE = 0;
export const GET_STORAGE_DEPENDENCY_FLAG_HOST_VOLUMES = 1;
export const GET_STORAGE_DEPENDENCY_FLAG_DISK_HANDLE = 2;
export const GET_VIRTUAL_DISK_INFO_UNSPECIFIED = 0;
export const GET_VIRTUAL_DISK_INFO_SIZE = 1;
export const GET_VIRTUAL_DISK_INFO_IDENTIFIER = 2;
export const GET_VIRTUAL_DISK_INFO_PARENT_LOCATION = 3;
export const GET_VIRTUAL_DISK_INFO_PARENT_IDENTIFIER = 4;
export const GET_VIRTUAL_DISK_INFO_PARENT_TIMESTAMP = 5;
export const GET_VIRTUAL_DISK_INFO_VIRTUAL_STORAGE_TYPE = 6;
export const GET_VIRTUAL_DISK_INFO_PROVIDER_SUBTYPE = 7;
export const GET_VIRTUAL_DISK_INFO_IS_4K_ALIGNED = 8;
export const GET_VIRTUAL_DISK_INFO_PHYSICAL_DISK = 9;
export const GET_VIRTUAL_DISK_INFO_VHD_PHYSICAL_SECTOR_SIZE = 10;
export const GET_VIRTUAL_DISK_INFO_SMALLEST_SAFE_VIRTUAL_SIZE = 11;
export const GET_VIRTUAL_DISK_INFO_FRAGMENTATION = 12;
export const GET_VIRTUAL_DISK_INFO_IS_LOADED = 13;
export const GET_VIRTUAL_DISK_INFO_VIRTUAL_DISK_ID = 14;
export const GET_VIRTUAL_DISK_INFO_CHANGE_TRACKING_STATE = 15;
export const SET_VIRTUAL_DISK_INFO_UNSPECIFIED = 0;
export const SET_VIRTUAL_DISK_INFO_PARENT_PATH = 1;
export const SET_VIRTUAL_DISK_INFO_IDENTIFIER = 2;
export const SET_VIRTUAL_DISK_INFO_PARENT_PATH_WITH_DEPTH = 3;
export const SET_VIRTUAL_DISK_INFO_PHYSICAL_SECTOR_SIZE = 4;
export const SET_VIRTUAL_DISK_INFO_VIRTUAL_DISK_ID = 5;
export const SET_VIRTUAL_DISK_INFO_CHANGE_TRACKING_STATE = 6;
export const SET_VIRTUAL_DISK_INFO_PARENT_LOCATOR = 7;
export const COMPACT_VIRTUAL_DISK_VERSION_UNSPECIFIED = 0;
export const COMPACT_VIRTUAL_DISK_VERSION_1 = 1;
export const COMPACT_VIRTUAL_DISK_FLAG_NONE = 0;
export const COMPACT_VIRTUAL_DISK_FLAG_NO_ZERO_SCAN = 1;
export const COMPACT_VIRTUAL_DISK_FLAG_NO_BLOCK_MOVES = 2;
export const MERGE_VIRTUAL_DISK_VERSION_UNSPECIFIED = 0;
export const MERGE_VIRTUAL_DISK_VERSION_1 = 1;
export const MERGE_VIRTUAL_DISK_VERSION_2 = 2;
export const MERGE_VIRTUAL_DISK_FLAG_NONE = 0;
export const EXPAND_VIRTUAL_DISK_VERSION_UNSPECIFIED = 0;
export const EXPAND_VIRTUAL_DISK_VERSION_1 = 1;
export const EXPAND_VIRTUAL_DISK_FLAG_NONE = 0;
export const EXPAND_VIRTUAL_DISK_FLAG_NOTIFY_CHANGE = 1;
export const RESIZE_VIRTUAL_DISK_VERSION_UNSPECIFIED = 0;
export const RESIZE_VIRTUAL_DISK_VERSION_1 = 1;
export const RESIZE_VIRTUAL_DISK_FLAG_NONE = 0;
export const RESIZE_VIRTUAL_DISK_FLAG_ALLOW_UNSAFE_VIRTUAL_SIZE = 1;
export const RESIZE_VIRTUAL_DISK_FLAG_RESIZE_TO_SMALLEST_SAFE_VIRTUAL_SIZE = 2;
export const MIRROR_VIRTUAL_DISK_VERSION_UNSPECIFIED = 0;
export const MIRROR_VIRTUAL_DISK_VERSION_1 = 1;
export const MIRROR_VIRTUAL_DISK_FLAG_NONE = 0;
export const MIRROR_VIRTUAL_DISK_FLAG_EXISTING_FILE = 1;
export const MIRROR_VIRTUAL_DISK_FLAG_SKIP_MIRROR_ACTIVATION = 2;
export const MIRROR_VIRTUAL_DISK_FLAG_ENABLE_SMB_COMPRESSION = 4;
export const MIRROR_VIRTUAL_DISK_FLAG_IS_LIVE_MIGRATION = 8;
export const QUERY_CHANGES_VIRTUAL_DISK_FLAG_NONE = 0;
export const TAKE_SNAPSHOT_VHDSET_FLAG_NONE = 0;
export const TAKE_SNAPSHOT_VHDSET_FLAG_WRITEABLE = 1;
export const TAKE_SNAPSHOT_VHDSET_VERSION_UNSPECIFIED = 0;
export const TAKE_SNAPSHOT_VHDSET_VERSION_1 = 1;
export const DELETE_SNAPSHOT_VHDSET_FLAG_NONE = 0;
export const DELETE_SNAPSHOT_VHDSET_FLAG_PERSIST_RCT = 1;
export const DELETE_SNAPSHOT_VHDSET_VERSION_UNSPECIFIED = 0;
export const DELETE_SNAPSHOT_VHDSET_VERSION_1 = 1;
export const MODIFY_VHDSET_UNSPECIFIED = 0;
export const MODIFY_VHDSET_SNAPSHOT_PATH = 1;
export const MODIFY_VHDSET_REMOVE_SNAPSHOT = 2;
export const MODIFY_VHDSET_DEFAULT_SNAPSHOT_PATH = 3;
export const MODIFY_VHDSET_FLAG_NONE = 0;
export const MODIFY_VHDSET_FLAG_WRITEABLE_SNAPSHOT = 1;
export const APPLY_SNAPSHOT_VHDSET_FLAG_NONE = 0;
export const APPLY_SNAPSHOT_VHDSET_FLAG_WRITEABLE = 1;
export const APPLY_SNAPSHOT_VHDSET_VERSION_UNSPECIFIED = 0;
export const APPLY_SNAPSHOT_VHDSET_VERSION_1 = 1;
export const RAW_SCSI_VIRTUAL_DISK_FLAG_NONE = 0;
export const RAW_SCSI_VIRTUAL_DISK_VERSION_UNSPECIFIED = 0;
export const RAW_SCSI_VIRTUAL_DISK_VERSION_1 = 1;
export const FORK_VIRTUAL_DISK_VERSION_UNSPECIFIED = 0;
export const FORK_VIRTUAL_DISK_VERSION_1 = 1;
export const FORK_VIRTUAL_DISK_FLAG_NONE = 0;
export const FORK_VIRTUAL_DISK_FLAG_EXISTING_FILE = 1;

// Structs

/**
 * Windows.Win32.Storage.Vhd.VIRTUAL_STORAGE_TYPE (size: 16)
 */
export interface VIRTUAL_STORAGE_TYPE {
  /** u32 */
  DeviceId: number;
  /** System.Guid */
  VendorId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVIRTUAL_STORAGE_TYPE = 16;

export function allocVIRTUAL_STORAGE_TYPE(data?: Partial<VIRTUAL_STORAGE_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofVIRTUAL_STORAGE_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DeviceId !== undefined) view.setUint32(0, Number(data.DeviceId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.VendorId !== undefined) view.setBigUint64(8, data.VendorId === null ? 0n : BigInt(util.toPointer(data.VendorId)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.Vhd.OPEN_VIRTUAL_DISK_PARAMETERS (size: 16)
 */
export interface OPEN_VIRTUAL_DISK_PARAMETERS {
  /** Windows.Win32.Storage.Vhd.OPEN_VIRTUAL_DISK_VERSION */
  Version: OPEN_VIRTUAL_DISK_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofOPEN_VIRTUAL_DISK_PARAMETERS = 16;

export function allocOPEN_VIRTUAL_DISK_PARAMETERS(data?: Partial<OPEN_VIRTUAL_DISK_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofOPEN_VIRTUAL_DISK_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.Vhd.CREATE_VIRTUAL_DISK_PARAMETERS (size: 16)
 */
export interface CREATE_VIRTUAL_DISK_PARAMETERS {
  /** Windows.Win32.Storage.Vhd.CREATE_VIRTUAL_DISK_VERSION */
  Version: CREATE_VIRTUAL_DISK_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCREATE_VIRTUAL_DISK_PARAMETERS = 16;

export function allocCREATE_VIRTUAL_DISK_PARAMETERS(data?: Partial<CREATE_VIRTUAL_DISK_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_VIRTUAL_DISK_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.Vhd.ATTACH_VIRTUAL_DISK_PARAMETERS (size: 16)
 */
export interface ATTACH_VIRTUAL_DISK_PARAMETERS {
  /** Windows.Win32.Storage.Vhd.ATTACH_VIRTUAL_DISK_VERSION */
  Version: ATTACH_VIRTUAL_DISK_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofATTACH_VIRTUAL_DISK_PARAMETERS = 16;

export function allocATTACH_VIRTUAL_DISK_PARAMETERS(data?: Partial<ATTACH_VIRTUAL_DISK_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofATTACH_VIRTUAL_DISK_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.Vhd.STORAGE_DEPENDENCY_INFO_TYPE_1 (size: 16)
 */
export interface STORAGE_DEPENDENCY_INFO_TYPE_1 {
  /** Windows.Win32.Storage.Vhd.DEPENDENT_DISK_FLAG */
  DependencyTypeFlags: DEPENDENT_DISK_FLAG;
  /** u32 */
  ProviderSpecificFlags: number;
  /** Windows.Win32.Storage.Vhd.VIRTUAL_STORAGE_TYPE */
  VirtualStorageType: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTORAGE_DEPENDENCY_INFO_TYPE_1 = 16;

export function allocSTORAGE_DEPENDENCY_INFO_TYPE_1(data?: Partial<STORAGE_DEPENDENCY_INFO_TYPE_1>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_DEPENDENCY_INFO_TYPE_1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DependencyTypeFlags !== undefined) view.setUint32(0, Number(data.DependencyTypeFlags), true);
  // 0x04: u32
  if (data?.ProviderSpecificFlags !== undefined) view.setUint32(4, Number(data.ProviderSpecificFlags), true);
  // 0x08: pointer
  if (data?.VirtualStorageType !== undefined) view.setBigUint64(8, data.VirtualStorageType === null ? 0n : BigInt(util.toPointer(data.VirtualStorageType)), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Storage.Vhd.STORAGE_DEPENDENCY_INFO_TYPE_2 (size: 56)
 */
export interface STORAGE_DEPENDENCY_INFO_TYPE_2 {
  /** Windows.Win32.Storage.Vhd.DEPENDENT_DISK_FLAG */
  DependencyTypeFlags: DEPENDENT_DISK_FLAG;
  /** u32 */
  ProviderSpecificFlags: number;
  /** Windows.Win32.Storage.Vhd.VIRTUAL_STORAGE_TYPE */
  VirtualStorageType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  AncestorLevel: number;
  /** Windows.Win32.Foundation.PWSTR */
  DependencyDeviceName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  HostVolumeName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  DependentVolumeName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  DependentVolumeRelativePath: string | null;
}

export const sizeofSTORAGE_DEPENDENCY_INFO_TYPE_2 = 56;

export function allocSTORAGE_DEPENDENCY_INFO_TYPE_2(data?: Partial<STORAGE_DEPENDENCY_INFO_TYPE_2>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_DEPENDENCY_INFO_TYPE_2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DependencyTypeFlags !== undefined) view.setUint32(0, Number(data.DependencyTypeFlags), true);
  // 0x04: u32
  if (data?.ProviderSpecificFlags !== undefined) view.setUint32(4, Number(data.ProviderSpecificFlags), true);
  // 0x08: pointer
  if (data?.VirtualStorageType !== undefined) view.setBigUint64(8, data.VirtualStorageType === null ? 0n : BigInt(util.toPointer(data.VirtualStorageType)), true);
  // 0x10: u32
  if (data?.AncestorLevel !== undefined) view.setUint32(16, Number(data.AncestorLevel), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.DependencyDeviceName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.DependencyDeviceName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.HostVolumeName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.HostVolumeName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.DependentVolumeName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.DependentVolumeName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.DependentVolumeRelativePath !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.DependentVolumeRelativePath);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Storage.Vhd.STORAGE_DEPENDENCY_INFO (size: 16)
 */
export interface STORAGE_DEPENDENCY_INFO {
  /** Windows.Win32.Storage.Vhd.STORAGE_DEPENDENCY_INFO_VERSION */
  Version: STORAGE_DEPENDENCY_INFO_VERSION;
  /** u32 */
  NumberEntries: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTORAGE_DEPENDENCY_INFO = 16;

export function allocSTORAGE_DEPENDENCY_INFO(data?: Partial<STORAGE_DEPENDENCY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_DEPENDENCY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.NumberEntries !== undefined) view.setUint32(4, Number(data.NumberEntries), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.Vhd.GET_VIRTUAL_DISK_INFO (size: 16)
 */
export interface GET_VIRTUAL_DISK_INFO {
  /** Windows.Win32.Storage.Vhd.GET_VIRTUAL_DISK_INFO_VERSION */
  Version: GET_VIRTUAL_DISK_INFO_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofGET_VIRTUAL_DISK_INFO = 16;

export function allocGET_VIRTUAL_DISK_INFO(data?: Partial<GET_VIRTUAL_DISK_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofGET_VIRTUAL_DISK_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.Vhd.SET_VIRTUAL_DISK_INFO (size: 16)
 */
export interface SET_VIRTUAL_DISK_INFO {
  /** Windows.Win32.Storage.Vhd.SET_VIRTUAL_DISK_INFO_VERSION */
  Version: SET_VIRTUAL_DISK_INFO_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSET_VIRTUAL_DISK_INFO = 16;

export function allocSET_VIRTUAL_DISK_INFO(data?: Partial<SET_VIRTUAL_DISK_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSET_VIRTUAL_DISK_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.Vhd.VIRTUAL_DISK_PROGRESS (size: 24)
 */
export interface VIRTUAL_DISK_PROGRESS {
  /** u32 */
  OperationStatus: number;
  /** u64 */
  CurrentValue: Deno.PointerValue;
  /** u64 */
  CompletionValue: Deno.PointerValue;
}

export const sizeofVIRTUAL_DISK_PROGRESS = 24;

export function allocVIRTUAL_DISK_PROGRESS(data?: Partial<VIRTUAL_DISK_PROGRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofVIRTUAL_DISK_PROGRESS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.OperationStatus !== undefined) view.setUint32(0, Number(data.OperationStatus), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.CurrentValue !== undefined) view.setBigUint64(8, BigInt(data.CurrentValue), true);
  // 0x10: u64
  if (data?.CompletionValue !== undefined) view.setBigUint64(16, BigInt(data.CompletionValue), true);
  return buf;
}

/**
 * Windows.Win32.Storage.Vhd.COMPACT_VIRTUAL_DISK_PARAMETERS (size: 16)
 */
export interface COMPACT_VIRTUAL_DISK_PARAMETERS {
  /** Windows.Win32.Storage.Vhd.COMPACT_VIRTUAL_DISK_VERSION */
  Version: COMPACT_VIRTUAL_DISK_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCOMPACT_VIRTUAL_DISK_PARAMETERS = 16;

export function allocCOMPACT_VIRTUAL_DISK_PARAMETERS(data?: Partial<COMPACT_VIRTUAL_DISK_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMPACT_VIRTUAL_DISK_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.Vhd.MERGE_VIRTUAL_DISK_PARAMETERS (size: 16)
 */
export interface MERGE_VIRTUAL_DISK_PARAMETERS {
  /** Windows.Win32.Storage.Vhd.MERGE_VIRTUAL_DISK_VERSION */
  Version: MERGE_VIRTUAL_DISK_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMERGE_VIRTUAL_DISK_PARAMETERS = 16;

export function allocMERGE_VIRTUAL_DISK_PARAMETERS(data?: Partial<MERGE_VIRTUAL_DISK_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofMERGE_VIRTUAL_DISK_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.Vhd.EXPAND_VIRTUAL_DISK_PARAMETERS (size: 16)
 */
export interface EXPAND_VIRTUAL_DISK_PARAMETERS {
  /** Windows.Win32.Storage.Vhd.EXPAND_VIRTUAL_DISK_VERSION */
  Version: EXPAND_VIRTUAL_DISK_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEXPAND_VIRTUAL_DISK_PARAMETERS = 16;

export function allocEXPAND_VIRTUAL_DISK_PARAMETERS(data?: Partial<EXPAND_VIRTUAL_DISK_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofEXPAND_VIRTUAL_DISK_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.Vhd.RESIZE_VIRTUAL_DISK_PARAMETERS (size: 16)
 */
export interface RESIZE_VIRTUAL_DISK_PARAMETERS {
  /** Windows.Win32.Storage.Vhd.RESIZE_VIRTUAL_DISK_VERSION */
  Version: RESIZE_VIRTUAL_DISK_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRESIZE_VIRTUAL_DISK_PARAMETERS = 16;

export function allocRESIZE_VIRTUAL_DISK_PARAMETERS(data?: Partial<RESIZE_VIRTUAL_DISK_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofRESIZE_VIRTUAL_DISK_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.Vhd.MIRROR_VIRTUAL_DISK_PARAMETERS (size: 16)
 */
export interface MIRROR_VIRTUAL_DISK_PARAMETERS {
  /** Windows.Win32.Storage.Vhd.MIRROR_VIRTUAL_DISK_VERSION */
  Version: MIRROR_VIRTUAL_DISK_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMIRROR_VIRTUAL_DISK_PARAMETERS = 16;

export function allocMIRROR_VIRTUAL_DISK_PARAMETERS(data?: Partial<MIRROR_VIRTUAL_DISK_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofMIRROR_VIRTUAL_DISK_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.Vhd.QUERY_CHANGES_VIRTUAL_DISK_RANGE (size: 24)
 */
export interface QUERY_CHANGES_VIRTUAL_DISK_RANGE {
  /** u64 */
  ByteOffset: Deno.PointerValue;
  /** u64 */
  ByteLength: Deno.PointerValue;
  /** u64 */
  Reserved: Deno.PointerValue;
}

export const sizeofQUERY_CHANGES_VIRTUAL_DISK_RANGE = 24;

export function allocQUERY_CHANGES_VIRTUAL_DISK_RANGE(data?: Partial<QUERY_CHANGES_VIRTUAL_DISK_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofQUERY_CHANGES_VIRTUAL_DISK_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ByteOffset !== undefined) view.setBigUint64(0, BigInt(data.ByteOffset), true);
  // 0x08: u64
  if (data?.ByteLength !== undefined) view.setBigUint64(8, BigInt(data.ByteLength), true);
  // 0x10: u64
  if (data?.Reserved !== undefined) view.setBigUint64(16, BigInt(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Storage.Vhd.TAKE_SNAPSHOT_VHDSET_PARAMETERS (size: 16)
 */
export interface TAKE_SNAPSHOT_VHDSET_PARAMETERS {
  /** Windows.Win32.Storage.Vhd.TAKE_SNAPSHOT_VHDSET_VERSION */
  Version: TAKE_SNAPSHOT_VHDSET_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTAKE_SNAPSHOT_VHDSET_PARAMETERS = 16;

export function allocTAKE_SNAPSHOT_VHDSET_PARAMETERS(data?: Partial<TAKE_SNAPSHOT_VHDSET_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofTAKE_SNAPSHOT_VHDSET_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.Vhd.DELETE_SNAPSHOT_VHDSET_PARAMETERS (size: 16)
 */
export interface DELETE_SNAPSHOT_VHDSET_PARAMETERS {
  /** Windows.Win32.Storage.Vhd.DELETE_SNAPSHOT_VHDSET_VERSION */
  Version: DELETE_SNAPSHOT_VHDSET_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDELETE_SNAPSHOT_VHDSET_PARAMETERS = 16;

export function allocDELETE_SNAPSHOT_VHDSET_PARAMETERS(data?: Partial<DELETE_SNAPSHOT_VHDSET_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDELETE_SNAPSHOT_VHDSET_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.Vhd.MODIFY_VHDSET_PARAMETERS (size: 16)
 */
export interface MODIFY_VHDSET_PARAMETERS {
  /** Windows.Win32.Storage.Vhd.MODIFY_VHDSET_VERSION */
  Version: MODIFY_VHDSET_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMODIFY_VHDSET_PARAMETERS = 16;

export function allocMODIFY_VHDSET_PARAMETERS(data?: Partial<MODIFY_VHDSET_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofMODIFY_VHDSET_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.Vhd.APPLY_SNAPSHOT_VHDSET_PARAMETERS (size: 16)
 */
export interface APPLY_SNAPSHOT_VHDSET_PARAMETERS {
  /** Windows.Win32.Storage.Vhd.APPLY_SNAPSHOT_VHDSET_VERSION */
  Version: APPLY_SNAPSHOT_VHDSET_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAPPLY_SNAPSHOT_VHDSET_PARAMETERS = 16;

export function allocAPPLY_SNAPSHOT_VHDSET_PARAMETERS(data?: Partial<APPLY_SNAPSHOT_VHDSET_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofAPPLY_SNAPSHOT_VHDSET_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.Vhd.RAW_SCSI_VIRTUAL_DISK_PARAMETERS (size: 16)
 */
export interface RAW_SCSI_VIRTUAL_DISK_PARAMETERS {
  /** Windows.Win32.Storage.Vhd.RAW_SCSI_VIRTUAL_DISK_VERSION */
  Version: RAW_SCSI_VIRTUAL_DISK_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRAW_SCSI_VIRTUAL_DISK_PARAMETERS = 16;

export function allocRAW_SCSI_VIRTUAL_DISK_PARAMETERS(data?: Partial<RAW_SCSI_VIRTUAL_DISK_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofRAW_SCSI_VIRTUAL_DISK_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.Vhd.RAW_SCSI_VIRTUAL_DISK_RESPONSE (size: 16)
 */
export interface RAW_SCSI_VIRTUAL_DISK_RESPONSE {
  /** Windows.Win32.Storage.Vhd.RAW_SCSI_VIRTUAL_DISK_VERSION */
  Version: RAW_SCSI_VIRTUAL_DISK_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRAW_SCSI_VIRTUAL_DISK_RESPONSE = 16;

export function allocRAW_SCSI_VIRTUAL_DISK_RESPONSE(data?: Partial<RAW_SCSI_VIRTUAL_DISK_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofRAW_SCSI_VIRTUAL_DISK_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.Vhd.FORK_VIRTUAL_DISK_PARAMETERS (size: 16)
 */
export interface FORK_VIRTUAL_DISK_PARAMETERS {
  /** Windows.Win32.Storage.Vhd.FORK_VIRTUAL_DISK_VERSION */
  Version: FORK_VIRTUAL_DISK_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFORK_VIRTUAL_DISK_PARAMETERS = 16;

export function allocFORK_VIRTUAL_DISK_PARAMETERS(data?: Partial<FORK_VIRTUAL_DISK_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofFORK_VIRTUAL_DISK_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

// Native Libraries

try {
  var libVirtDisk = Deno.dlopen("VirtDisk", {
    OpenVirtualDisk: {
      parameters: ["pointer", "buffer", "u32", "u32", "pointer", "pointer"],
      result: "u32",
    },
    CreateVirtualDisk: {
      parameters: ["pointer", "buffer", "u32", "pointer", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    AttachVirtualDisk: {
      parameters: ["pointer", "pointer", "u32", "u32", "pointer", "pointer"],
      result: "u32",
    },
    DetachVirtualDisk: {
      parameters: ["pointer", "u32", "u32"],
      result: "u32",
    },
    GetVirtualDiskPhysicalPath: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "u32",
    },
    GetAllAttachedVirtualDiskPhysicalPaths: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    GetStorageDependencyInformation: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer"],
      result: "u32",
    },
    GetVirtualDiskInformation: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    SetVirtualDiskInformation: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    EnumerateVirtualDiskMetadata: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    GetVirtualDiskMetadata: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    SetVirtualDiskMetadata: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "u32",
    },
    DeleteVirtualDiskMetadata: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    GetVirtualDiskOperationProgress: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    CompactVirtualDisk: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    MergeVirtualDisk: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    ExpandVirtualDisk: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    ResizeVirtualDisk: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    MirrorVirtualDisk: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    BreakMirrorVirtualDisk: {
      parameters: ["pointer"],
      result: "u32",
    },
    AddVirtualDiskParent: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    QueryChangesVirtualDisk: {
      parameters: ["pointer", "buffer", "u64", "u64", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    TakeSnapshotVhdSet: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    DeleteSnapshotVhdSet: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    ModifyVhdSet: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    ApplySnapshotVhdSet: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    RawSCSIVirtualDisk: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "u32",
    },
    ForkVirtualDisk: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    CompleteForkVirtualDisk: {
      parameters: ["pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function OpenVirtualDisk(
  VirtualStorageType: Deno.PointerValue | Uint8Array | null /* ptr */,
  Path: string | null /* Windows.Win32.Foundation.PWSTR */,
  VirtualDiskAccessMask: VIRTUAL_DISK_ACCESS_MASK /* Windows.Win32.Storage.Vhd.VIRTUAL_DISK_ACCESS_MASK */,
  Flags: OPEN_VIRTUAL_DISK_FLAG /* Windows.Win32.Storage.Vhd.OPEN_VIRTUAL_DISK_FLAG */,
  Parameters: Deno.PointerValue | Uint8Array | null /* ptr */,
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libVirtDisk.OpenVirtualDisk(util.toPointer(VirtualStorageType), util.pwstrToFfi(Path), VirtualDiskAccessMask, Flags, util.toPointer(Parameters), util.toPointer(Handle));
}

export function CreateVirtualDisk(
  VirtualStorageType: Deno.PointerValue | Uint8Array | null /* ptr */,
  Path: string | null /* Windows.Win32.Foundation.PWSTR */,
  VirtualDiskAccessMask: VIRTUAL_DISK_ACCESS_MASK /* Windows.Win32.Storage.Vhd.VIRTUAL_DISK_ACCESS_MASK */,
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: CREATE_VIRTUAL_DISK_FLAG /* Windows.Win32.Storage.Vhd.CREATE_VIRTUAL_DISK_FLAG */,
  ProviderSpecificFlags: number /* u32 */,
  Parameters: Deno.PointerValue | Uint8Array | null /* ptr */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libVirtDisk.CreateVirtualDisk(util.toPointer(VirtualStorageType), util.pwstrToFfi(Path), VirtualDiskAccessMask, util.toPointer(SecurityDescriptor), Flags, ProviderSpecificFlags, util.toPointer(Parameters), util.toPointer(Overlapped), util.toPointer(Handle));
}

export function AttachVirtualDisk(
  VirtualDiskHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: ATTACH_VIRTUAL_DISK_FLAG /* Windows.Win32.Storage.Vhd.ATTACH_VIRTUAL_DISK_FLAG */,
  ProviderSpecificFlags: number /* u32 */,
  Parameters: Deno.PointerValue | Uint8Array | null /* ptr */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libVirtDisk.AttachVirtualDisk(util.toPointer(VirtualDiskHandle), util.toPointer(SecurityDescriptor), Flags, ProviderSpecificFlags, util.toPointer(Parameters), util.toPointer(Overlapped));
}

export function DetachVirtualDisk(
  VirtualDiskHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Flags: DETACH_VIRTUAL_DISK_FLAG /* Windows.Win32.Storage.Vhd.DETACH_VIRTUAL_DISK_FLAG */,
  ProviderSpecificFlags: number /* u32 */,
): number /* u32 */ {
  return libVirtDisk.DetachVirtualDisk(util.toPointer(VirtualDiskHandle), Flags, ProviderSpecificFlags);
}

export function GetVirtualDiskPhysicalPath(
  VirtualDiskHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  DiskPathSizeInBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
  DiskPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libVirtDisk.GetVirtualDiskPhysicalPath(util.toPointer(VirtualDiskHandle), util.toPointer(DiskPathSizeInBytes), util.pwstrToFfi(DiskPath));
}

export function GetAllAttachedVirtualDiskPhysicalPaths(
  PathsBufferSizeInBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
  PathsBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libVirtDisk.GetAllAttachedVirtualDiskPhysicalPaths(util.toPointer(PathsBufferSizeInBytes), util.pwstrToFfi(PathsBuffer));
}

export function GetStorageDependencyInformation(
  ObjectHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Flags: GET_STORAGE_DEPENDENCY_FLAG /* Windows.Win32.Storage.Vhd.GET_STORAGE_DEPENDENCY_FLAG */,
  StorageDependencyInfoSize: number /* u32 */,
  StorageDependencyInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  SizeUsed: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libVirtDisk.GetStorageDependencyInformation(util.toPointer(ObjectHandle), Flags, StorageDependencyInfoSize, util.toPointer(StorageDependencyInfo), util.toPointer(SizeUsed));
}

export function GetVirtualDiskInformation(
  VirtualDiskHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  VirtualDiskInfoSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  VirtualDiskInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  SizeUsed: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libVirtDisk.GetVirtualDiskInformation(util.toPointer(VirtualDiskHandle), util.toPointer(VirtualDiskInfoSize), util.toPointer(VirtualDiskInfo), util.toPointer(SizeUsed));
}

export function SetVirtualDiskInformation(
  VirtualDiskHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  VirtualDiskInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libVirtDisk.SetVirtualDiskInformation(util.toPointer(VirtualDiskHandle), util.toPointer(VirtualDiskInfo));
}

export function EnumerateVirtualDiskMetadata(
  VirtualDiskHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  NumberOfItems: Deno.PointerValue | Uint8Array | null /* ptr */,
  Items: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libVirtDisk.EnumerateVirtualDiskMetadata(util.toPointer(VirtualDiskHandle), util.toPointer(NumberOfItems), util.toPointer(Items));
}

export function GetVirtualDiskMetadata(
  VirtualDiskHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Item: Deno.PointerValue | Uint8Array | null /* ptr */,
  MetaDataSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  MetaData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libVirtDisk.GetVirtualDiskMetadata(util.toPointer(VirtualDiskHandle), util.toPointer(Item), util.toPointer(MetaDataSize), util.toPointer(MetaData));
}

export function SetVirtualDiskMetadata(
  VirtualDiskHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Item: Deno.PointerValue | Uint8Array | null /* ptr */,
  MetaDataSize: number /* u32 */,
  MetaData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libVirtDisk.SetVirtualDiskMetadata(util.toPointer(VirtualDiskHandle), util.toPointer(Item), MetaDataSize, util.toPointer(MetaData));
}

export function DeleteVirtualDiskMetadata(
  VirtualDiskHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Item: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libVirtDisk.DeleteVirtualDiskMetadata(util.toPointer(VirtualDiskHandle), util.toPointer(Item));
}

export function GetVirtualDiskOperationProgress(
  VirtualDiskHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
  Progress: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libVirtDisk.GetVirtualDiskOperationProgress(util.toPointer(VirtualDiskHandle), util.toPointer(Overlapped), util.toPointer(Progress));
}

export function CompactVirtualDisk(
  VirtualDiskHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Flags: COMPACT_VIRTUAL_DISK_FLAG /* Windows.Win32.Storage.Vhd.COMPACT_VIRTUAL_DISK_FLAG */,
  Parameters: Deno.PointerValue | Uint8Array | null /* ptr */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libVirtDisk.CompactVirtualDisk(util.toPointer(VirtualDiskHandle), Flags, util.toPointer(Parameters), util.toPointer(Overlapped));
}

export function MergeVirtualDisk(
  VirtualDiskHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Flags: MERGE_VIRTUAL_DISK_FLAG /* Windows.Win32.Storage.Vhd.MERGE_VIRTUAL_DISK_FLAG */,
  Parameters: Deno.PointerValue | Uint8Array | null /* ptr */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libVirtDisk.MergeVirtualDisk(util.toPointer(VirtualDiskHandle), Flags, util.toPointer(Parameters), util.toPointer(Overlapped));
}

export function ExpandVirtualDisk(
  VirtualDiskHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Flags: EXPAND_VIRTUAL_DISK_FLAG /* Windows.Win32.Storage.Vhd.EXPAND_VIRTUAL_DISK_FLAG */,
  Parameters: Deno.PointerValue | Uint8Array | null /* ptr */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libVirtDisk.ExpandVirtualDisk(util.toPointer(VirtualDiskHandle), Flags, util.toPointer(Parameters), util.toPointer(Overlapped));
}

export function ResizeVirtualDisk(
  VirtualDiskHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Flags: RESIZE_VIRTUAL_DISK_FLAG /* Windows.Win32.Storage.Vhd.RESIZE_VIRTUAL_DISK_FLAG */,
  Parameters: Deno.PointerValue | Uint8Array | null /* ptr */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libVirtDisk.ResizeVirtualDisk(util.toPointer(VirtualDiskHandle), Flags, util.toPointer(Parameters), util.toPointer(Overlapped));
}

export function MirrorVirtualDisk(
  VirtualDiskHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Flags: MIRROR_VIRTUAL_DISK_FLAG /* Windows.Win32.Storage.Vhd.MIRROR_VIRTUAL_DISK_FLAG */,
  Parameters: Deno.PointerValue | Uint8Array | null /* ptr */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libVirtDisk.MirrorVirtualDisk(util.toPointer(VirtualDiskHandle), Flags, util.toPointer(Parameters), util.toPointer(Overlapped));
}

export function BreakMirrorVirtualDisk(
  VirtualDiskHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libVirtDisk.BreakMirrorVirtualDisk(util.toPointer(VirtualDiskHandle));
}

export function AddVirtualDiskParent(
  VirtualDiskHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ParentPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libVirtDisk.AddVirtualDiskParent(util.toPointer(VirtualDiskHandle), util.pwstrToFfi(ParentPath));
}

export function QueryChangesVirtualDisk(
  VirtualDiskHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ChangeTrackingId: string | null /* Windows.Win32.Foundation.PWSTR */,
  ByteOffset: Deno.PointerValue /* u64 */,
  ByteLength: Deno.PointerValue /* u64 */,
  Flags: QUERY_CHANGES_VIRTUAL_DISK_FLAG /* Windows.Win32.Storage.Vhd.QUERY_CHANGES_VIRTUAL_DISK_FLAG */,
  Ranges: Deno.PointerValue | Uint8Array | null /* ptr */,
  RangeCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  ProcessedLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libVirtDisk.QueryChangesVirtualDisk(util.toPointer(VirtualDiskHandle), util.pwstrToFfi(ChangeTrackingId), ByteOffset, ByteLength, Flags, util.toPointer(Ranges), util.toPointer(RangeCount), util.toPointer(ProcessedLength));
}

export function TakeSnapshotVhdSet(
  VirtualDiskHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Parameters: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: TAKE_SNAPSHOT_VHDSET_FLAG /* Windows.Win32.Storage.Vhd.TAKE_SNAPSHOT_VHDSET_FLAG */,
): number /* u32 */ {
  return libVirtDisk.TakeSnapshotVhdSet(util.toPointer(VirtualDiskHandle), util.toPointer(Parameters), Flags);
}

export function DeleteSnapshotVhdSet(
  VirtualDiskHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Parameters: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: DELETE_SNAPSHOT_VHDSET_FLAG /* Windows.Win32.Storage.Vhd.DELETE_SNAPSHOT_VHDSET_FLAG */,
): number /* u32 */ {
  return libVirtDisk.DeleteSnapshotVhdSet(util.toPointer(VirtualDiskHandle), util.toPointer(Parameters), Flags);
}

export function ModifyVhdSet(
  VirtualDiskHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Parameters: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: MODIFY_VHDSET_FLAG /* Windows.Win32.Storage.Vhd.MODIFY_VHDSET_FLAG */,
): number /* u32 */ {
  return libVirtDisk.ModifyVhdSet(util.toPointer(VirtualDiskHandle), util.toPointer(Parameters), Flags);
}

export function ApplySnapshotVhdSet(
  VirtualDiskHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Parameters: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: APPLY_SNAPSHOT_VHDSET_FLAG /* Windows.Win32.Storage.Vhd.APPLY_SNAPSHOT_VHDSET_FLAG */,
): number /* u32 */ {
  return libVirtDisk.ApplySnapshotVhdSet(util.toPointer(VirtualDiskHandle), util.toPointer(Parameters), Flags);
}

export function RawSCSIVirtualDisk(
  VirtualDiskHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Parameters: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: RAW_SCSI_VIRTUAL_DISK_FLAG /* Windows.Win32.Storage.Vhd.RAW_SCSI_VIRTUAL_DISK_FLAG */,
  Response: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libVirtDisk.RawSCSIVirtualDisk(util.toPointer(VirtualDiskHandle), util.toPointer(Parameters), Flags, util.toPointer(Response));
}

export function ForkVirtualDisk(
  VirtualDiskHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Flags: FORK_VIRTUAL_DISK_FLAG /* Windows.Win32.Storage.Vhd.FORK_VIRTUAL_DISK_FLAG */,
  Parameters: Deno.PointerValue | Uint8Array | null /* ptr */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libVirtDisk.ForkVirtualDisk(util.toPointer(VirtualDiskHandle), Flags, util.toPointer(Parameters), util.toPointer(Overlapped));
}

export function CompleteForkVirtualDisk(
  VirtualDiskHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libVirtDisk.CompleteForkVirtualDisk(util.toPointer(VirtualDiskHandle));
}

