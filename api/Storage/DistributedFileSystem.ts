/// Auto-generated by Deno Win32: Windows.Win32.Storage.DistributedFileSystem.Apis

import * as util from "../../util.ts";

// Enums
export type DFS_TARGET_PRIORITY_CLASS = number;
export type DFS_NAMESPACE_VERSION_ORIGIN = number;

// Constants
export const FSCTL_DFS_BASE = 6;
export const DFS_VOLUME_STATES = 15;
export const DFS_VOLUME_STATE_OK = 1;
export const DFS_VOLUME_STATE_INCONSISTENT = 2;
export const DFS_VOLUME_STATE_OFFLINE = 3;
export const DFS_VOLUME_STATE_ONLINE = 4;
export const DFS_VOLUME_STATE_RESYNCHRONIZE = 16;
export const DFS_VOLUME_STATE_STANDBY = 32;
export const DFS_VOLUME_STATE_FORCE_SYNC = 64;
export const DFS_VOLUME_FLAVORS = 768;
export const DFS_VOLUME_FLAVOR_UNUSED1 = 0;
export const DFS_VOLUME_FLAVOR_STANDALONE = 256;
export const DFS_VOLUME_FLAVOR_AD_BLOB = 512;
export const DFS_STORAGE_FLAVOR_UNUSED2 = 768;
export const DFS_STORAGE_STATES = 15;
export const DFS_STORAGE_STATE_OFFLINE = 1;
export const DFS_STORAGE_STATE_ONLINE = 2;
export const DFS_STORAGE_STATE_ACTIVE = 4;
export const DFS_PROPERTY_FLAG_INSITE_REFERRALS = 1;
export const DFS_PROPERTY_FLAG_ROOT_SCALABILITY = 2;
export const DFS_PROPERTY_FLAG_SITE_COSTING = 4;
export const DFS_PROPERTY_FLAG_TARGET_FAILBACK = 8;
export const DFS_PROPERTY_FLAG_CLUSTER_ENABLED = 16;
export const DFS_PROPERTY_FLAG_ABDE = 32;
export const DFS_ADD_VOLUME = 1;
export const DFS_RESTORE_VOLUME = 2;
export const NET_DFS_SETDC_FLAGS = 0;
export const NET_DFS_SETDC_TIMEOUT = 1;
export const NET_DFS_SETDC_INITPKT = 2;
export const DFS_SITE_PRIMARY = 1;
export const DFS_MOVE_FLAG_REPLACE_IF_EXISTS = 1;
export const DFS_FORCE_REMOVE = 2147483648;
export const FSCTL_DFS_GET_PKT_ENTRY_STATE = 401340;
export const DfsInvalidPriorityClass = `-1`;
export const DfsSiteCostNormalPriorityClass = 0;
export const DfsGlobalHighPriorityClass = 1;
export const DfsSiteCostHighPriorityClass = 2;
export const DfsSiteCostLowPriorityClass = 3;
export const DfsGlobalLowPriorityClass = 4;
export const DFS_NAMESPACE_VERSION_ORIGIN_COMBINED = 0;
export const DFS_NAMESPACE_VERSION_ORIGIN_SERVER = 1;
export const DFS_NAMESPACE_VERSION_ORIGIN_DOMAIN = 2;

// Structs

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_INFO_1_32 (size: 8)
 */
export interface DFS_INFO_1_32 {
  /** u32 */
  EntryPath: number;
}

export const sizeofDFS_INFO_1_32 = 8;

export function allocDFS_INFO_1_32(data?: Partial<DFS_INFO_1_32>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_INFO_1_32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EntryPath !== undefined) view.setUint32(0, Number(data.EntryPath), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_INFO_2_32 (size: 16)
 */
export interface DFS_INFO_2_32 {
  /** u32 */
  EntryPath: number;
  /** u32 */
  Comment: number;
  /** u32 */
  State: number;
  /** u32 */
  NumberOfStorages: number;
}

export const sizeofDFS_INFO_2_32 = 16;

export function allocDFS_INFO_2_32(data?: Partial<DFS_INFO_2_32>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_INFO_2_32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EntryPath !== undefined) view.setUint32(0, Number(data.EntryPath), true);
  // 0x04: u32
  if (data?.Comment !== undefined) view.setUint32(4, Number(data.Comment), true);
  // 0x08: u32
  if (data?.State !== undefined) view.setUint32(8, Number(data.State), true);
  // 0x0c: u32
  if (data?.NumberOfStorages !== undefined) view.setUint32(12, Number(data.NumberOfStorages), true);
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_STORAGE_INFO_0_32 (size: 16)
 */
export interface DFS_STORAGE_INFO_0_32 {
  /** u32 */
  State: number;
  /** u32 */
  ServerName: number;
  /** u32 */
  ShareName: number;
}

export const sizeofDFS_STORAGE_INFO_0_32 = 16;

export function allocDFS_STORAGE_INFO_0_32(data?: Partial<DFS_STORAGE_INFO_0_32>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_STORAGE_INFO_0_32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.State !== undefined) view.setUint32(0, Number(data.State), true);
  // 0x04: u32
  if (data?.ServerName !== undefined) view.setUint32(4, Number(data.ServerName), true);
  // 0x08: u32
  if (data?.ShareName !== undefined) view.setUint32(8, Number(data.ShareName), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_INFO_3_32 (size: 24)
 */
export interface DFS_INFO_3_32 {
  /** u32 */
  EntryPath: number;
  /** u32 */
  Comment: number;
  /** u32 */
  State: number;
  /** u32 */
  NumberOfStorages: number;
  /** u32 */
  Storage: number;
}

export const sizeofDFS_INFO_3_32 = 24;

export function allocDFS_INFO_3_32(data?: Partial<DFS_INFO_3_32>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_INFO_3_32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EntryPath !== undefined) view.setUint32(0, Number(data.EntryPath), true);
  // 0x04: u32
  if (data?.Comment !== undefined) view.setUint32(4, Number(data.Comment), true);
  // 0x08: u32
  if (data?.State !== undefined) view.setUint32(8, Number(data.State), true);
  // 0x0c: u32
  if (data?.NumberOfStorages !== undefined) view.setUint32(12, Number(data.NumberOfStorages), true);
  // 0x10: u32
  if (data?.Storage !== undefined) view.setUint32(16, Number(data.Storage), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_INFO_4_32 (size: 32)
 */
export interface DFS_INFO_4_32 {
  /** u32 */
  EntryPath: number;
  /** u32 */
  Comment: number;
  /** u32 */
  State: number;
  /** u32 */
  Timeout: number;
  /** System.Guid */
  Guid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumberOfStorages: number;
  /** u32 */
  Storage: number;
}

export const sizeofDFS_INFO_4_32 = 32;

export function allocDFS_INFO_4_32(data?: Partial<DFS_INFO_4_32>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_INFO_4_32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EntryPath !== undefined) view.setUint32(0, Number(data.EntryPath), true);
  // 0x04: u32
  if (data?.Comment !== undefined) view.setUint32(4, Number(data.Comment), true);
  // 0x08: u32
  if (data?.State !== undefined) view.setUint32(8, Number(data.State), true);
  // 0x0c: u32
  if (data?.Timeout !== undefined) view.setUint32(12, Number(data.Timeout), true);
  // 0x10: pointer
  if (data?.Guid !== undefined) view.setBigUint64(16, data.Guid === null ? 0n : BigInt(util.toPointer(data.Guid)), true);
  // 0x18: u32
  if (data?.NumberOfStorages !== undefined) view.setUint32(24, Number(data.NumberOfStorages), true);
  // 0x1c: u32
  if (data?.Storage !== undefined) view.setUint32(28, Number(data.Storage), true);
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_TARGET_PRIORITY (size: 8)
 */
export interface DFS_TARGET_PRIORITY {
  /** Windows.Win32.Storage.DistributedFileSystem.DFS_TARGET_PRIORITY_CLASS */
  TargetPriorityClass: DFS_TARGET_PRIORITY_CLASS;
  /** u16 */
  TargetPriorityRank: number;
  /** u16 */
  Reserved: number;
}

export const sizeofDFS_TARGET_PRIORITY = 8;

export function allocDFS_TARGET_PRIORITY(data?: Partial<DFS_TARGET_PRIORITY>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_TARGET_PRIORITY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.TargetPriorityClass !== undefined) view.setInt32(0, Number(data.TargetPriorityClass), true);
  // 0x04: u16
  if (data?.TargetPriorityRank !== undefined) view.setUint16(4, Number(data.TargetPriorityRank), true);
  // 0x06: u16
  if (data?.Reserved !== undefined) view.setUint16(6, Number(data.Reserved), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_INFO_1 (size: 8)
 */
export interface DFS_INFO_1 {
  /** Windows.Win32.Foundation.PWSTR */
  EntryPath: string | null;
}

export const sizeofDFS_INFO_1 = 8;

export function allocDFS_INFO_1(data?: Partial<DFS_INFO_1>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_INFO_1);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.EntryPath !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.EntryPath);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_INFO_2 (size: 24)
 */
export interface DFS_INFO_2 {
  /** Windows.Win32.Foundation.PWSTR */
  EntryPath: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Comment: string | null;
  /** u32 */
  State: number;
  /** u32 */
  NumberOfStorages: number;
}

export const sizeofDFS_INFO_2 = 24;

export function allocDFS_INFO_2(data?: Partial<DFS_INFO_2>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_INFO_2);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.EntryPath !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.EntryPath);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.Comment !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Comment);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.State !== undefined) view.setUint32(16, Number(data.State), true);
  // 0x14: u32
  if (data?.NumberOfStorages !== undefined) view.setUint32(20, Number(data.NumberOfStorages), true);
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_STORAGE_INFO (size: 24)
 */
export interface DFS_STORAGE_INFO {
  /** u32 */
  State: number;
  /** Windows.Win32.Foundation.PWSTR */
  ServerName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  ShareName: string | null;
}

export const sizeofDFS_STORAGE_INFO = 24;

export function allocDFS_STORAGE_INFO(data?: Partial<DFS_STORAGE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_STORAGE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.State !== undefined) view.setUint32(0, Number(data.State), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.ServerName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ServerName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.ShareName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.ShareName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_STORAGE_INFO_1 (size: 32)
 */
export interface DFS_STORAGE_INFO_1 {
  /** u32 */
  State: number;
  /** Windows.Win32.Foundation.PWSTR */
  ServerName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  ShareName: string | null;
  /** Windows.Win32.Storage.DistributedFileSystem.DFS_TARGET_PRIORITY */
  TargetPriority: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDFS_STORAGE_INFO_1 = 32;

export function allocDFS_STORAGE_INFO_1(data?: Partial<DFS_STORAGE_INFO_1>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_STORAGE_INFO_1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.State !== undefined) view.setUint32(0, Number(data.State), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.ServerName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ServerName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.ShareName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.ShareName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.TargetPriority !== undefined) view.setBigUint64(24, data.TargetPriority === null ? 0n : BigInt(util.toPointer(data.TargetPriority)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_INFO_3 (size: 32)
 */
export interface DFS_INFO_3 {
  /** Windows.Win32.Foundation.PWSTR */
  EntryPath: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Comment: string | null;
  /** u32 */
  State: number;
  /** u32 */
  NumberOfStorages: number;
  /** ptr */
  Storage: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDFS_INFO_3 = 32;

export function allocDFS_INFO_3(data?: Partial<DFS_INFO_3>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_INFO_3);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.EntryPath !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.EntryPath);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.Comment !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Comment);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.State !== undefined) view.setUint32(16, Number(data.State), true);
  // 0x14: u32
  if (data?.NumberOfStorages !== undefined) view.setUint32(20, Number(data.NumberOfStorages), true);
  // 0x18: pointer
  if (data?.Storage !== undefined) view.setBigUint64(24, data.Storage === null ? 0n : BigInt(util.toPointer(data.Storage)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_INFO_4 (size: 48)
 */
export interface DFS_INFO_4 {
  /** Windows.Win32.Foundation.PWSTR */
  EntryPath: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Comment: string | null;
  /** u32 */
  State: number;
  /** u32 */
  Timeout: number;
  /** System.Guid */
  Guid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumberOfStorages: number;
  /** ptr */
  Storage: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDFS_INFO_4 = 48;

export function allocDFS_INFO_4(data?: Partial<DFS_INFO_4>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_INFO_4);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.EntryPath !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.EntryPath);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.Comment !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Comment);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.State !== undefined) view.setUint32(16, Number(data.State), true);
  // 0x14: u32
  if (data?.Timeout !== undefined) view.setUint32(20, Number(data.Timeout), true);
  // 0x18: pointer
  if (data?.Guid !== undefined) view.setBigUint64(24, data.Guid === null ? 0n : BigInt(util.toPointer(data.Guid)), true);
  // 0x20: u32
  if (data?.NumberOfStorages !== undefined) view.setUint32(32, Number(data.NumberOfStorages), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Storage !== undefined) view.setBigUint64(40, data.Storage === null ? 0n : BigInt(util.toPointer(data.Storage)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_INFO_5 (size: 48)
 */
export interface DFS_INFO_5 {
  /** Windows.Win32.Foundation.PWSTR */
  EntryPath: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Comment: string | null;
  /** u32 */
  State: number;
  /** u32 */
  Timeout: number;
  /** System.Guid */
  Guid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PropertyFlags: number;
  /** u32 */
  MetadataSize: number;
  /** u32 */
  NumberOfStorages: number;
}

export const sizeofDFS_INFO_5 = 48;

export function allocDFS_INFO_5(data?: Partial<DFS_INFO_5>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_INFO_5);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.EntryPath !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.EntryPath);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.Comment !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Comment);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.State !== undefined) view.setUint32(16, Number(data.State), true);
  // 0x14: u32
  if (data?.Timeout !== undefined) view.setUint32(20, Number(data.Timeout), true);
  // 0x18: pointer
  if (data?.Guid !== undefined) view.setBigUint64(24, data.Guid === null ? 0n : BigInt(util.toPointer(data.Guid)), true);
  // 0x20: u32
  if (data?.PropertyFlags !== undefined) view.setUint32(32, Number(data.PropertyFlags), true);
  // 0x24: u32
  if (data?.MetadataSize !== undefined) view.setUint32(36, Number(data.MetadataSize), true);
  // 0x28: u32
  if (data?.NumberOfStorages !== undefined) view.setUint32(40, Number(data.NumberOfStorages), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_INFO_6 (size: 56)
 */
export interface DFS_INFO_6 {
  /** Windows.Win32.Foundation.PWSTR */
  EntryPath: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Comment: string | null;
  /** u32 */
  State: number;
  /** u32 */
  Timeout: number;
  /** System.Guid */
  Guid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PropertyFlags: number;
  /** u32 */
  MetadataSize: number;
  /** u32 */
  NumberOfStorages: number;
  /** ptr */
  Storage: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDFS_INFO_6 = 56;

export function allocDFS_INFO_6(data?: Partial<DFS_INFO_6>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_INFO_6);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.EntryPath !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.EntryPath);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.Comment !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Comment);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.State !== undefined) view.setUint32(16, Number(data.State), true);
  // 0x14: u32
  if (data?.Timeout !== undefined) view.setUint32(20, Number(data.Timeout), true);
  // 0x18: pointer
  if (data?.Guid !== undefined) view.setBigUint64(24, data.Guid === null ? 0n : BigInt(util.toPointer(data.Guid)), true);
  // 0x20: u32
  if (data?.PropertyFlags !== undefined) view.setUint32(32, Number(data.PropertyFlags), true);
  // 0x24: u32
  if (data?.MetadataSize !== undefined) view.setUint32(36, Number(data.MetadataSize), true);
  // 0x28: u32
  if (data?.NumberOfStorages !== undefined) view.setUint32(40, Number(data.NumberOfStorages), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.Storage !== undefined) view.setBigUint64(48, data.Storage === null ? 0n : BigInt(util.toPointer(data.Storage)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_INFO_7 (size: 8)
 */
export interface DFS_INFO_7 {
  /** System.Guid */
  GenerationGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDFS_INFO_7 = 8;

export function allocDFS_INFO_7(data?: Partial<DFS_INFO_7>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_INFO_7);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.GenerationGuid !== undefined) view.setBigUint64(0, data.GenerationGuid === null ? 0n : BigInt(util.toPointer(data.GenerationGuid)), true);
  return buf;
}

export type PSECURITY_DESCRIPTOR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_INFO_8 (size: 64)
 */
export interface DFS_INFO_8 {
  /** Windows.Win32.Foundation.PWSTR */
  EntryPath: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Comment: string | null;
  /** u32 */
  State: number;
  /** u32 */
  Timeout: number;
  /** System.Guid */
  Guid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PropertyFlags: number;
  /** u32 */
  MetadataSize: number;
  /** u32 */
  SdLengthReserved: number;
  /** Windows.Win32.Security.PSECURITY_DESCRIPTOR */
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumberOfStorages: number;
}

export const sizeofDFS_INFO_8 = 64;

export function allocDFS_INFO_8(data?: Partial<DFS_INFO_8>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_INFO_8);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.EntryPath !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.EntryPath);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.Comment !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Comment);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.State !== undefined) view.setUint32(16, Number(data.State), true);
  // 0x14: u32
  if (data?.Timeout !== undefined) view.setUint32(20, Number(data.Timeout), true);
  // 0x18: pointer
  if (data?.Guid !== undefined) view.setBigUint64(24, data.Guid === null ? 0n : BigInt(util.toPointer(data.Guid)), true);
  // 0x20: u32
  if (data?.PropertyFlags !== undefined) view.setUint32(32, Number(data.PropertyFlags), true);
  // 0x24: u32
  if (data?.MetadataSize !== undefined) view.setUint32(36, Number(data.MetadataSize), true);
  // 0x28: u32
  if (data?.SdLengthReserved !== undefined) view.setUint32(40, Number(data.SdLengthReserved), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pSecurityDescriptor !== undefined) view.setBigUint64(48, data.pSecurityDescriptor === null ? 0n : BigInt(util.toPointer(data.pSecurityDescriptor)), true);
  // 0x38: u32
  if (data?.NumberOfStorages !== undefined) view.setUint32(56, Number(data.NumberOfStorages), true);
  // 0x3c: pad4
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_INFO_9 (size: 72)
 */
export interface DFS_INFO_9 {
  /** Windows.Win32.Foundation.PWSTR */
  EntryPath: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Comment: string | null;
  /** u32 */
  State: number;
  /** u32 */
  Timeout: number;
  /** System.Guid */
  Guid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PropertyFlags: number;
  /** u32 */
  MetadataSize: number;
  /** u32 */
  SdLengthReserved: number;
  /** Windows.Win32.Security.PSECURITY_DESCRIPTOR */
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumberOfStorages: number;
  /** ptr */
  Storage: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDFS_INFO_9 = 72;

export function allocDFS_INFO_9(data?: Partial<DFS_INFO_9>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_INFO_9);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.EntryPath !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.EntryPath);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.Comment !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Comment);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.State !== undefined) view.setUint32(16, Number(data.State), true);
  // 0x14: u32
  if (data?.Timeout !== undefined) view.setUint32(20, Number(data.Timeout), true);
  // 0x18: pointer
  if (data?.Guid !== undefined) view.setBigUint64(24, data.Guid === null ? 0n : BigInt(util.toPointer(data.Guid)), true);
  // 0x20: u32
  if (data?.PropertyFlags !== undefined) view.setUint32(32, Number(data.PropertyFlags), true);
  // 0x24: u32
  if (data?.MetadataSize !== undefined) view.setUint32(36, Number(data.MetadataSize), true);
  // 0x28: u32
  if (data?.SdLengthReserved !== undefined) view.setUint32(40, Number(data.SdLengthReserved), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pSecurityDescriptor !== undefined) view.setBigUint64(48, data.pSecurityDescriptor === null ? 0n : BigInt(util.toPointer(data.pSecurityDescriptor)), true);
  // 0x38: u32
  if (data?.NumberOfStorages !== undefined) view.setUint32(56, Number(data.NumberOfStorages), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.Storage !== undefined) view.setBigUint64(64, data.Storage === null ? 0n : BigInt(util.toPointer(data.Storage)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_INFO_50 (size: 16)
 */
export interface DFS_INFO_50 {
  /** u32 */
  NamespaceMajorVersion: number;
  /** u32 */
  NamespaceMinorVersion: number;
  /** u64 */
  NamespaceCapabilities: Deno.PointerValue;
}

export const sizeofDFS_INFO_50 = 16;

export function allocDFS_INFO_50(data?: Partial<DFS_INFO_50>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_INFO_50);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NamespaceMajorVersion !== undefined) view.setUint32(0, Number(data.NamespaceMajorVersion), true);
  // 0x04: u32
  if (data?.NamespaceMinorVersion !== undefined) view.setUint32(4, Number(data.NamespaceMinorVersion), true);
  // 0x08: u64
  if (data?.NamespaceCapabilities !== undefined) view.setBigUint64(8, BigInt(data.NamespaceCapabilities), true);
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_INFO_100 (size: 8)
 */
export interface DFS_INFO_100 {
  /** Windows.Win32.Foundation.PWSTR */
  Comment: string | null;
}

export const sizeofDFS_INFO_100 = 8;

export function allocDFS_INFO_100(data?: Partial<DFS_INFO_100>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_INFO_100);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Comment !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Comment);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_INFO_101 (size: 8)
 */
export interface DFS_INFO_101 {
  /** u32 */
  State: number;
}

export const sizeofDFS_INFO_101 = 8;

export function allocDFS_INFO_101(data?: Partial<DFS_INFO_101>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_INFO_101);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.State !== undefined) view.setUint32(0, Number(data.State), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_INFO_102 (size: 8)
 */
export interface DFS_INFO_102 {
  /** u32 */
  Timeout: number;
}

export const sizeofDFS_INFO_102 = 8;

export function allocDFS_INFO_102(data?: Partial<DFS_INFO_102>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_INFO_102);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Timeout !== undefined) view.setUint32(0, Number(data.Timeout), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_INFO_103 (size: 8)
 */
export interface DFS_INFO_103 {
  /** u32 */
  PropertyFlagMask: number;
  /** u32 */
  PropertyFlags: number;
}

export const sizeofDFS_INFO_103 = 8;

export function allocDFS_INFO_103(data?: Partial<DFS_INFO_103>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_INFO_103);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PropertyFlagMask !== undefined) view.setUint32(0, Number(data.PropertyFlagMask), true);
  // 0x04: u32
  if (data?.PropertyFlags !== undefined) view.setUint32(4, Number(data.PropertyFlags), true);
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_INFO_104 (size: 8)
 */
export interface DFS_INFO_104 {
  /** Windows.Win32.Storage.DistributedFileSystem.DFS_TARGET_PRIORITY */
  TargetPriority: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDFS_INFO_104 = 8;

export function allocDFS_INFO_104(data?: Partial<DFS_INFO_104>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_INFO_104);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TargetPriority !== undefined) view.setBigUint64(0, data.TargetPriority === null ? 0n : BigInt(util.toPointer(data.TargetPriority)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_INFO_105 (size: 24)
 */
export interface DFS_INFO_105 {
  /** Windows.Win32.Foundation.PWSTR */
  Comment: string | null;
  /** u32 */
  State: number;
  /** u32 */
  Timeout: number;
  /** u32 */
  PropertyFlagMask: number;
  /** u32 */
  PropertyFlags: number;
}

export const sizeofDFS_INFO_105 = 24;

export function allocDFS_INFO_105(data?: Partial<DFS_INFO_105>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_INFO_105);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Comment !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Comment);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.State !== undefined) view.setUint32(8, Number(data.State), true);
  // 0x0c: u32
  if (data?.Timeout !== undefined) view.setUint32(12, Number(data.Timeout), true);
  // 0x10: u32
  if (data?.PropertyFlagMask !== undefined) view.setUint32(16, Number(data.PropertyFlagMask), true);
  // 0x14: u32
  if (data?.PropertyFlags !== undefined) view.setUint32(20, Number(data.PropertyFlags), true);
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_INFO_106 (size: 16)
 */
export interface DFS_INFO_106 {
  /** u32 */
  State: number;
  /** Windows.Win32.Storage.DistributedFileSystem.DFS_TARGET_PRIORITY */
  TargetPriority: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDFS_INFO_106 = 16;

export function allocDFS_INFO_106(data?: Partial<DFS_INFO_106>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_INFO_106);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.State !== undefined) view.setUint32(0, Number(data.State), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.TargetPriority !== undefined) view.setBigUint64(8, data.TargetPriority === null ? 0n : BigInt(util.toPointer(data.TargetPriority)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_INFO_107 (size: 40)
 */
export interface DFS_INFO_107 {
  /** Windows.Win32.Foundation.PWSTR */
  Comment: string | null;
  /** u32 */
  State: number;
  /** u32 */
  Timeout: number;
  /** u32 */
  PropertyFlagMask: number;
  /** u32 */
  PropertyFlags: number;
  /** u32 */
  SdLengthReserved: number;
  /** Windows.Win32.Security.PSECURITY_DESCRIPTOR */
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDFS_INFO_107 = 40;

export function allocDFS_INFO_107(data?: Partial<DFS_INFO_107>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_INFO_107);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Comment !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Comment);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.State !== undefined) view.setUint32(8, Number(data.State), true);
  // 0x0c: u32
  if (data?.Timeout !== undefined) view.setUint32(12, Number(data.Timeout), true);
  // 0x10: u32
  if (data?.PropertyFlagMask !== undefined) view.setUint32(16, Number(data.PropertyFlagMask), true);
  // 0x14: u32
  if (data?.PropertyFlags !== undefined) view.setUint32(20, Number(data.PropertyFlags), true);
  // 0x18: u32
  if (data?.SdLengthReserved !== undefined) view.setUint32(24, Number(data.SdLengthReserved), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pSecurityDescriptor !== undefined) view.setBigUint64(32, data.pSecurityDescriptor === null ? 0n : BigInt(util.toPointer(data.pSecurityDescriptor)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_INFO_150 (size: 16)
 */
export interface DFS_INFO_150 {
  /** u32 */
  SdLengthReserved: number;
  /** Windows.Win32.Security.PSECURITY_DESCRIPTOR */
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDFS_INFO_150 = 16;

export function allocDFS_INFO_150(data?: Partial<DFS_INFO_150>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_INFO_150);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SdLengthReserved !== undefined) view.setUint32(0, Number(data.SdLengthReserved), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pSecurityDescriptor !== undefined) view.setBigUint64(8, data.pSecurityDescriptor === null ? 0n : BigInt(util.toPointer(data.pSecurityDescriptor)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_INFO_200 (size: 8)
 */
export interface DFS_INFO_200 {
  /** Windows.Win32.Foundation.PWSTR */
  FtDfsName: string | null;
}

export const sizeofDFS_INFO_200 = 8;

export function allocDFS_INFO_200(data?: Partial<DFS_INFO_200>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_INFO_200);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.FtDfsName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.FtDfsName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_INFO_300 (size: 16)
 */
export interface DFS_INFO_300 {
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.PWSTR */
  DfsName: string | null;
}

export const sizeofDFS_INFO_300 = 16;

export function allocDFS_INFO_300(data?: Partial<DFS_INFO_300>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_INFO_300);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.DfsName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.DfsName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_SITENAME_INFO (size: 16)
 */
export interface DFS_SITENAME_INFO {
  /** u32 */
  SiteFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  SiteName: string | null;
}

export const sizeofDFS_SITENAME_INFO = 16;

export function allocDFS_SITENAME_INFO(data?: Partial<DFS_SITENAME_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_SITENAME_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SiteFlags !== undefined) view.setUint32(0, Number(data.SiteFlags), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.SiteName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.SiteName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_SITELIST_INFO (size: 16)
 */
export interface DFS_SITELIST_INFO {
  /** u32 */
  cSites: number;
  /** array */
  Site: Deno.PointerValue | null;
}

export const sizeofDFS_SITELIST_INFO = 16;

export function allocDFS_SITELIST_INFO(data?: Partial<DFS_SITELIST_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_SITELIST_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cSites !== undefined) view.setUint32(0, Number(data.cSites), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Site !== undefined) view.setBigUint64(8, data.Site === null ? 0n : BigInt(util.toPointer(data.Site)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_SUPPORTED_NAMESPACE_VERSION_INFO (size: 32)
 */
export interface DFS_SUPPORTED_NAMESPACE_VERSION_INFO {
  /** u32 */
  DomainDfsMajorVersion: number;
  /** u32 */
  DomainDfsMinorVersion: number;
  /** u64 */
  DomainDfsCapabilities: Deno.PointerValue;
  /** u32 */
  StandaloneDfsMajorVersion: number;
  /** u32 */
  StandaloneDfsMinorVersion: number;
  /** u64 */
  StandaloneDfsCapabilities: Deno.PointerValue;
}

export const sizeofDFS_SUPPORTED_NAMESPACE_VERSION_INFO = 32;

export function allocDFS_SUPPORTED_NAMESPACE_VERSION_INFO(data?: Partial<DFS_SUPPORTED_NAMESPACE_VERSION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_SUPPORTED_NAMESPACE_VERSION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DomainDfsMajorVersion !== undefined) view.setUint32(0, Number(data.DomainDfsMajorVersion), true);
  // 0x04: u32
  if (data?.DomainDfsMinorVersion !== undefined) view.setUint32(4, Number(data.DomainDfsMinorVersion), true);
  // 0x08: u64
  if (data?.DomainDfsCapabilities !== undefined) view.setBigUint64(8, BigInt(data.DomainDfsCapabilities), true);
  // 0x10: u32
  if (data?.StandaloneDfsMajorVersion !== undefined) view.setUint32(16, Number(data.StandaloneDfsMajorVersion), true);
  // 0x14: u32
  if (data?.StandaloneDfsMinorVersion !== undefined) view.setUint32(20, Number(data.StandaloneDfsMinorVersion), true);
  // 0x18: u64
  if (data?.StandaloneDfsCapabilities !== undefined) view.setBigUint64(24, BigInt(data.StandaloneDfsCapabilities), true);
  return buf;
}

/**
 * Windows.Win32.Storage.DistributedFileSystem.DFS_GET_PKT_ENTRY_STATE_ARG (size: 24)
 */
export interface DFS_GET_PKT_ENTRY_STATE_ARG {
  /** u16 */
  DfsEntryPathLen: number;
  /** u16 */
  ServerNameLen: number;
  /** u16 */
  ShareNameLen: number;
  /** u32 */
  Level: number;
  /** array */
  Buffer: Deno.PointerValue | null;
}

export const sizeofDFS_GET_PKT_ENTRY_STATE_ARG = 24;

export function allocDFS_GET_PKT_ENTRY_STATE_ARG(data?: Partial<DFS_GET_PKT_ENTRY_STATE_ARG>): Uint8Array {
  const buf = new Uint8Array(sizeofDFS_GET_PKT_ENTRY_STATE_ARG);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.DfsEntryPathLen !== undefined) view.setUint16(0, Number(data.DfsEntryPathLen), true);
  // 0x02: u16
  if (data?.ServerNameLen !== undefined) view.setUint16(2, Number(data.ServerNameLen), true);
  // 0x04: u16
  if (data?.ShareNameLen !== undefined) view.setUint16(4, Number(data.ShareNameLen), true);
  // 0x06: u32
  if (data?.Level !== undefined) view.setUint32(6, Number(data.Level), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(16, data.Buffer === null ? 0n : BigInt(util.toPointer(data.Buffer)), true);
  return buf;
}

// Native Libraries

try {
  var libNETAPI32_dll = Deno.dlopen("NETAPI32.dll", {
    NetDfsAdd: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "u32"],
      result: "u32",
    },
    NetDfsAddStdRoot: {
      parameters: ["buffer", "buffer", "buffer", "u32"],
      result: "u32",
    },
    NetDfsRemoveStdRoot: {
      parameters: ["buffer", "buffer", "u32"],
      result: "u32",
    },
    NetDfsAddFtRoot: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "u32"],
      result: "u32",
    },
    NetDfsRemoveFtRoot: {
      parameters: ["buffer", "buffer", "buffer", "u32"],
      result: "u32",
    },
    NetDfsRemoveFtRootForced: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "u32"],
      result: "u32",
    },
    NetDfsRemove: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "u32",
    },
    NetDfsEnum: {
      parameters: ["buffer", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    NetDfsGetInfo: {
      parameters: ["buffer", "buffer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    NetDfsSetInfo: {
      parameters: ["buffer", "buffer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    NetDfsGetClientInfo: {
      parameters: ["buffer", "buffer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    NetDfsSetClientInfo: {
      parameters: ["buffer", "buffer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    NetDfsMove: {
      parameters: ["buffer", "buffer", "u32"],
      result: "u32",
    },
    NetDfsAddRootTarget: {
      parameters: ["buffer", "buffer", "u32", "buffer", "u32"],
      result: "u32",
    },
    NetDfsRemoveRootTarget: {
      parameters: ["buffer", "buffer", "u32"],
      result: "u32",
    },
    NetDfsGetSecurity: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetDfsSetSecurity: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
    },
    NetDfsGetStdContainerSecurity: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetDfsSetStdContainerSecurity: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
    },
    NetDfsGetFtContainerSecurity: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetDfsSetFtContainerSecurity: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
    },
    NetDfsGetSupportedNamespaceVersion: {
      parameters: ["i32", "buffer", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function NetDfsAdd(
  DfsEntryPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  ServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ShareName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Comment: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
): number /* u32 */ {
  return libNETAPI32_dll.NetDfsAdd(util.pwstrToFfi(DfsEntryPath), util.pwstrToFfi(ServerName), util.pwstrToFfi(ShareName), util.pwstrToFfi(Comment), Flags);
}

export function NetDfsAddStdRoot(
  ServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  RootShare: string | null /* Windows.Win32.Foundation.PWSTR */,
  Comment: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
): number /* u32 */ {
  return libNETAPI32_dll.NetDfsAddStdRoot(util.pwstrToFfi(ServerName), util.pwstrToFfi(RootShare), util.pwstrToFfi(Comment), Flags);
}

export function NetDfsRemoveStdRoot(
  ServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  RootShare: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
): number /* u32 */ {
  return libNETAPI32_dll.NetDfsRemoveStdRoot(util.pwstrToFfi(ServerName), util.pwstrToFfi(RootShare), Flags);
}

export function NetDfsAddFtRoot(
  ServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  RootShare: string | null /* Windows.Win32.Foundation.PWSTR */,
  FtDfsName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Comment: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
): number /* u32 */ {
  return libNETAPI32_dll.NetDfsAddFtRoot(util.pwstrToFfi(ServerName), util.pwstrToFfi(RootShare), util.pwstrToFfi(FtDfsName), util.pwstrToFfi(Comment), Flags);
}

export function NetDfsRemoveFtRoot(
  ServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  RootShare: string | null /* Windows.Win32.Foundation.PWSTR */,
  FtDfsName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
): number /* u32 */ {
  return libNETAPI32_dll.NetDfsRemoveFtRoot(util.pwstrToFfi(ServerName), util.pwstrToFfi(RootShare), util.pwstrToFfi(FtDfsName), Flags);
}

export function NetDfsRemoveFtRootForced(
  DomainName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  RootShare: string | null /* Windows.Win32.Foundation.PWSTR */,
  FtDfsName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
): number /* u32 */ {
  return libNETAPI32_dll.NetDfsRemoveFtRootForced(util.pwstrToFfi(DomainName), util.pwstrToFfi(ServerName), util.pwstrToFfi(RootShare), util.pwstrToFfi(FtDfsName), Flags);
}

export function NetDfsRemove(
  DfsEntryPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  ServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ShareName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libNETAPI32_dll.NetDfsRemove(util.pwstrToFfi(DfsEntryPath), util.pwstrToFfi(ServerName), util.pwstrToFfi(ShareName));
}

export function NetDfsEnum(
  DfsName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Level: number /* u32 */,
  PrefMaxLen: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  EntriesRead: Deno.PointerValue | Uint8Array | null /* ptr */,
  ResumeHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetDfsEnum(util.pwstrToFfi(DfsName), Level, PrefMaxLen, util.toPointer(Buffer), util.toPointer(EntriesRead), util.toPointer(ResumeHandle));
}

export function NetDfsGetInfo(
  DfsEntryPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  ServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ShareName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Level: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetDfsGetInfo(util.pwstrToFfi(DfsEntryPath), util.pwstrToFfi(ServerName), util.pwstrToFfi(ShareName), Level, util.toPointer(Buffer));
}

export function NetDfsSetInfo(
  DfsEntryPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  ServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ShareName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Level: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetDfsSetInfo(util.pwstrToFfi(DfsEntryPath), util.pwstrToFfi(ServerName), util.pwstrToFfi(ShareName), Level, util.toPointer(Buffer));
}

export function NetDfsGetClientInfo(
  DfsEntryPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  ServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ShareName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Level: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetDfsGetClientInfo(util.pwstrToFfi(DfsEntryPath), util.pwstrToFfi(ServerName), util.pwstrToFfi(ShareName), Level, util.toPointer(Buffer));
}

export function NetDfsSetClientInfo(
  DfsEntryPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  ServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ShareName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Level: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetDfsSetClientInfo(util.pwstrToFfi(DfsEntryPath), util.pwstrToFfi(ServerName), util.pwstrToFfi(ShareName), Level, util.toPointer(Buffer));
}

export function NetDfsMove(
  OldDfsEntryPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  NewDfsEntryPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
): number /* u32 */ {
  return libNETAPI32_dll.NetDfsMove(util.pwstrToFfi(OldDfsEntryPath), util.pwstrToFfi(NewDfsEntryPath), Flags);
}

export function NetDfsAddRootTarget(
  pDfsPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  pTargetPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  MajorVersion: number /* u32 */,
  pComment: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
): number /* u32 */ {
  return libNETAPI32_dll.NetDfsAddRootTarget(util.pwstrToFfi(pDfsPath), util.pwstrToFfi(pTargetPath), MajorVersion, util.pwstrToFfi(pComment), Flags);
}

export function NetDfsRemoveRootTarget(
  pDfsPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  pTargetPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
): number /* u32 */ {
  return libNETAPI32_dll.NetDfsRemoveRootTarget(util.pwstrToFfi(pDfsPath), util.pwstrToFfi(pTargetPath), Flags);
}

export function NetDfsGetSecurity(
  DfsEntryPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  SecurityInformation: number /* u32 */,
  ppSecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbSecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetDfsGetSecurity(util.pwstrToFfi(DfsEntryPath), SecurityInformation, util.toPointer(ppSecurityDescriptor), util.toPointer(lpcbSecurityDescriptor));
}

export function NetDfsSetSecurity(
  DfsEntryPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  SecurityInformation: number /* u32 */,
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
): number /* u32 */ {
  return libNETAPI32_dll.NetDfsSetSecurity(util.pwstrToFfi(DfsEntryPath), SecurityInformation, util.toPointer(pSecurityDescriptor));
}

export function NetDfsGetStdContainerSecurity(
  MachineName: string | null /* Windows.Win32.Foundation.PWSTR */,
  SecurityInformation: number /* u32 */,
  ppSecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbSecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetDfsGetStdContainerSecurity(util.pwstrToFfi(MachineName), SecurityInformation, util.toPointer(ppSecurityDescriptor), util.toPointer(lpcbSecurityDescriptor));
}

export function NetDfsSetStdContainerSecurity(
  MachineName: string | null /* Windows.Win32.Foundation.PWSTR */,
  SecurityInformation: number /* u32 */,
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
): number /* u32 */ {
  return libNETAPI32_dll.NetDfsSetStdContainerSecurity(util.pwstrToFfi(MachineName), SecurityInformation, util.toPointer(pSecurityDescriptor));
}

export function NetDfsGetFtContainerSecurity(
  DomainName: string | null /* Windows.Win32.Foundation.PWSTR */,
  SecurityInformation: number /* u32 */,
  ppSecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbSecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetDfsGetFtContainerSecurity(util.pwstrToFfi(DomainName), SecurityInformation, util.toPointer(ppSecurityDescriptor), util.toPointer(lpcbSecurityDescriptor));
}

export function NetDfsSetFtContainerSecurity(
  DomainName: string | null /* Windows.Win32.Foundation.PWSTR */,
  SecurityInformation: number /* u32 */,
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
): number /* u32 */ {
  return libNETAPI32_dll.NetDfsSetFtContainerSecurity(util.pwstrToFfi(DomainName), SecurityInformation, util.toPointer(pSecurityDescriptor));
}

export function NetDfsGetSupportedNamespaceVersion(
  Origin: DFS_NAMESPACE_VERSION_ORIGIN /* Windows.Win32.Storage.DistributedFileSystem.DFS_NAMESPACE_VERSION_ORIGIN */,
  pName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppVersionInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetDfsGetSupportedNamespaceVersion(Origin, util.pwstrToFfi(pName), util.toPointer(ppVersionInfo));
}

