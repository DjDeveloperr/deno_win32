/// Auto-generated by Deno Win32: Windows.Win32.Storage.OperationRecorder.Apis

import * as util from "../../util.ts";

// Enums
export type OPERATION_START_FLAGS = number;
export type OPERATION_END_PARAMETERS_FLAGS = number;

// Constants
export const OPERATION_START_TRACE_CURRENT_THREAD = 1;
export const OPERATION_END_DISCARD = 1;

// Structs

/**
 * Windows.Win32.Storage.OperationRecorder.OPERATION_START_PARAMETERS (size: 16)
 */
export interface OPERATION_START_PARAMETERS {
  /** u32 */
  Version: number;
  /** u32 */
  OperationId: number;
  /** Windows.Win32.Storage.OperationRecorder.OPERATION_START_FLAGS */
  Flags: OPERATION_START_FLAGS;
}

export const sizeofOPERATION_START_PARAMETERS = 16;

export function allocOPERATION_START_PARAMETERS(data?: Partial<OPERATION_START_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofOPERATION_START_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.OperationId !== undefined) view.setUint32(4, Number(data.OperationId), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  return buf;
}

export class OPERATION_START_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get OperationId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set OperationId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Storage.OperationRecorder.OPERATION_END_PARAMETERS (size: 16)
 */
export interface OPERATION_END_PARAMETERS {
  /** u32 */
  Version: number;
  /** u32 */
  OperationId: number;
  /** Windows.Win32.Storage.OperationRecorder.OPERATION_END_PARAMETERS_FLAGS */
  Flags: OPERATION_END_PARAMETERS_FLAGS;
}

export const sizeofOPERATION_END_PARAMETERS = 16;

export function allocOPERATION_END_PARAMETERS(data?: Partial<OPERATION_END_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofOPERATION_END_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.OperationId !== undefined) view.setUint32(4, Number(data.OperationId), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  return buf;
}

export class OPERATION_END_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get OperationId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set OperationId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

export type BOOL = number;

// Native Libraries

try {
  var libADVAPI32_dll = Deno.dlopen("ADVAPI32.dll", {
    OperationStart: {
      parameters: ["pointer"],
      result: "i32",
    },
    OperationEnd: {
      parameters: ["pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function OperationStart(
  OperationStartParams: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.OperationStart(util.toPointer(OperationStartParams)));
}

export function OperationEnd(
  OperationEndParams: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.OperationEnd(util.toPointer(OperationEndParams)));
}

