/// Auto-generated by Deno Win32: Windows.Win32.Storage.Xps.Apis

import * as util from "../../util.ts";

// Enums
export type PRINT_WINDOW_FLAGS = number;
export type DEVICE_CAPABILITIES = number;
export type PSINJECT_POINT = number;
export type XPS_TILE_MODE = number;
export type XPS_COLOR_INTERPOLATION = number;
export type XPS_SPREAD_METHOD = number;
export type XPS_STYLE_SIMULATION = number;
export type XPS_LINE_CAP = number;
export type XPS_DASH_CAP = number;
export type XPS_LINE_JOIN = number;
export type XPS_IMAGE_TYPE = number;
export type XPS_COLOR_TYPE = number;
export type XPS_FILL_RULE = number;
export type XPS_SEGMENT_TYPE = number;
export type XPS_SEGMENT_STROKE_PATTERN = number;
export type XPS_FONT_EMBEDDING = number;
export type XPS_OBJECT_TYPE = number;
export type XPS_THUMBNAIL_SIZE = number;
export type XPS_INTERLEAVING = number;
export type XPS_DOCUMENT_TYPE = number;
export type XPS_SIGNATURE_STATUS = number;
export type XPS_SIGN_POLICY = number;
export type XPS_SIGN_FLAGS = number;
export type XPS_JOB_COMPLETION = number;
export type PrintDocumentPackageCompletion = number;

// Constants
export const PW_CLIENTONLY = 1;
export const DC_BINNAMES = 12;
export const DC_BINS = 6;
export const DC_COLLATE = 22;
export const DC_COLORDEVICE = 32;
export const DC_COPIES = 18;
export const DC_DRIVER = 11;
export const DC_DUPLEX = 7;
export const DC_ENUMRESOLUTIONS = 13;
export const DC_EXTRA = 9;
export const DC_FIELDS = 1;
export const DC_FILEDEPENDENCIES = 14;
export const DC_MAXEXTENT = 5;
export const DC_MEDIAREADY = 29;
export const DC_MEDIATYPENAMES = 34;
export const DC_MEDIATYPES = 35;
export const DC_MINEXTENT = 4;
export const DC_ORIENTATION = 17;
export const DC_NUP = 33;
export const DC_PAPERNAMES = 16;
export const DC_PAPERS = 2;
export const DC_PAPERSIZE = 3;
export const DC_PERSONALITY = 25;
export const DC_PRINTERMEM = 28;
export const DC_PRINTRATE = 26;
export const DC_PRINTRATEPPM = 31;
export const DC_PRINTRATEUNIT = 27;
export const DC_SIZE = 8;
export const DC_STAPLE = 30;
export const DC_TRUETYPE = 15;
export const DC_VERSION = 10;
export const XPS_E_SIGREQUESTID_DUP = 5909714489931072389n;
export const XPS_E_PACKAGE_NOT_OPENED = 5909715589442700166n;
export const XPS_E_PACKAGE_ALREADY_OPENED = 5909716688954327943n;
export const XPS_E_SIGNATUREID_DUP = 5909717788465955720n;
export const XPS_E_MARKUP_COMPATIBILITY_ELEMENTS = 5909718887977583497n;
export const XPS_E_OBJECT_DETACHED = 5909719987489211274n;
export const XPS_E_INVALID_SIGNATUREBLOCK_MARKUP = 5910411580303082379n;
export const XPS_E_INVALID_NUMBER_OF_POINTS_IN_CURVE_SEGMENTS = 5910412679814710784n;
export const XPS_E_ABSOLUTE_REFERENCE = 5910413779326338561n;
export const XPS_E_INVALID_NUMBER_OF_COLOR_CHANNELS = 5908722730442819074n;
export const XPS_E_INVALID_LANGUAGE = 5908723829954445312n;
export const XPS_E_INVALID_NAME = 5908724929466073089n;
export const XPS_E_INVALID_RESOURCE_KEY = 5908726028977700866n;
export const XPS_E_INVALID_PAGE_SIZE = 5908727128489328643n;
export const XPS_E_INVALID_BLEED_BOX = 5908728228000956420n;
export const XPS_E_INVALID_THUMBNAIL_IMAGE_TYPE = 5908729327512584197n;
export const XPS_E_INVALID_LOOKUP_TYPE = 5908730427024211974n;
export const XPS_E_INVALID_FLOAT = 5908731526535839751n;
export const XPS_E_UNEXPECTED_CONTENT_TYPE = 5908733725559095304n;
export const XPS_E_INVALID_FONT_URI = 5908734825070723082n;
export const XPS_E_INVALID_CONTENT_BOX = 5908735924582350859n;
export const XPS_E_INVALID_MARKUP = 5908737024093978636n;
export const XPS_E_INVALID_XML_ENCODING = 5908738123605606413n;
export const XPS_E_INVALID_CONTENT_TYPE = 5908739223117234190n;
export const XPS_E_INVALID_OBFUSCATED_FONT_URI = 5908740322628861967n;
export const XPS_E_UNEXPECTED_RELATIONSHIP_TYPE = 5908741422140489744n;
export const XPS_E_UNEXPECTED_RESTRICTED_FONT_RELATIONSHIP = 5909004205419528209n;
export const XPS_E_MISSING_NAME = 5909005304931156224n;
export const XPS_E_MISSING_LOOKUP = 5909006404442784001n;
export const XPS_E_MISSING_GLYPHS = 5909007503954411778n;
export const XPS_E_MISSING_SEGMENT_DATA = 5909008603466039555n;
export const XPS_E_MISSING_COLORPROFILE = 5909009702977667332n;
export const XPS_E_MISSING_RELATIONSHIP_TARGET = 5909010802489295109n;
export const XPS_E_MISSING_RESOURCE_RELATIONSHIP = 5909011902000922886n;
export const XPS_E_MISSING_FONTURI = 5909013001512550663n;
export const XPS_E_MISSING_DOCUMENTSEQUENCE_RELATIONSHIP = 5909014101024178440n;
export const XPS_E_MISSING_DOCUMENT = 5909015200535806217n;
export const XPS_E_MISSING_REFERRED_DOCUMENT = 5909016300047433994n;
export const XPS_E_MISSING_REFERRED_PAGE = 5909017399559061771n;
export const XPS_E_MISSING_PAGE_IN_DOCUMENT = 5909018499070689548n;
export const XPS_E_MISSING_PAGE_IN_PAGEREFERENCE = 5909019598582317325n;
export const XPS_E_MISSING_IMAGE_IN_IMAGEBRUSH = 5909020698093945102n;
export const XPS_E_MISSING_RESOURCE_KEY = 5909021797605572879n;
export const XPS_E_MISSING_PART_REFERENCE = 5909022897117200656n;
export const XPS_E_MISSING_RESTRICTED_FONT_RELATIONSHIP = 5909023996628828433n;
export const XPS_E_MISSING_DISCARDCONTROL = 5909025096140456210n;
export const XPS_E_MISSING_PART_STREAM = 5909026195652083987n;
export const XPS_E_UNAVAILABLE_PACKAGE = 5909285680396239124n;
export const XPS_E_DUPLICATE_RESOURCE_KEYS = 5909286779907867136n;
export const XPS_E_MULTIPLE_RESOURCES = 5909287879419494913n;
export const XPS_E_MULTIPLE_DOCUMENTSEQUENCE_RELATIONSHIPS = 5909288978931122690n;
export const XPS_E_MULTIPLE_THUMBNAILS_ON_PAGE = 5909290078442750467n;
export const XPS_E_MULTIPLE_THUMBNAILS_ON_PACKAGE = 5909291177954378244n;
export const XPS_E_MULTIPLE_PRINTTICKETS_ON_PAGE = 5909292277466006021n;
export const XPS_E_MULTIPLE_PRINTTICKETS_ON_DOCUMENT = 5909293376977633798n;
export const XPS_E_MULTIPLE_PRINTTICKETS_ON_DOCUMENTSEQUENCE = 5909294476489261575n;
export const XPS_E_MULTIPLE_REFERENCES_TO_PART = 5909295576000889352n;
export const XPS_E_DUPLICATE_NAMES = 5909567155372950025n;
export const XPS_E_STRING_TOO_LONG = 5909568254884578048n;
export const XPS_E_TOO_MANY_INDICES = 5909569354396205825n;
export const XPS_E_MAPPING_OUT_OF_ORDER = 5909570453907833602n;
export const XPS_E_MAPPING_OUTSIDE_STRING = 5909571553419461379n;
export const XPS_E_MAPPING_OUTSIDE_INDICES = 5909572652931089156n;
export const XPS_E_CARET_OUTSIDE_STRING = 5909573752442716933n;
export const XPS_E_CARET_OUT_OF_ORDER = 5909574851954344710n;
export const XPS_E_ODD_BIDILEVEL = 5909575951465972487n;
export const XPS_E_ONE_TO_ONE_MAPPING_EXPECTED = 5909577050977600264n;
export const XPS_E_RESTRICTED_FONT_NOT_OBFUSCATED = 5909578150489228041n;
export const XPS_E_NEGATIVE_FLOAT = 5909848630349660938n;
export const XPS_E_XKEY_ATTR_PRESENT_OUTSIDE_RES_DICT = 5909849729861288960n;
export const XPS_E_DICTIONARY_ITEM_NAMED = 5909850829372916737n;
export const XPS_E_NESTED_REMOTE_DICTIONARY = 5910130105326371842n;
export const XPS_E_INDEX_OUT_OF_RANGE = 5910131204837999872n;
export const XPS_E_VISUAL_CIRCULAR_REF = 5910132304349627649n;
export const XPS_E_NO_CUSTOM_OBJECTS = 5910133403861255426n;
export const XPS_E_ALREADY_OWNED = 5910134503372883203n;
export const XPS_E_RESOURCE_NOT_OWNED = 5910135602884510980n;
export const XPS_E_UNEXPECTED_COLORPROFILE = 5910136702396138757n;
export const XPS_E_COLOR_COMPONENT_OUT_OF_RANGE = 5910137801907766534n;
export const XPS_E_BOTH_PATHFIGURE_AND_ABBR_SYNTAX_PRESENT = 5910138901419394311n;
export const XPS_E_BOTH_RESOURCE_AND_SOURCEATTR_PRESENT = 5910140000931022088n;
export const XPS_E_BLEED_BOX_PAGE_DIMENSIONS_NOT_IN_SYNC = 5910141100442649865n;
export const XPS_E_RELATIONSHIP_EXTERNAL = 5910142199954277642n;
export const XPS_E_NOT_ENOUGH_GRADIENT_STOPS = 5910143299465905419n;
export const XPS_E_PACKAGE_WRITER_NOT_CLOSED = 577868198059312396n;
export const PSINJECT_BEGINSTREAM = 1;
export const PSINJECT_PSADOBE = 2;
export const PSINJECT_PAGESATEND = 3;
export const PSINJECT_PAGES = 4;
export const PSINJECT_DOCNEEDEDRES = 5;
export const PSINJECT_DOCSUPPLIEDRES = 6;
export const PSINJECT_PAGEORDER = 7;
export const PSINJECT_ORIENTATION = 8;
export const PSINJECT_BOUNDINGBOX = 9;
export const PSINJECT_DOCUMENTPROCESSCOLORS = 10;
export const PSINJECT_COMMENTS = 11;
export const PSINJECT_BEGINDEFAULTS = 12;
export const PSINJECT_ENDDEFAULTS = 13;
export const PSINJECT_BEGINPROLOG = 14;
export const PSINJECT_ENDPROLOG = 15;
export const PSINJECT_BEGINSETUP = 16;
export const PSINJECT_ENDSETUP = 17;
export const PSINJECT_TRAILER = 18;
export const PSINJECT_EOF = 19;
export const PSINJECT_ENDSTREAM = 20;
export const PSINJECT_DOCUMENTPROCESSCOLORSATEND = 21;
export const PSINJECT_PAGENUMBER = 100;
export const PSINJECT_BEGINPAGESETUP = 101;
export const PSINJECT_ENDPAGESETUP = 102;
export const PSINJECT_PAGETRAILER = 103;
export const PSINJECT_PLATECOLOR = 104;
export const PSINJECT_SHOWPAGE = 105;
export const PSINJECT_PAGEBBOX = 106;
export const PSINJECT_ENDPAGECOMMENTS = 107;
export const PSINJECT_VMSAVE = 200;
export const PSINJECT_VMRESTORE = 201;
export const XPS_TILE_MODE_NONE = 1;
export const XPS_TILE_MODE_TILE = 2;
export const XPS_TILE_MODE_FLIPX = 3;
export const XPS_TILE_MODE_FLIPY = 4;
export const XPS_TILE_MODE_FLIPXY = 5;
export const XPS_COLOR_INTERPOLATION_SCRGBLINEAR = 1;
export const XPS_COLOR_INTERPOLATION_SRGBLINEAR = 2;
export const XPS_SPREAD_METHOD_PAD = 1;
export const XPS_SPREAD_METHOD_REFLECT = 2;
export const XPS_SPREAD_METHOD_REPEAT = 3;
export const XPS_STYLE_SIMULATION_NONE = 1;
export const XPS_STYLE_SIMULATION_ITALIC = 2;
export const XPS_STYLE_SIMULATION_BOLD = 3;
export const XPS_STYLE_SIMULATION_BOLDITALIC = 4;
export const XPS_LINE_CAP_FLAT = 1;
export const XPS_LINE_CAP_ROUND = 2;
export const XPS_LINE_CAP_SQUARE = 3;
export const XPS_LINE_CAP_TRIANGLE = 4;
export const XPS_DASH_CAP_FLAT = 1;
export const XPS_DASH_CAP_ROUND = 2;
export const XPS_DASH_CAP_SQUARE = 3;
export const XPS_DASH_CAP_TRIANGLE = 4;
export const XPS_LINE_JOIN_MITER = 1;
export const XPS_LINE_JOIN_BEVEL = 2;
export const XPS_LINE_JOIN_ROUND = 3;
export const XPS_IMAGE_TYPE_JPEG = 1;
export const XPS_IMAGE_TYPE_PNG = 2;
export const XPS_IMAGE_TYPE_TIFF = 3;
export const XPS_IMAGE_TYPE_WDP = 4;
export const XPS_IMAGE_TYPE_JXR = 5;
export const XPS_COLOR_TYPE_SRGB = 1;
export const XPS_COLOR_TYPE_SCRGB = 2;
export const XPS_COLOR_TYPE_CONTEXT = 3;
export const XPS_FILL_RULE_EVENODD = 1;
export const XPS_FILL_RULE_NONZERO = 2;
export const XPS_SEGMENT_TYPE_ARC_LARGE_CLOCKWISE = 1;
export const XPS_SEGMENT_TYPE_ARC_LARGE_COUNTERCLOCKWISE = 2;
export const XPS_SEGMENT_TYPE_ARC_SMALL_CLOCKWISE = 3;
export const XPS_SEGMENT_TYPE_ARC_SMALL_COUNTERCLOCKWISE = 4;
export const XPS_SEGMENT_TYPE_BEZIER = 5;
export const XPS_SEGMENT_TYPE_LINE = 6;
export const XPS_SEGMENT_TYPE_QUADRATIC_BEZIER = 7;
export const XPS_SEGMENT_STROKE_PATTERN_ALL = 1;
export const XPS_SEGMENT_STROKE_PATTERN_NONE = 2;
export const XPS_SEGMENT_STROKE_PATTERN_MIXED = 3;
export const XPS_FONT_EMBEDDING_NORMAL = 1;
export const XPS_FONT_EMBEDDING_OBFUSCATED = 2;
export const XPS_FONT_EMBEDDING_RESTRICTED = 3;
export const XPS_FONT_EMBEDDING_RESTRICTED_UNOBFUSCATED = 4;
export const XPS_OBJECT_TYPE_CANVAS = 1;
export const XPS_OBJECT_TYPE_GLYPHS = 2;
export const XPS_OBJECT_TYPE_PATH = 3;
export const XPS_OBJECT_TYPE_MATRIX_TRANSFORM = 4;
export const XPS_OBJECT_TYPE_GEOMETRY = 5;
export const XPS_OBJECT_TYPE_SOLID_COLOR_BRUSH = 6;
export const XPS_OBJECT_TYPE_IMAGE_BRUSH = 7;
export const XPS_OBJECT_TYPE_LINEAR_GRADIENT_BRUSH = 8;
export const XPS_OBJECT_TYPE_RADIAL_GRADIENT_BRUSH = 9;
export const XPS_OBJECT_TYPE_VISUAL_BRUSH = 10;
export const XPS_THUMBNAIL_SIZE_VERYSMALL = 1;
export const XPS_THUMBNAIL_SIZE_SMALL = 2;
export const XPS_THUMBNAIL_SIZE_MEDIUM = 3;
export const XPS_THUMBNAIL_SIZE_LARGE = 4;
export const XPS_INTERLEAVING_OFF = 1;
export const XPS_INTERLEAVING_ON = 2;
export const XPS_DOCUMENT_TYPE_UNSPECIFIED = 1;
export const XPS_DOCUMENT_TYPE_XPS = 2;
export const XPS_DOCUMENT_TYPE_OPENXPS = 3;
export const XPS_SIGNATURE_STATUS_INCOMPLIANT = 1;
export const XPS_SIGNATURE_STATUS_INCOMPLETE = 2;
export const XPS_SIGNATURE_STATUS_BROKEN = 3;
export const XPS_SIGNATURE_STATUS_QUESTIONABLE = 4;
export const XPS_SIGNATURE_STATUS_VALID = 5;
export const XPS_SIGN_POLICY_NONE = 0;
export const XPS_SIGN_POLICY_CORE_PROPERTIES = 1;
export const XPS_SIGN_POLICY_SIGNATURE_RELATIONSHIPS = 2;
export const XPS_SIGN_POLICY_PRINT_TICKET = 4;
export const XPS_SIGN_POLICY_DISCARD_CONTROL = 8;
export const XPS_SIGN_POLICY_ALL = 15;
export const XPS_SIGN_FLAGS_NONE = 0;
export const XPS_SIGN_FLAGS_IGNORE_MARKUP_COMPATIBILITY = 1;
export const XPS_JOB_IN_PROGRESS = 0;
export const XPS_JOB_COMPLETED = 1;
export const XPS_JOB_CANCELLED = 2;
export const XPS_JOB_FAILED = 3;
export const PrintDocumentPackageCompletion_InProgress = 0;
export const PrintDocumentPackageCompletion_Completed = 1;
export const PrintDocumentPackageCompletion_Canceled = 2;
export const PrintDocumentPackageCompletion_Failed = 3;

// Structs

export type HPTPROVIDER = Deno.PointerValue;

/**
 * Windows.Win32.Foundation.POINT (size: 8)
 */
export interface POINT {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
}

export const sizeofPOINT = 8;

export function allocPOINT(data?: Partial<POINT>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  return buf;
}

export class POINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get x(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get y(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set x(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set y(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Storage.Xps.DRAWPATRECT (size: 24)
 */
export interface DRAWPATRECT {
  /** Windows.Win32.Foundation.POINT */
  ptPosition: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINT */
  ptSize: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wStyle: number;
  /** u16 */
  wPattern: number;
}

export const sizeofDRAWPATRECT = 24;

export function allocDRAWPATRECT(data?: Partial<DRAWPATRECT>): Uint8Array {
  const buf = new Uint8Array(sizeofDRAWPATRECT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ptPosition !== undefined) view.setBigUint64(0, data.ptPosition === null ? 0n : BigInt(util.toPointer(data.ptPosition)), true);
  // 0x08: pointer
  if (data?.ptSize !== undefined) view.setBigUint64(8, data.ptSize === null ? 0n : BigInt(util.toPointer(data.ptSize)), true);
  // 0x10: u16
  if (data?.wStyle !== undefined) view.setUint16(16, Number(data.wStyle), true);
  // 0x12: u16
  if (data?.wPattern !== undefined) view.setUint16(18, Number(data.wPattern), true);
  // 0x14: pad4
  return buf;
}

export class DRAWPATRECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ptPosition(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get ptSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u16
  get wStyle(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get wPattern(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set ptPosition(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set ptSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u16
  set wStyle(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set wPattern(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Storage.Xps.PSINJECTDATA (size: 8)
 */
export interface PSINJECTDATA {
  /** u32 */
  DataBytes: number;
  /** Windows.Win32.Storage.Xps.PSINJECT_POINT */
  InjectionPoint: PSINJECT_POINT;
  /** u16 */
  PageNumber: number;
}

export const sizeofPSINJECTDATA = 8;

export function allocPSINJECTDATA(data?: Partial<PSINJECTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPSINJECTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DataBytes !== undefined) view.setUint32(0, Number(data.DataBytes), true);
  // 0x04: u16
  if (data?.InjectionPoint !== undefined) view.setUint16(4, Number(data.InjectionPoint), true);
  // 0x06: u16
  if (data?.PageNumber !== undefined) view.setUint16(6, Number(data.PageNumber), true);
  return buf;
}

export class PSINJECTDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DataBytes(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get InjectionPoint(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get PageNumber(): number {
    return this.view.getUint16(6, true);
  }

  // 0x00: u32
  set DataBytes(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set InjectionPoint(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set PageNumber(value: number) {
    this.view.setUint16(6, value, true);
  }
}

export type BOOL = number;

/**
 * Windows.Win32.Storage.Xps.PSFEATURE_OUTPUT (size: 8)
 */
export interface PSFEATURE_OUTPUT {
  /** Windows.Win32.Foundation.BOOL */
  bPageIndependent: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bSetPageDevice: boolean;
}

export const sizeofPSFEATURE_OUTPUT = 8;

export function allocPSFEATURE_OUTPUT(data?: Partial<PSFEATURE_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofPSFEATURE_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.bPageIndependent !== undefined) view.setInt32(0, Number(data.bPageIndependent), true);
  // 0x04: i32
  if (data?.bSetPageDevice !== undefined) view.setInt32(4, Number(data.bSetPageDevice), true);
  return buf;
}

export class PSFEATURE_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get bPageIndependent(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get bSetPageDevice(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set bPageIndependent(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set bSetPageDevice(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Storage.Xps.PSFEATURE_CUSTPAPER (size: 24)
 */
export interface PSFEATURE_CUSTPAPER {
  /** i32 */
  lOrientation: number;
  /** i32 */
  lWidth: number;
  /** i32 */
  lHeight: number;
  /** i32 */
  lWidthOffset: number;
  /** i32 */
  lHeightOffset: number;
}

export const sizeofPSFEATURE_CUSTPAPER = 24;

export function allocPSFEATURE_CUSTPAPER(data?: Partial<PSFEATURE_CUSTPAPER>): Uint8Array {
  const buf = new Uint8Array(sizeofPSFEATURE_CUSTPAPER);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lOrientation !== undefined) view.setInt32(0, Number(data.lOrientation), true);
  // 0x04: i32
  if (data?.lWidth !== undefined) view.setInt32(4, Number(data.lWidth), true);
  // 0x08: i32
  if (data?.lHeight !== undefined) view.setInt32(8, Number(data.lHeight), true);
  // 0x0c: i32
  if (data?.lWidthOffset !== undefined) view.setInt32(12, Number(data.lWidthOffset), true);
  // 0x10: i32
  if (data?.lHeightOffset !== undefined) view.setInt32(16, Number(data.lHeightOffset), true);
  // 0x14: pad4
  return buf;
}

export class PSFEATURE_CUSTPAPERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lOrientation(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get lWidth(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get lHeight(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get lWidthOffset(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get lHeightOffset(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set lOrientation(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set lWidth(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set lHeight(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set lWidthOffset(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set lHeightOffset(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Storage.Xps.DOCINFOA (size: 40)
 */
export interface DOCINFOA {
  /** i32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PSTR */
  lpszDocName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpszOutput: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpszDatatype: string | null | Uint8Array;
  /** u32 */
  fwType: number;
}

export const sizeofDOCINFOA = 40;

export function allocDOCINFOA(data?: Partial<DOCINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofDOCINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbSize !== undefined) view.setInt32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpszDocName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpszDocName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpszOutput !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpszOutput);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpszDatatype !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpszDatatype);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.fwType !== undefined) view.setUint32(32, Number(data.fwType), true);
  // 0x24: pad4
  return buf;
}

export class DOCINFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cbSize(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get lpszDocName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get lpszOutput(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get lpszDatatype(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get fwType(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: i32
  set cbSize(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set lpszDocName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set lpszOutput(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set lpszDatatype(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: u32
  set fwType(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Storage.Xps.DOCINFOW (size: 40)
 */
export interface DOCINFOW {
  /** i32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszDocName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpszOutput: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpszDatatype: string | null | Uint8Array | Uint16Array;
  /** u32 */
  fwType: number;
}

export const sizeofDOCINFOW = 40;

export function allocDOCINFOW(data?: Partial<DOCINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofDOCINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbSize !== undefined) view.setInt32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpszDocName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpszDocName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpszOutput !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpszOutput);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpszDatatype !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpszDatatype);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.fwType !== undefined) view.setUint32(32, Number(data.fwType), true);
  // 0x24: pad4
  return buf;
}

export class DOCINFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cbSize(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get lpszDocName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get lpszOutput(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get lpszDatatype(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get fwType(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: i32
  set cbSize(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set lpszDocName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set lpszOutput(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set lpszDatatype(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: u32
  set fwType(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Storage.Xps.XPS_POINT (size: 8)
 */
export interface XPS_POINT {
  /** f32 */
  x: number;
  /** f32 */
  y: number;
}

export const sizeofXPS_POINT = 8;

export function allocXPS_POINT(data?: Partial<XPS_POINT>): Uint8Array {
  const buf = new Uint8Array(sizeofXPS_POINT);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.x !== undefined) view.setFloat32(0, Number(data.x), true);
  // 0x04: f32
  if (data?.y !== undefined) view.setFloat32(4, Number(data.y), true);
  return buf;
}

export class XPS_POINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get x(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get y(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x00: f32
  set x(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set y(value: number) {
    this.view.setFloat32(4, value, true);
  }
}

/**
 * Windows.Win32.Storage.Xps.XPS_SIZE (size: 8)
 */
export interface XPS_SIZE {
  /** f32 */
  width: number;
  /** f32 */
  height: number;
}

export const sizeofXPS_SIZE = 8;

export function allocXPS_SIZE(data?: Partial<XPS_SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofXPS_SIZE);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.width !== undefined) view.setFloat32(0, Number(data.width), true);
  // 0x04: f32
  if (data?.height !== undefined) view.setFloat32(4, Number(data.height), true);
  return buf;
}

export class XPS_SIZEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get width(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get height(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x00: f32
  set width(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set height(value: number) {
    this.view.setFloat32(4, value, true);
  }
}

/**
 * Windows.Win32.Storage.Xps.XPS_RECT (size: 16)
 */
export interface XPS_RECT {
  /** f32 */
  x: number;
  /** f32 */
  y: number;
  /** f32 */
  width: number;
  /** f32 */
  height: number;
}

export const sizeofXPS_RECT = 16;

export function allocXPS_RECT(data?: Partial<XPS_RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofXPS_RECT);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.x !== undefined) view.setFloat32(0, Number(data.x), true);
  // 0x04: f32
  if (data?.y !== undefined) view.setFloat32(4, Number(data.y), true);
  // 0x08: f32
  if (data?.width !== undefined) view.setFloat32(8, Number(data.width), true);
  // 0x0c: f32
  if (data?.height !== undefined) view.setFloat32(12, Number(data.height), true);
  return buf;
}

export class XPS_RECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get x(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get y(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get width(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get height(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: f32
  set x(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set y(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set width(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set height(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Storage.Xps.XPS_DASH (size: 8)
 */
export interface XPS_DASH {
  /** f32 */
  length: number;
  /** f32 */
  gap: number;
}

export const sizeofXPS_DASH = 8;

export function allocXPS_DASH(data?: Partial<XPS_DASH>): Uint8Array {
  const buf = new Uint8Array(sizeofXPS_DASH);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.length !== undefined) view.setFloat32(0, Number(data.length), true);
  // 0x04: f32
  if (data?.gap !== undefined) view.setFloat32(4, Number(data.gap), true);
  return buf;
}

export class XPS_DASHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get length(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get gap(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x00: f32
  set length(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set gap(value: number) {
    this.view.setFloat32(4, value, true);
  }
}

/**
 * Windows.Win32.Storage.Xps.XPS_GLYPH_INDEX (size: 16)
 */
export interface XPS_GLYPH_INDEX {
  /** i32 */
  index: number;
  /** f32 */
  advanceWidth: number;
  /** f32 */
  horizontalOffset: number;
  /** f32 */
  verticalOffset: number;
}

export const sizeofXPS_GLYPH_INDEX = 16;

export function allocXPS_GLYPH_INDEX(data?: Partial<XPS_GLYPH_INDEX>): Uint8Array {
  const buf = new Uint8Array(sizeofXPS_GLYPH_INDEX);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.index !== undefined) view.setInt32(0, Number(data.index), true);
  // 0x04: f32
  if (data?.advanceWidth !== undefined) view.setFloat32(4, Number(data.advanceWidth), true);
  // 0x08: f32
  if (data?.horizontalOffset !== undefined) view.setFloat32(8, Number(data.horizontalOffset), true);
  // 0x0c: f32
  if (data?.verticalOffset !== undefined) view.setFloat32(12, Number(data.verticalOffset), true);
  return buf;
}

export class XPS_GLYPH_INDEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get index(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: f32
  get advanceWidth(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get horizontalOffset(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get verticalOffset(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: i32
  set index(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: f32
  set advanceWidth(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set horizontalOffset(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set verticalOffset(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Storage.Xps.XPS_GLYPH_MAPPING (size: 16)
 */
export interface XPS_GLYPH_MAPPING {
  /** u32 */
  unicodeStringStart: number;
  /** u16 */
  unicodeStringLength: number;
  /** u32 */
  glyphIndicesStart: number;
  /** u16 */
  glyphIndicesLength: number;
}

export const sizeofXPS_GLYPH_MAPPING = 16;

export function allocXPS_GLYPH_MAPPING(data?: Partial<XPS_GLYPH_MAPPING>): Uint8Array {
  const buf = new Uint8Array(sizeofXPS_GLYPH_MAPPING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.unicodeStringStart !== undefined) view.setUint32(0, Number(data.unicodeStringStart), true);
  // 0x04: u16
  if (data?.unicodeStringLength !== undefined) view.setUint16(4, Number(data.unicodeStringLength), true);
  // 0x06: u32
  if (data?.glyphIndicesStart !== undefined) view.setUint32(6, Number(data.glyphIndicesStart), true);
  // 0x0a: u16
  if (data?.glyphIndicesLength !== undefined) view.setUint16(10, Number(data.glyphIndicesLength), true);
  // 0x0c: pad4
  return buf;
}

export class XPS_GLYPH_MAPPINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get unicodeStringStart(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get unicodeStringLength(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u32
  get glyphIndicesStart(): number {
    return this.view.getUint32(6, true);
  }

  // 0x0a: u16
  get glyphIndicesLength(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set unicodeStringStart(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set unicodeStringLength(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u32
  set glyphIndicesStart(value: number) {
    this.view.setUint32(6, value, true);
  }

  // 0x0a: u16
  set glyphIndicesLength(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Storage.Xps.XPS_MATRIX (size: 24)
 */
export interface XPS_MATRIX {
  /** f32 */
  m11: number;
  /** f32 */
  m12: number;
  /** f32 */
  m21: number;
  /** f32 */
  m22: number;
  /** f32 */
  m31: number;
  /** f32 */
  m32: number;
}

export const sizeofXPS_MATRIX = 24;

export function allocXPS_MATRIX(data?: Partial<XPS_MATRIX>): Uint8Array {
  const buf = new Uint8Array(sizeofXPS_MATRIX);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.m11 !== undefined) view.setFloat32(0, Number(data.m11), true);
  // 0x04: f32
  if (data?.m12 !== undefined) view.setFloat32(4, Number(data.m12), true);
  // 0x08: f32
  if (data?.m21 !== undefined) view.setFloat32(8, Number(data.m21), true);
  // 0x0c: f32
  if (data?.m22 !== undefined) view.setFloat32(12, Number(data.m22), true);
  // 0x10: f32
  if (data?.m31 !== undefined) view.setFloat32(16, Number(data.m31), true);
  // 0x14: f32
  if (data?.m32 !== undefined) view.setFloat32(20, Number(data.m32), true);
  return buf;
}

export class XPS_MATRIXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get m11(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get m12(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get m21(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get m22(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get m31(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get m32(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x00: f32
  set m11(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set m12(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set m21(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set m22(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set m31(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set m32(value: number) {
    this.view.setFloat32(20, value, true);
  }
}

/**
 * _sRGB_e__Struct (size: 8)
 */
export interface _sRGB_e__Struct {
  /** u8 */
  alpha: number;
  /** u8 */
  red: number;
  /** u8 */
  green: number;
  /** u8 */
  blue: number;
}

export const sizeof_sRGB_e__Struct = 8;

export function alloc_sRGB_e__Struct(data?: Partial<_sRGB_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_sRGB_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.alpha !== undefined) view.setUint8(0, Number(data.alpha));
  // 0x01: u8
  if (data?.red !== undefined) view.setUint8(1, Number(data.red));
  // 0x02: u8
  if (data?.green !== undefined) view.setUint8(2, Number(data.green));
  // 0x03: u8
  if (data?.blue !== undefined) view.setUint8(3, Number(data.blue));
  // 0x04: pad4
  return buf;
}

export class _sRGB_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get alpha(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get red(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get green(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get blue(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: u8
  set alpha(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set red(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set green(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set blue(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

/**
 * _scRGB_e__Struct (size: 16)
 */
export interface _scRGB_e__Struct {
  /** f32 */
  alpha: number;
  /** f32 */
  red: number;
  /** f32 */
  green: number;
  /** f32 */
  blue: number;
}

export const sizeof_scRGB_e__Struct = 16;

export function alloc_scRGB_e__Struct(data?: Partial<_scRGB_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_scRGB_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.alpha !== undefined) view.setFloat32(0, Number(data.alpha), true);
  // 0x04: f32
  if (data?.red !== undefined) view.setFloat32(4, Number(data.red), true);
  // 0x08: f32
  if (data?.green !== undefined) view.setFloat32(8, Number(data.green), true);
  // 0x0c: f32
  if (data?.blue !== undefined) view.setFloat32(12, Number(data.blue), true);
  return buf;
}

export class _scRGB_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get alpha(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get red(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get green(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get blue(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: f32
  set alpha(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set red(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set green(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set blue(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * _context_e__Struct (size: 16)
 */
export interface _context_e__Struct {
  /** u8 */
  channelCount: number;
  /** array */
  channels: Deno.PointerValue | null;
}

export const sizeof_context_e__Struct = 16;

export function alloc_context_e__Struct(data?: Partial<_context_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_context_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.channelCount !== undefined) view.setUint8(0, Number(data.channelCount));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.channels !== undefined) view.setBigUint64(8, data.channels === null ? 0n : BigInt(util.toPointer(data.channels)), true);
  return buf;
}

export class _context_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get channelCount(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get channels(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set channelCount(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set channels(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * XPS_COLOR_VALUE (size: 24)
 */
export interface XPS_COLOR_VALUE {
  /** _sRGB_e__Struct */
  sRGB: Uint8Array | Deno.PointerValue | null;
  /** _scRGB_e__Struct */
  scRGB: Uint8Array | Deno.PointerValue | null;
  /** _context_e__Struct */
  context: Uint8Array | Deno.PointerValue | null;
}

export const sizeofXPS_COLOR_VALUE = 24;

export function allocXPS_COLOR_VALUE(data?: Partial<XPS_COLOR_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofXPS_COLOR_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sRGB !== undefined) view.setBigUint64(0, data.sRGB === null ? 0n : BigInt(util.toPointer(data.sRGB)), true);
  // 0x08: pointer
  if (data?.scRGB !== undefined) view.setBigUint64(8, data.scRGB === null ? 0n : BigInt(util.toPointer(data.scRGB)), true);
  // 0x10: pointer
  if (data?.context !== undefined) view.setBigUint64(16, data.context === null ? 0n : BigInt(util.toPointer(data.context)), true);
  return buf;
}

export class XPS_COLOR_VALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sRGB(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get scRGB(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get context(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set sRGB(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set scRGB(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set context(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Storage.Xps.XPS_COLOR (size: 16)
 */
export interface XPS_COLOR {
  /** Windows.Win32.Storage.Xps.XPS_COLOR_TYPE */
  colorType: XPS_COLOR_TYPE;
  /** XPS_COLOR_VALUE */
  value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofXPS_COLOR = 16;

export function allocXPS_COLOR(data?: Partial<XPS_COLOR>): Uint8Array {
  const buf = new Uint8Array(sizeofXPS_COLOR);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.colorType !== undefined) view.setInt32(0, Number(data.colorType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  return buf;
}

export class XPS_COLORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get colorType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set colorType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set value(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

export type HRESULT = number;

/**
 * Windows.Win32.Storage.Xps.Printing.XPS_JOB_STATUS (size: 32)
 */
export interface XPS_JOB_STATUS {
  /** u32 */
  jobId: number;
  /** i32 */
  currentDocument: number;
  /** i32 */
  currentPage: number;
  /** i32 */
  currentPageTotal: number;
  /** Windows.Win32.Storage.Xps.Printing.XPS_JOB_COMPLETION */
  completion: XPS_JOB_COMPLETION;
  /** Windows.Win32.Foundation.HRESULT */
  jobStatus: Uint8Array | Deno.PointerValue | null;
}

export const sizeofXPS_JOB_STATUS = 32;

export function allocXPS_JOB_STATUS(data?: Partial<XPS_JOB_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofXPS_JOB_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.jobId !== undefined) view.setUint32(0, Number(data.jobId), true);
  // 0x04: i32
  if (data?.currentDocument !== undefined) view.setInt32(4, Number(data.currentDocument), true);
  // 0x08: i32
  if (data?.currentPage !== undefined) view.setInt32(8, Number(data.currentPage), true);
  // 0x0c: i32
  if (data?.currentPageTotal !== undefined) view.setInt32(12, Number(data.currentPageTotal), true);
  // 0x10: i32
  if (data?.completion !== undefined) view.setInt32(16, Number(data.completion), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.jobStatus !== undefined) view.setBigUint64(24, data.jobStatus === null ? 0n : BigInt(util.toPointer(data.jobStatus)), true);
  return buf;
}

export class XPS_JOB_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get jobId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get currentDocument(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get currentPage(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get currentPageTotal(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get completion(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get jobStatus(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set jobId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set currentDocument(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set currentPage(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set currentPageTotal(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set completion(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set jobStatus(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Storage.Xps.Printing.PrintDocumentPackageStatus (size: 32)
 */
export interface PrintDocumentPackageStatus {
  /** u32 */
  JobId: number;
  /** i32 */
  CurrentDocument: number;
  /** i32 */
  CurrentPage: number;
  /** i32 */
  CurrentPageTotal: number;
  /** Windows.Win32.Storage.Xps.Printing.PrintDocumentPackageCompletion */
  Completion: PrintDocumentPackageCompletion;
  /** Windows.Win32.Foundation.HRESULT */
  PackageStatus: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPrintDocumentPackageStatus = 32;

export function allocPrintDocumentPackageStatus(data?: Partial<PrintDocumentPackageStatus>): Uint8Array {
  const buf = new Uint8Array(sizeofPrintDocumentPackageStatus);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.JobId !== undefined) view.setUint32(0, Number(data.JobId), true);
  // 0x04: i32
  if (data?.CurrentDocument !== undefined) view.setInt32(4, Number(data.CurrentDocument), true);
  // 0x08: i32
  if (data?.CurrentPage !== undefined) view.setInt32(8, Number(data.CurrentPage), true);
  // 0x0c: i32
  if (data?.CurrentPageTotal !== undefined) view.setInt32(12, Number(data.CurrentPageTotal), true);
  // 0x10: i32
  if (data?.Completion !== undefined) view.setInt32(16, Number(data.Completion), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.PackageStatus !== undefined) view.setBigUint64(24, data.PackageStatus === null ? 0n : BigInt(util.toPointer(data.PackageStatus)), true);
  return buf;
}

export class PrintDocumentPackageStatusView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get JobId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get CurrentDocument(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get CurrentPage(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get CurrentPageTotal(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get Completion(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get PackageStatus(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set JobId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set CurrentDocument(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set CurrentPage(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set CurrentPageTotal(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set Completion(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set PackageStatus(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

export type HDC = Deno.PointerValue;

export type HWND = Deno.PointerValue;

// Native Libraries

try {
  var libwinspool_drv = Deno.dlopen("winspool.drv", {
    DeviceCapabilitiesA: {
      parameters: ["buffer", "buffer", "u16", "buffer", "pointer"],
      result: "i32",
    },
    DeviceCapabilitiesW: {
      parameters: ["buffer", "buffer", "u16", "buffer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libGDI32_dll = Deno.dlopen("GDI32.dll", {
    Escape: {
      parameters: ["pointer", "i32", "i32", "buffer", "pointer"],
      result: "i32",
    },
    ExtEscape: {
      parameters: ["pointer", "i32", "i32", "buffer", "i32", "buffer"],
      result: "i32",
    },
    StartDocA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    StartDocW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    EndDoc: {
      parameters: ["pointer"],
      result: "i32",
    },
    StartPage: {
      parameters: ["pointer"],
      result: "i32",
    },
    EndPage: {
      parameters: ["pointer"],
      result: "i32",
    },
    AbortDoc: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetAbortProc: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libUSER32_dll = Deno.dlopen("USER32.dll", {
    PrintWindow: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function DeviceCapabilitiesA(
  pDevice: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pPort: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  fwCapability: DEVICE_CAPABILITIES /* Windows.Win32.Storage.Xps.DEVICE_CAPABILITIES */,
  pOutput: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pDevMode: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinspool_drv.DeviceCapabilitiesA(util.pstrToFfi(pDevice), util.pstrToFfi(pPort), fwCapability, util.pstrToFfi(pOutput), util.toPointer(pDevMode));
}

export function DeviceCapabilitiesW(
  pDevice: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pPort: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fwCapability: DEVICE_CAPABILITIES /* Windows.Win32.Storage.Xps.DEVICE_CAPABILITIES */,
  pOutput: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pDevMode: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinspool_drv.DeviceCapabilitiesW(util.pwstrToFfi(pDevice), util.pwstrToFfi(pPort), fwCapability, util.pwstrToFfi(pOutput), util.toPointer(pDevMode));
}

export function Escape(
  hdc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  iEscape: number /* i32 */,
  cjIn: number /* i32 */,
  pvIn: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pvOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libGDI32_dll.Escape(util.toPointer(hdc), iEscape, cjIn, util.pstrToFfi(pvIn), util.toPointer(pvOut));
}

export function ExtEscape(
  hdc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  iEscape: number /* i32 */,
  cjInput: number /* i32 */,
  lpInData: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cjOutput: number /* i32 */,
  lpOutData: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libGDI32_dll.ExtEscape(util.toPointer(hdc), iEscape, cjInput, util.pstrToFfi(lpInData), cjOutput, util.pstrToFfi(lpOutData));
}

export function StartDocA(
  hdc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  lpdi: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libGDI32_dll.StartDocA(util.toPointer(hdc), util.toPointer(lpdi));
}

export function StartDocW(
  hdc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  lpdi: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libGDI32_dll.StartDocW(util.toPointer(hdc), util.toPointer(lpdi));
}

export function EndDoc(
  hdc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
): number /* i32 */ {
  return libGDI32_dll.EndDoc(util.toPointer(hdc));
}

export function StartPage(
  hdc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
): number /* i32 */ {
  return libGDI32_dll.StartPage(util.toPointer(hdc));
}

export function EndPage(
  hdc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
): number /* i32 */ {
  return libGDI32_dll.EndPage(util.toPointer(hdc));
}

export function AbortDoc(
  hdc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
): number /* i32 */ {
  return libGDI32_dll.AbortDoc(util.toPointer(hdc));
}

export function SetAbortProc(
  hdc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  proc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Storage.Xps.ABORTPROC */,
): number /* i32 */ {
  return libGDI32_dll.SetAbortProc(util.toPointer(hdc), util.toPointer(proc));
}

export function PrintWindow(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  hdcBlt: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  nFlags: PRINT_WINDOW_FLAGS /* Windows.Win32.Storage.Xps.PRINT_WINDOW_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.PrintWindow(util.hwndToFfi(hwnd), util.toPointer(hdcBlt), nFlags));
}

