/// Auto-generated by Deno Win32: Windows.Win32.Storage.InstallableFileSystems.Apis

import * as util from "../../util.ts";

// Enums
export type FLT_FILESYSTEM_TYPE = number;
export type FILTER_INFORMATION_CLASS = number;
export type FILTER_VOLUME_INFORMATION_CLASS = number;
export type INSTANCE_INFORMATION_CLASS = number;

// Constants
export const FILTER_NAME_MAX_CHARS = 255;
export const VOLUME_NAME_MAX_CHARS = 1024;
export const INSTANCE_NAME_MAX_CHARS = 255;
export const FLTFL_AGGREGATE_INFO_IS_MINIFILTER = 1;
export const FLTFL_AGGREGATE_INFO_IS_LEGACYFILTER = 2;
export const FLTFL_ASI_IS_MINIFILTER = 1;
export const FLTFL_ASI_IS_LEGACYFILTER = 2;
export const FLTFL_VSI_DETACHED_VOLUME = 1;
export const FLTFL_IASI_IS_MINIFILTER = 1;
export const FLTFL_IASI_IS_LEGACYFILTER = 2;
export const FLTFL_IASIM_DETACHED_VOLUME = 1;
export const FLTFL_IASIL_DETACHED_VOLUME = 1;
export const FLT_PORT_FLAG_SYNC_HANDLE = 1;
export const WNNC_NET_MSNET = 65536;
export const WNNC_NET_SMB = 131072;
export const WNNC_NET_NETWARE = 196608;
export const WNNC_NET_VINES = 262144;
export const WNNC_NET_10NET = 327680;
export const WNNC_NET_LOCUS = 393216;
export const WNNC_NET_SUN_PC_NFS = 458752;
export const WNNC_NET_LANSTEP = 524288;
export const WNNC_NET_9TILES = 589824;
export const WNNC_NET_LANTASTIC = 655360;
export const WNNC_NET_AS400 = 720896;
export const WNNC_NET_FTP_NFS = 786432;
export const WNNC_NET_PATHWORKS = 851968;
export const WNNC_NET_LIFENET = 917504;
export const WNNC_NET_POWERLAN = 983040;
export const WNNC_NET_BWNFS = 1048576;
export const WNNC_NET_COGENT = 1114112;
export const WNNC_NET_FARALLON = 1179648;
export const WNNC_NET_APPLETALK = 1245184;
export const WNNC_NET_INTERGRAPH = 1310720;
export const WNNC_NET_SYMFONET = 1376256;
export const WNNC_NET_CLEARCASE = 1441792;
export const WNNC_NET_FRONTIER = 1507328;
export const WNNC_NET_BMC = 1572864;
export const WNNC_NET_DCE = 1638400;
export const WNNC_NET_AVID = 1703936;
export const WNNC_NET_DOCUSPACE = 1769472;
export const WNNC_NET_MANGOSOFT = 1835008;
export const WNNC_NET_SERNET = 1900544;
export const WNNC_NET_RIVERFRONT1 = 1966080;
export const WNNC_NET_RIVERFRONT2 = 2031616;
export const WNNC_NET_DECORB = 2097152;
export const WNNC_NET_PROTSTOR = 2162688;
export const WNNC_NET_FJ_REDIR = 2228224;
export const WNNC_NET_DISTINCT = 2293760;
export const WNNC_NET_TWINS = 2359296;
export const WNNC_NET_RDR2SAMPLE = 2424832;
export const WNNC_NET_CSC = 2490368;
export const WNNC_NET_3IN1 = 2555904;
export const WNNC_NET_EXTENDNET = 2686976;
export const WNNC_NET_STAC = 2752512;
export const WNNC_NET_FOXBAT = 2818048;
export const WNNC_NET_YAHOO = 2883584;
export const WNNC_NET_EXIFS = 2949120;
export const WNNC_NET_DAV = 3014656;
export const WNNC_NET_KNOWARE = 3080192;
export const WNNC_NET_OBJECT_DIRE = 3145728;
export const WNNC_NET_MASFAX = 3211264;
export const WNNC_NET_HOB_NFS = 3276800;
export const WNNC_NET_SHIVA = 3342336;
export const WNNC_NET_IBMAL = 3407872;
export const WNNC_NET_LOCK = 3473408;
export const WNNC_NET_TERMSRV = 3538944;
export const WNNC_NET_SRT = 3604480;
export const WNNC_NET_QUINCY = 3670016;
export const WNNC_NET_OPENAFS = 3735552;
export const WNNC_NET_AVID1 = 3801088;
export const WNNC_NET_DFS = 3866624;
export const WNNC_NET_KWNP = 3932160;
export const WNNC_NET_ZENWORKS = 3997696;
export const WNNC_NET_DRIVEONWEB = 4063232;
export const WNNC_NET_VMWARE = 4128768;
export const WNNC_NET_RSFX = 4194304;
export const WNNC_NET_MFILES = 4259840;
export const WNNC_NET_MS_NFS = 4325376;
export const WNNC_NET_GOOGLE = 4390912;
export const WNNC_NET_NDFS = 4456448;
export const WNNC_NET_DOCUSHARE = 4521984;
export const WNNC_NET_AURISTOR_FS = 4587520;
export const WNNC_NET_SECUREAGENT = 4653056;
export const WNNC_NET_9P = 4718592;
export const WNNC_CRED_MANAGER = 4294901760;
export const WNNC_NET_LANMAN = 131072;
export const FLT_FSTYPE_UNKNOWN = 0;
export const FLT_FSTYPE_RAW = 1;
export const FLT_FSTYPE_NTFS = 2;
export const FLT_FSTYPE_FAT = 3;
export const FLT_FSTYPE_CDFS = 4;
export const FLT_FSTYPE_UDFS = 5;
export const FLT_FSTYPE_LANMAN = 6;
export const FLT_FSTYPE_WEBDAV = 7;
export const FLT_FSTYPE_RDPDR = 8;
export const FLT_FSTYPE_NFS = 9;
export const FLT_FSTYPE_MS_NETWARE = 10;
export const FLT_FSTYPE_NETWARE = 11;
export const FLT_FSTYPE_BSUDF = 12;
export const FLT_FSTYPE_MUP = 13;
export const FLT_FSTYPE_RSFX = 14;
export const FLT_FSTYPE_ROXIO_UDF1 = 15;
export const FLT_FSTYPE_ROXIO_UDF2 = 16;
export const FLT_FSTYPE_ROXIO_UDF3 = 17;
export const FLT_FSTYPE_TACIT = 18;
export const FLT_FSTYPE_FS_REC = 19;
export const FLT_FSTYPE_INCD = 20;
export const FLT_FSTYPE_INCD_FAT = 21;
export const FLT_FSTYPE_EXFAT = 22;
export const FLT_FSTYPE_PSFS = 23;
export const FLT_FSTYPE_GPFS = 24;
export const FLT_FSTYPE_NPFS = 25;
export const FLT_FSTYPE_MSFS = 26;
export const FLT_FSTYPE_CSVFS = 27;
export const FLT_FSTYPE_REFS = 28;
export const FLT_FSTYPE_OPENAFS = 29;
export const FLT_FSTYPE_CIMFS = 30;
export const FilterFullInformation = 0;
export const FilterAggregateBasicInformation = 1;
export const FilterAggregateStandardInformation = 2;
export const FilterVolumeBasicInformation = 0;
export const FilterVolumeStandardInformation = 1;
export const InstanceBasicInformation = 0;
export const InstancePartialInformation = 1;
export const InstanceFullInformation = 2;
export const InstanceAggregateStandardInformation = 3;

// Structs

export type HFILTER = Deno.PointerValue;

export type HFILTER_INSTANCE = Deno.PointerValue;

export type FilterFindHandle = Deno.PointerValue;

export type FilterVolumeFindHandle = Deno.PointerValue;

export type FilterInstanceFindHandle = Deno.PointerValue;

export type FilterVolumeInstanceFindHandle = Deno.PointerValue;

/**
 * Windows.Win32.Storage.InstallableFileSystems.FILTER_FULL_INFORMATION (size: 24)
 */
export interface FILTER_FULL_INFORMATION {
  /** u32 */
  NextEntryOffset: number;
  /** u32 */
  FrameID: number;
  /** u32 */
  NumberOfInstances: number;
  /** u16 */
  FilterNameLength: number;
  /** array */
  FilterNameBuffer: Deno.PointerValue | null;
}

export const sizeofFILTER_FULL_INFORMATION = 24;

export function allocFILTER_FULL_INFORMATION(data?: Partial<FILTER_FULL_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofFILTER_FULL_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NextEntryOffset !== undefined) view.setUint32(0, Number(data.NextEntryOffset), true);
  // 0x04: u32
  if (data?.FrameID !== undefined) view.setUint32(4, Number(data.FrameID), true);
  // 0x08: u32
  if (data?.NumberOfInstances !== undefined) view.setUint32(8, Number(data.NumberOfInstances), true);
  // 0x0c: u16
  if (data?.FilterNameLength !== undefined) view.setUint16(12, Number(data.FilterNameLength), true);
  // 0x0e: pad2
  // 0x10: pointer
  if (data?.FilterNameBuffer !== undefined) view.setBigUint64(16, data.FilterNameBuffer === null ? 0n : BigInt(util.toPointer(data.FilterNameBuffer)), true);
  return buf;
}

/**
 * _MiniFilter_e__Struct (size: 16)
 */
export interface _MiniFilter_e__Struct {
  /** u32 */
  FrameID: number;
  /** u32 */
  NumberOfInstances: number;
  /** u16 */
  FilterNameLength: number;
  /** u16 */
  FilterNameBufferOffset: number;
  /** u16 */
  FilterAltitudeLength: number;
  /** u16 */
  FilterAltitudeBufferOffset: number;
}

export const sizeof_MiniFilter_e__Struct = 16;

export function alloc_MiniFilter_e__Struct(data?: Partial<_MiniFilter_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_MiniFilter_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FrameID !== undefined) view.setUint32(0, Number(data.FrameID), true);
  // 0x04: u32
  if (data?.NumberOfInstances !== undefined) view.setUint32(4, Number(data.NumberOfInstances), true);
  // 0x08: u16
  if (data?.FilterNameLength !== undefined) view.setUint16(8, Number(data.FilterNameLength), true);
  // 0x0a: u16
  if (data?.FilterNameBufferOffset !== undefined) view.setUint16(10, Number(data.FilterNameBufferOffset), true);
  // 0x0c: u16
  if (data?.FilterAltitudeLength !== undefined) view.setUint16(12, Number(data.FilterAltitudeLength), true);
  // 0x0e: u16
  if (data?.FilterAltitudeBufferOffset !== undefined) view.setUint16(14, Number(data.FilterAltitudeBufferOffset), true);
  return buf;
}

/**
 * _LegacyFilter_e__Struct (size: 8)
 */
export interface _LegacyFilter_e__Struct {
  /** u16 */
  FilterNameLength: number;
  /** u16 */
  FilterNameBufferOffset: number;
}

export const sizeof_LegacyFilter_e__Struct = 8;

export function alloc_LegacyFilter_e__Struct(data?: Partial<_LegacyFilter_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_LegacyFilter_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.FilterNameLength !== undefined) view.setUint16(0, Number(data.FilterNameLength), true);
  // 0x02: u16
  if (data?.FilterNameBufferOffset !== undefined) view.setUint16(2, Number(data.FilterNameBufferOffset), true);
  // 0x04: pad4
  return buf;
}

/**
 * _Type_e__Union (size: 16)
 */
export interface _Type_e__Union {
  /** _MiniFilter_e__Struct */
  MiniFilter: Uint8Array | Deno.PointerValue | null;
  /** _LegacyFilter_e__Struct */
  LegacyFilter: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Type_e__Union = 16;

export function alloc_Type_e__Union(data?: Partial<_Type_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Type_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.MiniFilter !== undefined) view.setBigUint64(0, data.MiniFilter === null ? 0n : BigInt(util.toPointer(data.MiniFilter)), true);
  // 0x08: pointer
  if (data?.LegacyFilter !== undefined) view.setBigUint64(8, data.LegacyFilter === null ? 0n : BigInt(util.toPointer(data.LegacyFilter)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.InstallableFileSystems.FILTER_AGGREGATE_BASIC_INFORMATION (size: 16)
 */
export interface FILTER_AGGREGATE_BASIC_INFORMATION {
  /** u32 */
  NextEntryOffset: number;
  /** u32 */
  Flags: number;
  /** _Type_e__Union */
  Type: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFILTER_AGGREGATE_BASIC_INFORMATION = 16;

export function allocFILTER_AGGREGATE_BASIC_INFORMATION(data?: Partial<FILTER_AGGREGATE_BASIC_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofFILTER_AGGREGATE_BASIC_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NextEntryOffset !== undefined) view.setUint32(0, Number(data.NextEntryOffset), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.Type !== undefined) view.setBigUint64(8, data.Type === null ? 0n : BigInt(util.toPointer(data.Type)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.InstallableFileSystems.FILTER_AGGREGATE_STANDARD_INFORMATION (size: 16)
 */
export interface FILTER_AGGREGATE_STANDARD_INFORMATION {
  /** u32 */
  NextEntryOffset: number;
  /** u32 */
  Flags: number;
  /** _Type_e__Union */
  Type: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFILTER_AGGREGATE_STANDARD_INFORMATION = 16;

export function allocFILTER_AGGREGATE_STANDARD_INFORMATION(data?: Partial<FILTER_AGGREGATE_STANDARD_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofFILTER_AGGREGATE_STANDARD_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NextEntryOffset !== undefined) view.setUint32(0, Number(data.NextEntryOffset), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.Type !== undefined) view.setBigUint64(8, data.Type === null ? 0n : BigInt(util.toPointer(data.Type)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.InstallableFileSystems.FILTER_VOLUME_BASIC_INFORMATION (size: 16)
 */
export interface FILTER_VOLUME_BASIC_INFORMATION {
  /** u16 */
  FilterVolumeNameLength: number;
  /** array */
  FilterVolumeName: Deno.PointerValue | null;
}

export const sizeofFILTER_VOLUME_BASIC_INFORMATION = 16;

export function allocFILTER_VOLUME_BASIC_INFORMATION(data?: Partial<FILTER_VOLUME_BASIC_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofFILTER_VOLUME_BASIC_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.FilterVolumeNameLength !== undefined) view.setUint16(0, Number(data.FilterVolumeNameLength), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.FilterVolumeName !== undefined) view.setBigUint64(8, data.FilterVolumeName === null ? 0n : BigInt(util.toPointer(data.FilterVolumeName)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.InstallableFileSystems.FILTER_VOLUME_STANDARD_INFORMATION (size: 32)
 */
export interface FILTER_VOLUME_STANDARD_INFORMATION {
  /** u32 */
  NextEntryOffset: number;
  /** u32 */
  Flags: number;
  /** u32 */
  FrameID: number;
  /** Windows.Win32.Storage.InstallableFileSystems.FLT_FILESYSTEM_TYPE */
  FileSystemType: FLT_FILESYSTEM_TYPE;
  /** u16 */
  FilterVolumeNameLength: number;
  /** array */
  FilterVolumeName: Deno.PointerValue | null;
}

export const sizeofFILTER_VOLUME_STANDARD_INFORMATION = 32;

export function allocFILTER_VOLUME_STANDARD_INFORMATION(data?: Partial<FILTER_VOLUME_STANDARD_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofFILTER_VOLUME_STANDARD_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NextEntryOffset !== undefined) view.setUint32(0, Number(data.NextEntryOffset), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.FrameID !== undefined) view.setUint32(8, Number(data.FrameID), true);
  // 0x0c: i32
  if (data?.FileSystemType !== undefined) view.setInt32(12, Number(data.FileSystemType), true);
  // 0x10: u16
  if (data?.FilterVolumeNameLength !== undefined) view.setUint16(16, Number(data.FilterVolumeNameLength), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.FilterVolumeName !== undefined) view.setBigUint64(24, data.FilterVolumeName === null ? 0n : BigInt(util.toPointer(data.FilterVolumeName)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.InstallableFileSystems.INSTANCE_BASIC_INFORMATION (size: 8)
 */
export interface INSTANCE_BASIC_INFORMATION {
  /** u32 */
  NextEntryOffset: number;
  /** u16 */
  InstanceNameLength: number;
  /** u16 */
  InstanceNameBufferOffset: number;
}

export const sizeofINSTANCE_BASIC_INFORMATION = 8;

export function allocINSTANCE_BASIC_INFORMATION(data?: Partial<INSTANCE_BASIC_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofINSTANCE_BASIC_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NextEntryOffset !== undefined) view.setUint32(0, Number(data.NextEntryOffset), true);
  // 0x04: u16
  if (data?.InstanceNameLength !== undefined) view.setUint16(4, Number(data.InstanceNameLength), true);
  // 0x06: u16
  if (data?.InstanceNameBufferOffset !== undefined) view.setUint16(6, Number(data.InstanceNameBufferOffset), true);
  return buf;
}

/**
 * Windows.Win32.Storage.InstallableFileSystems.INSTANCE_PARTIAL_INFORMATION (size: 16)
 */
export interface INSTANCE_PARTIAL_INFORMATION {
  /** u32 */
  NextEntryOffset: number;
  /** u16 */
  InstanceNameLength: number;
  /** u16 */
  InstanceNameBufferOffset: number;
  /** u16 */
  AltitudeLength: number;
  /** u16 */
  AltitudeBufferOffset: number;
}

export const sizeofINSTANCE_PARTIAL_INFORMATION = 16;

export function allocINSTANCE_PARTIAL_INFORMATION(data?: Partial<INSTANCE_PARTIAL_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofINSTANCE_PARTIAL_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NextEntryOffset !== undefined) view.setUint32(0, Number(data.NextEntryOffset), true);
  // 0x04: u16
  if (data?.InstanceNameLength !== undefined) view.setUint16(4, Number(data.InstanceNameLength), true);
  // 0x06: u16
  if (data?.InstanceNameBufferOffset !== undefined) view.setUint16(6, Number(data.InstanceNameBufferOffset), true);
  // 0x08: u16
  if (data?.AltitudeLength !== undefined) view.setUint16(8, Number(data.AltitudeLength), true);
  // 0x0a: u16
  if (data?.AltitudeBufferOffset !== undefined) view.setUint16(10, Number(data.AltitudeBufferOffset), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Storage.InstallableFileSystems.INSTANCE_FULL_INFORMATION (size: 24)
 */
export interface INSTANCE_FULL_INFORMATION {
  /** u32 */
  NextEntryOffset: number;
  /** u16 */
  InstanceNameLength: number;
  /** u16 */
  InstanceNameBufferOffset: number;
  /** u16 */
  AltitudeLength: number;
  /** u16 */
  AltitudeBufferOffset: number;
  /** u16 */
  VolumeNameLength: number;
  /** u16 */
  VolumeNameBufferOffset: number;
  /** u16 */
  FilterNameLength: number;
  /** u16 */
  FilterNameBufferOffset: number;
}

export const sizeofINSTANCE_FULL_INFORMATION = 24;

export function allocINSTANCE_FULL_INFORMATION(data?: Partial<INSTANCE_FULL_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofINSTANCE_FULL_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NextEntryOffset !== undefined) view.setUint32(0, Number(data.NextEntryOffset), true);
  // 0x04: u16
  if (data?.InstanceNameLength !== undefined) view.setUint16(4, Number(data.InstanceNameLength), true);
  // 0x06: u16
  if (data?.InstanceNameBufferOffset !== undefined) view.setUint16(6, Number(data.InstanceNameBufferOffset), true);
  // 0x08: u16
  if (data?.AltitudeLength !== undefined) view.setUint16(8, Number(data.AltitudeLength), true);
  // 0x0a: u16
  if (data?.AltitudeBufferOffset !== undefined) view.setUint16(10, Number(data.AltitudeBufferOffset), true);
  // 0x0c: u16
  if (data?.VolumeNameLength !== undefined) view.setUint16(12, Number(data.VolumeNameLength), true);
  // 0x0e: u16
  if (data?.VolumeNameBufferOffset !== undefined) view.setUint16(14, Number(data.VolumeNameBufferOffset), true);
  // 0x10: u16
  if (data?.FilterNameLength !== undefined) view.setUint16(16, Number(data.FilterNameLength), true);
  // 0x12: u16
  if (data?.FilterNameBufferOffset !== undefined) view.setUint16(18, Number(data.FilterNameBufferOffset), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Storage.InstallableFileSystems.INSTANCE_AGGREGATE_STANDARD_INFORMATION (size: 16)
 */
export interface INSTANCE_AGGREGATE_STANDARD_INFORMATION {
  /** u32 */
  NextEntryOffset: number;
  /** u32 */
  Flags: number;
  /** _Type_e__Union */
  Type: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINSTANCE_AGGREGATE_STANDARD_INFORMATION = 16;

export function allocINSTANCE_AGGREGATE_STANDARD_INFORMATION(data?: Partial<INSTANCE_AGGREGATE_STANDARD_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofINSTANCE_AGGREGATE_STANDARD_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NextEntryOffset !== undefined) view.setUint32(0, Number(data.NextEntryOffset), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.Type !== undefined) view.setBigUint64(8, data.Type === null ? 0n : BigInt(util.toPointer(data.Type)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.InstallableFileSystems.FILTER_MESSAGE_HEADER (size: 16)
 */
export interface FILTER_MESSAGE_HEADER {
  /** u32 */
  ReplyLength: number;
  /** u64 */
  MessageId: Deno.PointerValue;
}

export const sizeofFILTER_MESSAGE_HEADER = 16;

export function allocFILTER_MESSAGE_HEADER(data?: Partial<FILTER_MESSAGE_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofFILTER_MESSAGE_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ReplyLength !== undefined) view.setUint32(0, Number(data.ReplyLength), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.MessageId !== undefined) view.setBigUint64(8, BigInt(data.MessageId), true);
  return buf;
}

export type NTSTATUS = number;

/**
 * Windows.Win32.Storage.InstallableFileSystems.FILTER_REPLY_HEADER (size: 16)
 */
export interface FILTER_REPLY_HEADER {
  /** Windows.Win32.Foundation.NTSTATUS */
  Status: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  MessageId: Deno.PointerValue;
}

export const sizeofFILTER_REPLY_HEADER = 16;

export function allocFILTER_REPLY_HEADER(data?: Partial<FILTER_REPLY_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofFILTER_REPLY_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Status !== undefined) view.setBigUint64(0, data.Status === null ? 0n : BigInt(util.toPointer(data.Status)), true);
  // 0x08: u64
  if (data?.MessageId !== undefined) view.setBigUint64(8, BigInt(data.MessageId), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

export type HRESULT = number;

export type HANDLE = Deno.PointerValue;

// Native Libraries

try {
  var libFLTLIB = Deno.dlopen("FLTLIB", {
    FilterLoad: {
      parameters: ["buffer"],
      result: "pointer",
    },
    FilterUnload: {
      parameters: ["buffer"],
      result: "pointer",
    },
    FilterCreate: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    FilterClose: {
      parameters: ["pointer"],
      result: "pointer",
    },
    FilterInstanceCreate: {
      parameters: ["buffer", "buffer", "buffer", "pointer"],
      result: "pointer",
    },
    FilterInstanceClose: {
      parameters: ["pointer"],
      result: "pointer",
    },
    FilterAttach: {
      parameters: ["buffer", "buffer", "buffer", "u32", "buffer"],
      result: "pointer",
    },
    FilterAttachAtAltitude: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "u32", "buffer"],
      result: "pointer",
    },
    FilterDetach: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "pointer",
    },
    FilterFindFirst: {
      parameters: ["i32", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    FilterFindNext: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    FilterFindClose: {
      parameters: ["pointer"],
      result: "pointer",
    },
    FilterVolumeFindFirst: {
      parameters: ["i32", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    FilterVolumeFindNext: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    FilterVolumeFindClose: {
      parameters: ["pointer"],
      result: "pointer",
    },
    FilterInstanceFindFirst: {
      parameters: ["buffer", "i32", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    FilterInstanceFindNext: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    FilterInstanceFindClose: {
      parameters: ["pointer"],
      result: "pointer",
    },
    FilterVolumeInstanceFindFirst: {
      parameters: ["buffer", "i32", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    FilterVolumeInstanceFindNext: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    FilterVolumeInstanceFindClose: {
      parameters: ["pointer"],
      result: "pointer",
    },
    FilterGetInformation: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    FilterInstanceGetInformation: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    FilterConnectCommunicationPort: {
      parameters: ["buffer", "u32", "pointer", "u16", "pointer", "pointer"],
      result: "pointer",
    },
    FilterSendMessage: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    FilterGetMessage: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    FilterReplyMessage: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    FilterGetDosName: {
      parameters: ["buffer", "buffer", "u32"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function FilterLoad(
  lpFilterName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterLoad(util.pwstrToFfi(lpFilterName)));
}

export function FilterUnload(
  lpFilterName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterUnload(util.pwstrToFfi(lpFilterName)));
}

export function FilterCreate(
  lpFilterName: string | null /* Windows.Win32.Foundation.PWSTR */,
  hFilter: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterCreate(util.pwstrToFfi(lpFilterName), util.toPointer(hFilter)));
}

export function FilterClose(
  hFilter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Storage.InstallableFileSystems.HFILTER */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterClose(util.toPointer(hFilter)));
}

export function FilterInstanceCreate(
  lpFilterName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpVolumeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpInstanceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  hInstance: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterInstanceCreate(util.pwstrToFfi(lpFilterName), util.pwstrToFfi(lpVolumeName), util.pwstrToFfi(lpInstanceName), util.toPointer(hInstance)));
}

export function FilterInstanceClose(
  hInstance: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Storage.InstallableFileSystems.HFILTER_INSTANCE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterInstanceClose(util.toPointer(hInstance)));
}

export function FilterAttach(
  lpFilterName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpVolumeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpInstanceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwCreatedInstanceNameLength: number /* u32 */,
  lpCreatedInstanceName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterAttach(util.pwstrToFfi(lpFilterName), util.pwstrToFfi(lpVolumeName), util.pwstrToFfi(lpInstanceName), dwCreatedInstanceNameLength, util.pwstrToFfi(lpCreatedInstanceName)));
}

export function FilterAttachAtAltitude(
  lpFilterName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpVolumeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpAltitude: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpInstanceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwCreatedInstanceNameLength: number /* u32 */,
  lpCreatedInstanceName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterAttachAtAltitude(util.pwstrToFfi(lpFilterName), util.pwstrToFfi(lpVolumeName), util.pwstrToFfi(lpAltitude), util.pwstrToFfi(lpInstanceName), dwCreatedInstanceNameLength, util.pwstrToFfi(lpCreatedInstanceName)));
}

export function FilterDetach(
  lpFilterName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpVolumeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpInstanceName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterDetach(util.pwstrToFfi(lpFilterName), util.pwstrToFfi(lpVolumeName), util.pwstrToFfi(lpInstanceName)));
}

export function FilterFindFirst(
  dwInformationClass: FILTER_INFORMATION_CLASS /* Windows.Win32.Storage.InstallableFileSystems.FILTER_INFORMATION_CLASS */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferSize: number /* u32 */,
  lpBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpFilterFind: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterFindFirst(dwInformationClass, util.toPointer(lpBuffer), dwBufferSize, util.toPointer(lpBytesReturned), util.toPointer(lpFilterFind)));
}

export function FilterFindNext(
  hFilterFind: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwInformationClass: FILTER_INFORMATION_CLASS /* Windows.Win32.Storage.InstallableFileSystems.FILTER_INFORMATION_CLASS */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferSize: number /* u32 */,
  lpBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterFindNext(util.toPointer(hFilterFind), dwInformationClass, util.toPointer(lpBuffer), dwBufferSize, util.toPointer(lpBytesReturned)));
}

export function FilterFindClose(
  hFilterFind: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterFindClose(util.toPointer(hFilterFind)));
}

export function FilterVolumeFindFirst(
  dwInformationClass: FILTER_VOLUME_INFORMATION_CLASS /* Windows.Win32.Storage.InstallableFileSystems.FILTER_VOLUME_INFORMATION_CLASS */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferSize: number /* u32 */,
  lpBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpVolumeFind: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterVolumeFindFirst(dwInformationClass, util.toPointer(lpBuffer), dwBufferSize, util.toPointer(lpBytesReturned), util.toPointer(lpVolumeFind)));
}

export function FilterVolumeFindNext(
  hVolumeFind: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwInformationClass: FILTER_VOLUME_INFORMATION_CLASS /* Windows.Win32.Storage.InstallableFileSystems.FILTER_VOLUME_INFORMATION_CLASS */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferSize: number /* u32 */,
  lpBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterVolumeFindNext(util.toPointer(hVolumeFind), dwInformationClass, util.toPointer(lpBuffer), dwBufferSize, util.toPointer(lpBytesReturned)));
}

export function FilterVolumeFindClose(
  hVolumeFind: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterVolumeFindClose(util.toPointer(hVolumeFind)));
}

export function FilterInstanceFindFirst(
  lpFilterName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwInformationClass: INSTANCE_INFORMATION_CLASS /* Windows.Win32.Storage.InstallableFileSystems.INSTANCE_INFORMATION_CLASS */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferSize: number /* u32 */,
  lpBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpFilterInstanceFind: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterInstanceFindFirst(util.pwstrToFfi(lpFilterName), dwInformationClass, util.toPointer(lpBuffer), dwBufferSize, util.toPointer(lpBytesReturned), util.toPointer(lpFilterInstanceFind)));
}

export function FilterInstanceFindNext(
  hFilterInstanceFind: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwInformationClass: INSTANCE_INFORMATION_CLASS /* Windows.Win32.Storage.InstallableFileSystems.INSTANCE_INFORMATION_CLASS */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferSize: number /* u32 */,
  lpBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterInstanceFindNext(util.toPointer(hFilterInstanceFind), dwInformationClass, util.toPointer(lpBuffer), dwBufferSize, util.toPointer(lpBytesReturned)));
}

export function FilterInstanceFindClose(
  hFilterInstanceFind: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterInstanceFindClose(util.toPointer(hFilterInstanceFind)));
}

export function FilterVolumeInstanceFindFirst(
  lpVolumeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwInformationClass: INSTANCE_INFORMATION_CLASS /* Windows.Win32.Storage.InstallableFileSystems.INSTANCE_INFORMATION_CLASS */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferSize: number /* u32 */,
  lpBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpVolumeInstanceFind: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterVolumeInstanceFindFirst(util.pwstrToFfi(lpVolumeName), dwInformationClass, util.toPointer(lpBuffer), dwBufferSize, util.toPointer(lpBytesReturned), util.toPointer(lpVolumeInstanceFind)));
}

export function FilterVolumeInstanceFindNext(
  hVolumeInstanceFind: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwInformationClass: INSTANCE_INFORMATION_CLASS /* Windows.Win32.Storage.InstallableFileSystems.INSTANCE_INFORMATION_CLASS */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferSize: number /* u32 */,
  lpBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterVolumeInstanceFindNext(util.toPointer(hVolumeInstanceFind), dwInformationClass, util.toPointer(lpBuffer), dwBufferSize, util.toPointer(lpBytesReturned)));
}

export function FilterVolumeInstanceFindClose(
  hVolumeInstanceFind: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterVolumeInstanceFindClose(util.toPointer(hVolumeInstanceFind)));
}

export function FilterGetInformation(
  hFilter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Storage.InstallableFileSystems.HFILTER */,
  dwInformationClass: FILTER_INFORMATION_CLASS /* Windows.Win32.Storage.InstallableFileSystems.FILTER_INFORMATION_CLASS */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferSize: number /* u32 */,
  lpBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterGetInformation(util.toPointer(hFilter), dwInformationClass, util.toPointer(lpBuffer), dwBufferSize, util.toPointer(lpBytesReturned)));
}

export function FilterInstanceGetInformation(
  hInstance: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Storage.InstallableFileSystems.HFILTER_INSTANCE */,
  dwInformationClass: INSTANCE_INFORMATION_CLASS /* Windows.Win32.Storage.InstallableFileSystems.INSTANCE_INFORMATION_CLASS */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferSize: number /* u32 */,
  lpBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterInstanceGetInformation(util.toPointer(hInstance), dwInformationClass, util.toPointer(lpBuffer), dwBufferSize, util.toPointer(lpBytesReturned)));
}

export function FilterConnectCommunicationPort(
  lpPortName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwOptions: number /* u32 */,
  lpContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  wSizeOfContext: number /* u16 */,
  lpSecurityAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  hPort: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterConnectCommunicationPort(util.pwstrToFfi(lpPortName), dwOptions, util.toPointer(lpContext), wSizeOfContext, util.toPointer(lpSecurityAttributes), util.toPointer(hPort)));
}

export function FilterSendMessage(
  hPort: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpInBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwInBufferSize: number /* u32 */,
  lpOutBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwOutBufferSize: number /* u32 */,
  lpBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterSendMessage(util.toPointer(hPort), util.toPointer(lpInBuffer), dwInBufferSize, util.toPointer(lpOutBuffer), dwOutBufferSize, util.toPointer(lpBytesReturned)));
}

export function FilterGetMessage(
  hPort: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpMessageBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwMessageBufferSize: number /* u32 */,
  lpOverlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterGetMessage(util.toPointer(hPort), util.toPointer(lpMessageBuffer), dwMessageBufferSize, util.toPointer(lpOverlapped)));
}

export function FilterReplyMessage(
  hPort: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpReplyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReplyBufferSize: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterReplyMessage(util.toPointer(hPort), util.toPointer(lpReplyBuffer), dwReplyBufferSize));
}

export function FilterGetDosName(
  lpVolumeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpDosName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwDosNameBufferSize: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libFLTLIB.FilterGetDosName(util.pwstrToFfi(lpVolumeName), util.pwstrToFfi(lpDosName), dwDosNameBufferSize));
}

