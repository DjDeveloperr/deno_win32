/// Auto-generated by Deno Win32: Windows.Win32.Storage.Packaging.Appx.Apis

import * as util from "../../../util.ts";

// Enums
export type APPX_COMPRESSION_OPTION = number;
export type APPX_FOOTPRINT_FILE_TYPE = number;
export type APPX_BUNDLE_FOOTPRINT_FILE_TYPE = number;
export type APPX_CAPABILITIES = number;
export type APPX_PACKAGE_ARCHITECTURE = number;
export type APPX_PACKAGE_ARCHITECTURE2 = number;
export type APPX_BUNDLE_PAYLOAD_PACKAGE_TYPE = number;
export type DX_FEATURE_LEVEL = number;
export type APPX_CAPABILITY_CLASS_TYPE = number;
export type APPX_PACKAGING_CONTEXT_CHANGE_TYPE = number;
export type APPX_ENCRYPTED_PACKAGE_OPTIONS = number;
export type APPX_PACKAGE_EDITOR_UPDATE_PACKAGE_OPTION = number;
export type APPX_PACKAGE_EDITOR_UPDATE_PACKAGE_MANIFEST_OPTIONS = number;
export type PackagePathType = number;
export type PackageOrigin = number;
export type CreatePackageDependencyOptions = number;
export type PackageDependencyLifetimeKind = number;
export type AddPackageDependencyOptions = number;
export type PackageDependencyProcessorArchitectures = number;
export type AppPolicyLifecycleManagement = number;
export type AppPolicyWindowingModel = number;
export type AppPolicyMediaFoundationCodecLoading = number;
export type AppPolicyClrCompat = number;
export type AppPolicyThreadInitializationType = number;
export type AppPolicyShowDeveloperDiagnostic = number;
export type AppPolicyProcessTerminationMethod = number;
export type AppPolicyCreateFileAccess = number;

// Constants
export const PACKAGE_PROPERTY_FRAMEWORK = 1;
export const PACKAGE_PROPERTY_RESOURCE = 2;
export const PACKAGE_PROPERTY_BUNDLE = 4;
export const PACKAGE_PROPERTY_OPTIONAL = 8;
export const PACKAGE_FILTER_HEAD = 16;
export const PACKAGE_FILTER_DIRECT = 32;
export const PACKAGE_FILTER_RESOURCE = 64;
export const PACKAGE_FILTER_BUNDLE = 128;
export const PACKAGE_INFORMATION_BASIC = 0;
export const PACKAGE_INFORMATION_FULL = 256;
export const PACKAGE_PROPERTY_DEVELOPMENT_MODE = 65536;
export const PACKAGE_FILTER_OPTIONAL = 131072;
export const PACKAGE_PROPERTY_IS_IN_RELATED_SET = 262144;
export const PACKAGE_FILTER_IS_IN_RELATED_SET = 262144;
export const PACKAGE_PROPERTY_STATIC = 524288;
export const PACKAGE_FILTER_STATIC = 524288;
export const PACKAGE_PROPERTY_DYNAMIC = 1048576;
export const PACKAGE_FILTER_DYNAMIC = 1048576;
export const PACKAGE_PROPERTY_HOSTRUNTIME = 2097152;
export const PACKAGE_FILTER_HOSTRUNTIME = 2097152;
export const PACKAGE_FILTER_ALL_LOADED = 0;
export const PACKAGE_DEPENDENCY_RANK_DEFAULT = 0;
export const APPX_COMPRESSION_OPTION_NONE = 0;
export const APPX_COMPRESSION_OPTION_NORMAL = 1;
export const APPX_COMPRESSION_OPTION_MAXIMUM = 2;
export const APPX_COMPRESSION_OPTION_FAST = 3;
export const APPX_COMPRESSION_OPTION_SUPERFAST = 4;
export const APPX_FOOTPRINT_FILE_TYPE_MANIFEST = 0;
export const APPX_FOOTPRINT_FILE_TYPE_BLOCKMAP = 1;
export const APPX_FOOTPRINT_FILE_TYPE_SIGNATURE = 2;
export const APPX_FOOTPRINT_FILE_TYPE_CODEINTEGRITY = 3;
export const APPX_FOOTPRINT_FILE_TYPE_CONTENTGROUPMAP = 4;
export const APPX_BUNDLE_FOOTPRINT_FILE_TYPE_FIRST = 0;
export const APPX_BUNDLE_FOOTPRINT_FILE_TYPE_MANIFEST = 0;
export const APPX_BUNDLE_FOOTPRINT_FILE_TYPE_BLOCKMAP = 1;
export const APPX_BUNDLE_FOOTPRINT_FILE_TYPE_SIGNATURE = 2;
export const APPX_BUNDLE_FOOTPRINT_FILE_TYPE_LAST = 2;
export const APPX_CAPABILITY_INTERNET_CLIENT = 1;
export const APPX_CAPABILITY_INTERNET_CLIENT_SERVER = 2;
export const APPX_CAPABILITY_PRIVATE_NETWORK_CLIENT_SERVER = 4;
export const APPX_CAPABILITY_DOCUMENTS_LIBRARY = 8;
export const APPX_CAPABILITY_PICTURES_LIBRARY = 16;
export const APPX_CAPABILITY_VIDEOS_LIBRARY = 32;
export const APPX_CAPABILITY_MUSIC_LIBRARY = 64;
export const APPX_CAPABILITY_ENTERPRISE_AUTHENTICATION = 128;
export const APPX_CAPABILITY_SHARED_USER_CERTIFICATES = 256;
export const APPX_CAPABILITY_REMOVABLE_STORAGE = 512;
export const APPX_CAPABILITY_APPOINTMENTS = 1024;
export const APPX_CAPABILITY_CONTACTS = 2048;
export const APPX_PACKAGE_ARCHITECTURE_X86 = 0;
export const APPX_PACKAGE_ARCHITECTURE_ARM = 5;
export const APPX_PACKAGE_ARCHITECTURE_X64 = 9;
export const APPX_PACKAGE_ARCHITECTURE_NEUTRAL = 11;
export const APPX_PACKAGE_ARCHITECTURE_ARM64 = 12;
export const APPX_PACKAGE_ARCHITECTURE2_X86 = 0;
export const APPX_PACKAGE_ARCHITECTURE2_ARM = 5;
export const APPX_PACKAGE_ARCHITECTURE2_X64 = 9;
export const APPX_PACKAGE_ARCHITECTURE2_NEUTRAL = 11;
export const APPX_PACKAGE_ARCHITECTURE2_ARM64 = 12;
export const APPX_PACKAGE_ARCHITECTURE2_X86_ON_ARM64 = 14;
export const APPX_PACKAGE_ARCHITECTURE2_UNKNOWN = 65535;
export const APPX_BUNDLE_PAYLOAD_PACKAGE_TYPE_APPLICATION = 0;
export const APPX_BUNDLE_PAYLOAD_PACKAGE_TYPE_RESOURCE = 1;
export const DX_FEATURE_LEVEL_UNSPECIFIED = 0;
export const DX_FEATURE_LEVEL_9 = 1;
export const DX_FEATURE_LEVEL_10 = 2;
export const DX_FEATURE_LEVEL_11 = 3;
export const APPX_CAPABILITY_CLASS_DEFAULT = 0;
export const APPX_CAPABILITY_CLASS_GENERAL = 1;
export const APPX_CAPABILITY_CLASS_RESTRICTED = 2;
export const APPX_CAPABILITY_CLASS_WINDOWS = 4;
export const APPX_CAPABILITY_CLASS_ALL = 7;
export const APPX_CAPABILITY_CLASS_CUSTOM = 8;
export const APPX_PACKAGING_CONTEXT_CHANGE_TYPE_START = 0;
export const APPX_PACKAGING_CONTEXT_CHANGE_TYPE_CHANGE = 1;
export const APPX_PACKAGING_CONTEXT_CHANGE_TYPE_DETAILS = 2;
export const APPX_PACKAGING_CONTEXT_CHANGE_TYPE_END = 3;
export const APPX_ENCRYPTED_PACKAGE_OPTION_NONE = 0;
export const APPX_ENCRYPTED_PACKAGE_OPTION_DIFFUSION = 1;
export const APPX_ENCRYPTED_PACKAGE_OPTION_PAGE_HASHING = 2;
export const APPX_PACKAGE_EDITOR_UPDATE_PACKAGE_OPTION_APPEND_DELTA = 0;
export const APPX_PACKAGE_EDITOR_UPDATE_PACKAGE_MANIFEST_OPTION_NONE = 0;
export const APPX_PACKAGE_EDITOR_UPDATE_PACKAGE_MANIFEST_OPTION_SKIP_VALIDATION = 1;
export const APPX_PACKAGE_EDITOR_UPDATE_PACKAGE_MANIFEST_OPTION_LOCALIZED = 2;
export const PackagePathType_Install = 0;
export const PackagePathType_Mutable = 1;
export const PackagePathType_Effective = 2;
export const PackagePathType_MachineExternal = 3;
export const PackagePathType_UserExternal = 4;
export const PackagePathType_EffectiveExternal = 5;
export const PackageOrigin_Unknown = 0;
export const PackageOrigin_Unsigned = 1;
export const PackageOrigin_Inbox = 2;
export const PackageOrigin_Store = 3;
export const PackageOrigin_DeveloperUnsigned = 4;
export const PackageOrigin_DeveloperSigned = 5;
export const PackageOrigin_LineOfBusiness = 6;
export const CreatePackageDependencyOptions_None = 0;
export const CreatePackageDependencyOptions_DoNotVerifyDependencyResolution = 1;
export const CreatePackageDependencyOptions_ScopeIsSystem = 2;
export const PackageDependencyLifetimeKind_Process = 0;
export const PackageDependencyLifetimeKind_FilePath = 1;
export const PackageDependencyLifetimeKind_RegistryKey = 2;
export const AddPackageDependencyOptions_None = 0;
export const AddPackageDependencyOptions_PrependIfRankCollision = 1;
export const PackageDependencyProcessorArchitectures_None = 0;
export const PackageDependencyProcessorArchitectures_Neutral = 1;
export const PackageDependencyProcessorArchitectures_X86 = 2;
export const PackageDependencyProcessorArchitectures_X64 = 4;
export const PackageDependencyProcessorArchitectures_Arm = 8;
export const PackageDependencyProcessorArchitectures_Arm64 = 16;
export const PackageDependencyProcessorArchitectures_X86A64 = 32;
export const AppPolicyLifecycleManagement_Unmanaged = 0;
export const AppPolicyLifecycleManagement_Managed = 1;
export const AppPolicyWindowingModel_None = 0;
export const AppPolicyWindowingModel_Universal = 1;
export const AppPolicyWindowingModel_ClassicDesktop = 2;
export const AppPolicyWindowingModel_ClassicPhone = 3;
export const AppPolicyMediaFoundationCodecLoading_All = 0;
export const AppPolicyMediaFoundationCodecLoading_InboxOnly = 1;
export const AppPolicyClrCompat_Other = 0;
export const AppPolicyClrCompat_ClassicDesktop = 1;
export const AppPolicyClrCompat_Universal = 2;
export const AppPolicyClrCompat_PackagedDesktop = 3;
export const AppPolicyThreadInitializationType_None = 0;
export const AppPolicyThreadInitializationType_InitializeWinRT = 1;
export const AppPolicyShowDeveloperDiagnostic_None = 0;
export const AppPolicyShowDeveloperDiagnostic_ShowUI = 1;
export const AppPolicyProcessTerminationMethod_ExitProcess = 0;
export const AppPolicyProcessTerminationMethod_TerminateProcess = 1;
export const AppPolicyCreateFileAccess_Full = 0;
export const AppPolicyCreateFileAccess_Limited = 1;

// Structs

export type BOOL = number;

/**
 * Windows.Win32.Storage.Packaging.Appx.APPX_PACKAGE_SETTINGS (size: 16)
 */
export interface APPX_PACKAGE_SETTINGS {
  /** Windows.Win32.Foundation.BOOL */
  forceZip32: boolean;
  /** Windows.Win32.System.Com.IUri */
  hashMethod: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAPPX_PACKAGE_SETTINGS = 16;

export function allocAPPX_PACKAGE_SETTINGS(data?: Partial<APPX_PACKAGE_SETTINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofAPPX_PACKAGE_SETTINGS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.forceZip32 !== undefined) view.setInt32(0, Number(data.forceZip32), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hashMethod !== undefined) view.setBigUint64(8, data.hashMethod === null ? 0n : BigInt(util.toPointer(data.hashMethod)), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Storage.Packaging.Appx.APPX_PACKAGE_WRITER_PAYLOAD_STREAM (size: 32)
 */
export interface APPX_PACKAGE_WRITER_PAYLOAD_STREAM {
  /** Windows.Win32.System.Com.IStream */
  inputStream: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  fileName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  contentType: string | null;
  /** Windows.Win32.Storage.Packaging.Appx.APPX_COMPRESSION_OPTION */
  compressionOption: APPX_COMPRESSION_OPTION;
}

export const sizeofAPPX_PACKAGE_WRITER_PAYLOAD_STREAM = 32;

export function allocAPPX_PACKAGE_WRITER_PAYLOAD_STREAM(data?: Partial<APPX_PACKAGE_WRITER_PAYLOAD_STREAM>): Uint8Array {
  const buf = new Uint8Array(sizeofAPPX_PACKAGE_WRITER_PAYLOAD_STREAM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.inputStream !== undefined) view.setBigUint64(0, data.inputStream === null ? 0n : BigInt(util.toPointer(data.inputStream)), true);
  // 0x08: buffer
  if (data?.fileName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.fileName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.contentType !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.contentType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: i32
  if (data?.compressionOption !== undefined) view.setInt32(24, Number(data.compressionOption), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Storage.Packaging.Appx.APPX_ENCRYPTED_PACKAGE_SETTINGS (size: 32)
 */
export interface APPX_ENCRYPTED_PACKAGE_SETTINGS {
  /** u32 */
  keyLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  encryptionAlgorithm: string | null;
  /** Windows.Win32.Foundation.BOOL */
  useDiffusion: boolean;
  /** Windows.Win32.System.Com.IUri */
  blockMapHashAlgorithm: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAPPX_ENCRYPTED_PACKAGE_SETTINGS = 32;

export function allocAPPX_ENCRYPTED_PACKAGE_SETTINGS(data?: Partial<APPX_ENCRYPTED_PACKAGE_SETTINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofAPPX_ENCRYPTED_PACKAGE_SETTINGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.keyLength !== undefined) view.setUint32(0, Number(data.keyLength), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.encryptionAlgorithm !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.encryptionAlgorithm);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: i32
  if (data?.useDiffusion !== undefined) view.setInt32(16, Number(data.useDiffusion), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.blockMapHashAlgorithm !== undefined) view.setBigUint64(24, data.blockMapHashAlgorithm === null ? 0n : BigInt(util.toPointer(data.blockMapHashAlgorithm)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.Packaging.Appx.APPX_ENCRYPTED_PACKAGE_SETTINGS2 (size: 32)
 */
export interface APPX_ENCRYPTED_PACKAGE_SETTINGS2 {
  /** u32 */
  keyLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  encryptionAlgorithm: string | null;
  /** Windows.Win32.System.Com.IUri */
  blockMapHashAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  options: number;
}

export const sizeofAPPX_ENCRYPTED_PACKAGE_SETTINGS2 = 32;

export function allocAPPX_ENCRYPTED_PACKAGE_SETTINGS2(data?: Partial<APPX_ENCRYPTED_PACKAGE_SETTINGS2>): Uint8Array {
  const buf = new Uint8Array(sizeofAPPX_ENCRYPTED_PACKAGE_SETTINGS2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.keyLength !== undefined) view.setUint32(0, Number(data.keyLength), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.encryptionAlgorithm !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.encryptionAlgorithm);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.blockMapHashAlgorithm !== undefined) view.setBigUint64(16, data.blockMapHashAlgorithm === null ? 0n : BigInt(util.toPointer(data.blockMapHashAlgorithm)), true);
  // 0x18: u32
  if (data?.options !== undefined) view.setUint32(24, Number(data.options), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Storage.Packaging.Appx.APPX_KEY_INFO (size: 24)
 */
export interface APPX_KEY_INFO {
  /** u32 */
  keyLength: number;
  /** u32 */
  keyIdLength: number;
  /** ptr */
  key: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  keyId: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAPPX_KEY_INFO = 24;

export function allocAPPX_KEY_INFO(data?: Partial<APPX_KEY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofAPPX_KEY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.keyLength !== undefined) view.setUint32(0, Number(data.keyLength), true);
  // 0x04: u32
  if (data?.keyIdLength !== undefined) view.setUint32(4, Number(data.keyIdLength), true);
  // 0x08: pointer
  if (data?.key !== undefined) view.setBigUint64(8, data.key === null ? 0n : BigInt(util.toPointer(data.key)), true);
  // 0x10: pointer
  if (data?.keyId !== undefined) view.setBigUint64(16, data.keyId === null ? 0n : BigInt(util.toPointer(data.keyId)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.Packaging.Appx.APPX_ENCRYPTED_EXEMPTIONS (size: 16)
 */
export interface APPX_ENCRYPTED_EXEMPTIONS {
  /** u32 */
  count: number;
  /** ptr */
  plainTextFiles: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAPPX_ENCRYPTED_EXEMPTIONS = 16;

export function allocAPPX_ENCRYPTED_EXEMPTIONS(data?: Partial<APPX_ENCRYPTED_EXEMPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofAPPX_ENCRYPTED_EXEMPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.count !== undefined) view.setUint32(0, Number(data.count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.plainTextFiles !== undefined) view.setBigUint64(8, data.plainTextFiles === null ? 0n : BigInt(util.toPointer(data.plainTextFiles)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.Packaging.Appx.PACKAGE_VERSION (size: 8)
 */
export interface PACKAGE_VERSION {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPACKAGE_VERSION = 8;

export function allocPACKAGE_VERSION(data?: Partial<PACKAGE_VERSION>): Uint8Array {
  const buf = new Uint8Array(sizeofPACKAGE_VERSION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.Packaging.Appx.PACKAGE_ID (size: 48)
 */
export interface PACKAGE_ID {
  /** u32 */
  reserved: number;
  /** u32 */
  processorArchitecture: number;
  /** Windows.Win32.Storage.Packaging.Appx.PACKAGE_VERSION */
  version: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  publisher: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  resourceId: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  publisherId: string | null;
}

export const sizeofPACKAGE_ID = 48;

export function allocPACKAGE_ID(data?: Partial<PACKAGE_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofPACKAGE_ID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.reserved !== undefined) view.setUint32(0, Number(data.reserved), true);
  // 0x04: u32
  if (data?.processorArchitecture !== undefined) view.setUint32(4, Number(data.processorArchitecture), true);
  // 0x08: pointer
  if (data?.version !== undefined) view.setBigUint64(8, data.version === null ? 0n : BigInt(util.toPointer(data.version)), true);
  // 0x10: buffer
  if (data?.name !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.name);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.publisher !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.publisher);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.resourceId !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.resourceId);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.publisherId !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.publisherId);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Storage.Packaging.Appx._PACKAGE_INFO_REFERENCE (size: 8)
 */
export interface _PACKAGE_INFO_REFERENCE {
  /** ptr */
  reserved: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_PACKAGE_INFO_REFERENCE = 8;

export function alloc_PACKAGE_INFO_REFERENCE(data?: Partial<_PACKAGE_INFO_REFERENCE>): Uint8Array {
  const buf = new Uint8Array(sizeof_PACKAGE_INFO_REFERENCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.reserved !== undefined) view.setBigUint64(0, data.reserved === null ? 0n : BigInt(util.toPointer(data.reserved)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.Packaging.Appx.PACKAGE_INFO (size: 40)
 */
export interface PACKAGE_INFO {
  /** u32 */
  reserved: number;
  /** u32 */
  flags: number;
  /** Windows.Win32.Foundation.PWSTR */
  path: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  packageFullName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  packageFamilyName: string | null;
  /** Windows.Win32.Storage.Packaging.Appx.PACKAGE_ID */
  packageId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPACKAGE_INFO = 40;

export function allocPACKAGE_INFO(data?: Partial<PACKAGE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPACKAGE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.reserved !== undefined) view.setUint32(0, Number(data.reserved), true);
  // 0x04: u32
  if (data?.flags !== undefined) view.setUint32(4, Number(data.flags), true);
  // 0x08: buffer
  if (data?.path !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.path);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.packageFullName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.packageFullName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.packageFamilyName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.packageFamilyName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.packageId !== undefined) view.setBigUint64(32, data.packageId === null ? 0n : BigInt(util.toPointer(data.packageId)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.Packaging.Appx.PACKAGEDEPENDENCY_CONTEXT__ (size: 8)
 */
export interface PACKAGEDEPENDENCY_CONTEXT__ {
  /** i32 */
  unused: number;
}

export const sizeofPACKAGEDEPENDENCY_CONTEXT__ = 8;

export function allocPACKAGEDEPENDENCY_CONTEXT__(data?: Partial<PACKAGEDEPENDENCY_CONTEXT__>): Uint8Array {
  const buf = new Uint8Array(sizeofPACKAGEDEPENDENCY_CONTEXT__);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.unused !== undefined) view.setInt32(0, Number(data.unused), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Storage.Packaging.Appx.PACKAGE_VIRTUALIZATION_CONTEXT_HANDLE__ (size: 8)
 */
export interface PACKAGE_VIRTUALIZATION_CONTEXT_HANDLE__ {
  /** i32 */
  unused: number;
}

export const sizeofPACKAGE_VIRTUALIZATION_CONTEXT_HANDLE__ = 8;

export function allocPACKAGE_VIRTUALIZATION_CONTEXT_HANDLE__(data?: Partial<PACKAGE_VIRTUALIZATION_CONTEXT_HANDLE__>): Uint8Array {
  const buf = new Uint8Array(sizeofPACKAGE_VIRTUALIZATION_CONTEXT_HANDLE__);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.unused !== undefined) view.setInt32(0, Number(data.unused), true);
  // 0x04: pad4
  return buf;
}

export type HANDLE = Deno.PointerValue;

export type PSID = Deno.PointerValue;

export type HRESULT = number;

// Native Libraries

try {
  var libKERNEL32 = Deno.dlopen("KERNEL32", {
    GetCurrentPackageId: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetCurrentPackageFullName: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    GetCurrentPackageFamilyName: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    GetCurrentPackagePath: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    GetPackageId: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetPackageFullName: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "i32",
    },
    GetPackageFamilyName: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "i32",
    },
    GetPackagePath: {
      parameters: ["pointer", "u32", "pointer", "buffer"],
      result: "i32",
    },
    GetPackagePathByFullName: {
      parameters: ["buffer", "pointer", "buffer"],
      result: "i32",
    },
    GetStagedPackagePathByFullName: {
      parameters: ["buffer", "pointer", "buffer"],
      result: "i32",
    },
    GetCurrentApplicationUserModelId: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    GetApplicationUserModelId: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "i32",
    },
    PackageIdFromFullName: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    PackageFullNameFromId: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "i32",
    },
    PackageFamilyNameFromId: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "i32",
    },
    PackageFamilyNameFromFullName: {
      parameters: ["buffer", "pointer", "buffer"],
      result: "i32",
    },
    PackageNameAndPublisherIdFromFamilyName: {
      parameters: ["buffer", "pointer", "buffer", "pointer", "buffer"],
      result: "i32",
    },
    FormatApplicationUserModelId: {
      parameters: ["buffer", "buffer", "pointer", "buffer"],
      result: "i32",
    },
    ParseApplicationUserModelId: {
      parameters: ["buffer", "pointer", "buffer", "pointer", "buffer"],
      result: "i32",
    },
    GetPackagesByPackageFamily: {
      parameters: ["buffer", "pointer", "pointer", "pointer", "buffer"],
      result: "i32",
    },
    FindPackagesByPackageFamily: {
      parameters: ["buffer", "u32", "pointer", "pointer", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    GetCurrentPackageInfo: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    OpenPackageInfoByFullName: {
      parameters: ["buffer", "u32", "pointer"],
      result: "i32",
    },
    ClosePackageInfo: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetPackageInfo: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetPackageApplicationIds: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    CheckIsMSIXPackage: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    TryCreatePackageDependency: {
      parameters: ["pointer", "buffer", "pointer", "i32", "i32", "buffer", "i32", "pointer"],
      result: "pointer",
    },
    DeletePackageDependency: {
      parameters: ["buffer"],
      result: "pointer",
    },
    AddPackageDependency: {
      parameters: ["buffer", "i32", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    RemovePackageDependency: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetResolvedPackageFullNameForPackageDependency: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    GetIdForPackageDependencyContext: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    AppPolicyGetLifecycleManagement: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    AppPolicyGetWindowingModel: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    AppPolicyGetMediaFoundationCodecLoading: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    AppPolicyGetClrCompat: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    AppPolicyGetThreadInitializationType: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    AppPolicyGetShowDeveloperDiagnostic: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    AppPolicyGetProcessTerminationMethod: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    AppPolicyGetCreateFileAccess: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    CreatePackageVirtualizationContext: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    ActivatePackageVirtualizationContext: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ReleasePackageVirtualizationContext: {
      parameters: ["pointer"],
      result: "void",
    },
    DeactivatePackageVirtualizationContext: {
      parameters: ["usize"],
      result: "void",
    },
    DuplicatePackageVirtualizationContext: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    GetCurrentPackageVirtualizationContext: {
      parameters: [],
      result: "pointer",
    },
    GetProcessesInVirtualizationContext: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_appmodel_runtime_l1_1_1 = Deno.dlopen("api-ms-win-appmodel-runtime-l1-1-1", {
    GetPackageFullNameFromToken: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "i32",
    },
    GetPackageFamilyNameFromToken: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "i32",
    },
    GetApplicationUserModelIdFromToken: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "i32",
    },
    VerifyPackageFullName: {
      parameters: ["buffer"],
      result: "i32",
    },
    VerifyPackageFamilyName: {
      parameters: ["buffer"],
      result: "i32",
    },
    VerifyPackageId: {
      parameters: ["pointer"],
      result: "i32",
    },
    VerifyApplicationUserModelId: {
      parameters: ["buffer"],
      result: "i32",
    },
    VerifyPackageRelativeApplicationId: {
      parameters: ["buffer"],
      result: "i32",
    },
    GetStagedPackageOrigin: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    OpenPackageInfoByFullNameForUser: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_appmodel_runtime_l1_1_3 = Deno.dlopen("api-ms-win-appmodel-runtime-l1-1-3", {
    GetPackagePathByFullName2: {
      parameters: ["buffer", "i32", "pointer", "buffer"],
      result: "i32",
    },
    GetStagedPackagePathByFullName2: {
      parameters: ["buffer", "i32", "pointer", "buffer"],
      result: "i32",
    },
    GetCurrentPackageInfo2: {
      parameters: ["u32", "i32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetCurrentPackagePath2: {
      parameters: ["i32", "pointer", "buffer"],
      result: "i32",
    },
    GetPackageInfo2: {
      parameters: ["pointer", "u32", "i32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function GetCurrentPackageId(
  bufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libKERNEL32.GetCurrentPackageId(util.toPointer(bufferLength), util.toPointer(buffer));
}

export function GetCurrentPackageFullName(
  packageFullNameLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  packageFullName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libKERNEL32.GetCurrentPackageFullName(util.toPointer(packageFullNameLength), util.pwstrToFfi(packageFullName));
}

export function GetCurrentPackageFamilyName(
  packageFamilyNameLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  packageFamilyName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libKERNEL32.GetCurrentPackageFamilyName(util.toPointer(packageFamilyNameLength), util.pwstrToFfi(packageFamilyName));
}

export function GetCurrentPackagePath(
  pathLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  path: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libKERNEL32.GetCurrentPackagePath(util.toPointer(pathLength), util.pwstrToFfi(path));
}

export function GetPackageId(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  bufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libKERNEL32.GetPackageId(util.toPointer(hProcess), util.toPointer(bufferLength), util.toPointer(buffer));
}

export function GetPackageFullName(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  packageFullNameLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  packageFullName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libKERNEL32.GetPackageFullName(util.toPointer(hProcess), util.toPointer(packageFullNameLength), util.pwstrToFfi(packageFullName));
}

export function GetPackageFullNameFromToken(
  token: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  packageFullNameLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  packageFullName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libapi_ms_win_appmodel_runtime_l1_1_1.GetPackageFullNameFromToken(util.toPointer(token), util.toPointer(packageFullNameLength), util.pwstrToFfi(packageFullName));
}

export function GetPackageFamilyName(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  packageFamilyNameLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  packageFamilyName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libKERNEL32.GetPackageFamilyName(util.toPointer(hProcess), util.toPointer(packageFamilyNameLength), util.pwstrToFfi(packageFamilyName));
}

export function GetPackageFamilyNameFromToken(
  token: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  packageFamilyNameLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  packageFamilyName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libapi_ms_win_appmodel_runtime_l1_1_1.GetPackageFamilyNameFromToken(util.toPointer(token), util.toPointer(packageFamilyNameLength), util.pwstrToFfi(packageFamilyName));
}

export function GetPackagePath(
  packageId: Deno.PointerValue | Uint8Array | null /* ptr */,
  reserved: number /* u32 */,
  pathLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  path: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libKERNEL32.GetPackagePath(util.toPointer(packageId), reserved, util.toPointer(pathLength), util.pwstrToFfi(path));
}

export function GetPackagePathByFullName(
  packageFullName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pathLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  path: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libKERNEL32.GetPackagePathByFullName(util.pwstrToFfi(packageFullName), util.toPointer(pathLength), util.pwstrToFfi(path));
}

export function GetStagedPackagePathByFullName(
  packageFullName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pathLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  path: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libKERNEL32.GetStagedPackagePathByFullName(util.pwstrToFfi(packageFullName), util.toPointer(pathLength), util.pwstrToFfi(path));
}

export function GetPackagePathByFullName2(
  packageFullName: string | null /* Windows.Win32.Foundation.PWSTR */,
  packagePathType: PackagePathType /* Windows.Win32.Storage.Packaging.Appx.PackagePathType */,
  pathLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  path: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libapi_ms_win_appmodel_runtime_l1_1_3.GetPackagePathByFullName2(util.pwstrToFfi(packageFullName), packagePathType, util.toPointer(pathLength), util.pwstrToFfi(path));
}

export function GetStagedPackagePathByFullName2(
  packageFullName: string | null /* Windows.Win32.Foundation.PWSTR */,
  packagePathType: PackagePathType /* Windows.Win32.Storage.Packaging.Appx.PackagePathType */,
  pathLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  path: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libapi_ms_win_appmodel_runtime_l1_1_3.GetStagedPackagePathByFullName2(util.pwstrToFfi(packageFullName), packagePathType, util.toPointer(pathLength), util.pwstrToFfi(path));
}

export function GetCurrentPackageInfo2(
  flags: number /* u32 */,
  packagePathType: PackagePathType /* Windows.Win32.Storage.Packaging.Appx.PackagePathType */,
  bufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  count: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libapi_ms_win_appmodel_runtime_l1_1_3.GetCurrentPackageInfo2(flags, packagePathType, util.toPointer(bufferLength), util.toPointer(buffer), util.toPointer(count));
}

export function GetCurrentPackagePath2(
  packagePathType: PackagePathType /* Windows.Win32.Storage.Packaging.Appx.PackagePathType */,
  pathLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  path: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libapi_ms_win_appmodel_runtime_l1_1_3.GetCurrentPackagePath2(packagePathType, util.toPointer(pathLength), util.pwstrToFfi(path));
}

export function GetCurrentApplicationUserModelId(
  applicationUserModelIdLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  applicationUserModelId: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libKERNEL32.GetCurrentApplicationUserModelId(util.toPointer(applicationUserModelIdLength), util.pwstrToFfi(applicationUserModelId));
}

export function GetApplicationUserModelId(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  applicationUserModelIdLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  applicationUserModelId: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libKERNEL32.GetApplicationUserModelId(util.toPointer(hProcess), util.toPointer(applicationUserModelIdLength), util.pwstrToFfi(applicationUserModelId));
}

export function GetApplicationUserModelIdFromToken(
  token: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  applicationUserModelIdLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  applicationUserModelId: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libapi_ms_win_appmodel_runtime_l1_1_1.GetApplicationUserModelIdFromToken(util.toPointer(token), util.toPointer(applicationUserModelIdLength), util.pwstrToFfi(applicationUserModelId));
}

export function VerifyPackageFullName(
  packageFullName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libapi_ms_win_appmodel_runtime_l1_1_1.VerifyPackageFullName(util.pwstrToFfi(packageFullName));
}

export function VerifyPackageFamilyName(
  packageFamilyName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libapi_ms_win_appmodel_runtime_l1_1_1.VerifyPackageFamilyName(util.pwstrToFfi(packageFamilyName));
}

export function VerifyPackageId(
  packageId: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libapi_ms_win_appmodel_runtime_l1_1_1.VerifyPackageId(util.toPointer(packageId));
}

export function VerifyApplicationUserModelId(
  applicationUserModelId: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libapi_ms_win_appmodel_runtime_l1_1_1.VerifyApplicationUserModelId(util.pwstrToFfi(applicationUserModelId));
}

export function VerifyPackageRelativeApplicationId(
  packageRelativeApplicationId: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libapi_ms_win_appmodel_runtime_l1_1_1.VerifyPackageRelativeApplicationId(util.pwstrToFfi(packageRelativeApplicationId));
}

export function PackageIdFromFullName(
  packageFullName: string | null /* Windows.Win32.Foundation.PWSTR */,
  flags: number /* u32 */,
  bufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libKERNEL32.PackageIdFromFullName(util.pwstrToFfi(packageFullName), flags, util.toPointer(bufferLength), util.toPointer(buffer));
}

export function PackageFullNameFromId(
  packageId: Deno.PointerValue | Uint8Array | null /* ptr */,
  packageFullNameLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  packageFullName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libKERNEL32.PackageFullNameFromId(util.toPointer(packageId), util.toPointer(packageFullNameLength), util.pwstrToFfi(packageFullName));
}

export function PackageFamilyNameFromId(
  packageId: Deno.PointerValue | Uint8Array | null /* ptr */,
  packageFamilyNameLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  packageFamilyName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libKERNEL32.PackageFamilyNameFromId(util.toPointer(packageId), util.toPointer(packageFamilyNameLength), util.pwstrToFfi(packageFamilyName));
}

export function PackageFamilyNameFromFullName(
  packageFullName: string | null /* Windows.Win32.Foundation.PWSTR */,
  packageFamilyNameLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  packageFamilyName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libKERNEL32.PackageFamilyNameFromFullName(util.pwstrToFfi(packageFullName), util.toPointer(packageFamilyNameLength), util.pwstrToFfi(packageFamilyName));
}

export function PackageNameAndPublisherIdFromFamilyName(
  packageFamilyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  packageNameLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  packageName: string | null /* Windows.Win32.Foundation.PWSTR */,
  packagePublisherIdLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  packagePublisherId: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libKERNEL32.PackageNameAndPublisherIdFromFamilyName(util.pwstrToFfi(packageFamilyName), util.toPointer(packageNameLength), util.pwstrToFfi(packageName), util.toPointer(packagePublisherIdLength), util.pwstrToFfi(packagePublisherId));
}

export function FormatApplicationUserModelId(
  packageFamilyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  packageRelativeApplicationId: string | null /* Windows.Win32.Foundation.PWSTR */,
  applicationUserModelIdLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  applicationUserModelId: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libKERNEL32.FormatApplicationUserModelId(util.pwstrToFfi(packageFamilyName), util.pwstrToFfi(packageRelativeApplicationId), util.toPointer(applicationUserModelIdLength), util.pwstrToFfi(applicationUserModelId));
}

export function ParseApplicationUserModelId(
  applicationUserModelId: string | null /* Windows.Win32.Foundation.PWSTR */,
  packageFamilyNameLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  packageFamilyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  packageRelativeApplicationIdLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  packageRelativeApplicationId: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libKERNEL32.ParseApplicationUserModelId(util.pwstrToFfi(applicationUserModelId), util.toPointer(packageFamilyNameLength), util.pwstrToFfi(packageFamilyName), util.toPointer(packageRelativeApplicationIdLength), util.pwstrToFfi(packageRelativeApplicationId));
}

export function GetPackagesByPackageFamily(
  packageFamilyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  count: Deno.PointerValue | Uint8Array | null /* ptr */,
  packageFullNames: Deno.PointerValue | Uint8Array | null /* ptr */,
  bufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  buffer: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libKERNEL32.GetPackagesByPackageFamily(util.pwstrToFfi(packageFamilyName), util.toPointer(count), util.toPointer(packageFullNames), util.toPointer(bufferLength), util.pwstrToFfi(buffer));
}

export function FindPackagesByPackageFamily(
  packageFamilyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  packageFilters: number /* u32 */,
  count: Deno.PointerValue | Uint8Array | null /* ptr */,
  packageFullNames: Deno.PointerValue | Uint8Array | null /* ptr */,
  bufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  buffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  packageProperties: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libKERNEL32.FindPackagesByPackageFamily(util.pwstrToFfi(packageFamilyName), packageFilters, util.toPointer(count), util.toPointer(packageFullNames), util.toPointer(bufferLength), util.pwstrToFfi(buffer), util.toPointer(packageProperties));
}

export function GetStagedPackageOrigin(
  packageFullName: string | null /* Windows.Win32.Foundation.PWSTR */,
  origin: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libapi_ms_win_appmodel_runtime_l1_1_1.GetStagedPackageOrigin(util.pwstrToFfi(packageFullName), util.toPointer(origin));
}

export function GetCurrentPackageInfo(
  flags: number /* u32 */,
  bufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  count: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libKERNEL32.GetCurrentPackageInfo(flags, util.toPointer(bufferLength), util.toPointer(buffer), util.toPointer(count));
}

export function OpenPackageInfoByFullName(
  packageFullName: string | null /* Windows.Win32.Foundation.PWSTR */,
  reserved: number /* u32 */,
  packageInfoReference: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libKERNEL32.OpenPackageInfoByFullName(util.pwstrToFfi(packageFullName), reserved, util.toPointer(packageInfoReference));
}

export function OpenPackageInfoByFullNameForUser(
  userSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  packageFullName: string | null /* Windows.Win32.Foundation.PWSTR */,
  reserved: number /* u32 */,
  packageInfoReference: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libapi_ms_win_appmodel_runtime_l1_1_1.OpenPackageInfoByFullNameForUser(util.toPointer(userSid), util.pwstrToFfi(packageFullName), reserved, util.toPointer(packageInfoReference));
}

export function ClosePackageInfo(
  packageInfoReference: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libKERNEL32.ClosePackageInfo(util.toPointer(packageInfoReference));
}

export function GetPackageInfo(
  packageInfoReference: Deno.PointerValue | Uint8Array | null /* ptr */,
  flags: number /* u32 */,
  bufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  count: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libKERNEL32.GetPackageInfo(util.toPointer(packageInfoReference), flags, util.toPointer(bufferLength), util.toPointer(buffer), util.toPointer(count));
}

export function GetPackageApplicationIds(
  packageInfoReference: Deno.PointerValue | Uint8Array | null /* ptr */,
  bufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  count: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libKERNEL32.GetPackageApplicationIds(util.toPointer(packageInfoReference), util.toPointer(bufferLength), util.toPointer(buffer), util.toPointer(count));
}

export function GetPackageInfo2(
  packageInfoReference: Deno.PointerValue | Uint8Array | null /* ptr */,
  flags: number /* u32 */,
  packagePathType: PackagePathType /* Windows.Win32.Storage.Packaging.Appx.PackagePathType */,
  bufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  count: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libapi_ms_win_appmodel_runtime_l1_1_3.GetPackageInfo2(util.toPointer(packageInfoReference), flags, packagePathType, util.toPointer(bufferLength), util.toPointer(buffer), util.toPointer(count));
}

export function CheckIsMSIXPackage(
  packageFullName: string | null /* Windows.Win32.Foundation.PWSTR */,
  isMSIXPackage: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32.CheckIsMSIXPackage(util.pwstrToFfi(packageFullName), util.toPointer(isMSIXPackage)));
}

export function TryCreatePackageDependency(
  user: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  packageFamilyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  minVersion: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Storage.Packaging.Appx.PACKAGE_VERSION */,
  packageDependencyProcessorArchitectures: PackageDependencyProcessorArchitectures /* Windows.Win32.Storage.Packaging.Appx.PackageDependencyProcessorArchitectures */,
  lifetimeKind: PackageDependencyLifetimeKind /* Windows.Win32.Storage.Packaging.Appx.PackageDependencyLifetimeKind */,
  lifetimeArtifact: string | null /* Windows.Win32.Foundation.PWSTR */,
  options: CreatePackageDependencyOptions /* Windows.Win32.Storage.Packaging.Appx.CreatePackageDependencyOptions */,
  packageDependencyId: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32.TryCreatePackageDependency(util.toPointer(user), util.pwstrToFfi(packageFamilyName), util.toPointer(minVersion), packageDependencyProcessorArchitectures, lifetimeKind, util.pwstrToFfi(lifetimeArtifact), options, util.toPointer(packageDependencyId)));
}

export function DeletePackageDependency(
  packageDependencyId: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32.DeletePackageDependency(util.pwstrToFfi(packageDependencyId)));
}

export function AddPackageDependency(
  packageDependencyId: string | null /* Windows.Win32.Foundation.PWSTR */,
  rank: number /* i32 */,
  options: AddPackageDependencyOptions /* Windows.Win32.Storage.Packaging.Appx.AddPackageDependencyOptions */,
  packageDependencyContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  packageFullName: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32.AddPackageDependency(util.pwstrToFfi(packageDependencyId), rank, options, util.toPointer(packageDependencyContext), util.toPointer(packageFullName)));
}

export function RemovePackageDependency(
  packageDependencyContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32.RemovePackageDependency(util.toPointer(packageDependencyContext)));
}

export function GetResolvedPackageFullNameForPackageDependency(
  packageDependencyId: string | null /* Windows.Win32.Foundation.PWSTR */,
  packageFullName: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32.GetResolvedPackageFullNameForPackageDependency(util.pwstrToFfi(packageDependencyId), util.toPointer(packageFullName)));
}

export function GetIdForPackageDependencyContext(
  packageDependencyContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  packageDependencyId: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32.GetIdForPackageDependencyContext(util.toPointer(packageDependencyContext), util.toPointer(packageDependencyId)));
}

export function AppPolicyGetLifecycleManagement(
  processToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  policy: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libKERNEL32.AppPolicyGetLifecycleManagement(util.toPointer(processToken), util.toPointer(policy));
}

export function AppPolicyGetWindowingModel(
  processToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  policy: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libKERNEL32.AppPolicyGetWindowingModel(util.toPointer(processToken), util.toPointer(policy));
}

export function AppPolicyGetMediaFoundationCodecLoading(
  processToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  policy: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libKERNEL32.AppPolicyGetMediaFoundationCodecLoading(util.toPointer(processToken), util.toPointer(policy));
}

export function AppPolicyGetClrCompat(
  processToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  policy: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libKERNEL32.AppPolicyGetClrCompat(util.toPointer(processToken), util.toPointer(policy));
}

export function AppPolicyGetThreadInitializationType(
  processToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  policy: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libKERNEL32.AppPolicyGetThreadInitializationType(util.toPointer(processToken), util.toPointer(policy));
}

export function AppPolicyGetShowDeveloperDiagnostic(
  processToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  policy: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libKERNEL32.AppPolicyGetShowDeveloperDiagnostic(util.toPointer(processToken), util.toPointer(policy));
}

export function AppPolicyGetProcessTerminationMethod(
  processToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  policy: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libKERNEL32.AppPolicyGetProcessTerminationMethod(util.toPointer(processToken), util.toPointer(policy));
}

export function AppPolicyGetCreateFileAccess(
  processToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  policy: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libKERNEL32.AppPolicyGetCreateFileAccess(util.toPointer(processToken), util.toPointer(policy));
}

export function CreatePackageVirtualizationContext(
  packageFamilyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32.CreatePackageVirtualizationContext(util.pwstrToFfi(packageFamilyName), util.toPointer(context)));
}

export function ActivatePackageVirtualizationContext(
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
  cookie: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32.ActivatePackageVirtualizationContext(util.toPointer(context), util.toPointer(cookie)));
}

export function ReleasePackageVirtualizationContext(
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.ReleasePackageVirtualizationContext(util.toPointer(context));
}

export function DeactivatePackageVirtualizationContext(
  cookie: Deno.PointerValue /* usize */,
): void /* void */ {
  return libKERNEL32.DeactivatePackageVirtualizationContext(cookie);
}

export function DuplicatePackageVirtualizationContext(
  sourceContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  destContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32.DuplicatePackageVirtualizationContext(util.toPointer(sourceContext), util.toPointer(destContext)));
}

export function GetCurrentPackageVirtualizationContext(): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32.GetCurrentPackageVirtualizationContext());
}

export function GetProcessesInVirtualizationContext(
  packageFamilyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  count: Deno.PointerValue | Uint8Array | null /* ptr */,
  processes: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32.GetProcessesInVirtualizationContext(util.pwstrToFfi(packageFamilyName), util.toPointer(count), util.toPointer(processes)));
}

