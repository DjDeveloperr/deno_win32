/// Auto-generated by Deno Win32: Windows.Win32.Storage.VirtualDiskService.Apis

import * as util from "../../util.ts";

// Enums
export type VDS_NF_PACK = number;
export type VDS_NF_FILE_SYSTEM = number;
export type VDS_NF_CONTROLLER = number;
export type VDS_NF_DRIVE = number;
export type VDS_NF_PORT = number;
export type VDS_NF_LUN = number;
export type VDS_NF_DISK = number;
export type VDS_STORAGE_IDENTIFIER_CODE_SET = number;
export type VDS_STORAGE_IDENTIFIER_TYPE = number;
export type VDS_STORAGE_BUS_TYPE = number;
export type VDS_INTERCONNECT_ADDRESS_TYPE = number;
export type VDS_OBJECT_TYPE = number;
export type VDS_PROVIDER_TYPE = number;
export type VDS_PROVIDER_FLAG = number;
export type VDS_RECOVER_ACTION = number;
export type VDS_NOTIFICATION_TARGET_TYPE = number;
export type VDS_ASYNC_OUTPUT_TYPE = number;
export type VDS_IPADDRESS_TYPE = number;
export type VDS_HEALTH = number;
export type VDS_TRANSITION_STATE = number;
export type VDS_FILE_SYSTEM_TYPE = number;
export type VDS_HBAPORT_TYPE = number;
export type VDS_HBAPORT_STATUS = number;
export type VDS_HBAPORT_SPEED_FLAG = number;
export type VDS_PATH_STATUS = number;
export type VDS_LOADBALANCE_POLICY_ENUM = number;
export type VDS_PROVIDER_LBSUPPORT_FLAG = number;
export type VDS_VERSION_SUPPORT_FLAG = number;
export type VDS_HWPROVIDER_TYPE = number;
export type VDS_ISCSI_LOGIN_TYPE = number;
export type VDS_ISCSI_AUTH_TYPE = number;
export type VDS_ISCSI_IPSEC_FLAG = number;
export type VDS_ISCSI_LOGIN_FLAG = number;
export type VDS_SUB_SYSTEM_STATUS = number;
export type VDS_SUB_SYSTEM_FLAG = number;
export type VDS_SUB_SYSTEM_SUPPORTED_RAID_TYPE_FLAG = number;
export type VDS_INTERCONNECT_FLAG = number;
export type VDS_CONTROLLER_STATUS = number;
export type VDS_PORT_STATUS = number;
export type VDS_DRIVE_STATUS = number;
export type VDS_DRIVE_FLAG = number;
export type VDS_LUN_TYPE = number;
export type VDS_LUN_STATUS = number;
export type VDS_LUN_FLAG = number;
export type VDS_LUN_PLEX_TYPE = number;
export type VDS_LUN_PLEX_STATUS = number;
export type VDS_LUN_PLEX_FLAG = number;
export type VDS_ISCSI_PORTAL_STATUS = number;
export type VDS_STORAGE_POOL_STATUS = number;
export type VDS_STORAGE_POOL_TYPE = number;
export type VDS_MAINTENANCE_OPERATION = number;
export type VDS_RAID_TYPE = number;

// Constants
export const VDS_NF_PACK_ARRIVE = 1;
export const VDS_NF_PACK_DEPART = 2;
export const VDS_NF_PACK_MODIFY = 3;
export const VDS_NF_FILE_SYSTEM_MODIFY = 203;
export const VDS_NF_FILE_SYSTEM_FORMAT_PROGRESS = 204;
export const VDS_NF_CONTROLLER_ARRIVE = 103;
export const VDS_NF_CONTROLLER_DEPART = 104;
export const VDS_NF_CONTROLLER_MODIFY = 350;
export const VDS_NF_CONTROLLER_REMOVED = 351;
export const VDS_NF_DRIVE_ARRIVE = 105;
export const VDS_NF_DRIVE_DEPART = 106;
export const VDS_NF_DRIVE_MODIFY = 107;
export const VDS_NF_DRIVE_REMOVED = 354;
export const VDS_NF_PORT_ARRIVE = 121;
export const VDS_NF_PORT_DEPART = 122;
export const VDS_NF_PORT_MODIFY = 352;
export const VDS_NF_PORT_REMOVED = 353;
export const VDS_NF_LUN_ARRIVE = 108;
export const VDS_NF_LUN_DEPART = 109;
export const VDS_NF_LUN_MODIFY = 110;
export const VDS_NF_DISK_ARRIVE = 8;
export const VDS_NF_DISK_DEPART = 9;
export const VDS_NF_DISK_MODIFY = 10;
export const VDS_NF_VOLUME_ARRIVE = 4;
export const VDS_NF_VOLUME_DEPART = 5;
export const VDS_NF_VOLUME_MODIFY = 6;
export const VDS_NF_VOLUME_REBUILDING_PROGRESS = 7;
export const VDS_NF_PARTITION_ARRIVE = 11;
export const VDS_NF_PARTITION_DEPART = 12;
export const VDS_NF_PARTITION_MODIFY = 13;
export const VDS_NF_SUB_SYSTEM_ARRIVE = 101;
export const VDS_NF_SUB_SYSTEM_DEPART = 102;
export const VDS_NF_PORTAL_ARRIVE = 123;
export const VDS_NF_PORTAL_DEPART = 124;
export const VDS_NF_PORTAL_MODIFY = 125;
export const VDS_NF_TARGET_ARRIVE = 126;
export const VDS_NF_TARGET_DEPART = 127;
export const VDS_NF_TARGET_MODIFY = 128;
export const VDS_NF_PORTAL_GROUP_ARRIVE = 129;
export const VDS_NF_PORTAL_GROUP_DEPART = 130;
export const VDS_NF_PORTAL_GROUP_MODIFY = 131;
export const VDS_NF_SUB_SYSTEM_MODIFY = 151;
export const VDS_NF_DRIVE_LETTER_FREE = 201;
export const VDS_NF_DRIVE_LETTER_ASSIGN = 202;
export const VDS_NF_MOUNT_POINTS_CHANGE = 205;
export const VDS_NF_FILE_SYSTEM_SHRINKING_PROGRESS = 206;
export const VDS_NF_SERVICE_OUT_OF_SYNC = 301;
export const GPT_PARTITION_NAME_LENGTH = 36;
export const VDS_HINT_FASTCRASHRECOVERYREQUIRED = 1;
export const VDS_HINT_MOSTLYREADS = 2;
export const VDS_HINT_OPTIMIZEFORSEQUENTIALREADS = 4;
export const VDS_HINT_OPTIMIZEFORSEQUENTIALWRITES = 8;
export const VDS_HINT_READBACKVERIFYENABLED = 16;
export const VDS_HINT_REMAPENABLED = 32;
export const VDS_HINT_WRITETHROUGHCACHINGENABLED = 64;
export const VDS_HINT_HARDWARECHECKSUMENABLED = 128;
export const VDS_HINT_ISYANKABLE = 256;
export const VDS_HINT_ALLOCATEHOTSPARE = 512;
export const VDS_HINT_BUSTYPE = 1024;
export const VDS_HINT_USEMIRROREDCACHE = 2048;
export const VDS_HINT_READCACHINGENABLED = 4096;
export const VDS_HINT_WRITECACHINGENABLED = 8192;
export const VDS_HINT_MEDIASCANENABLED = 16384;
export const VDS_HINT_CONSISTENCYCHECKENABLED = 32768;
export const VDS_REBUILD_PRIORITY_MIN = 0;
export const VDS_REBUILD_PRIORITY_MAX = 16;
export const VDS_POOL_ATTRIB_RAIDTYPE = 1;
export const VDS_POOL_ATTRIB_BUSTYPE = 2;
export const VDS_POOL_ATTRIB_ALLOW_SPINDOWN = 4;
export const VDS_POOL_ATTRIB_THIN_PROVISION = 8;
export const VDS_POOL_ATTRIB_NO_SINGLE_POF = 16;
export const VDS_POOL_ATTRIB_DATA_RDNCY_MAX = 32;
export const VDS_POOL_ATTRIB_DATA_RDNCY_MIN = 64;
export const VDS_POOL_ATTRIB_DATA_RDNCY_DEF = 128;
export const VDS_POOL_ATTRIB_PKG_RDNCY_MAX = 256;
export const VDS_POOL_ATTRIB_PKG_RDNCY_MIN = 512;
export const VDS_POOL_ATTRIB_PKG_RDNCY_DEF = 1024;
export const VDS_POOL_ATTRIB_STRIPE_SIZE = 2048;
export const VDS_POOL_ATTRIB_STRIPE_SIZE_MAX = 4096;
export const VDS_POOL_ATTRIB_STRIPE_SIZE_MIN = 8192;
export const VDS_POOL_ATTRIB_STRIPE_SIZE_DEF = 16384;
export const VDS_POOL_ATTRIB_NUM_CLMNS = 32768;
export const VDS_POOL_ATTRIB_NUM_CLMNS_MAX = 65536;
export const VDS_POOL_ATTRIB_NUM_CLMNS_MIN = 131072;
export const VDS_POOL_ATTRIB_NUM_CLMNS_DEF = 262144;
export const VDS_POOL_ATTRIB_DATA_AVL_HINT = 524288;
export const VDS_POOL_ATTRIB_ACCS_RNDM_HINT = 1048576;
export const VDS_POOL_ATTRIB_ACCS_DIR_HINT = 2097152;
export const VDS_POOL_ATTRIB_ACCS_SIZE_HINT = 4194304;
export const VDS_POOL_ATTRIB_ACCS_LTNCY_HINT = 8388608;
export const VDS_POOL_ATTRIB_ACCS_BDW_WT_HINT = 16777216;
export const VDS_POOL_ATTRIB_STOR_COST_HINT = 33554432;
export const VDS_POOL_ATTRIB_STOR_EFFCY_HINT = 67108864;
export const VDS_POOL_ATTRIB_CUSTOM_ATTRIB = 134217728;
export const VDS_ATTACH_VIRTUAL_DISK_FLAG_USE_FILE_ACL = 1;
export const MAX_FS_NAME_SIZE = 8;
export const MAX_FS_FORMAT_SUPPORT_NAME_SIZE = 32;
export const MAX_FS_ALLOWED_CLUSTER_SIZES_SIZE = 32;
export const VER_VDS_LUN_INFORMATION = 1;
export const VDS_E_NOT_SUPPORTED = 298364594152547328n;
export const VDS_E_INITIALIZED_FAILED = 298365693664175105n;
export const VDS_E_INITIALIZE_NOT_CALLED = 298366793175802882n;
export const VDS_E_ALREADY_REGISTERED = 298367892687430659n;
export const VDS_E_ANOTHER_CALL_IN_PROGRESS = 298368992199058436n;
export const VDS_E_OBJECT_NOT_FOUND = 298370091710686213n;
export const VDS_E_INVALID_SPACE = 298371191222313990n;
export const VDS_E_PARTITION_LIMIT_REACHED = 298372290733941767n;
export const VDS_E_PARTITION_NOT_EMPTY = 298373390245569544n;
export const VDS_E_OPERATION_PENDING = 298374489757197321n;
export const VDS_E_OPERATION_DENIED = 298375589268825098n;
export const VDS_E_OBJECT_DELETED = 298376688780452875n;
export const VDS_E_CANCEL_TOO_LATE = 298377788292080652n;
export const VDS_E_OPERATION_CANCELED = 298378887803708429n;
export const VDS_E_CANNOT_EXTEND = 298379987315336206n;
export const VDS_E_NOT_ENOUGH_SPACE = 298381086826963983n;
export const VDS_E_NOT_ENOUGH_DRIVE = 298382186338591760n;
export const VDS_E_BAD_COOKIE = 298383285850219537n;
export const VDS_E_NO_MEDIA = 298384385361847314n;
export const VDS_E_DEVICE_IN_USE = 298385484873475091n;
export const VDS_E_DISK_NOT_EMPTY = 298386584385102868n;
export const VDS_E_INVALID_OPERATION = 298387683896730645n;
export const VDS_E_PATH_NOT_FOUND = 298388783408358422n;
export const VDS_E_DISK_NOT_INITIALIZED = 298389882919986199n;
export const VDS_E_NOT_AN_UNALLOCATED_DISK = 298390982431613976n;
export const VDS_E_UNRECOVERABLE_ERROR = 298392081943241753n;
export const VDS_S_DISK_PARTIALLY_CLEANED = 298393179307385882n;
export const VDS_E_DMADMIN_SERVICE_CONNECTION_FAILED = 298394280966497307n;
export const VDS_E_PROVIDER_INITIALIZATION_FAILED = 298395380478125084n;
export const VDS_E_OBJECT_EXISTS = 298396479989752861n;
export const VDS_E_NO_DISKS_FOUND = 298397579501380638n;
export const VDS_E_PROVIDER_CACHE_CORRUPT = 298398679013008415n;
export const VDS_E_DMADMIN_METHOD_CALL_FAILED = 298399778524636192n;
export const VDS_S_PROVIDER_ERROR_LOADING_CACHE = 298400875888780321n;
export const VDS_E_PROVIDER_VOL_DEVICE_NAME_NOT_FOUND = 298401977547891746n;
export const VDS_E_PROVIDER_VOL_OPEN = 298403077059519523n;
export const VDS_E_DMADMIN_CORRUPT_NOTIFICATION = 298404176571147300n;
export const VDS_E_INCOMPATIBLE_FILE_SYSTEM = 298405276082775077n;
export const VDS_E_INCOMPATIBLE_MEDIA = 298406375594402854n;
export const VDS_E_ACCESS_DENIED = 298407475106030631n;
export const VDS_E_MEDIA_WRITE_PROTECTED = 298408574617658408n;
export const VDS_E_BAD_LABEL = 298409674129286185n;
export const VDS_E_CANT_QUICK_FORMAT = 298410773640913962n;
export const VDS_E_IO_ERROR = 298411873152541739n;
export const VDS_E_VOLUME_TOO_SMALL = 298412972664169516n;
export const VDS_E_VOLUME_TOO_BIG = 298414072175797293n;
export const VDS_E_CLUSTER_SIZE_TOO_SMALL = 298415171687425070n;
export const VDS_E_CLUSTER_SIZE_TOO_BIG = 298416271199052847n;
export const VDS_E_CLUSTER_COUNT_BEYOND_32BITS = 298417370710680624n;
export const VDS_E_OBJECT_STATUS_FAILED = 298418470222308401n;
export const VDS_E_VOLUME_INCOMPLETE = 298419569733936178n;
export const VDS_E_EXTENT_SIZE_LESS_THAN_MIN = 298420669245563955n;
export const VDS_S_UPDATE_BOOTFILE_FAILED = 298422866121335860n;
export const VDS_S_BOOT_PARTITION_NUMBER_CHANGE = 298422866121335862n;
export const VDS_E_BOOT_PARTITION_NUMBER_CHANGE = 298423967780447286n;
export const VDS_E_NO_FREE_SPACE = 298425067292075063n;
export const VDS_E_ACTIVE_PARTITION = 298426166803702840n;
export const VDS_E_PARTITION_OF_UNKNOWN_TYPE = 298427266315330617n;
export const VDS_E_LEGACY_VOLUME_FORMAT = 298428365826958394n;
export const VDS_E_NON_CONTIGUOUS_DATA_PARTITIONS = 298429465338586171n;
export const VDS_E_MIGRATE_OPEN_VOLUME = 298430564850213948n;
export const VDS_E_VOLUME_NOT_ONLINE = 298431664361841725n;
export const VDS_E_VOLUME_NOT_HEALTHY = 298432763873469502n;
export const VDS_E_VOLUME_SPANS_DISKS = 298433863385097279n;
export const VDS_E_REQUIRES_CONTIGUOUS_DISK_SPACE = 298434962896725056n;
export const VDS_E_BAD_PROVIDER_DATA = 298436062408352833n;
export const VDS_E_PROVIDER_FAILURE = 298437161919980610n;
export const VDS_S_VOLUME_COMPRESS_FAILED = 298438259284124739n;
export const VDS_E_PACK_OFFLINE = 298439360943236164n;
export const VDS_E_VOLUME_NOT_A_MIRROR = 298440460454863941n;
export const VDS_E_NO_EXTENTS_FOR_VOLUME = 298441559966491718n;
export const VDS_E_DISK_NOT_LOADED_TO_CACHE = 298442659478119495n;
export const VDS_E_INTERNAL_ERROR = 306882510732928072n;
export const VDS_S_ACCESS_PATH_NOT_DELETED = 298444856353899076n;
export const VDS_E_PROVIDER_TYPE_NOT_SUPPORTED = 298445958013002826n;
export const VDS_E_DISK_NOT_ONLINE = 298447057524630603n;
export const VDS_E_DISK_IN_USE_BY_VOLUME = 298448157036258380n;
export const VDS_S_IN_PROGRESS = 298449254400402509n;
export const VDS_E_ASYNC_OBJECT_FAILURE = 298450356059513934n;
export const VDS_E_VOLUME_NOT_MOUNTED = 298451455571141711n;
export const VDS_E_PACK_NOT_FOUND = 298452555082769488n;
export const VDS_E_IMPORT_SET_INCOMPLETE = 298453654594397265n;
export const VDS_E_DISK_NOT_IMPORTED = 298454754106025042n;
export const VDS_E_OBJECT_OUT_OF_SYNC = 298455853617652819n;
export const VDS_E_MISSING_DISK = 298456953129280596n;
export const VDS_E_DISK_PNP_REG_CORRUPT = 298458052640908373n;
export const VDS_E_LBN_REMAP_ENABLED_FLAG = 298459152152536150n;
export const VDS_E_NO_DRIVELETTER_FLAG = 298460251664163927n;
export const VDS_E_REVERT_ON_CLOSE = 298461351175791704n;
export const VDS_E_REVERT_ON_CLOSE_SET = 298462450687419481n;
export const VDS_E_IA64_BOOT_MIRRORED_TO_MBR = 298462450687419482n;
export const VDS_S_IA64_BOOT_MIRRORED_TO_MBR = 298463548051563610n;
export const VDS_S_UNABLE_TO_GET_GPT_ATTRIBUTES = 298464647563191387n;
export const VDS_E_VOLUME_TEMPORARILY_DISMOUNTED = 298465749222302812n;
export const VDS_E_VOLUME_PERMANENTLY_DISMOUNTED = 298466848733930589n;
export const VDS_E_VOLUME_HAS_PATH = 298467948245558366n;
export const VDS_E_TIMEOUT = 298469047757186143n;
export const VDS_E_REPAIR_VOLUMESTATE = 298470147268813920n;
export const VDS_E_LDM_TIMEOUT = 298471246780441697n;
export const VDS_E_REVERT_ON_CLOSE_MISMATCH = 298472346292069474n;
export const VDS_E_RETRY = 298473445803697251n;
export const VDS_E_ONLINE_PACK_EXISTS = 298474545315325028n;
export const VDS_S_EXTEND_FILE_SYSTEM_FAILED = 298475642679469157n;
export const VDS_E_EXTEND_FILE_SYSTEM_FAILED = 298476744338580582n;
export const VDS_S_MBR_BOOT_MIRRORED_TO_GPT = 298477841702724711n;
export const VDS_E_MAX_USABLE_MBR = 298478943361836136n;
export const VDS_S_GPT_BOOT_MIRRORED_TO_MBR = 298644969617630313n;
export const VDS_E_NO_SOFTWARE_PROVIDERS_LOADED = 298646069129258240n;
export const VDS_E_DISK_NOT_MISSING = 298647168640886017n;
export const VDS_E_NO_VOLUME_LAYOUT = 298648268152513794n;
export const VDS_E_CORRUPT_VOLUME_INFO = 298649367664141571n;
export const VDS_E_INVALID_ENUMERATOR = 298650467175769348n;
export const VDS_E_DRIVER_INTERNAL_ERROR = 298652666199024901n;
export const VDS_E_VOLUME_INVALID_NAME = 298653765710652679n;
export const VDS_S_DISK_IS_MISSING = 298654863074796808n;
export const VDS_E_CORRUPT_PARTITION_INFO = 298655964733908233n;
export const VDS_S_NONCONFORMANT_PARTITION_INFO = 298657062098052362n;
export const VDS_E_CORRUPT_EXTENT_INFO = 298658163757163787n;
export const VDS_E_DUP_EMPTY_PACK_GUID = 298659263268791564n;
export const VDS_E_DRIVER_NO_PACK_NAME = 298660362780419341n;
export const VDS_S_SYSTEM_PARTITION = 298661460144563470n;
export const VDS_E_BAD_PNP_MESSAGE = 298662561803674895n;
export const VDS_E_NO_PNP_DISK_ARRIVE = 298663661315302672n;
export const VDS_E_NO_PNP_VOLUME_ARRIVE = 298664760826930449n;
export const VDS_E_NO_PNP_DISK_REMOVE = 298665860338558226n;
export const VDS_E_NO_PNP_VOLUME_REMOVE = 298666959850186003n;
export const VDS_E_PROVIDER_EXITING = 298668059361813780n;
export const VDS_E_EXTENT_EXCEEDS_DISK_FREE_SPACE = 298669158873441557n;
export const VDS_E_MEMBER_SIZE_INVALID = 298670258385069334n;
export const VDS_S_NO_NOTIFICATION = 298671355749213463n;
export const VDS_S_DEFAULT_PLEX_MEMBER_IDS = 298672455260841240n;
export const VDS_E_INVALID_DISK = 298673556919952665n;
export const VDS_E_INVALID_PACK = 298674656431580442n;
export const VDS_E_VOLUME_ON_DISK = 298675755943208219n;
export const VDS_E_DRIVER_INVALID_PARAM = 298676855454835996n;
export const VDS_E_TARGET_PACK_NOT_EMPTY = 298677954966463773n;
export const VDS_E_CANNOT_SHRINK = 298679054478091550n;
export const VDS_E_MULTIPLE_PACKS = 298680153989719327n;
export const VDS_E_PACK_ONLINE = 298681253501347104n;
export const VDS_E_INVALID_PLEX_COUNT = 298682353012974881n;
export const VDS_E_INVALID_MEMBER_COUNT = 298683452524602658n;
export const VDS_E_INVALID_PLEX_ORDER = 298684552036230435n;
export const VDS_E_INVALID_MEMBER_ORDER = 298685651547858212n;
export const VDS_E_INVALID_STRIPE_SIZE = 298686751059485989n;
export const VDS_E_INVALID_DISK_COUNT = 298687850571113766n;
export const VDS_E_INVALID_EXTENT_COUNT = 298688950082741543n;
export const VDS_E_SOURCE_IS_TARGET_PACK = 298690049594369320n;
export const VDS_E_VOLUME_DISK_COUNT_MAX_EXCEEDED = 298691149105997097n;
export const VDS_E_CORRUPT_NOTIFICATION_INFO = 298693348129252650n;
export const VDS_E_INVALID_PLEX_GUID = 298694447640880428n;
export const VDS_E_DISK_NOT_FOUND_IN_PACK = 298695547152508205n;
export const VDS_E_DUPLICATE_DISK = 298696646664135982n;
export const VDS_E_LAST_VALID_DISK = 298697746175763759n;
export const VDS_E_INVALID_SECTOR_SIZE = 298698845687391536n;
export const VDS_E_ONE_EXTENT_PER_DISK = 298699945199019313n;
export const VDS_E_INVALID_BLOCK_SIZE = 298701044710647090n;
export const VDS_E_PLEX_SIZE_INVALID = 298702144222274867n;
export const VDS_E_NO_EXTENTS_FOR_PLEX = 298703243733902644n;
export const VDS_E_INVALID_PLEX_TYPE = 298704343245530421n;
export const VDS_E_INVALID_PLEX_BLOCK_SIZE = 298705442757158198n;
export const VDS_E_NO_HEALTHY_DISKS = 298706542268785975n;
export const VDS_E_CONFIG_LIMIT = 298707641780413752n;
export const VDS_E_DISK_CONFIGURATION_CORRUPTED = 298708741292041529n;
export const VDS_E_DISK_CONFIGURATION_NOT_IN_SYNC = 298709840803669306n;
export const VDS_E_DISK_CONFIGURATION_UPDATE_FAILED = 298710940315297083n;
export const VDS_E_DISK_DYNAMIC = 298712039826924860n;
export const VDS_E_DRIVER_OBJECT_NOT_FOUND = 298713139338552637n;
export const VDS_E_PARTITION_NOT_CYLINDER_ALIGNED = 298714238850180414n;
export const VDS_E_DISK_LAYOUT_PARTITIONS_TOO_SMALL = 298715338361808191n;
export const VDS_E_DISK_IO_FAILING = 298716437873435968n;
export const VDS_E_DYNAMIC_DISKS_NOT_SUPPORTED = 298717537385063745n;
export const VDS_E_FAULT_TOLERANT_DISKS_NOT_SUPPORTED = 298718636896691522n;
export const VDS_E_GPT_ATTRIBUTES_INVALID = 298719736408319299n;
export const VDS_E_MEMBER_IS_HEALTHY = 298720835919947076n;
export const VDS_E_MEMBER_REGENERATING = 298721935431574853n;
export const VDS_E_PACK_NAME_INVALID = 298723034943202630n;
export const VDS_E_PLEX_IS_HEALTHY = 298724134454830407n;
export const VDS_E_PLEX_LAST_ACTIVE = 298725233966458184n;
export const VDS_E_PLEX_MISSING = 298726333478085961n;
export const VDS_E_MEMBER_MISSING = 298727432989713738n;
export const VDS_E_PLEX_REGENERATING = 298729632012969291n;
export const VDS_E_UNEXPECTED_DISK_LAYOUT_CHANGE = 298730731524597069n;
export const VDS_E_INVALID_VOLUME_LENGTH = 298731831036224846n;
export const VDS_E_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE = 298732930547852623n;
export const VDS_E_VOLUME_NOT_RETAINED = 298734030059480400n;
export const VDS_E_VOLUME_RETAINED = 298736229082735953n;
export const VDS_E_ALIGN_BEYOND_FIRST_CYLINDER = 298737328594363731n;
export const VDS_E_ALIGN_NOT_SECTOR_SIZE_MULTIPLE = 298738428105991508n;
export const VDS_E_ALIGN_NOT_ZERO = 298739527617619285n;
export const VDS_E_CACHE_CORRUPT = 298740627129247062n;
export const VDS_E_CANNOT_CLEAR_VOLUME_FLAG = 298741726640874839n;
export const VDS_E_DISK_BEING_CLEANED = 298742826152502616n;
export const VDS_E_DISK_NOT_CONVERTIBLE = 298743925664130393n;
export const VDS_E_DISK_REMOVEABLE = 298745025175758170n;
export const VDS_E_DISK_REMOVEABLE_NOT_EMPTY = 298746124687385947n;
export const VDS_E_DRIVE_LETTER_NOT_FREE = 298747224199013724n;
export const VDS_E_EXTEND_MULTIPLE_DISKS_NOT_SUPPORTED = 298748323710641501n;
export const VDS_E_INVALID_DRIVE_LETTER = 298749423222269278n;
export const VDS_E_INVALID_DRIVE_LETTER_COUNT = 298750522733897055n;
export const VDS_E_INVALID_FS_FLAG = 298751622245524832n;
export const VDS_E_INVALID_FS_TYPE = 298752721757152609n;
export const VDS_E_INVALID_OBJECT_TYPE = 298753821268780386n;
export const VDS_E_INVALID_PARTITION_LAYOUT = 298754920780408163n;
export const VDS_E_INVALID_PARTITION_STYLE = 298756020292035940n;
export const VDS_E_INVALID_PARTITION_TYPE = 298757119803663717n;
export const VDS_E_INVALID_PROVIDER_CLSID = 298758219315291494n;
export const VDS_E_INVALID_PROVIDER_ID = 298759318826919271n;
export const VDS_E_INVALID_PROVIDER_NAME = 298760418338547048n;
export const VDS_E_INVALID_PROVIDER_TYPE = 298761517850174825n;
export const VDS_E_INVALID_PROVIDER_VERSION_GUID = 298762617361802602n;
export const VDS_E_INVALID_PROVIDER_VERSION_STRING = 298763716873430379n;
export const VDS_E_INVALID_QUERY_PROVIDER_FLAG = 298764816385058156n;
export const VDS_E_INVALID_SERVICE_FLAG = 298765915896685933n;
export const VDS_E_INVALID_VOLUME_FLAG = 298767015408313710n;
export const VDS_E_PARTITION_NOT_OEM = 298768114919941487n;
export const VDS_E_PARTITION_PROTECTED = 298769214431569264n;
export const VDS_E_PARTITION_STYLE_MISMATCH = 298770313943197041n;
export const VDS_E_PROVIDER_INTERNAL_ERROR = 298771413454824818n;
export const VDS_E_SHRINK_SIZE_LESS_THAN_MIN = 298772512966452595n;
export const VDS_E_SHRINK_SIZE_TOO_BIG = 298773612478080372n;
export const VDS_E_UNRECOVERABLE_PROVIDER_ERROR = 298774711989708149n;
export const VDS_E_VOLUME_HIDDEN = 298775811501335926n;
export const VDS_S_DISMOUNT_FAILED = 298776908865480055n;
export const VDS_S_REMOUNT_FAILED = 298778008377107832n;
export const VDS_E_FLAG_ALREADY_SET = 298779110036219257n;
export const VDS_S_RESYNC_NOTIFICATION_TASK_FAILED = 298780207400363386n;
export const VDS_E_DISTINCT_VOLUME = 298781309059474811n;
export const VDS_E_VOLUME_NOT_FOUND_IN_PACK = 298782408571102588n;
export const VDS_E_PARTITION_NON_DATA = 298783508082730365n;
export const VDS_E_CRITICAL_PLEX = 298784607594358142n;
export const VDS_E_VOLUME_SYNCHRONIZING = 298785707105985919n;
export const VDS_E_VOLUME_REGENERATING = 298786806617613696n;
export const VDS_S_VSS_FLUSH_AND_HOLD_WRITES = 298787903981757825n;
export const VDS_S_VSS_RELEASE_WRITES = 298789003493385602n;
export const VDS_S_FS_LOCK = 298790103005013379n;
export const VDS_E_READONLY = 298791204664124804n;
export const VDS_E_INVALID_VOLUME_TYPE = 298792304175752581n;
export const VDS_E_BAD_BOOT_DISK = 298793403687380358n;
export const VDS_E_LOG_UPDATE = 298794503199008135n;
export const VDS_E_VOLUME_MIRRORED = 298795602710635912n;
export const VDS_E_VOLUME_SIMPLE_SPANNED = 298796702222263689n;
export const VDS_E_NO_VALID_LOG_COPIES = 298797801733891466n;
export const VDS_S_PLEX_NOT_LOADED_TO_CACHE = 298797799586407819n;
export const VDS_E_PLEX_NOT_LOADED_TO_CACHE = 298798901245519243n;
export const VDS_E_PARTITION_MSR = 298800000757147020n;
export const VDS_E_PARTITION_LDM = 298801100268774797n;
export const VDS_S_WINPE_BOOTENTRY = 298802197632918926n;
export const VDS_E_ALIGN_NOT_A_POWER_OF_TWO = 298803299292030351n;
export const VDS_E_ALIGN_IS_ZERO = 298804398803658128n;
export const VDS_E_SHRINK_IN_PROGRESS = 298805498315285905n;
export const VDS_E_CANT_INVALIDATE_FVE = 298806597826913682n;
export const VDS_E_FS_NOT_DETERMINED = 298808796850169235n;
export const VDS_E_DISK_NOT_OFFLINE = 298809896361797013n;
export const VDS_E_FAILED_TO_ONLINE_DISK = 298810995873424790n;
export const VDS_E_FAILED_TO_OFFLINE_DISK = 298812095385052567n;
export const VDS_E_BAD_REVISION_NUMBER = 298813194896680344n;
export const VDS_E_SHRINK_USER_CANCELLED = 298814294408308121n;
export const VDS_E_SHRINK_DIRTY_VOLUME = 299207919571051930n;
export const VDS_S_NAME_TRUNCATED = 299209016935196416n;
export const VDS_E_NAME_NOT_UNIQUE = 299210118594307841n;
export const VDS_S_STATUSES_INCOMPLETELY_SET = 299211215958451970n;
export const VDS_E_ADDRESSES_INCOMPLETELY_SET = 299213417129191171n;
export const VDS_E_SECURITY_INCOMPLETELY_SET = 299214516640818949n;
export const VDS_E_TARGET_SPECIFIC_NOT_SUPPORTED = 299215616152446726n;
export const VDS_E_INITIATOR_SPECIFIC_NOT_SUPPORTED = 299216715664074503n;
export const VDS_E_ISCSI_LOGIN_FAILED = 299217815175702280n;
export const VDS_E_ISCSI_LOGOUT_FAILED = 299218914687330057n;
export const VDS_E_ISCSI_SESSION_NOT_FOUND = 299220014198957834n;
export const VDS_E_ASSOCIATED_LUNS_EXIST = 299221113710585611n;
export const VDS_E_ASSOCIATED_PORTALS_EXIST = 299222213222213388n;
export const VDS_E_NO_DISCOVERY_DOMAIN = 299223312733841165n;
export const VDS_E_MULTIPLE_DISCOVERY_DOMAINS = 299224412245468942n;
export const VDS_E_NO_DISK_PATHNAME = 299225511757096719n;
export const VDS_E_ISCSI_LOGOUT_INCOMPLETE = 299226611268724496n;
export const VDS_E_NO_VOLUME_PATHNAME = 299227710780352273n;
export const VDS_E_PROVIDER_CACHE_OUTOFSYNC = 299228810291980050n;
export const VDS_E_NO_IMPORT_TARGET = 299229909803607827n;
export const VDS_S_ALREADY_EXISTS = 299231007167751956n;
export const VDS_S_PROPERTIES_INCOMPLETE = 299489392400279317n;
export const VDS_S_ISCSI_SESSION_NOT_FOUND_PERSISTENT_LOGIN_REMOVED = 299490491911907328n;
export const VDS_S_ISCSI_PERSISTENT_LOGIN_MAY_NOT_BE_REMOVED = 299491591423535105n;
export const VDS_S_ISCSI_LOGIN_ALREAD_EXISTS = 299492690935162882n;
export const VDS_E_UNABLE_TO_FIND_BOOT_DISK = 299493792594274307n;
export const VDS_E_INCORRECT_BOOT_VOLUME_EXTENT_INFO = 299494892105902084n;
export const VDS_E_GET_SAN_POLICY = 299495991617529861n;
export const VDS_E_SET_SAN_POLICY = 299497091129157638n;
export const VDS_E_BOOT_DISK = 299498190640785415n;
export const VDS_S_DISK_MOUNT_FAILED = 299499288004929544n;
export const VDS_S_DISK_DISMOUNT_FAILED = 299500387516557321n;
export const VDS_E_DISK_IS_OFFLINE = 299501489175668746n;
export const VDS_E_DISK_IS_READ_ONLY = 299502588687296523n;
export const VDS_E_PAGEFILE_DISK = 299503688198924300n;
export const VDS_E_HIBERNATION_FILE_DISK = 299504787710552077n;
export const VDS_E_CRASHDUMP_DISK = 299505887222179854n;
export const VDS_E_UNABLE_TO_FIND_SYSTEM_DISK = 299506986733807631n;
export const VDS_E_INCORRECT_SYSTEM_VOLUME_EXTENT_INFO = 299508086245435408n;
export const VDS_E_SYSTEM_DISK = 299509185757063185n;
export const VDS_E_VOLUME_SHRINK_FVE_LOCKED = 299510285268690962n;
export const VDS_E_VOLUME_SHRINK_FVE_CORRUPT = 299511384780318739n;
export const VDS_E_VOLUME_SHRINK_FVE_RECOVERY = 299512484291946516n;
export const VDS_E_VOLUME_SHRINK_FVE = 299513583803574293n;
export const VDS_E_SHRINK_OVER_DATA = 299514683315202070n;
export const VDS_E_INVALID_SHRINK_SIZE = 299515782826829847n;
export const VDS_E_LUN_DISK_MISSING = 299516882338457624n;
export const VDS_E_LUN_DISK_FAILED = 299517981850085401n;
export const VDS_E_LUN_DISK_NOT_READY = 299519081361713178n;
export const VDS_E_LUN_DISK_NO_MEDIA = 299520180873340955n;
export const VDS_E_LUN_NOT_READY = 299521280384968732n;
export const VDS_E_LUN_OFFLINE = 299522379896596509n;
export const VDS_E_LUN_FAILED = 299523479408224286n;
export const VDS_E_VOLUME_EXTEND_FVE_LOCKED = 299524578919852063n;
export const VDS_E_VOLUME_EXTEND_FVE_CORRUPT = 299525678431479840n;
export const VDS_E_VOLUME_EXTEND_FVE_RECOVERY = 299526777943107617n;
export const VDS_E_VOLUME_EXTEND_FVE = 299527877454735394n;
export const VDS_E_SECTOR_SIZE_ERROR = 299770869524473891n;
export const VDS_E_INITIATOR_ADAPTER_NOT_FOUND = 299771969036101888n;
export const VDS_E_TARGET_PORTAL_NOT_FOUND = 299773068547729665n;
export const VDS_E_INVALID_PORT_PATH = 299774168059357442n;
export const VDS_E_INVALID_ISCSI_TARGET_NAME = 299775267570985219n;
export const VDS_E_SET_TUNNEL_MODE_OUTER_ADDRESS = 299776367082612996n;
export const VDS_E_ISCSI_GET_IKE_INFO = 299777466594240773n;
export const VDS_E_ISCSI_SET_IKE_INFO = 299778566105868550n;
export const VDS_E_SUBSYSTEM_ID_IS_NULL = 299779665617496327n;
export const VDS_E_ISCSI_INITIATOR_NODE_NAME = 299780765129124104n;
export const VDS_E_ISCSI_GROUP_PRESHARE_KEY = 299781864640751881n;
export const VDS_E_ISCSI_CHAP_SECRET = 299782964152379658n;
export const VDS_E_INVALID_IP_ADDRESS = 299784063664007435n;
export const VDS_E_REBOOT_REQUIRED = 299785163175635212n;
export const VDS_E_VOLUME_GUID_PATHNAME_NOT_ALLOWED = 299786262687262989n;
export const VDS_E_BOOT_PAGEFILE_DRIVE_LETTER = 299787362198890766n;
export const VDS_E_DELETE_WITH_CRITICAL = 299788461710518543n;
export const VDS_E_CLEAN_WITH_DATA = 299789561222146320n;
export const VDS_E_CLEAN_WITH_OEM = 299790660733774097n;
export const VDS_E_CLEAN_WITH_CRITICAL = 299791760245401874n;
export const VDS_E_FORMAT_CRITICAL = 299792859757029651n;
export const VDS_E_NTFS_FORMAT_NOT_SUPPORTED = 299793959268657428n;
export const VDS_E_FAT32_FORMAT_NOT_SUPPORTED = 299795058780285205n;
export const VDS_E_FAT_FORMAT_NOT_SUPPORTED = 299796158291912982n;
export const VDS_E_FORMAT_NOT_SUPPORTED = 299797257803540759n;
export const VDS_E_COMPRESSION_NOT_SUPPORTED = 299798357315168536n;
export const VDS_E_VDISK_NOT_OPEN = 299799456826796313n;
export const VDS_E_VDISK_INVALID_OP_STATE = 299800556338424090n;
export const VDS_E_INVALID_PATH = 299801655850051867n;
export const VDS_E_INVALID_ISCSI_PATH = 299802755361679644n;
export const VDS_E_SHRINK_LUN_NOT_UNMASKED = 299803854873307421n;
export const VDS_E_LUN_DISK_READ_ONLY = 299804954384935198n;
export const VDS_E_LUN_UPDATE_DISK = 299806053896562975n;
export const VDS_E_LUN_DYNAMIC = 299807153408190752n;
export const VDS_E_LUN_DYNAMIC_OFFLINE = 299808252919818529n;
export const VDS_E_LUN_SHRINK_GPT_HEADER = 299809352431446306n;
export const VDS_E_MIRROR_NOT_SUPPORTED = 299810451943074083n;
export const VDS_E_RAID5_NOT_SUPPORTED = 299811551454701860n;
export const VDS_E_DISK_NOT_CONVERTIBLE_SIZE = 299812650966329637n;
export const VDS_E_OFFLINE_NOT_SUPPORTED = 299813750477957414n;
export const VDS_E_VDISK_PATHNAME_INVALID = 299814849989585191n;
export const VDS_E_EXTEND_TOO_MANY_CLUSTERS = 299815949501212968n;
export const VDS_E_EXTEND_UNKNOWN_FILESYSTEM = 299817049012840745n;
export const VDS_E_SHRINK_UNKNOWN_FILESYSTEM = 299818148524468522n;
export const VDS_E_VD_DISK_NOT_OPEN = 299819248036096299n;
export const VDS_E_VD_DISK_IS_EXPANDING = 299820347547724076n;
export const VDS_E_VD_DISK_IS_COMPACTING = 299821447059351853n;
export const VDS_E_VD_DISK_IS_MERGING = 299822546570979630n;
export const VDS_E_VD_IS_ATTACHED = 299823646082607407n;
export const VDS_E_VD_DISK_ALREADY_OPEN = 299824745594235184n;
export const VDS_E_VD_DISK_ALREADY_EXPANDING = 299825845105862961n;
export const VDS_E_VD_ALREADY_COMPACTING = 299826944617490738n;
export const VDS_E_VD_ALREADY_MERGING = 299828044129118515n;
export const VDS_E_VD_ALREADY_ATTACHED = 299829143640746292n;
export const VDS_E_VD_ALREADY_DETACHED = 299830243152374069n;
export const VDS_E_VD_NOT_ATTACHED_READONLY = 299831342664001846n;
export const VDS_E_VD_IS_BEING_ATTACHED = 299832442175629623n;
export const VDS_E_VD_IS_BEING_DETACHED = 300052344501184824n;
export const VDS_E_NO_POOL = 300053444012812800n;
export const VDS_E_NO_POOL_CREATED = 300054543524440577n;
export const VDS_E_NO_MAINTENANCE_MODE = 300055643036068354n;
export const VDS_E_BLOCK_CLUSTERED = 300056742547696131n;
export const VDS_E_DISK_HAS_BANDS = 300057842059323908n;
export const VDS_E_INVALID_STATE = 300058941570951685n;
export const VDS_E_REFS_FORMAT_NOT_SUPPORTED = 300060041082579462n;
export const VDS_E_DELETE_WITH_BOOTBACKING = 300061140594207239n;
export const VDS_E_FORMAT_WITH_BOOTBACKING = 300062240105835016n;
export const VDS_E_CLEAN_WITH_BOOTBACKING = 300333819477895689n;
export const VDS_E_SHRINK_EXTEND_UNALIGNED = 298083119175838464n;
export const VDSStorageIdCodeSetReserved = 0;
export const VDSStorageIdCodeSetBinary = 1;
export const VDSStorageIdCodeSetAscii = 2;
export const VDSStorageIdCodeSetUtf8 = 3;
export const VDSStorageIdTypeVendorSpecific = 0;
export const VDSStorageIdTypeVendorId = 1;
export const VDSStorageIdTypeEUI64 = 2;
export const VDSStorageIdTypeFCPHName = 3;
export const VDSStorageIdTypePortRelative = 4;
export const VDSStorageIdTypeTargetPortGroup = 5;
export const VDSStorageIdTypeLogicalUnitGroup = 6;
export const VDSStorageIdTypeMD5LogicalUnitIdentifier = 7;
export const VDSStorageIdTypeScsiNameString = 8;
export const VDSBusTypeUnknown = 0;
export const VDSBusTypeScsi = 1;
export const VDSBusTypeAtapi = 2;
export const VDSBusTypeAta = 3;
export const VDSBusType1394 = 4;
export const VDSBusTypeSsa = 5;
export const VDSBusTypeFibre = 6;
export const VDSBusTypeUsb = 7;
export const VDSBusTypeRAID = 8;
export const VDSBusTypeiScsi = 9;
export const VDSBusTypeSas = 10;
export const VDSBusTypeSata = 11;
export const VDSBusTypeSd = 12;
export const VDSBusTypeMmc = 13;
export const VDSBusTypeMax = 14;
export const VDSBusTypeVirtual = 14;
export const VDSBusTypeFileBackedVirtual = 15;
export const VDSBusTypeSpaces = 16;
export const VDSBusTypeNVMe = 17;
export const VDSBusTypeScm = 18;
export const VDSBusTypeUfs = 19;
export const VDSBusTypeMaxReserved = 127;
export const VDS_IA_UNKNOWN = 0;
export const VDS_IA_FCFS = 1;
export const VDS_IA_FCPH = 2;
export const VDS_IA_FCPH3 = 3;
export const VDS_IA_MAC = 4;
export const VDS_IA_SCSI = 5;
export const VDS_OT_UNKNOWN = 0;
export const VDS_OT_PROVIDER = 1;
export const VDS_OT_PACK = 10;
export const VDS_OT_VOLUME = 11;
export const VDS_OT_VOLUME_PLEX = 12;
export const VDS_OT_DISK = 13;
export const VDS_OT_SUB_SYSTEM = 30;
export const VDS_OT_CONTROLLER = 31;
export const VDS_OT_DRIVE = 32;
export const VDS_OT_LUN = 33;
export const VDS_OT_LUN_PLEX = 34;
export const VDS_OT_PORT = 35;
export const VDS_OT_PORTAL = 36;
export const VDS_OT_TARGET = 37;
export const VDS_OT_PORTAL_GROUP = 38;
export const VDS_OT_STORAGE_POOL = 39;
export const VDS_OT_HBAPORT = 90;
export const VDS_OT_INIT_ADAPTER = 91;
export const VDS_OT_INIT_PORTAL = 92;
export const VDS_OT_ASYNC = 100;
export const VDS_OT_ENUM = 101;
export const VDS_OT_VDISK = 200;
export const VDS_OT_OPEN_VDISK = 201;
export const VDS_PT_UNKNOWN = 0;
export const VDS_PT_SOFTWARE = 1;
export const VDS_PT_HARDWARE = 2;
export const VDS_PT_VIRTUALDISK = 3;
export const VDS_PT_MAX = 4;
export const VDS_PF_DYNAMIC = 1;
export const VDS_PF_INTERNAL_HARDWARE_PROVIDER = 2;
export const VDS_PF_ONE_DISK_ONLY_PER_PACK = 4;
export const VDS_PF_ONE_PACK_ONLINE_ONLY = 8;
export const VDS_PF_VOLUME_SPACE_MUST_BE_CONTIGUOUS = 16;
export const VDS_PF_SUPPORT_DYNAMIC = "-2147483648";
export const VDS_PF_SUPPORT_FAULT_TOLERANT = 1073741824;
export const VDS_PF_SUPPORT_DYNAMIC_1394 = 536870912;
export const VDS_PF_SUPPORT_MIRROR = 32;
export const VDS_PF_SUPPORT_RAID5 = 64;
export const VDS_RA_UNKNOWN = 0;
export const VDS_RA_REFRESH = 1;
export const VDS_RA_RESTART = 2;
export const VDS_NTT_UNKNOWN = 0;
export const VDS_NTT_PACK = 10;
export const VDS_NTT_VOLUME = 11;
export const VDS_NTT_DISK = 13;
export const VDS_NTT_PARTITION = 60;
export const VDS_NTT_DRIVE_LETTER = 61;
export const VDS_NTT_FILE_SYSTEM = 62;
export const VDS_NTT_MOUNT_POINT = 63;
export const VDS_NTT_SUB_SYSTEM = 30;
export const VDS_NTT_CONTROLLER = 31;
export const VDS_NTT_DRIVE = 32;
export const VDS_NTT_LUN = 33;
export const VDS_NTT_PORT = 35;
export const VDS_NTT_PORTAL = 36;
export const VDS_NTT_TARGET = 37;
export const VDS_NTT_PORTAL_GROUP = 38;
export const VDS_NTT_SERVICE = 200;
export const VDS_ASYNCOUT_UNKNOWN = 0;
export const VDS_ASYNCOUT_CREATEVOLUME = 1;
export const VDS_ASYNCOUT_EXTENDVOLUME = 2;
export const VDS_ASYNCOUT_SHRINKVOLUME = 3;
export const VDS_ASYNCOUT_ADDVOLUMEPLEX = 4;
export const VDS_ASYNCOUT_BREAKVOLUMEPLEX = 5;
export const VDS_ASYNCOUT_REMOVEVOLUMEPLEX = 6;
export const VDS_ASYNCOUT_REPAIRVOLUMEPLEX = 7;
export const VDS_ASYNCOUT_RECOVERPACK = 8;
export const VDS_ASYNCOUT_REPLACEDISK = 9;
export const VDS_ASYNCOUT_CREATEPARTITION = 10;
export const VDS_ASYNCOUT_CLEAN = 11;
export const VDS_ASYNCOUT_CREATELUN = 50;
export const VDS_ASYNCOUT_ADDLUNPLEX = 52;
export const VDS_ASYNCOUT_REMOVELUNPLEX = 53;
export const VDS_ASYNCOUT_EXTENDLUN = 54;
export const VDS_ASYNCOUT_SHRINKLUN = 55;
export const VDS_ASYNCOUT_RECOVERLUN = 56;
export const VDS_ASYNCOUT_LOGINTOTARGET = 60;
export const VDS_ASYNCOUT_LOGOUTFROMTARGET = 61;
export const VDS_ASYNCOUT_CREATETARGET = 62;
export const VDS_ASYNCOUT_CREATEPORTALGROUP = 63;
export const VDS_ASYNCOUT_DELETETARGET = 64;
export const VDS_ASYNCOUT_ADDPORTAL = 65;
export const VDS_ASYNCOUT_REMOVEPORTAL = 66;
export const VDS_ASYNCOUT_DELETEPORTALGROUP = 67;
export const VDS_ASYNCOUT_FORMAT = 101;
export const VDS_ASYNCOUT_CREATE_VDISK = 200;
export const VDS_ASYNCOUT_ATTACH_VDISK = 201;
export const VDS_ASYNCOUT_COMPACT_VDISK = 202;
export const VDS_ASYNCOUT_MERGE_VDISK = 203;
export const VDS_ASYNCOUT_EXPAND_VDISK = 204;
export const VDS_IPT_TEXT = 0;
export const VDS_IPT_IPV4 = 1;
export const VDS_IPT_IPV6 = 2;
export const VDS_IPT_EMPTY = 3;
export const VDS_H_UNKNOWN = 0;
export const VDS_H_HEALTHY = 1;
export const VDS_H_REBUILDING = 2;
export const VDS_H_STALE = 3;
export const VDS_H_FAILING = 4;
export const VDS_H_FAILING_REDUNDANCY = 5;
export const VDS_H_FAILED_REDUNDANCY = 6;
export const VDS_H_FAILED_REDUNDANCY_FAILING = 7;
export const VDS_H_FAILED = 8;
export const VDS_H_REPLACED = 9;
export const VDS_H_PENDING_FAILURE = 10;
export const VDS_H_DEGRADED = 11;
export const VDS_TS_UNKNOWN = 0;
export const VDS_TS_STABLE = 1;
export const VDS_TS_EXTENDING = 2;
export const VDS_TS_SHRINKING = 3;
export const VDS_TS_RECONFIGING = 4;
export const VDS_TS_RESTRIPING = 5;
export const VDS_FST_UNKNOWN = 0;
export const VDS_FST_RAW = 1;
export const VDS_FST_FAT = 2;
export const VDS_FST_FAT32 = 3;
export const VDS_FST_NTFS = 4;
export const VDS_FST_CDFS = 5;
export const VDS_FST_UDF = 6;
export const VDS_FST_EXFAT = 7;
export const VDS_FST_CSVFS = 8;
export const VDS_FST_REFS = 9;
export const VDS_HPT_UNKNOWN = 1;
export const VDS_HPT_OTHER = 2;
export const VDS_HPT_NOTPRESENT = 3;
export const VDS_HPT_NPORT = 5;
export const VDS_HPT_NLPORT = 6;
export const VDS_HPT_FLPORT = 7;
export const VDS_HPT_FPORT = 8;
export const VDS_HPT_EPORT = 9;
export const VDS_HPT_GPORT = 10;
export const VDS_HPT_LPORT = 20;
export const VDS_HPT_PTP = 21;
export const VDS_HPS_UNKNOWN = 1;
export const VDS_HPS_ONLINE = 2;
export const VDS_HPS_OFFLINE = 3;
export const VDS_HPS_BYPASSED = 4;
export const VDS_HPS_DIAGNOSTICS = 5;
export const VDS_HPS_LINKDOWN = 6;
export const VDS_HPS_ERROR = 7;
export const VDS_HPS_LOOPBACK = 8;
export const VDS_HSF_UNKNOWN = 0;
export const VDS_HSF_1GBIT = 1;
export const VDS_HSF_2GBIT = 2;
export const VDS_HSF_10GBIT = 4;
export const VDS_HSF_4GBIT = 8;
export const VDS_HSF_NOT_NEGOTIATED = 32768;
export const VDS_MPS_UNKNOWN = 0;
export const VDS_MPS_ONLINE = 1;
export const VDS_MPS_FAILED = 5;
export const VDS_MPS_STANDBY = 7;
export const VDS_LBP_UNKNOWN = 0;
export const VDS_LBP_FAILOVER = 1;
export const VDS_LBP_ROUND_ROBIN = 2;
export const VDS_LBP_ROUND_ROBIN_WITH_SUBSET = 3;
export const VDS_LBP_DYN_LEAST_QUEUE_DEPTH = 4;
export const VDS_LBP_WEIGHTED_PATHS = 5;
export const VDS_LBP_LEAST_BLOCKS = 6;
export const VDS_LBP_VENDOR_SPECIFIC = 7;
export const VDS_LBF_FAILOVER = 1;
export const VDS_LBF_ROUND_ROBIN = 2;
export const VDS_LBF_ROUND_ROBIN_WITH_SUBSET = 4;
export const VDS_LBF_DYN_LEAST_QUEUE_DEPTH = 8;
export const VDS_LBF_WEIGHTED_PATHS = 16;
export const VDS_LBF_LEAST_BLOCKS = 32;
export const VDS_LBF_VENDOR_SPECIFIC = 64;
export const VDS_VSF_1_0 = 1;
export const VDS_VSF_1_1 = 2;
export const VDS_VSF_2_0 = 4;
export const VDS_VSF_2_1 = 8;
export const VDS_VSF_3_0 = 16;
export const VDS_HWT_UNKNOWN = 0;
export const VDS_HWT_PCI_RAID = 1;
export const VDS_HWT_FIBRE_CHANNEL = 2;
export const VDS_HWT_ISCSI = 3;
export const VDS_HWT_SAS = 4;
export const VDS_HWT_HYBRID = 5;
export const VDS_ILT_MANUAL = 0;
export const VDS_ILT_PERSISTENT = 1;
export const VDS_ILT_BOOT = 2;
export const VDS_IAT_NONE = 0;
export const VDS_IAT_CHAP = 1;
export const VDS_IAT_MUTUAL_CHAP = 2;
export const VDS_IIF_VALID = 1;
export const VDS_IIF_IKE = 2;
export const VDS_IIF_MAIN_MODE = 4;
export const VDS_IIF_AGGRESSIVE_MODE = 8;
export const VDS_IIF_PFS_ENABLE = 16;
export const VDS_IIF_TRANSPORT_MODE_PREFERRED = 32;
export const VDS_IIF_TUNNEL_MODE_PREFERRED = 64;
export const VDS_ILF_REQUIRE_IPSEC = 1;
export const VDS_ILF_MULTIPATH_ENABLED = 2;
export const VDS_SSS_UNKNOWN = 0;
export const VDS_SSS_ONLINE = 1;
export const VDS_SSS_NOT_READY = 2;
export const VDS_SSS_OFFLINE = 4;
export const VDS_SSS_FAILED = 5;
export const VDS_SSS_PARTIALLY_MANAGED = 9;
export const VDS_SF_LUN_MASKING_CAPABLE = 1;
export const VDS_SF_LUN_PLEXING_CAPABLE = 2;
export const VDS_SF_LUN_REMAPPING_CAPABLE = 4;
export const VDS_SF_DRIVE_EXTENT_CAPABLE = 8;
export const VDS_SF_HARDWARE_CHECKSUM_CAPABLE = 16;
export const VDS_SF_RADIUS_CAPABLE = 32;
export const VDS_SF_READ_BACK_VERIFY_CAPABLE = 64;
export const VDS_SF_WRITE_THROUGH_CACHING_CAPABLE = 128;
export const VDS_SF_SUPPORTS_FAULT_TOLERANT_LUNS = 512;
export const VDS_SF_SUPPORTS_NON_FAULT_TOLERANT_LUNS = 1024;
export const VDS_SF_SUPPORTS_SIMPLE_LUNS = 2048;
export const VDS_SF_SUPPORTS_SPAN_LUNS = 4096;
export const VDS_SF_SUPPORTS_STRIPE_LUNS = 8192;
export const VDS_SF_SUPPORTS_MIRROR_LUNS = 16384;
export const VDS_SF_SUPPORTS_PARITY_LUNS = 32768;
export const VDS_SF_SUPPORTS_AUTH_CHAP = 65536;
export const VDS_SF_SUPPORTS_AUTH_MUTUAL_CHAP = 131072;
export const VDS_SF_SUPPORTS_SIMPLE_TARGET_CONFIG = 262144;
export const VDS_SF_SUPPORTS_LUN_NUMBER = 524288;
export const VDS_SF_SUPPORTS_MIRRORED_CACHE = 1048576;
export const VDS_SF_READ_CACHING_CAPABLE = 2097152;
export const VDS_SF_WRITE_CACHING_CAPABLE = 4194304;
export const VDS_SF_MEDIA_SCAN_CAPABLE = 8388608;
export const VDS_SF_CONSISTENCY_CHECK_CAPABLE = 16777216;
export const VDS_SF_SUPPORTS_RAID2_LUNS = 1;
export const VDS_SF_SUPPORTS_RAID3_LUNS = 2;
export const VDS_SF_SUPPORTS_RAID4_LUNS = 4;
export const VDS_SF_SUPPORTS_RAID5_LUNS = 8;
export const VDS_SF_SUPPORTS_RAID6_LUNS = 16;
export const VDS_SF_SUPPORTS_RAID01_LUNS = 32;
export const VDS_SF_SUPPORTS_RAID03_LUNS = 64;
export const VDS_SF_SUPPORTS_RAID05_LUNS = 128;
export const VDS_SF_SUPPORTS_RAID10_LUNS = 256;
export const VDS_SF_SUPPORTS_RAID15_LUNS = 512;
export const VDS_SF_SUPPORTS_RAID30_LUNS = 1024;
export const VDS_SF_SUPPORTS_RAID50_LUNS = 2048;
export const VDS_SF_SUPPORTS_RAID51_LUNS = 4096;
export const VDS_SF_SUPPORTS_RAID53_LUNS = 8192;
export const VDS_SF_SUPPORTS_RAID60_LUNS = 16384;
export const VDS_SF_SUPPORTS_RAID61_LUNS = 32768;
export const VDS_ITF_PCI_RAID = 1;
export const VDS_ITF_FIBRE_CHANNEL = 2;
export const VDS_ITF_ISCSI = 4;
export const VDS_ITF_SAS = 8;
export const VDS_CS_UNKNOWN = 0;
export const VDS_CS_ONLINE = 1;
export const VDS_CS_NOT_READY = 2;
export const VDS_CS_OFFLINE = 4;
export const VDS_CS_FAILED = 5;
export const VDS_CS_REMOVED = 8;
export const VDS_PRS_UNKNOWN = 0;
export const VDS_PRS_ONLINE = 1;
export const VDS_PRS_NOT_READY = 2;
export const VDS_PRS_OFFLINE = 4;
export const VDS_PRS_FAILED = 5;
export const VDS_PRS_REMOVED = 8;
export const VDS_DRS_UNKNOWN = 0;
export const VDS_DRS_ONLINE = 1;
export const VDS_DRS_NOT_READY = 2;
export const VDS_DRS_OFFLINE = 4;
export const VDS_DRS_FAILED = 5;
export const VDS_DRS_REMOVED = 8;
export const VDS_DRF_HOTSPARE = 1;
export const VDS_DRF_ASSIGNED = 2;
export const VDS_DRF_UNASSIGNED = 4;
export const VDS_DRF_HOTSPARE_IN_USE = 8;
export const VDS_DRF_HOTSPARE_STANDBY = 16;
export const VDS_LT_UNKNOWN = 0;
export const VDS_LT_DEFAULT = 1;
export const VDS_LT_FAULT_TOLERANT = 2;
export const VDS_LT_NON_FAULT_TOLERANT = 3;
export const VDS_LT_SIMPLE = 10;
export const VDS_LT_SPAN = 11;
export const VDS_LT_STRIPE = 12;
export const VDS_LT_MIRROR = 13;
export const VDS_LT_PARITY = 14;
export const VDS_LT_RAID2 = 15;
export const VDS_LT_RAID3 = 16;
export const VDS_LT_RAID4 = 17;
export const VDS_LT_RAID5 = 18;
export const VDS_LT_RAID6 = 19;
export const VDS_LT_RAID01 = 20;
export const VDS_LT_RAID03 = 21;
export const VDS_LT_RAID05 = 22;
export const VDS_LT_RAID10 = 23;
export const VDS_LT_RAID15 = 24;
export const VDS_LT_RAID30 = 25;
export const VDS_LT_RAID50 = 26;
export const VDS_LT_RAID51 = 27;
export const VDS_LT_RAID53 = 28;
export const VDS_LT_RAID60 = 29;
export const VDS_LT_RAID61 = 30;
export const VDS_LS_UNKNOWN = 0;
export const VDS_LS_ONLINE = 1;
export const VDS_LS_NOT_READY = 2;
export const VDS_LS_OFFLINE = 4;
export const VDS_LS_FAILED = 5;
export const VDS_LF_LBN_REMAP_ENABLED = 1;
export const VDS_LF_READ_BACK_VERIFY_ENABLED = 2;
export const VDS_LF_WRITE_THROUGH_CACHING_ENABLED = 4;
export const VDS_LF_HARDWARE_CHECKSUM_ENABLED = 8;
export const VDS_LF_READ_CACHE_ENABLED = 16;
export const VDS_LF_WRITE_CACHE_ENABLED = 32;
export const VDS_LF_MEDIA_SCAN_ENABLED = 64;
export const VDS_LF_CONSISTENCY_CHECK_ENABLED = 128;
export const VDS_LF_SNAPSHOT = 256;
export const VDS_LPT_UNKNOWN = 0;
export const VDS_LPT_SIMPLE = 10;
export const VDS_LPT_SPAN = 11;
export const VDS_LPT_STRIPE = 12;
export const VDS_LPT_PARITY = 14;
export const VDS_LPT_RAID2 = 15;
export const VDS_LPT_RAID3 = 16;
export const VDS_LPT_RAID4 = 17;
export const VDS_LPT_RAID5 = 18;
export const VDS_LPT_RAID6 = 19;
export const VDS_LPT_RAID03 = 21;
export const VDS_LPT_RAID05 = 22;
export const VDS_LPT_RAID10 = 23;
export const VDS_LPT_RAID15 = 24;
export const VDS_LPT_RAID30 = 25;
export const VDS_LPT_RAID50 = 26;
export const VDS_LPT_RAID53 = 28;
export const VDS_LPT_RAID60 = 29;
export const VDS_LPS_UNKNOWN = 0;
export const VDS_LPS_ONLINE = 1;
export const VDS_LPS_NOT_READY = 2;
export const VDS_LPS_OFFLINE = 4;
export const VDS_LPS_FAILED = 5;
export const VDS_LPF_LBN_REMAP_ENABLED = 1;
export const VDS_IPS_UNKNOWN = 0;
export const VDS_IPS_ONLINE = 1;
export const VDS_IPS_NOT_READY = 2;
export const VDS_IPS_OFFLINE = 4;
export const VDS_IPS_FAILED = 5;
export const VDS_SPS_UNKNOWN = 0;
export const VDS_SPS_ONLINE = 1;
export const VDS_SPS_NOT_READY = 2;
export const VDS_SPS_OFFLINE = 4;
export const VDS_SPT_UNKNOWN = 0;
export const VDS_SPT_PRIMORDIAL = 1;
export const VDS_SPT_CONCRETE = 2;
export const BlinkLight = 1;
export const BeepAlarm = 2;
export const SpinDown = 3;
export const SpinUp = 4;
export const Ping = 5;
export const VDS_RT_UNKNOWN = 0;
export const VDS_RT_RAID0 = 10;
export const VDS_RT_RAID1 = 11;
export const VDS_RT_RAID2 = 12;
export const VDS_RT_RAID3 = 13;
export const VDS_RT_RAID4 = 14;
export const VDS_RT_RAID5 = 15;
export const VDS_RT_RAID6 = 16;
export const VDS_RT_RAID01 = 17;
export const VDS_RT_RAID03 = 18;
export const VDS_RT_RAID05 = 19;
export const VDS_RT_RAID10 = 20;
export const VDS_RT_RAID15 = 21;
export const VDS_RT_RAID30 = 22;
export const VDS_RT_RAID50 = 23;
export const VDS_RT_RAID51 = 24;
export const VDS_RT_RAID53 = 25;
export const VDS_RT_RAID60 = 26;
export const VDS_RT_RAID61 = 27;

// Structs

/**
 * Windows.Win32.Storage.VirtualDiskService.Apis (size: 16)
 */
export interface Apis {
  /** System.Guid */
  CLSID_VdsLoader: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  CLSID_VdsService: Uint8Array | Deno.PointerValue | null;
}

export const sizeofApis = 16;

export function allocApis(data?: Partial<Apis>): Uint8Array {
  const buf = new Uint8Array(sizeofApis);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CLSID_VdsLoader !== undefined) view.setBigUint64(0, data.CLSID_VdsLoader === null ? 0n : BigInt(util.toPointer(data.CLSID_VdsLoader)), true);
  // 0x08: pointer
  if (data?.CLSID_VdsService !== undefined) view.setBigUint64(8, data.CLSID_VdsService === null ? 0n : BigInt(util.toPointer(data.CLSID_VdsService)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_STORAGE_IDENTIFIER (size: 24)
 */
export interface VDS_STORAGE_IDENTIFIER {
  /** Windows.Win32.Storage.VirtualDiskService.VDS_STORAGE_IDENTIFIER_CODE_SET */
  m_CodeSet: VDS_STORAGE_IDENTIFIER_CODE_SET;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_STORAGE_IDENTIFIER_TYPE */
  m_Type: VDS_STORAGE_IDENTIFIER_TYPE;
  /** u32 */
  m_cbIdentifier: number;
  /** ptr */
  m_rgbIdentifier: Deno.PointerValue | Uint8Array | null;
}

export const sizeofVDS_STORAGE_IDENTIFIER = 24;

export function allocVDS_STORAGE_IDENTIFIER(data?: Partial<VDS_STORAGE_IDENTIFIER>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_STORAGE_IDENTIFIER);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.m_CodeSet !== undefined) view.setInt32(0, Number(data.m_CodeSet), true);
  // 0x04: i32
  if (data?.m_Type !== undefined) view.setInt32(4, Number(data.m_Type), true);
  // 0x08: u32
  if (data?.m_cbIdentifier !== undefined) view.setUint32(8, Number(data.m_cbIdentifier), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.m_rgbIdentifier !== undefined) view.setBigUint64(16, data.m_rgbIdentifier === null ? 0n : BigInt(util.toPointer(data.m_rgbIdentifier)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_STORAGE_DEVICE_ID_DESCRIPTOR (size: 16)
 */
export interface VDS_STORAGE_DEVICE_ID_DESCRIPTOR {
  /** u32 */
  m_version: number;
  /** u32 */
  m_cIdentifiers: number;
  /** ptr */
  m_rgIdentifiers: Deno.PointerValue | Uint8Array | null;
}

export const sizeofVDS_STORAGE_DEVICE_ID_DESCRIPTOR = 16;

export function allocVDS_STORAGE_DEVICE_ID_DESCRIPTOR(data?: Partial<VDS_STORAGE_DEVICE_ID_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_STORAGE_DEVICE_ID_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.m_version !== undefined) view.setUint32(0, Number(data.m_version), true);
  // 0x04: u32
  if (data?.m_cIdentifiers !== undefined) view.setUint32(4, Number(data.m_cIdentifiers), true);
  // 0x08: pointer
  if (data?.m_rgIdentifiers !== undefined) view.setBigUint64(8, data.m_rgIdentifiers === null ? 0n : BigInt(util.toPointer(data.m_rgIdentifiers)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_INTERCONNECT (size: 32)
 */
export interface VDS_INTERCONNECT {
  /** Windows.Win32.Storage.VirtualDiskService.VDS_INTERCONNECT_ADDRESS_TYPE */
  m_addressType: VDS_INTERCONNECT_ADDRESS_TYPE;
  /** u32 */
  m_cbPort: number;
  /** ptr */
  m_pbPort: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  m_cbAddress: number;
  /** ptr */
  m_pbAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeofVDS_INTERCONNECT = 32;

export function allocVDS_INTERCONNECT(data?: Partial<VDS_INTERCONNECT>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_INTERCONNECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.m_addressType !== undefined) view.setInt32(0, Number(data.m_addressType), true);
  // 0x04: u32
  if (data?.m_cbPort !== undefined) view.setUint32(4, Number(data.m_cbPort), true);
  // 0x08: pointer
  if (data?.m_pbPort !== undefined) view.setBigUint64(8, data.m_pbPort === null ? 0n : BigInt(util.toPointer(data.m_pbPort)), true);
  // 0x10: u32
  if (data?.m_cbAddress !== undefined) view.setUint32(16, Number(data.m_cbAddress), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.m_pbAddress !== undefined) view.setBigUint64(24, data.m_pbAddress === null ? 0n : BigInt(util.toPointer(data.m_pbAddress)), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_LUN_INFORMATION (size: 80)
 */
export interface VDS_LUN_INFORMATION {
  /** u32 */
  m_version: number;
  /** u8 */
  m_DeviceType: number;
  /** u8 */
  m_DeviceTypeModifier: number;
  /** Windows.Win32.Foundation.BOOL */
  m_bCommandQueueing: boolean;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_STORAGE_BUS_TYPE */
  m_BusType: VDS_STORAGE_BUS_TYPE;
  /** ptr */
  m_szVendorId: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  m_szProductId: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  m_szProductRevision: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  m_szSerialNumber: Deno.PointerValue | Uint8Array | null;
  /** System.Guid */
  m_diskSignature: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_STORAGE_DEVICE_ID_DESCRIPTOR */
  m_deviceIdDescriptor: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  m_cInterconnects: number;
  /** ptr */
  m_rgInterconnects: Deno.PointerValue | Uint8Array | null;
}

export const sizeofVDS_LUN_INFORMATION = 80;

export function allocVDS_LUN_INFORMATION(data?: Partial<VDS_LUN_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_LUN_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.m_version !== undefined) view.setUint32(0, Number(data.m_version), true);
  // 0x04: u8
  if (data?.m_DeviceType !== undefined) view.setUint8(4, Number(data.m_DeviceType));
  // 0x05: u8
  if (data?.m_DeviceTypeModifier !== undefined) view.setUint8(5, Number(data.m_DeviceTypeModifier));
  // 0x06: i32
  if (data?.m_bCommandQueueing !== undefined) view.setInt32(6, Number(data.m_bCommandQueueing), true);
  // 0x0a: i32
  if (data?.m_BusType !== undefined) view.setInt32(10, Number(data.m_BusType), true);
  // 0x0e: pad2
  // 0x10: pointer
  if (data?.m_szVendorId !== undefined) view.setBigUint64(16, data.m_szVendorId === null ? 0n : BigInt(util.toPointer(data.m_szVendorId)), true);
  // 0x18: pointer
  if (data?.m_szProductId !== undefined) view.setBigUint64(24, data.m_szProductId === null ? 0n : BigInt(util.toPointer(data.m_szProductId)), true);
  // 0x20: pointer
  if (data?.m_szProductRevision !== undefined) view.setBigUint64(32, data.m_szProductRevision === null ? 0n : BigInt(util.toPointer(data.m_szProductRevision)), true);
  // 0x28: pointer
  if (data?.m_szSerialNumber !== undefined) view.setBigUint64(40, data.m_szSerialNumber === null ? 0n : BigInt(util.toPointer(data.m_szSerialNumber)), true);
  // 0x30: pointer
  if (data?.m_diskSignature !== undefined) view.setBigUint64(48, data.m_diskSignature === null ? 0n : BigInt(util.toPointer(data.m_diskSignature)), true);
  // 0x38: pointer
  if (data?.m_deviceIdDescriptor !== undefined) view.setBigUint64(56, data.m_deviceIdDescriptor === null ? 0n : BigInt(util.toPointer(data.m_deviceIdDescriptor)), true);
  // 0x40: u32
  if (data?.m_cInterconnects !== undefined) view.setUint32(64, Number(data.m_cInterconnects), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.m_rgInterconnects !== undefined) view.setBigUint64(72, data.m_rgInterconnects === null ? 0n : BigInt(util.toPointer(data.m_rgInterconnects)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_PACK_NOTIFICATION (size: 16)
 */
export interface VDS_PACK_NOTIFICATION {
  /** Windows.Win32.Storage.VirtualDiskService.VDS_NF_PACK */
  ulEvent: VDS_NF_PACK;
  /** System.Guid */
  packId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVDS_PACK_NOTIFICATION = 16;

export function allocVDS_PACK_NOTIFICATION(data?: Partial<VDS_PACK_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_PACK_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulEvent !== undefined) view.setUint32(0, Number(data.ulEvent), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.packId !== undefined) view.setBigUint64(8, data.packId === null ? 0n : BigInt(util.toPointer(data.packId)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_DISK_NOTIFICATION (size: 16)
 */
export interface VDS_DISK_NOTIFICATION {
  /** Windows.Win32.Storage.VirtualDiskService.VDS_NF_DISK */
  ulEvent: VDS_NF_DISK;
  /** System.Guid */
  diskId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVDS_DISK_NOTIFICATION = 16;

export function allocVDS_DISK_NOTIFICATION(data?: Partial<VDS_DISK_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_DISK_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulEvent !== undefined) view.setUint32(0, Number(data.ulEvent), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.diskId !== undefined) view.setBigUint64(8, data.diskId === null ? 0n : BigInt(util.toPointer(data.diskId)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_VOLUME_NOTIFICATION (size: 32)
 */
export interface VDS_VOLUME_NOTIFICATION {
  /** u32 */
  ulEvent: number;
  /** System.Guid */
  volumeId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  plexId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulPercentCompleted: number;
}

export const sizeofVDS_VOLUME_NOTIFICATION = 32;

export function allocVDS_VOLUME_NOTIFICATION(data?: Partial<VDS_VOLUME_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_VOLUME_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulEvent !== undefined) view.setUint32(0, Number(data.ulEvent), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.volumeId !== undefined) view.setBigUint64(8, data.volumeId === null ? 0n : BigInt(util.toPointer(data.volumeId)), true);
  // 0x10: pointer
  if (data?.plexId !== undefined) view.setBigUint64(16, data.plexId === null ? 0n : BigInt(util.toPointer(data.plexId)), true);
  // 0x18: u32
  if (data?.ulPercentCompleted !== undefined) view.setUint32(24, Number(data.ulPercentCompleted), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_PARTITION_NOTIFICATION (size: 24)
 */
export interface VDS_PARTITION_NOTIFICATION {
  /** u32 */
  ulEvent: number;
  /** System.Guid */
  diskId: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  ullOffset: Deno.PointerValue;
}

export const sizeofVDS_PARTITION_NOTIFICATION = 24;

export function allocVDS_PARTITION_NOTIFICATION(data?: Partial<VDS_PARTITION_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_PARTITION_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulEvent !== undefined) view.setUint32(0, Number(data.ulEvent), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.diskId !== undefined) view.setBigUint64(8, data.diskId === null ? 0n : BigInt(util.toPointer(data.diskId)), true);
  // 0x10: u64
  if (data?.ullOffset !== undefined) view.setBigUint64(16, BigInt(data.ullOffset), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_SERVICE_NOTIFICATION (size: 8)
 */
export interface VDS_SERVICE_NOTIFICATION {
  /** u32 */
  ulEvent: number;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_RECOVER_ACTION */
  action: VDS_RECOVER_ACTION;
}

export const sizeofVDS_SERVICE_NOTIFICATION = 8;

export function allocVDS_SERVICE_NOTIFICATION(data?: Partial<VDS_SERVICE_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_SERVICE_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulEvent !== undefined) view.setUint32(0, Number(data.ulEvent), true);
  // 0x04: i32
  if (data?.action !== undefined) view.setInt32(4, Number(data.action), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_DRIVE_LETTER_NOTIFICATION (size: 24)
 */
export interface VDS_DRIVE_LETTER_NOTIFICATION {
  /** u32 */
  ulEvent: number;
  /** char */
  wcLetter: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  volumeId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVDS_DRIVE_LETTER_NOTIFICATION = 24;

export function allocVDS_DRIVE_LETTER_NOTIFICATION(data?: Partial<VDS_DRIVE_LETTER_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_DRIVE_LETTER_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulEvent !== undefined) view.setUint32(0, Number(data.ulEvent), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.wcLetter !== undefined) view.setBigUint64(8, data.wcLetter === null ? 0n : BigInt(util.toPointer(data.wcLetter)), true);
  // 0x10: pointer
  if (data?.volumeId !== undefined) view.setBigUint64(16, data.volumeId === null ? 0n : BigInt(util.toPointer(data.volumeId)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_FILE_SYSTEM_NOTIFICATION (size: 24)
 */
export interface VDS_FILE_SYSTEM_NOTIFICATION {
  /** Windows.Win32.Storage.VirtualDiskService.VDS_NF_FILE_SYSTEM */
  ulEvent: VDS_NF_FILE_SYSTEM;
  /** System.Guid */
  volumeId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwPercentCompleted: number;
}

export const sizeofVDS_FILE_SYSTEM_NOTIFICATION = 24;

export function allocVDS_FILE_SYSTEM_NOTIFICATION(data?: Partial<VDS_FILE_SYSTEM_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_FILE_SYSTEM_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulEvent !== undefined) view.setUint32(0, Number(data.ulEvent), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.volumeId !== undefined) view.setBigUint64(8, data.volumeId === null ? 0n : BigInt(util.toPointer(data.volumeId)), true);
  // 0x10: u32
  if (data?.dwPercentCompleted !== undefined) view.setUint32(16, Number(data.dwPercentCompleted), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_MOUNT_POINT_NOTIFICATION (size: 16)
 */
export interface VDS_MOUNT_POINT_NOTIFICATION {
  /** u32 */
  ulEvent: number;
  /** System.Guid */
  volumeId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVDS_MOUNT_POINT_NOTIFICATION = 16;

export function allocVDS_MOUNT_POINT_NOTIFICATION(data?: Partial<VDS_MOUNT_POINT_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_MOUNT_POINT_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulEvent !== undefined) view.setUint32(0, Number(data.ulEvent), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.volumeId !== undefined) view.setBigUint64(8, data.volumeId === null ? 0n : BigInt(util.toPointer(data.volumeId)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_SUB_SYSTEM_NOTIFICATION (size: 16)
 */
export interface VDS_SUB_SYSTEM_NOTIFICATION {
  /** u32 */
  ulEvent: number;
  /** System.Guid */
  subSystemId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVDS_SUB_SYSTEM_NOTIFICATION = 16;

export function allocVDS_SUB_SYSTEM_NOTIFICATION(data?: Partial<VDS_SUB_SYSTEM_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_SUB_SYSTEM_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulEvent !== undefined) view.setUint32(0, Number(data.ulEvent), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.subSystemId !== undefined) view.setBigUint64(8, data.subSystemId === null ? 0n : BigInt(util.toPointer(data.subSystemId)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_CONTROLLER_NOTIFICATION (size: 16)
 */
export interface VDS_CONTROLLER_NOTIFICATION {
  /** Windows.Win32.Storage.VirtualDiskService.VDS_NF_CONTROLLER */
  ulEvent: VDS_NF_CONTROLLER;
  /** System.Guid */
  controllerId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVDS_CONTROLLER_NOTIFICATION = 16;

export function allocVDS_CONTROLLER_NOTIFICATION(data?: Partial<VDS_CONTROLLER_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_CONTROLLER_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulEvent !== undefined) view.setUint32(0, Number(data.ulEvent), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.controllerId !== undefined) view.setBigUint64(8, data.controllerId === null ? 0n : BigInt(util.toPointer(data.controllerId)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_DRIVE_NOTIFICATION (size: 16)
 */
export interface VDS_DRIVE_NOTIFICATION {
  /** Windows.Win32.Storage.VirtualDiskService.VDS_NF_DRIVE */
  ulEvent: VDS_NF_DRIVE;
  /** System.Guid */
  driveId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVDS_DRIVE_NOTIFICATION = 16;

export function allocVDS_DRIVE_NOTIFICATION(data?: Partial<VDS_DRIVE_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_DRIVE_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulEvent !== undefined) view.setUint32(0, Number(data.ulEvent), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.driveId !== undefined) view.setBigUint64(8, data.driveId === null ? 0n : BigInt(util.toPointer(data.driveId)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_LUN_NOTIFICATION (size: 16)
 */
export interface VDS_LUN_NOTIFICATION {
  /** Windows.Win32.Storage.VirtualDiskService.VDS_NF_LUN */
  ulEvent: VDS_NF_LUN;
  /** System.Guid */
  LunId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVDS_LUN_NOTIFICATION = 16;

export function allocVDS_LUN_NOTIFICATION(data?: Partial<VDS_LUN_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_LUN_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulEvent !== undefined) view.setUint32(0, Number(data.ulEvent), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LunId !== undefined) view.setBigUint64(8, data.LunId === null ? 0n : BigInt(util.toPointer(data.LunId)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_PORT_NOTIFICATION (size: 16)
 */
export interface VDS_PORT_NOTIFICATION {
  /** Windows.Win32.Storage.VirtualDiskService.VDS_NF_PORT */
  ulEvent: VDS_NF_PORT;
  /** System.Guid */
  portId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVDS_PORT_NOTIFICATION = 16;

export function allocVDS_PORT_NOTIFICATION(data?: Partial<VDS_PORT_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_PORT_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulEvent !== undefined) view.setUint32(0, Number(data.ulEvent), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.portId !== undefined) view.setBigUint64(8, data.portId === null ? 0n : BigInt(util.toPointer(data.portId)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_PORTAL_NOTIFICATION (size: 16)
 */
export interface VDS_PORTAL_NOTIFICATION {
  /** u32 */
  ulEvent: number;
  /** System.Guid */
  portalId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVDS_PORTAL_NOTIFICATION = 16;

export function allocVDS_PORTAL_NOTIFICATION(data?: Partial<VDS_PORTAL_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_PORTAL_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulEvent !== undefined) view.setUint32(0, Number(data.ulEvent), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.portalId !== undefined) view.setBigUint64(8, data.portalId === null ? 0n : BigInt(util.toPointer(data.portalId)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_TARGET_NOTIFICATION (size: 16)
 */
export interface VDS_TARGET_NOTIFICATION {
  /** u32 */
  ulEvent: number;
  /** System.Guid */
  targetId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVDS_TARGET_NOTIFICATION = 16;

export function allocVDS_TARGET_NOTIFICATION(data?: Partial<VDS_TARGET_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_TARGET_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulEvent !== undefined) view.setUint32(0, Number(data.ulEvent), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.targetId !== undefined) view.setBigUint64(8, data.targetId === null ? 0n : BigInt(util.toPointer(data.targetId)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_PORTAL_GROUP_NOTIFICATION (size: 16)
 */
export interface VDS_PORTAL_GROUP_NOTIFICATION {
  /** u32 */
  ulEvent: number;
  /** System.Guid */
  portalGroupId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVDS_PORTAL_GROUP_NOTIFICATION = 16;

export function allocVDS_PORTAL_GROUP_NOTIFICATION(data?: Partial<VDS_PORTAL_GROUP_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_PORTAL_GROUP_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulEvent !== undefined) view.setUint32(0, Number(data.ulEvent), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.portalGroupId !== undefined) view.setBigUint64(8, data.portalGroupId === null ? 0n : BigInt(util.toPointer(data.portalGroupId)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_NOTIFICATION (size: 16)
 */
export interface VDS_NOTIFICATION {
  /** Windows.Win32.Storage.VirtualDiskService.VDS_NOTIFICATION_TARGET_TYPE */
  objectType: VDS_NOTIFICATION_TARGET_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVDS_NOTIFICATION = 16;

export function allocVDS_NOTIFICATION(data?: Partial<VDS_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.objectType !== undefined) view.setInt32(0, Number(data.objectType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_ASYNC_OUTPUT (size: 16)
 */
export interface VDS_ASYNC_OUTPUT {
  /** Windows.Win32.Storage.VirtualDiskService.VDS_ASYNC_OUTPUT_TYPE */
  type: VDS_ASYNC_OUTPUT_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVDS_ASYNC_OUTPUT = 16;

export function allocVDS_ASYNC_OUTPUT(data?: Partial<VDS_ASYNC_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_ASYNC_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_PATH_ID (size: 16)
 */
export interface VDS_PATH_ID {
  /** u64 */
  ullSourceId: Deno.PointerValue;
  /** u64 */
  ullPathId: Deno.PointerValue;
}

export const sizeofVDS_PATH_ID = 16;

export function allocVDS_PATH_ID(data?: Partial<VDS_PATH_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_PATH_ID);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ullSourceId !== undefined) view.setBigUint64(0, BigInt(data.ullSourceId), true);
  // 0x08: u64
  if (data?.ullPathId !== undefined) view.setBigUint64(8, BigInt(data.ullPathId), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_WWN (size: 8)
 */
export interface VDS_WWN {
  /** array */
  rguchWwn: Deno.PointerValue | null;
}

export const sizeofVDS_WWN = 8;

export function allocVDS_WWN(data?: Partial<VDS_WWN>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_WWN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rguchWwn !== undefined) view.setBigUint64(0, data.rguchWwn === null ? 0n : BigInt(util.toPointer(data.rguchWwn)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_IPADDRESS (size: 40)
 */
export interface VDS_IPADDRESS {
  /** Windows.Win32.Storage.VirtualDiskService.VDS_IPADDRESS_TYPE */
  type: VDS_IPADDRESS_TYPE;
  /** u32 */
  ipv4Address: number;
  /** array */
  ipv6Address: Deno.PointerValue | null;
  /** u32 */
  ulIpv6FlowInfo: number;
  /** u32 */
  ulIpv6ScopeId: number;
  /** array */
  wszTextAddress: Deno.PointerValue | null;
  /** u32 */
  ulPort: number;
}

export const sizeofVDS_IPADDRESS = 40;

export function allocVDS_IPADDRESS(data?: Partial<VDS_IPADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_IPADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: u32
  if (data?.ipv4Address !== undefined) view.setUint32(4, Number(data.ipv4Address), true);
  // 0x08: pointer
  if (data?.ipv6Address !== undefined) view.setBigUint64(8, data.ipv6Address === null ? 0n : BigInt(util.toPointer(data.ipv6Address)), true);
  // 0x10: u32
  if (data?.ulIpv6FlowInfo !== undefined) view.setUint32(16, Number(data.ulIpv6FlowInfo), true);
  // 0x14: u32
  if (data?.ulIpv6ScopeId !== undefined) view.setUint32(20, Number(data.ulIpv6ScopeId), true);
  // 0x18: pointer
  if (data?.wszTextAddress !== undefined) view.setBigUint64(24, data.wszTextAddress === null ? 0n : BigInt(util.toPointer(data.wszTextAddress)), true);
  // 0x20: u32
  if (data?.ulPort !== undefined) view.setUint32(32, Number(data.ulPort), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_ISCSI_IPSEC_KEY (size: 16)
 */
export interface VDS_ISCSI_IPSEC_KEY {
  /** ptr */
  pKey: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ulKeySize: number;
}

export const sizeofVDS_ISCSI_IPSEC_KEY = 16;

export function allocVDS_ISCSI_IPSEC_KEY(data?: Partial<VDS_ISCSI_IPSEC_KEY>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_ISCSI_IPSEC_KEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pKey !== undefined) view.setBigUint64(0, data.pKey === null ? 0n : BigInt(util.toPointer(data.pKey)), true);
  // 0x08: u32
  if (data?.ulKeySize !== undefined) view.setUint32(8, Number(data.ulKeySize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_ISCSI_SHARED_SECRET (size: 16)
 */
export interface VDS_ISCSI_SHARED_SECRET {
  /** ptr */
  pSharedSecret: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ulSharedSecretSize: number;
}

export const sizeofVDS_ISCSI_SHARED_SECRET = 16;

export function allocVDS_ISCSI_SHARED_SECRET(data?: Partial<VDS_ISCSI_SHARED_SECRET>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_ISCSI_SHARED_SECRET);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pSharedSecret !== undefined) view.setBigUint64(0, data.pSharedSecret === null ? 0n : BigInt(util.toPointer(data.pSharedSecret)), true);
  // 0x08: u32
  if (data?.ulSharedSecretSize !== undefined) view.setUint32(8, Number(data.ulSharedSecretSize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_HBAPORT_PROP (size: 40)
 */
export interface VDS_HBAPORT_PROP {
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_WWN */
  wwnNode: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_WWN */
  wwnPort: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_HBAPORT_TYPE */
  type: VDS_HBAPORT_TYPE;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_HBAPORT_STATUS */
  status: VDS_HBAPORT_STATUS;
  /** u32 */
  ulPortSpeed: number;
  /** u32 */
  ulSupportedPortSpeed: number;
}

export const sizeofVDS_HBAPORT_PROP = 40;

export function allocVDS_HBAPORT_PROP(data?: Partial<VDS_HBAPORT_PROP>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_HBAPORT_PROP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.id !== undefined) view.setBigUint64(0, data.id === null ? 0n : BigInt(util.toPointer(data.id)), true);
  // 0x08: pointer
  if (data?.wwnNode !== undefined) view.setBigUint64(8, data.wwnNode === null ? 0n : BigInt(util.toPointer(data.wwnNode)), true);
  // 0x10: pointer
  if (data?.wwnPort !== undefined) view.setBigUint64(16, data.wwnPort === null ? 0n : BigInt(util.toPointer(data.wwnPort)), true);
  // 0x18: i32
  if (data?.type !== undefined) view.setInt32(24, Number(data.type), true);
  // 0x1c: i32
  if (data?.status !== undefined) view.setInt32(28, Number(data.status), true);
  // 0x20: u32
  if (data?.ulPortSpeed !== undefined) view.setUint32(32, Number(data.ulPortSpeed), true);
  // 0x24: u32
  if (data?.ulSupportedPortSpeed !== undefined) view.setUint32(36, Number(data.ulSupportedPortSpeed), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_ISCSI_INITIATOR_ADAPTER_PROP (size: 16)
 */
export interface VDS_ISCSI_INITIATOR_ADAPTER_PROP {
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null;
}

export const sizeofVDS_ISCSI_INITIATOR_ADAPTER_PROP = 16;

export function allocVDS_ISCSI_INITIATOR_ADAPTER_PROP(data?: Partial<VDS_ISCSI_INITIATOR_ADAPTER_PROP>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_ISCSI_INITIATOR_ADAPTER_PROP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.id !== undefined) view.setBigUint64(0, data.id === null ? 0n : BigInt(util.toPointer(data.id)), true);
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_ISCSI_INITIATOR_PORTAL_PROP (size: 24)
 */
export interface VDS_ISCSI_INITIATOR_PORTAL_PROP {
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_IPADDRESS */
  address: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulPortIndex: number;
}

export const sizeofVDS_ISCSI_INITIATOR_PORTAL_PROP = 24;

export function allocVDS_ISCSI_INITIATOR_PORTAL_PROP(data?: Partial<VDS_ISCSI_INITIATOR_PORTAL_PROP>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_ISCSI_INITIATOR_PORTAL_PROP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.id !== undefined) view.setBigUint64(0, data.id === null ? 0n : BigInt(util.toPointer(data.id)), true);
  // 0x08: pointer
  if (data?.address !== undefined) view.setBigUint64(8, data.address === null ? 0n : BigInt(util.toPointer(data.address)), true);
  // 0x10: u32
  if (data?.ulPortIndex !== undefined) view.setUint32(16, Number(data.ulPortIndex), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_PROVIDER_PROP (size: 48)
 */
export interface VDS_PROVIDER_PROP {
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null;
  /** System.Guid */
  guidVersionId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszVersion: string | null;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_PROVIDER_TYPE */
  type: VDS_PROVIDER_TYPE;
  /** u32 */
  ulFlags: number;
  /** u32 */
  ulStripeSizeFlags: number;
  /** i16 */
  sRebuildPriority: number;
}

export const sizeofVDS_PROVIDER_PROP = 48;

export function allocVDS_PROVIDER_PROP(data?: Partial<VDS_PROVIDER_PROP>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_PROVIDER_PROP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.id !== undefined) view.setBigUint64(0, data.id === null ? 0n : BigInt(util.toPointer(data.id)), true);
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.guidVersionId !== undefined) view.setBigUint64(16, data.guidVersionId === null ? 0n : BigInt(util.toPointer(data.guidVersionId)), true);
  // 0x18: buffer
  if (data?.pwszVersion !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwszVersion);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: i32
  if (data?.type !== undefined) view.setInt32(32, Number(data.type), true);
  // 0x24: u32
  if (data?.ulFlags !== undefined) view.setUint32(36, Number(data.ulFlags), true);
  // 0x28: u32
  if (data?.ulStripeSizeFlags !== undefined) view.setUint32(40, Number(data.ulStripeSizeFlags), true);
  // 0x2c: i16
  if (data?.sRebuildPriority !== undefined) view.setInt16(44, Number(data.sRebuildPriority), true);
  // 0x2e: pad2
  return buf;
}

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null;
  /** usize */
  u: Deno.PointerValue;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, BigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, BigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : BigInt(util.toPointer(data.psid)), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : BigInt(util.toPointer(data.pguid)), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : BigInt(util.toPointer(data.pObjectTypes)), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : BigInt(util.toPointer(data.pIpAddress)), true);
  return buf;
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: Deno.PointerValue;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, BigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

/**
 * _Anonymous3_e__Union (size: 16)
 */
export interface _Anonymous3_e__Union {
  /** u32 */
  dwAlphaDestConst: number;
  /** Windows.Win32.Graphics.DirectDraw.IDirectDrawSurface */
  lpDDSAlphaDest: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Anonymous3_e__Union = 16;

export function alloc_Anonymous3_e__Union(data?: Partial<_Anonymous3_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous3_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAlphaDestConst !== undefined) view.setUint32(0, Number(data.dwAlphaDestConst), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpDDSAlphaDest !== undefined) view.setBigUint64(8, data.lpDDSAlphaDest === null ? 0n : BigInt(util.toPointer(data.lpDDSAlphaDest)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_PATH_INFO (size: 40)
 */
export interface VDS_PATH_INFO {
  /** Windows.Win32.Storage.VirtualDiskService.VDS_PATH_ID */
  pathId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_HWPROVIDER_TYPE */
  type: VDS_HWPROVIDER_TYPE;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_PATH_STATUS */
  status: VDS_PATH_STATUS;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVDS_PATH_INFO = 40;

export function allocVDS_PATH_INFO(data?: Partial<VDS_PATH_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_PATH_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pathId !== undefined) view.setBigUint64(0, data.pathId === null ? 0n : BigInt(util.toPointer(data.pathId)), true);
  // 0x08: i32
  if (data?.type !== undefined) view.setInt32(8, Number(data.type), true);
  // 0x0c: i32
  if (data?.status !== undefined) view.setInt32(12, Number(data.status), true);
  // 0x10: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(16, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x20: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(32, data.Anonymous3 === null ? 0n : BigInt(util.toPointer(data.Anonymous3)), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_PATH_POLICY (size: 16)
 */
export interface VDS_PATH_POLICY {
  /** Windows.Win32.Storage.VirtualDiskService.VDS_PATH_ID */
  pathId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  bPrimaryPath: boolean;
  /** u32 */
  ulWeight: number;
}

export const sizeofVDS_PATH_POLICY = 16;

export function allocVDS_PATH_POLICY(data?: Partial<VDS_PATH_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_PATH_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pathId !== undefined) view.setBigUint64(0, data.pathId === null ? 0n : BigInt(util.toPointer(data.pathId)), true);
  // 0x08: i32
  if (data?.bPrimaryPath !== undefined) view.setInt32(8, Number(data.bPrimaryPath), true);
  // 0x0c: u32
  if (data?.ulWeight !== undefined) view.setUint32(12, Number(data.ulWeight), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_HINTS (size: 80)
 */
export interface VDS_HINTS {
  /** u64 */
  ullHintMask: Deno.PointerValue;
  /** u64 */
  ullExpectedMaximumSize: Deno.PointerValue;
  /** u32 */
  ulOptimalReadSize: number;
  /** u32 */
  ulOptimalReadAlignment: number;
  /** u32 */
  ulOptimalWriteSize: number;
  /** u32 */
  ulOptimalWriteAlignment: number;
  /** u32 */
  ulMaximumDriveCount: number;
  /** u32 */
  ulStripeSize: number;
  /** Windows.Win32.Foundation.BOOL */
  bFastCrashRecoveryRequired: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bMostlyReads: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bOptimizeForSequentialReads: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bOptimizeForSequentialWrites: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bRemapEnabled: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bReadBackVerifyEnabled: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bWriteThroughCachingEnabled: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bHardwareChecksumEnabled: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bIsYankable: boolean;
  /** i16 */
  sRebuildPriority: number;
}

export const sizeofVDS_HINTS = 80;

export function allocVDS_HINTS(data?: Partial<VDS_HINTS>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_HINTS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ullHintMask !== undefined) view.setBigUint64(0, BigInt(data.ullHintMask), true);
  // 0x08: u64
  if (data?.ullExpectedMaximumSize !== undefined) view.setBigUint64(8, BigInt(data.ullExpectedMaximumSize), true);
  // 0x10: u32
  if (data?.ulOptimalReadSize !== undefined) view.setUint32(16, Number(data.ulOptimalReadSize), true);
  // 0x14: u32
  if (data?.ulOptimalReadAlignment !== undefined) view.setUint32(20, Number(data.ulOptimalReadAlignment), true);
  // 0x18: u32
  if (data?.ulOptimalWriteSize !== undefined) view.setUint32(24, Number(data.ulOptimalWriteSize), true);
  // 0x1c: u32
  if (data?.ulOptimalWriteAlignment !== undefined) view.setUint32(28, Number(data.ulOptimalWriteAlignment), true);
  // 0x20: u32
  if (data?.ulMaximumDriveCount !== undefined) view.setUint32(32, Number(data.ulMaximumDriveCount), true);
  // 0x24: u32
  if (data?.ulStripeSize !== undefined) view.setUint32(36, Number(data.ulStripeSize), true);
  // 0x28: i32
  if (data?.bFastCrashRecoveryRequired !== undefined) view.setInt32(40, Number(data.bFastCrashRecoveryRequired), true);
  // 0x2c: i32
  if (data?.bMostlyReads !== undefined) view.setInt32(44, Number(data.bMostlyReads), true);
  // 0x30: i32
  if (data?.bOptimizeForSequentialReads !== undefined) view.setInt32(48, Number(data.bOptimizeForSequentialReads), true);
  // 0x34: i32
  if (data?.bOptimizeForSequentialWrites !== undefined) view.setInt32(52, Number(data.bOptimizeForSequentialWrites), true);
  // 0x38: i32
  if (data?.bRemapEnabled !== undefined) view.setInt32(56, Number(data.bRemapEnabled), true);
  // 0x3c: i32
  if (data?.bReadBackVerifyEnabled !== undefined) view.setInt32(60, Number(data.bReadBackVerifyEnabled), true);
  // 0x40: i32
  if (data?.bWriteThroughCachingEnabled !== undefined) view.setInt32(64, Number(data.bWriteThroughCachingEnabled), true);
  // 0x44: i32
  if (data?.bHardwareChecksumEnabled !== undefined) view.setInt32(68, Number(data.bHardwareChecksumEnabled), true);
  // 0x48: i32
  if (data?.bIsYankable !== undefined) view.setInt32(72, Number(data.bIsYankable), true);
  // 0x4c: i16
  if (data?.sRebuildPriority !== undefined) view.setInt16(76, Number(data.sRebuildPriority), true);
  // 0x4e: pad2
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_HINTS2 (size: 136)
 */
export interface VDS_HINTS2 {
  /** u64 */
  ullHintMask: Deno.PointerValue;
  /** u64 */
  ullExpectedMaximumSize: Deno.PointerValue;
  /** u32 */
  ulOptimalReadSize: number;
  /** u32 */
  ulOptimalReadAlignment: number;
  /** u32 */
  ulOptimalWriteSize: number;
  /** u32 */
  ulOptimalWriteAlignment: number;
  /** u32 */
  ulMaximumDriveCount: number;
  /** u32 */
  ulStripeSize: number;
  /** u32 */
  ulReserved1: number;
  /** u32 */
  ulReserved2: number;
  /** u32 */
  ulReserved3: number;
  /** Windows.Win32.Foundation.BOOL */
  bFastCrashRecoveryRequired: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bMostlyReads: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bOptimizeForSequentialReads: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bOptimizeForSequentialWrites: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bRemapEnabled: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bReadBackVerifyEnabled: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bWriteThroughCachingEnabled: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bHardwareChecksumEnabled: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bIsYankable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bAllocateHotSpare: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bUseMirroredCache: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bReadCachingEnabled: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bWriteCachingEnabled: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bMediaScanEnabled: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bConsistencyCheckEnabled: boolean;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_STORAGE_BUS_TYPE */
  BusType: VDS_STORAGE_BUS_TYPE;
  /** Windows.Win32.Foundation.BOOL */
  bReserved1: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bReserved2: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bReserved3: boolean;
  /** i16 */
  sRebuildPriority: number;
}

export const sizeofVDS_HINTS2 = 136;

export function allocVDS_HINTS2(data?: Partial<VDS_HINTS2>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_HINTS2);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ullHintMask !== undefined) view.setBigUint64(0, BigInt(data.ullHintMask), true);
  // 0x08: u64
  if (data?.ullExpectedMaximumSize !== undefined) view.setBigUint64(8, BigInt(data.ullExpectedMaximumSize), true);
  // 0x10: u32
  if (data?.ulOptimalReadSize !== undefined) view.setUint32(16, Number(data.ulOptimalReadSize), true);
  // 0x14: u32
  if (data?.ulOptimalReadAlignment !== undefined) view.setUint32(20, Number(data.ulOptimalReadAlignment), true);
  // 0x18: u32
  if (data?.ulOptimalWriteSize !== undefined) view.setUint32(24, Number(data.ulOptimalWriteSize), true);
  // 0x1c: u32
  if (data?.ulOptimalWriteAlignment !== undefined) view.setUint32(28, Number(data.ulOptimalWriteAlignment), true);
  // 0x20: u32
  if (data?.ulMaximumDriveCount !== undefined) view.setUint32(32, Number(data.ulMaximumDriveCount), true);
  // 0x24: u32
  if (data?.ulStripeSize !== undefined) view.setUint32(36, Number(data.ulStripeSize), true);
  // 0x28: u32
  if (data?.ulReserved1 !== undefined) view.setUint32(40, Number(data.ulReserved1), true);
  // 0x2c: u32
  if (data?.ulReserved2 !== undefined) view.setUint32(44, Number(data.ulReserved2), true);
  // 0x30: u32
  if (data?.ulReserved3 !== undefined) view.setUint32(48, Number(data.ulReserved3), true);
  // 0x34: i32
  if (data?.bFastCrashRecoveryRequired !== undefined) view.setInt32(52, Number(data.bFastCrashRecoveryRequired), true);
  // 0x38: i32
  if (data?.bMostlyReads !== undefined) view.setInt32(56, Number(data.bMostlyReads), true);
  // 0x3c: i32
  if (data?.bOptimizeForSequentialReads !== undefined) view.setInt32(60, Number(data.bOptimizeForSequentialReads), true);
  // 0x40: i32
  if (data?.bOptimizeForSequentialWrites !== undefined) view.setInt32(64, Number(data.bOptimizeForSequentialWrites), true);
  // 0x44: i32
  if (data?.bRemapEnabled !== undefined) view.setInt32(68, Number(data.bRemapEnabled), true);
  // 0x48: i32
  if (data?.bReadBackVerifyEnabled !== undefined) view.setInt32(72, Number(data.bReadBackVerifyEnabled), true);
  // 0x4c: i32
  if (data?.bWriteThroughCachingEnabled !== undefined) view.setInt32(76, Number(data.bWriteThroughCachingEnabled), true);
  // 0x50: i32
  if (data?.bHardwareChecksumEnabled !== undefined) view.setInt32(80, Number(data.bHardwareChecksumEnabled), true);
  // 0x54: i32
  if (data?.bIsYankable !== undefined) view.setInt32(84, Number(data.bIsYankable), true);
  // 0x58: i32
  if (data?.bAllocateHotSpare !== undefined) view.setInt32(88, Number(data.bAllocateHotSpare), true);
  // 0x5c: i32
  if (data?.bUseMirroredCache !== undefined) view.setInt32(92, Number(data.bUseMirroredCache), true);
  // 0x60: i32
  if (data?.bReadCachingEnabled !== undefined) view.setInt32(96, Number(data.bReadCachingEnabled), true);
  // 0x64: i32
  if (data?.bWriteCachingEnabled !== undefined) view.setInt32(100, Number(data.bWriteCachingEnabled), true);
  // 0x68: i32
  if (data?.bMediaScanEnabled !== undefined) view.setInt32(104, Number(data.bMediaScanEnabled), true);
  // 0x6c: i32
  if (data?.bConsistencyCheckEnabled !== undefined) view.setInt32(108, Number(data.bConsistencyCheckEnabled), true);
  // 0x70: i32
  if (data?.BusType !== undefined) view.setInt32(112, Number(data.BusType), true);
  // 0x74: i32
  if (data?.bReserved1 !== undefined) view.setInt32(116, Number(data.bReserved1), true);
  // 0x78: i32
  if (data?.bReserved2 !== undefined) view.setInt32(120, Number(data.bReserved2), true);
  // 0x7c: i32
  if (data?.bReserved3 !== undefined) view.setInt32(124, Number(data.bReserved3), true);
  // 0x80: i16
  if (data?.sRebuildPriority !== undefined) view.setInt16(128, Number(data.sRebuildPriority), true);
  // 0x82: pad6
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_SUB_SYSTEM_PROP (size: 48)
 */
export interface VDS_SUB_SYSTEM_PROP {
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszFriendlyName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszIdentification: string | null;
  /** u32 */
  ulFlags: number;
  /** u32 */
  ulStripeSizeFlags: number;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_SUB_SYSTEM_STATUS */
  status: VDS_SUB_SYSTEM_STATUS;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_HEALTH */
  health: VDS_HEALTH;
  /** i16 */
  sNumberOfInternalBuses: number;
  /** i16 */
  sMaxNumberOfSlotsEachBus: number;
  /** i16 */
  sMaxNumberOfControllers: number;
  /** i16 */
  sRebuildPriority: number;
}

export const sizeofVDS_SUB_SYSTEM_PROP = 48;

export function allocVDS_SUB_SYSTEM_PROP(data?: Partial<VDS_SUB_SYSTEM_PROP>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_SUB_SYSTEM_PROP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.id !== undefined) view.setBigUint64(0, data.id === null ? 0n : BigInt(util.toPointer(data.id)), true);
  // 0x08: buffer
  if (data?.pwszFriendlyName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszFriendlyName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pwszIdentification !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszIdentification);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.ulFlags !== undefined) view.setUint32(24, Number(data.ulFlags), true);
  // 0x1c: u32
  if (data?.ulStripeSizeFlags !== undefined) view.setUint32(28, Number(data.ulStripeSizeFlags), true);
  // 0x20: i32
  if (data?.status !== undefined) view.setInt32(32, Number(data.status), true);
  // 0x24: i32
  if (data?.health !== undefined) view.setInt32(36, Number(data.health), true);
  // 0x28: i16
  if (data?.sNumberOfInternalBuses !== undefined) view.setInt16(40, Number(data.sNumberOfInternalBuses), true);
  // 0x2a: i16
  if (data?.sMaxNumberOfSlotsEachBus !== undefined) view.setInt16(42, Number(data.sMaxNumberOfSlotsEachBus), true);
  // 0x2c: i16
  if (data?.sMaxNumberOfControllers !== undefined) view.setInt16(44, Number(data.sMaxNumberOfControllers), true);
  // 0x2e: i16
  if (data?.sRebuildPriority !== undefined) view.setInt16(46, Number(data.sRebuildPriority), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_SUB_SYSTEM_PROP2 (size: 56)
 */
export interface VDS_SUB_SYSTEM_PROP2 {
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszFriendlyName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszIdentification: string | null;
  /** u32 */
  ulFlags: number;
  /** u32 */
  ulStripeSizeFlags: number;
  /** u32 */
  ulSupportedRaidTypeFlags: number;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_SUB_SYSTEM_STATUS */
  status: VDS_SUB_SYSTEM_STATUS;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_HEALTH */
  health: VDS_HEALTH;
  /** i16 */
  sNumberOfInternalBuses: number;
  /** i16 */
  sMaxNumberOfSlotsEachBus: number;
  /** i16 */
  sMaxNumberOfControllers: number;
  /** i16 */
  sRebuildPriority: number;
  /** u32 */
  ulNumberOfEnclosures: number;
}

export const sizeofVDS_SUB_SYSTEM_PROP2 = 56;

export function allocVDS_SUB_SYSTEM_PROP2(data?: Partial<VDS_SUB_SYSTEM_PROP2>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_SUB_SYSTEM_PROP2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.id !== undefined) view.setBigUint64(0, data.id === null ? 0n : BigInt(util.toPointer(data.id)), true);
  // 0x08: buffer
  if (data?.pwszFriendlyName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszFriendlyName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pwszIdentification !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszIdentification);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.ulFlags !== undefined) view.setUint32(24, Number(data.ulFlags), true);
  // 0x1c: u32
  if (data?.ulStripeSizeFlags !== undefined) view.setUint32(28, Number(data.ulStripeSizeFlags), true);
  // 0x20: u32
  if (data?.ulSupportedRaidTypeFlags !== undefined) view.setUint32(32, Number(data.ulSupportedRaidTypeFlags), true);
  // 0x24: i32
  if (data?.status !== undefined) view.setInt32(36, Number(data.status), true);
  // 0x28: i32
  if (data?.health !== undefined) view.setInt32(40, Number(data.health), true);
  // 0x2c: i16
  if (data?.sNumberOfInternalBuses !== undefined) view.setInt16(44, Number(data.sNumberOfInternalBuses), true);
  // 0x2e: i16
  if (data?.sMaxNumberOfSlotsEachBus !== undefined) view.setInt16(46, Number(data.sMaxNumberOfSlotsEachBus), true);
  // 0x30: i16
  if (data?.sMaxNumberOfControllers !== undefined) view.setInt16(48, Number(data.sMaxNumberOfControllers), true);
  // 0x32: i16
  if (data?.sRebuildPriority !== undefined) view.setInt16(50, Number(data.sRebuildPriority), true);
  // 0x34: u32
  if (data?.ulNumberOfEnclosures !== undefined) view.setUint32(52, Number(data.ulNumberOfEnclosures), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_CONTROLLER_PROP (size: 40)
 */
export interface VDS_CONTROLLER_PROP {
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszFriendlyName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszIdentification: string | null;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_CONTROLLER_STATUS */
  status: VDS_CONTROLLER_STATUS;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_HEALTH */
  health: VDS_HEALTH;
  /** i16 */
  sNumberOfPorts: number;
}

export const sizeofVDS_CONTROLLER_PROP = 40;

export function allocVDS_CONTROLLER_PROP(data?: Partial<VDS_CONTROLLER_PROP>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_CONTROLLER_PROP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.id !== undefined) view.setBigUint64(0, data.id === null ? 0n : BigInt(util.toPointer(data.id)), true);
  // 0x08: buffer
  if (data?.pwszFriendlyName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszFriendlyName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pwszIdentification !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszIdentification);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: i32
  if (data?.status !== undefined) view.setInt32(24, Number(data.status), true);
  // 0x1c: i32
  if (data?.health !== undefined) view.setInt32(28, Number(data.health), true);
  // 0x20: i16
  if (data?.sNumberOfPorts !== undefined) view.setInt16(32, Number(data.sNumberOfPorts), true);
  // 0x22: pad6
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_DRIVE_PROP (size: 48)
 */
export interface VDS_DRIVE_PROP {
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  ullSize: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pwszFriendlyName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszIdentification: string | null;
  /** u32 */
  ulFlags: number;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_DRIVE_STATUS */
  status: VDS_DRIVE_STATUS;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_HEALTH */
  health: VDS_HEALTH;
  /** i16 */
  sInternalBusNumber: number;
  /** i16 */
  sSlotNumber: number;
}

export const sizeofVDS_DRIVE_PROP = 48;

export function allocVDS_DRIVE_PROP(data?: Partial<VDS_DRIVE_PROP>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_DRIVE_PROP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.id !== undefined) view.setBigUint64(0, data.id === null ? 0n : BigInt(util.toPointer(data.id)), true);
  // 0x08: u64
  if (data?.ullSize !== undefined) view.setBigUint64(8, BigInt(data.ullSize), true);
  // 0x10: buffer
  if (data?.pwszFriendlyName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszFriendlyName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pwszIdentification !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwszIdentification);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.ulFlags !== undefined) view.setUint32(32, Number(data.ulFlags), true);
  // 0x24: i32
  if (data?.status !== undefined) view.setInt32(36, Number(data.status), true);
  // 0x28: i32
  if (data?.health !== undefined) view.setInt32(40, Number(data.health), true);
  // 0x2c: i16
  if (data?.sInternalBusNumber !== undefined) view.setInt16(44, Number(data.sInternalBusNumber), true);
  // 0x2e: i16
  if (data?.sSlotNumber !== undefined) view.setInt16(46, Number(data.sSlotNumber), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_DRIVE_PROP2 (size: 64)
 */
export interface VDS_DRIVE_PROP2 {
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  ullSize: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pwszFriendlyName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszIdentification: string | null;
  /** u32 */
  ulFlags: number;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_DRIVE_STATUS */
  status: VDS_DRIVE_STATUS;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_HEALTH */
  health: VDS_HEALTH;
  /** i16 */
  sInternalBusNumber: number;
  /** i16 */
  sSlotNumber: number;
  /** u32 */
  ulEnclosureNumber: number;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_STORAGE_BUS_TYPE */
  busType: VDS_STORAGE_BUS_TYPE;
  /** u32 */
  ulSpindleSpeed: number;
}

export const sizeofVDS_DRIVE_PROP2 = 64;

export function allocVDS_DRIVE_PROP2(data?: Partial<VDS_DRIVE_PROP2>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_DRIVE_PROP2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.id !== undefined) view.setBigUint64(0, data.id === null ? 0n : BigInt(util.toPointer(data.id)), true);
  // 0x08: u64
  if (data?.ullSize !== undefined) view.setBigUint64(8, BigInt(data.ullSize), true);
  // 0x10: buffer
  if (data?.pwszFriendlyName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszFriendlyName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pwszIdentification !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwszIdentification);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.ulFlags !== undefined) view.setUint32(32, Number(data.ulFlags), true);
  // 0x24: i32
  if (data?.status !== undefined) view.setInt32(36, Number(data.status), true);
  // 0x28: i32
  if (data?.health !== undefined) view.setInt32(40, Number(data.health), true);
  // 0x2c: i16
  if (data?.sInternalBusNumber !== undefined) view.setInt16(44, Number(data.sInternalBusNumber), true);
  // 0x2e: i16
  if (data?.sSlotNumber !== undefined) view.setInt16(46, Number(data.sSlotNumber), true);
  // 0x30: u32
  if (data?.ulEnclosureNumber !== undefined) view.setUint32(48, Number(data.ulEnclosureNumber), true);
  // 0x34: i32
  if (data?.busType !== undefined) view.setInt32(52, Number(data.busType), true);
  // 0x38: u32
  if (data?.ulSpindleSpeed !== undefined) view.setUint32(56, Number(data.ulSpindleSpeed), true);
  // 0x3c: pad4
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_DRIVE_EXTENT (size: 32)
 */
export interface VDS_DRIVE_EXTENT {
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  LunId: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  ullSize: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  bUsed: boolean;
}

export const sizeofVDS_DRIVE_EXTENT = 32;

export function allocVDS_DRIVE_EXTENT(data?: Partial<VDS_DRIVE_EXTENT>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_DRIVE_EXTENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.id !== undefined) view.setBigUint64(0, data.id === null ? 0n : BigInt(util.toPointer(data.id)), true);
  // 0x08: pointer
  if (data?.LunId !== undefined) view.setBigUint64(8, data.LunId === null ? 0n : BigInt(util.toPointer(data.LunId)), true);
  // 0x10: u64
  if (data?.ullSize !== undefined) view.setBigUint64(16, BigInt(data.ullSize), true);
  // 0x18: i32
  if (data?.bUsed !== undefined) view.setInt32(24, Number(data.bUsed), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_LUN_PROP (size: 64)
 */
export interface VDS_LUN_PROP {
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  ullSize: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pwszFriendlyName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszIdentification: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszUnmaskingList: string | null;
  /** u32 */
  ulFlags: number;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_LUN_TYPE */
  type: VDS_LUN_TYPE;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_LUN_STATUS */
  status: VDS_LUN_STATUS;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_HEALTH */
  health: VDS_HEALTH;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_TRANSITION_STATE */
  TransitionState: VDS_TRANSITION_STATE;
  /** i16 */
  sRebuildPriority: number;
}

export const sizeofVDS_LUN_PROP = 64;

export function allocVDS_LUN_PROP(data?: Partial<VDS_LUN_PROP>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_LUN_PROP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.id !== undefined) view.setBigUint64(0, data.id === null ? 0n : BigInt(util.toPointer(data.id)), true);
  // 0x08: u64
  if (data?.ullSize !== undefined) view.setBigUint64(8, BigInt(data.ullSize), true);
  // 0x10: buffer
  if (data?.pwszFriendlyName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszFriendlyName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pwszIdentification !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwszIdentification);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pwszUnmaskingList !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pwszUnmaskingList);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.ulFlags !== undefined) view.setUint32(40, Number(data.ulFlags), true);
  // 0x2c: i32
  if (data?.type !== undefined) view.setInt32(44, Number(data.type), true);
  // 0x30: i32
  if (data?.status !== undefined) view.setInt32(48, Number(data.status), true);
  // 0x34: i32
  if (data?.health !== undefined) view.setInt32(52, Number(data.health), true);
  // 0x38: i32
  if (data?.TransitionState !== undefined) view.setInt32(56, Number(data.TransitionState), true);
  // 0x3c: i16
  if (data?.sRebuildPriority !== undefined) view.setInt16(60, Number(data.sRebuildPriority), true);
  // 0x3e: pad2
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_LUN_PLEX_PROP (size: 48)
 */
export interface VDS_LUN_PLEX_PROP {
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  ullSize: Deno.PointerValue;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_LUN_PLEX_TYPE */
  type: VDS_LUN_PLEX_TYPE;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_LUN_PLEX_STATUS */
  status: VDS_LUN_PLEX_STATUS;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_HEALTH */
  health: VDS_HEALTH;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_TRANSITION_STATE */
  TransitionState: VDS_TRANSITION_STATE;
  /** u32 */
  ulFlags: number;
  /** u32 */
  ulStripeSize: number;
  /** i16 */
  sRebuildPriority: number;
}

export const sizeofVDS_LUN_PLEX_PROP = 48;

export function allocVDS_LUN_PLEX_PROP(data?: Partial<VDS_LUN_PLEX_PROP>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_LUN_PLEX_PROP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.id !== undefined) view.setBigUint64(0, data.id === null ? 0n : BigInt(util.toPointer(data.id)), true);
  // 0x08: u64
  if (data?.ullSize !== undefined) view.setBigUint64(8, BigInt(data.ullSize), true);
  // 0x10: i32
  if (data?.type !== undefined) view.setInt32(16, Number(data.type), true);
  // 0x14: i32
  if (data?.status !== undefined) view.setInt32(20, Number(data.status), true);
  // 0x18: i32
  if (data?.health !== undefined) view.setInt32(24, Number(data.health), true);
  // 0x1c: i32
  if (data?.TransitionState !== undefined) view.setInt32(28, Number(data.TransitionState), true);
  // 0x20: u32
  if (data?.ulFlags !== undefined) view.setUint32(32, Number(data.ulFlags), true);
  // 0x24: u32
  if (data?.ulStripeSize !== undefined) view.setUint32(36, Number(data.ulStripeSize), true);
  // 0x28: i16
  if (data?.sRebuildPriority !== undefined) view.setInt16(40, Number(data.sRebuildPriority), true);
  // 0x2a: pad6
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_PORT_PROP (size: 32)
 */
export interface VDS_PORT_PROP {
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszFriendlyName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszIdentification: string | null;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_PORT_STATUS */
  status: VDS_PORT_STATUS;
}

export const sizeofVDS_PORT_PROP = 32;

export function allocVDS_PORT_PROP(data?: Partial<VDS_PORT_PROP>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_PORT_PROP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.id !== undefined) view.setBigUint64(0, data.id === null ? 0n : BigInt(util.toPointer(data.id)), true);
  // 0x08: buffer
  if (data?.pwszFriendlyName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszFriendlyName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pwszIdentification !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszIdentification);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: i32
  if (data?.status !== undefined) view.setInt32(24, Number(data.status), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_ISCSI_PORTAL_PROP (size: 24)
 */
export interface VDS_ISCSI_PORTAL_PROP {
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_IPADDRESS */
  address: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_ISCSI_PORTAL_STATUS */
  status: VDS_ISCSI_PORTAL_STATUS;
}

export const sizeofVDS_ISCSI_PORTAL_PROP = 24;

export function allocVDS_ISCSI_PORTAL_PROP(data?: Partial<VDS_ISCSI_PORTAL_PROP>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_ISCSI_PORTAL_PROP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.id !== undefined) view.setBigUint64(0, data.id === null ? 0n : BigInt(util.toPointer(data.id)), true);
  // 0x08: pointer
  if (data?.address !== undefined) view.setBigUint64(8, data.address === null ? 0n : BigInt(util.toPointer(data.address)), true);
  // 0x10: i32
  if (data?.status !== undefined) view.setInt32(16, Number(data.status), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_ISCSI_TARGET_PROP (size: 32)
 */
export interface VDS_ISCSI_TARGET_PROP {
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszIscsiName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszFriendlyName: string | null;
  /** Windows.Win32.Foundation.BOOL */
  bChapEnabled: boolean;
}

export const sizeofVDS_ISCSI_TARGET_PROP = 32;

export function allocVDS_ISCSI_TARGET_PROP(data?: Partial<VDS_ISCSI_TARGET_PROP>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_ISCSI_TARGET_PROP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.id !== undefined) view.setBigUint64(0, data.id === null ? 0n : BigInt(util.toPointer(data.id)), true);
  // 0x08: buffer
  if (data?.pwszIscsiName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszIscsiName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pwszFriendlyName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszFriendlyName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: i32
  if (data?.bChapEnabled !== undefined) view.setInt32(24, Number(data.bChapEnabled), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_ISCSI_PORTALGROUP_PROP (size: 16)
 */
export interface VDS_ISCSI_PORTALGROUP_PROP {
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  tag: number;
}

export const sizeofVDS_ISCSI_PORTALGROUP_PROP = 16;

export function allocVDS_ISCSI_PORTALGROUP_PROP(data?: Partial<VDS_ISCSI_PORTALGROUP_PROP>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_ISCSI_PORTALGROUP_PROP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.id !== undefined) view.setBigUint64(0, data.id === null ? 0n : BigInt(util.toPointer(data.id)), true);
  // 0x08: u16
  if (data?.tag !== undefined) view.setUint16(8, Number(data.tag), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_POOL_CUSTOM_ATTRIBUTES (size: 16)
 */
export interface VDS_POOL_CUSTOM_ATTRIBUTES {
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszValue: string | null;
}

export const sizeofVDS_POOL_CUSTOM_ATTRIBUTES = 16;

export function allocVDS_POOL_CUSTOM_ATTRIBUTES(data?: Partial<VDS_POOL_CUSTOM_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_POOL_CUSTOM_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pwszValue !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszValue);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_POOL_ATTRIBUTES (size: 176)
 */
export interface VDS_POOL_ATTRIBUTES {
  /** u64 */
  ullAttributeMask: Deno.PointerValue;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_RAID_TYPE */
  raidType: VDS_RAID_TYPE;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_STORAGE_BUS_TYPE */
  busType: VDS_STORAGE_BUS_TYPE;
  /** Windows.Win32.Foundation.PWSTR */
  pwszIntendedUsage: string | null;
  /** Windows.Win32.Foundation.BOOL */
  bSpinDown: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bIsThinProvisioned: boolean;
  /** u64 */
  ullProvisionedSpace: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  bNoSinglePointOfFailure: boolean;
  /** u32 */
  ulDataRedundancyMax: number;
  /** u32 */
  ulDataRedundancyMin: number;
  /** u32 */
  ulDataRedundancyDefault: number;
  /** u32 */
  ulPackageRedundancyMax: number;
  /** u32 */
  ulPackageRedundancyMin: number;
  /** u32 */
  ulPackageRedundancyDefault: number;
  /** u32 */
  ulStripeSize: number;
  /** u32 */
  ulStripeSizeMax: number;
  /** u32 */
  ulStripeSizeMin: number;
  /** u32 */
  ulDefaultStripeSize: number;
  /** u32 */
  ulNumberOfColumns: number;
  /** u32 */
  ulNumberOfColumnsMax: number;
  /** u32 */
  ulNumberOfColumnsMin: number;
  /** u32 */
  ulDefaultNumberofColumns: number;
  /** u32 */
  ulDataAvailabilityHint: number;
  /** u32 */
  ulAccessRandomnessHint: number;
  /** u32 */
  ulAccessDirectionHint: number;
  /** u32 */
  ulAccessSizeHint: number;
  /** u32 */
  ulAccessLatencyHint: number;
  /** u32 */
  ulAccessBandwidthWeightHint: number;
  /** u32 */
  ulStorageCostHint: number;
  /** u32 */
  ulStorageEfficiencyHint: number;
  /** u32 */
  ulNumOfCustomAttributes: number;
  /** ptr */
  pPoolCustomAttributes: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  bReserved1: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bReserved2: boolean;
  /** u32 */
  ulReserved1: number;
  /** u32 */
  ulReserved2: number;
  /** u64 */
  ullReserved1: Deno.PointerValue;
  /** u64 */
  ullReserved2: Deno.PointerValue;
}

export const sizeofVDS_POOL_ATTRIBUTES = 176;

export function allocVDS_POOL_ATTRIBUTES(data?: Partial<VDS_POOL_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_POOL_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ullAttributeMask !== undefined) view.setBigUint64(0, BigInt(data.ullAttributeMask), true);
  // 0x08: i32
  if (data?.raidType !== undefined) view.setInt32(8, Number(data.raidType), true);
  // 0x0c: i32
  if (data?.busType !== undefined) view.setInt32(12, Number(data.busType), true);
  // 0x10: buffer
  if (data?.pwszIntendedUsage !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszIntendedUsage);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: i32
  if (data?.bSpinDown !== undefined) view.setInt32(24, Number(data.bSpinDown), true);
  // 0x1c: i32
  if (data?.bIsThinProvisioned !== undefined) view.setInt32(28, Number(data.bIsThinProvisioned), true);
  // 0x20: u64
  if (data?.ullProvisionedSpace !== undefined) view.setBigUint64(32, BigInt(data.ullProvisionedSpace), true);
  // 0x28: i32
  if (data?.bNoSinglePointOfFailure !== undefined) view.setInt32(40, Number(data.bNoSinglePointOfFailure), true);
  // 0x2c: u32
  if (data?.ulDataRedundancyMax !== undefined) view.setUint32(44, Number(data.ulDataRedundancyMax), true);
  // 0x30: u32
  if (data?.ulDataRedundancyMin !== undefined) view.setUint32(48, Number(data.ulDataRedundancyMin), true);
  // 0x34: u32
  if (data?.ulDataRedundancyDefault !== undefined) view.setUint32(52, Number(data.ulDataRedundancyDefault), true);
  // 0x38: u32
  if (data?.ulPackageRedundancyMax !== undefined) view.setUint32(56, Number(data.ulPackageRedundancyMax), true);
  // 0x3c: u32
  if (data?.ulPackageRedundancyMin !== undefined) view.setUint32(60, Number(data.ulPackageRedundancyMin), true);
  // 0x40: u32
  if (data?.ulPackageRedundancyDefault !== undefined) view.setUint32(64, Number(data.ulPackageRedundancyDefault), true);
  // 0x44: u32
  if (data?.ulStripeSize !== undefined) view.setUint32(68, Number(data.ulStripeSize), true);
  // 0x48: u32
  if (data?.ulStripeSizeMax !== undefined) view.setUint32(72, Number(data.ulStripeSizeMax), true);
  // 0x4c: u32
  if (data?.ulStripeSizeMin !== undefined) view.setUint32(76, Number(data.ulStripeSizeMin), true);
  // 0x50: u32
  if (data?.ulDefaultStripeSize !== undefined) view.setUint32(80, Number(data.ulDefaultStripeSize), true);
  // 0x54: u32
  if (data?.ulNumberOfColumns !== undefined) view.setUint32(84, Number(data.ulNumberOfColumns), true);
  // 0x58: u32
  if (data?.ulNumberOfColumnsMax !== undefined) view.setUint32(88, Number(data.ulNumberOfColumnsMax), true);
  // 0x5c: u32
  if (data?.ulNumberOfColumnsMin !== undefined) view.setUint32(92, Number(data.ulNumberOfColumnsMin), true);
  // 0x60: u32
  if (data?.ulDefaultNumberofColumns !== undefined) view.setUint32(96, Number(data.ulDefaultNumberofColumns), true);
  // 0x64: u32
  if (data?.ulDataAvailabilityHint !== undefined) view.setUint32(100, Number(data.ulDataAvailabilityHint), true);
  // 0x68: u32
  if (data?.ulAccessRandomnessHint !== undefined) view.setUint32(104, Number(data.ulAccessRandomnessHint), true);
  // 0x6c: u32
  if (data?.ulAccessDirectionHint !== undefined) view.setUint32(108, Number(data.ulAccessDirectionHint), true);
  // 0x70: u32
  if (data?.ulAccessSizeHint !== undefined) view.setUint32(112, Number(data.ulAccessSizeHint), true);
  // 0x74: u32
  if (data?.ulAccessLatencyHint !== undefined) view.setUint32(116, Number(data.ulAccessLatencyHint), true);
  // 0x78: u32
  if (data?.ulAccessBandwidthWeightHint !== undefined) view.setUint32(120, Number(data.ulAccessBandwidthWeightHint), true);
  // 0x7c: u32
  if (data?.ulStorageCostHint !== undefined) view.setUint32(124, Number(data.ulStorageCostHint), true);
  // 0x80: u32
  if (data?.ulStorageEfficiencyHint !== undefined) view.setUint32(128, Number(data.ulStorageEfficiencyHint), true);
  // 0x84: u32
  if (data?.ulNumOfCustomAttributes !== undefined) view.setUint32(132, Number(data.ulNumOfCustomAttributes), true);
  // 0x88: pointer
  if (data?.pPoolCustomAttributes !== undefined) view.setBigUint64(136, data.pPoolCustomAttributes === null ? 0n : BigInt(util.toPointer(data.pPoolCustomAttributes)), true);
  // 0x90: i32
  if (data?.bReserved1 !== undefined) view.setInt32(144, Number(data.bReserved1), true);
  // 0x94: i32
  if (data?.bReserved2 !== undefined) view.setInt32(148, Number(data.bReserved2), true);
  // 0x98: u32
  if (data?.ulReserved1 !== undefined) view.setUint32(152, Number(data.ulReserved1), true);
  // 0x9c: u32
  if (data?.ulReserved2 !== undefined) view.setUint32(156, Number(data.ulReserved2), true);
  // 0xa0: u64
  if (data?.ullReserved1 !== undefined) view.setBigUint64(160, BigInt(data.ullReserved1), true);
  // 0xa8: u64
  if (data?.ullReserved2 !== undefined) view.setBigUint64(168, BigInt(data.ullReserved2), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_STORAGE_POOL_PROP (size: 64)
 */
export interface VDS_STORAGE_POOL_PROP {
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_STORAGE_POOL_STATUS */
  status: VDS_STORAGE_POOL_STATUS;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_HEALTH */
  health: VDS_HEALTH;
  /** Windows.Win32.Storage.VirtualDiskService.VDS_STORAGE_POOL_TYPE */
  type: VDS_STORAGE_POOL_TYPE;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszDescription: string | null;
  /** u64 */
  ullTotalConsumedSpace: Deno.PointerValue;
  /** u64 */
  ullTotalManagedSpace: Deno.PointerValue;
  /** u64 */
  ullRemainingFreeSpace: Deno.PointerValue;
}

export const sizeofVDS_STORAGE_POOL_PROP = 64;

export function allocVDS_STORAGE_POOL_PROP(data?: Partial<VDS_STORAGE_POOL_PROP>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_STORAGE_POOL_PROP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.id !== undefined) view.setBigUint64(0, data.id === null ? 0n : BigInt(util.toPointer(data.id)), true);
  // 0x08: i32
  if (data?.status !== undefined) view.setInt32(8, Number(data.status), true);
  // 0x0c: i32
  if (data?.health !== undefined) view.setInt32(12, Number(data.health), true);
  // 0x10: i32
  if (data?.type !== undefined) view.setInt32(16, Number(data.type), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pwszDescription !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pwszDescription);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u64
  if (data?.ullTotalConsumedSpace !== undefined) view.setBigUint64(40, BigInt(data.ullTotalConsumedSpace), true);
  // 0x30: u64
  if (data?.ullTotalManagedSpace !== undefined) view.setBigUint64(48, BigInt(data.ullTotalManagedSpace), true);
  // 0x38: u64
  if (data?.ullRemainingFreeSpace !== undefined) view.setBigUint64(56, BigInt(data.ullRemainingFreeSpace), true);
  return buf;
}

/**
 * Windows.Win32.Storage.VirtualDiskService.VDS_STORAGE_POOL_DRIVE_EXTENT (size: 24)
 */
export interface VDS_STORAGE_POOL_DRIVE_EXTENT {
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  ullSize: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  bUsed: boolean;
}

export const sizeofVDS_STORAGE_POOL_DRIVE_EXTENT = 24;

export function allocVDS_STORAGE_POOL_DRIVE_EXTENT(data?: Partial<VDS_STORAGE_POOL_DRIVE_EXTENT>): Uint8Array {
  const buf = new Uint8Array(sizeofVDS_STORAGE_POOL_DRIVE_EXTENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.id !== undefined) view.setBigUint64(0, data.id === null ? 0n : BigInt(util.toPointer(data.id)), true);
  // 0x08: u64
  if (data?.ullSize !== undefined) view.setBigUint64(8, BigInt(data.ullSize), true);
  // 0x10: i32
  if (data?.bUsed !== undefined) view.setInt32(16, Number(data.bUsed), true);
  // 0x14: pad4
  return buf;
}

// Native Libraries

// Symbols

