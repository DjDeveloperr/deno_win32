/// Auto-generated by Deno Win32: Windows.Win32.Storage.CloudFilters.Apis

import * as util from "../../util.ts";

// Enums
export type CF_PLACEHOLDER_CREATE_FLAGS = number;
export type CF_SYNC_PROVIDER_STATUS = number;
export type CF_REGISTER_FLAGS = number;
export type CF_HYDRATION_POLICY_PRIMARY = number;
export type CF_HYDRATION_POLICY_MODIFIER = number;
export type CF_POPULATION_POLICY_PRIMARY = number;
export type CF_POPULATION_POLICY_MODIFIER = number;
export type CF_PLACEHOLDER_MANAGEMENT_POLICY = number;
export type CF_INSYNC_POLICY = number;
export type CF_HARDLINK_POLICY = number;
export type CF_CALLBACK_CANCEL_FLAGS = number;
export type CF_CALLBACK_FETCH_DATA_FLAGS = number;
export type CF_CALLBACK_VALIDATE_DATA_FLAGS = number;
export type CF_CALLBACK_FETCH_PLACEHOLDERS_FLAGS = number;
export type CF_CALLBACK_OPEN_COMPLETION_FLAGS = number;
export type CF_CALLBACK_CLOSE_COMPLETION_FLAGS = number;
export type CF_CALLBACK_DEHYDRATE_FLAGS = number;
export type CF_CALLBACK_DEHYDRATE_COMPLETION_FLAGS = number;
export type CF_CALLBACK_DELETE_FLAGS = number;
export type CF_CALLBACK_DELETE_COMPLETION_FLAGS = number;
export type CF_CALLBACK_RENAME_FLAGS = number;
export type CF_CALLBACK_RENAME_COMPLETION_FLAGS = number;
export type CF_CALLBACK_DEHYDRATION_REASON = number;
export type CF_CALLBACK_TYPE = number;
export type CF_CONNECT_FLAGS = number;
export type CF_OPERATION_TYPE = number;
export type CF_OPERATION_TRANSFER_DATA_FLAGS = number;
export type CF_OPERATION_RETRIEVE_DATA_FLAGS = number;
export type CF_OPERATION_ACK_DATA_FLAGS = number;
export type CF_OPERATION_RESTART_HYDRATION_FLAGS = number;
export type CF_OPERATION_TRANSFER_PLACEHOLDERS_FLAGS = number;
export type CF_OPERATION_ACK_DEHYDRATE_FLAGS = number;
export type CF_OPERATION_ACK_RENAME_FLAGS = number;
export type CF_OPERATION_ACK_DELETE_FLAGS = number;
export type CF_CREATE_FLAGS = number;
export type CF_OPEN_FILE_FLAGS = number;
export type CF_CONVERT_FLAGS = number;
export type CF_UPDATE_FLAGS = number;
export type CF_REVERT_FLAGS = number;
export type CF_HYDRATE_FLAGS = number;
export type CF_DEHYDRATE_FLAGS = number;
export type CF_PIN_STATE = number;
export type CF_SET_PIN_FLAGS = number;
export type CF_IN_SYNC_STATE = number;
export type CF_SET_IN_SYNC_FLAGS = number;
export type CF_PLACEHOLDER_STATE = number;
export type CF_PLACEHOLDER_INFO_CLASS = number;
export type CF_SYNC_ROOT_INFO_CLASS = number;
export type CF_PLACEHOLDER_RANGE_INFO_CLASS = number;
export type FILE_INFO_BY_HANDLE_CLASS = number;

// Constants
export const CF_REQUEST_KEY_DEFAULT = 0;
export const CF_PLACEHOLDER_MAX_FILE_IDENTITY_LENGTH = 4096;
export const CF_MAX_PRIORITY_HINT = 15;
export const CF_MAX_PROVIDER_NAME_LENGTH = 255;
export const CF_MAX_PROVIDER_VERSION_LENGTH = 255;
export const CF_PLACEHOLDER_CREATE_FLAG_NONE = 0;
export const CF_PLACEHOLDER_CREATE_FLAG_DISABLE_ON_DEMAND_POPULATION = 1;
export const CF_PLACEHOLDER_CREATE_FLAG_MARK_IN_SYNC = 2;
export const CF_PLACEHOLDER_CREATE_FLAG_SUPERSEDE = 4;
export const CF_PLACEHOLDER_CREATE_FLAG_ALWAYS_FULL = 8;
export const CF_PROVIDER_STATUS_DISCONNECTED = 0;
export const CF_PROVIDER_STATUS_IDLE = 1;
export const CF_PROVIDER_STATUS_POPULATE_NAMESPACE = 2;
export const CF_PROVIDER_STATUS_POPULATE_METADATA = 4;
export const CF_PROVIDER_STATUS_POPULATE_CONTENT = 8;
export const CF_PROVIDER_STATUS_SYNC_INCREMENTAL = 16;
export const CF_PROVIDER_STATUS_SYNC_FULL = 32;
export const CF_PROVIDER_STATUS_CONNECTIVITY_LOST = 64;
export const CF_PROVIDER_STATUS_CLEAR_FLAGS = 2147483648;
export const CF_PROVIDER_STATUS_TERMINATED = 3221225473;
export const CF_PROVIDER_STATUS_ERROR = 3221225474;
export const CF_REGISTER_FLAG_NONE = 0;
export const CF_REGISTER_FLAG_UPDATE = 1;
export const CF_REGISTER_FLAG_DISABLE_ON_DEMAND_POPULATION_ON_ROOT = 2;
export const CF_REGISTER_FLAG_MARK_IN_SYNC_ON_ROOT = 4;
export const CF_HYDRATION_POLICY_PARTIAL = 0;
export const CF_HYDRATION_POLICY_PROGRESSIVE = 1;
export const CF_HYDRATION_POLICY_FULL = 2;
export const CF_HYDRATION_POLICY_ALWAYS_FULL = 3;
export const CF_HYDRATION_POLICY_MODIFIER_NONE = 0;
export const CF_HYDRATION_POLICY_MODIFIER_VALIDATION_REQUIRED = 1;
export const CF_HYDRATION_POLICY_MODIFIER_STREAMING_ALLOWED = 2;
export const CF_HYDRATION_POLICY_MODIFIER_AUTO_DEHYDRATION_ALLOWED = 4;
export const CF_HYDRATION_POLICY_MODIFIER_ALLOW_FULL_RESTART_HYDRATION = 8;
export const CF_POPULATION_POLICY_PARTIAL = 0;
export const CF_POPULATION_POLICY_FULL = 2;
export const CF_POPULATION_POLICY_ALWAYS_FULL = 3;
export const CF_POPULATION_POLICY_MODIFIER_NONE = 0;
export const CF_PLACEHOLDER_MANAGEMENT_POLICY_DEFAULT = 0;
export const CF_PLACEHOLDER_MANAGEMENT_POLICY_CREATE_UNRESTRICTED = 1;
export const CF_PLACEHOLDER_MANAGEMENT_POLICY_CONVERT_TO_UNRESTRICTED = 2;
export const CF_PLACEHOLDER_MANAGEMENT_POLICY_UPDATE_UNRESTRICTED = 4;
export const CF_INSYNC_POLICY_NONE = 0;
export const CF_INSYNC_POLICY_TRACK_FILE_CREATION_TIME = 1;
export const CF_INSYNC_POLICY_TRACK_FILE_READONLY_ATTRIBUTE = 2;
export const CF_INSYNC_POLICY_TRACK_FILE_HIDDEN_ATTRIBUTE = 4;
export const CF_INSYNC_POLICY_TRACK_FILE_SYSTEM_ATTRIBUTE = 8;
export const CF_INSYNC_POLICY_TRACK_DIRECTORY_CREATION_TIME = 16;
export const CF_INSYNC_POLICY_TRACK_DIRECTORY_READONLY_ATTRIBUTE = 32;
export const CF_INSYNC_POLICY_TRACK_DIRECTORY_HIDDEN_ATTRIBUTE = 64;
export const CF_INSYNC_POLICY_TRACK_DIRECTORY_SYSTEM_ATTRIBUTE = 128;
export const CF_INSYNC_POLICY_TRACK_FILE_LAST_WRITE_TIME = 256;
export const CF_INSYNC_POLICY_TRACK_DIRECTORY_LAST_WRITE_TIME = 512;
export const CF_INSYNC_POLICY_TRACK_FILE_ALL = 5592335;
export const CF_INSYNC_POLICY_TRACK_DIRECTORY_ALL = 11184880;
export const CF_INSYNC_POLICY_TRACK_ALL = 16777215;
export const CF_INSYNC_POLICY_PRESERVE_INSYNC_FOR_SYNC_ENGINE = 2147483648;
export const CF_HARDLINK_POLICY_NONE = 0;
export const CF_HARDLINK_POLICY_ALLOWED = 1;
export const CF_CALLBACK_CANCEL_FLAG_NONE = 0;
export const CF_CALLBACK_CANCEL_FLAG_IO_TIMEOUT = 1;
export const CF_CALLBACK_CANCEL_FLAG_IO_ABORTED = 2;
export const CF_CALLBACK_FETCH_DATA_FLAG_NONE = 0;
export const CF_CALLBACK_FETCH_DATA_FLAG_RECOVERY = 1;
export const CF_CALLBACK_FETCH_DATA_FLAG_EXPLICIT_HYDRATION = 2;
export const CF_CALLBACK_VALIDATE_DATA_FLAG_NONE = 0;
export const CF_CALLBACK_VALIDATE_DATA_FLAG_EXPLICIT_HYDRATION = 2;
export const CF_CALLBACK_FETCH_PLACEHOLDERS_FLAG_NONE = 0;
export const CF_CALLBACK_OPEN_COMPLETION_FLAG_NONE = 0;
export const CF_CALLBACK_OPEN_COMPLETION_FLAG_PLACEHOLDER_UNKNOWN = 1;
export const CF_CALLBACK_OPEN_COMPLETION_FLAG_PLACEHOLDER_UNSUPPORTED = 2;
export const CF_CALLBACK_CLOSE_COMPLETION_FLAG_NONE = 0;
export const CF_CALLBACK_CLOSE_COMPLETION_FLAG_DELETED = 1;
export const CF_CALLBACK_DEHYDRATE_FLAG_NONE = 0;
export const CF_CALLBACK_DEHYDRATE_FLAG_BACKGROUND = 1;
export const CF_CALLBACK_DEHYDRATE_COMPLETION_FLAG_NONE = 0;
export const CF_CALLBACK_DEHYDRATE_COMPLETION_FLAG_BACKGROUND = 1;
export const CF_CALLBACK_DEHYDRATE_COMPLETION_FLAG_DEHYDRATED = 2;
export const CF_CALLBACK_DELETE_FLAG_NONE = 0;
export const CF_CALLBACK_DELETE_FLAG_IS_DIRECTORY = 1;
export const CF_CALLBACK_DELETE_FLAG_IS_UNDELETE = 2;
export const CF_CALLBACK_DELETE_COMPLETION_FLAG_NONE = 0;
export const CF_CALLBACK_RENAME_FLAG_NONE = 0;
export const CF_CALLBACK_RENAME_FLAG_IS_DIRECTORY = 1;
export const CF_CALLBACK_RENAME_FLAG_SOURCE_IN_SCOPE = 2;
export const CF_CALLBACK_RENAME_FLAG_TARGET_IN_SCOPE = 4;
export const CF_CALLBACK_RENAME_COMPLETION_FLAG_NONE = 0;
export const CF_CALLBACK_DEHYDRATION_REASON_NONE = 0;
export const CF_CALLBACK_DEHYDRATION_REASON_USER_MANUAL = 1;
export const CF_CALLBACK_DEHYDRATION_REASON_SYSTEM_LOW_SPACE = 2;
export const CF_CALLBACK_DEHYDRATION_REASON_SYSTEM_INACTIVITY = 3;
export const CF_CALLBACK_DEHYDRATION_REASON_SYSTEM_OS_UPGRADE = 4;
export const CF_CALLBACK_TYPE_FETCH_DATA = 0;
export const CF_CALLBACK_TYPE_VALIDATE_DATA = 1;
export const CF_CALLBACK_TYPE_CANCEL_FETCH_DATA = 2;
export const CF_CALLBACK_TYPE_FETCH_PLACEHOLDERS = 3;
export const CF_CALLBACK_TYPE_CANCEL_FETCH_PLACEHOLDERS = 4;
export const CF_CALLBACK_TYPE_NOTIFY_FILE_OPEN_COMPLETION = 5;
export const CF_CALLBACK_TYPE_NOTIFY_FILE_CLOSE_COMPLETION = 6;
export const CF_CALLBACK_TYPE_NOTIFY_DEHYDRATE = 7;
export const CF_CALLBACK_TYPE_NOTIFY_DEHYDRATE_COMPLETION = 8;
export const CF_CALLBACK_TYPE_NOTIFY_DELETE = 9;
export const CF_CALLBACK_TYPE_NOTIFY_DELETE_COMPLETION = 10;
export const CF_CALLBACK_TYPE_NOTIFY_RENAME = 11;
export const CF_CALLBACK_TYPE_NOTIFY_RENAME_COMPLETION = 12;
export const CF_CALLBACK_TYPE_NONE = `-1`;
export const CF_CONNECT_FLAG_NONE = 0;
export const CF_CONNECT_FLAG_REQUIRE_PROCESS_INFO = 2;
export const CF_CONNECT_FLAG_REQUIRE_FULL_FILE_PATH = 4;
export const CF_CONNECT_FLAG_BLOCK_SELF_IMPLICIT_HYDRATION = 8;
export const CF_OPERATION_TYPE_TRANSFER_DATA = 0;
export const CF_OPERATION_TYPE_RETRIEVE_DATA = 1;
export const CF_OPERATION_TYPE_ACK_DATA = 2;
export const CF_OPERATION_TYPE_RESTART_HYDRATION = 3;
export const CF_OPERATION_TYPE_TRANSFER_PLACEHOLDERS = 4;
export const CF_OPERATION_TYPE_ACK_DEHYDRATE = 5;
export const CF_OPERATION_TYPE_ACK_DELETE = 6;
export const CF_OPERATION_TYPE_ACK_RENAME = 7;
export const CF_OPERATION_TRANSFER_DATA_FLAG_NONE = 0;
export const CF_OPERATION_RETRIEVE_DATA_FLAG_NONE = 0;
export const CF_OPERATION_ACK_DATA_FLAG_NONE = 0;
export const CF_OPERATION_RESTART_HYDRATION_FLAG_NONE = 0;
export const CF_OPERATION_RESTART_HYDRATION_FLAG_MARK_IN_SYNC = 1;
export const CF_OPERATION_TRANSFER_PLACEHOLDERS_FLAG_NONE = 0;
export const CF_OPERATION_TRANSFER_PLACEHOLDERS_FLAG_STOP_ON_ERROR = 1;
export const CF_OPERATION_TRANSFER_PLACEHOLDERS_FLAG_DISABLE_ON_DEMAND_POPULATION = 2;
export const CF_OPERATION_ACK_DEHYDRATE_FLAG_NONE = 0;
export const CF_OPERATION_ACK_RENAME_FLAG_NONE = 0;
export const CF_OPERATION_ACK_DELETE_FLAG_NONE = 0;
export const CF_CREATE_FLAG_NONE = 0;
export const CF_CREATE_FLAG_STOP_ON_ERROR = 1;
export const CF_OPEN_FILE_FLAG_NONE = 0;
export const CF_OPEN_FILE_FLAG_EXCLUSIVE = 1;
export const CF_OPEN_FILE_FLAG_WRITE_ACCESS = 2;
export const CF_OPEN_FILE_FLAG_DELETE_ACCESS = 4;
export const CF_OPEN_FILE_FLAG_FOREGROUND = 8;
export const CF_CONVERT_FLAG_NONE = 0;
export const CF_CONVERT_FLAG_MARK_IN_SYNC = 1;
export const CF_CONVERT_FLAG_DEHYDRATE = 2;
export const CF_CONVERT_FLAG_ENABLE_ON_DEMAND_POPULATION = 4;
export const CF_CONVERT_FLAG_ALWAYS_FULL = 8;
export const CF_CONVERT_FLAG_FORCE_CONVERT_TO_CLOUD_FILE = 16;
export const CF_UPDATE_FLAG_NONE = 0;
export const CF_UPDATE_FLAG_VERIFY_IN_SYNC = 1;
export const CF_UPDATE_FLAG_MARK_IN_SYNC = 2;
export const CF_UPDATE_FLAG_DEHYDRATE = 4;
export const CF_UPDATE_FLAG_ENABLE_ON_DEMAND_POPULATION = 8;
export const CF_UPDATE_FLAG_DISABLE_ON_DEMAND_POPULATION = 16;
export const CF_UPDATE_FLAG_REMOVE_FILE_IDENTITY = 32;
export const CF_UPDATE_FLAG_CLEAR_IN_SYNC = 64;
export const CF_UPDATE_FLAG_REMOVE_PROPERTY = 128;
export const CF_UPDATE_FLAG_PASSTHROUGH_FS_METADATA = 256;
export const CF_UPDATE_FLAG_ALWAYS_FULL = 512;
export const CF_UPDATE_FLAG_ALLOW_PARTIAL = 1024;
export const CF_REVERT_FLAG_NONE = 0;
export const CF_HYDRATE_FLAG_NONE = 0;
export const CF_DEHYDRATE_FLAG_NONE = 0;
export const CF_DEHYDRATE_FLAG_BACKGROUND = 1;
export const CF_PIN_STATE_UNSPECIFIED = 0;
export const CF_PIN_STATE_PINNED = 1;
export const CF_PIN_STATE_UNPINNED = 2;
export const CF_PIN_STATE_EXCLUDED = 3;
export const CF_PIN_STATE_INHERIT = 4;
export const CF_SET_PIN_FLAG_NONE = 0;
export const CF_SET_PIN_FLAG_RECURSE = 1;
export const CF_SET_PIN_FLAG_RECURSE_ONLY = 2;
export const CF_SET_PIN_FLAG_RECURSE_STOP_ON_ERROR = 4;
export const CF_IN_SYNC_STATE_NOT_IN_SYNC = 0;
export const CF_IN_SYNC_STATE_IN_SYNC = 1;
export const CF_SET_IN_SYNC_FLAG_NONE = 0;
export const CF_PLACEHOLDER_STATE_NO_STATES = 0;
export const CF_PLACEHOLDER_STATE_PLACEHOLDER = 1;
export const CF_PLACEHOLDER_STATE_SYNC_ROOT = 2;
export const CF_PLACEHOLDER_STATE_ESSENTIAL_PROP_PRESENT = 4;
export const CF_PLACEHOLDER_STATE_IN_SYNC = 8;
export const CF_PLACEHOLDER_STATE_PARTIAL = 16;
export const CF_PLACEHOLDER_STATE_PARTIALLY_ON_DISK = 32;
export const CF_PLACEHOLDER_STATE_INVALID = 4294967295;
export const CF_PLACEHOLDER_INFO_BASIC = 0;
export const CF_PLACEHOLDER_INFO_STANDARD = 1;
export const CF_SYNC_ROOT_INFO_BASIC = 0;
export const CF_SYNC_ROOT_INFO_STANDARD = 1;
export const CF_SYNC_ROOT_INFO_PROVIDER = 2;
export const CF_PLACEHOLDER_RANGE_INFO_ONDISK = 1;
export const CF_PLACEHOLDER_RANGE_INFO_VALIDATED = 2;
export const CF_PLACEHOLDER_RANGE_INFO_MODIFIED = 3;
export const FileBasicInfo = 0;
export const FileStandardInfo = 1;
export const FileNameInfo = 2;
export const FileRenameInfo = 3;
export const FileDispositionInfo = 4;
export const FileAllocationInfo = 5;
export const FileEndOfFileInfo = 6;
export const FileStreamInfo = 7;
export const FileCompressionInfo = 8;
export const FileAttributeTagInfo = 9;
export const FileIdBothDirectoryInfo = 10;
export const FileIdBothDirectoryRestartInfo = 11;
export const FileIoPriorityHintInfo = 12;
export const FileRemoteProtocolInfo = 13;
export const FileFullDirectoryInfo = 14;
export const FileFullDirectoryRestartInfo = 15;
export const FileStorageInfo = 16;
export const FileAlignmentInfo = 17;
export const FileIdInfo = 18;
export const FileIdExtdDirectoryInfo = 19;
export const FileIdExtdDirectoryRestartInfo = 20;
export const FileDispositionInfoEx = 21;
export const FileRenameInfoEx = 22;
export const FileCaseSensitiveInfo = 23;
export const FileNormalizedNameInfo = 24;
export const MaximumFileInfoByHandleClass = 25;

// Structs

export type CF_CONNECTION_KEY = bigint | number;

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: bigint | number;
  /** u64 */
  Region: bigint | number;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class _u_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwValue(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwValue(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue;
  /** i64 */
  QuadPart: bigint | number;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.u))), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

export class LARGE_INTEGERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get u(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i64
  get QuadPart(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set u(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i64
  set QuadPart(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.FILE_BASIC_INFO (size: 40)
 */
export interface FILE_BASIC_INFO {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  CreationTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LastAccessTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LastWriteTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ChangeTime: Uint8Array | Deno.PointerValue;
  /** u32 */
  FileAttributes: number;
}

export const sizeofFILE_BASIC_INFO = 40;

export function allocFILE_BASIC_INFO(data?: Partial<FILE_BASIC_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_BASIC_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CreationTime !== undefined) view.setBigUint64(0, data.CreationTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreationTime))), true);
  // 0x08: pointer
  if (data?.LastAccessTime !== undefined) view.setBigUint64(8, data.LastAccessTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LastAccessTime))), true);
  // 0x10: pointer
  if (data?.LastWriteTime !== undefined) view.setBigUint64(16, data.LastWriteTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LastWriteTime))), true);
  // 0x18: pointer
  if (data?.ChangeTime !== undefined) view.setBigUint64(24, data.ChangeTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ChangeTime))), true);
  // 0x20: u32
  if (data?.FileAttributes !== undefined) view.setUint32(32, Number(data.FileAttributes), true);
  // 0x24: pad4
  return buf;
}

export class FILE_BASIC_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CreationTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get LastAccessTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get LastWriteTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ChangeTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get FileAttributes(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set CreationTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set LastAccessTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set LastWriteTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ChangeTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set FileAttributes(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Storage.CloudFilters.CF_FS_METADATA (size: 16)
 */
export interface CF_FS_METADATA {
  /** Windows.Win32.Storage.FileSystem.FILE_BASIC_INFO */
  BasicInfo: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  FileSize: Uint8Array | Deno.PointerValue;
}

export const sizeofCF_FS_METADATA = 16;

export function allocCF_FS_METADATA(data?: Partial<CF_FS_METADATA>): Uint8Array {
  const buf = new Uint8Array(sizeofCF_FS_METADATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BasicInfo !== undefined) view.setBigUint64(0, data.BasicInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BasicInfo))), true);
  // 0x08: pointer
  if (data?.FileSize !== undefined) view.setBigUint64(8, data.FileSize === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FileSize))), true);
  return buf;
}

export class CF_FS_METADATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get BasicInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get FileSize(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set BasicInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set FileSize(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HRESULT = number;

/**
 * Windows.Win32.Storage.CloudFilters.CF_PLACEHOLDER_CREATE_INFO (size: 48)
 */
export interface CF_PLACEHOLDER_CREATE_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  RelativeFileName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Storage.CloudFilters.CF_FS_METADATA */
  FsMetadata: Uint8Array | Deno.PointerValue;
  /** ptr */
  FileIdentity: Deno.PointerValue | Uint8Array;
  /** u32 */
  FileIdentityLength: number;
  /** Windows.Win32.Storage.CloudFilters.CF_PLACEHOLDER_CREATE_FLAGS */
  Flags: CF_PLACEHOLDER_CREATE_FLAGS;
  /** Windows.Win32.Foundation.HRESULT */
  Result: Uint8Array | Deno.PointerValue;
  /** i64 */
  CreateUsn: bigint | number;
}

export const sizeofCF_PLACEHOLDER_CREATE_INFO = 48;

export function allocCF_PLACEHOLDER_CREATE_INFO(data?: Partial<CF_PLACEHOLDER_CREATE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCF_PLACEHOLDER_CREATE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.RelativeFileName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.RelativeFileName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.FsMetadata !== undefined) view.setBigUint64(8, data.FsMetadata === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FsMetadata))), true);
  // 0x10: pointer
  if (data?.FileIdentity !== undefined) view.setBigUint64(16, data.FileIdentity === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FileIdentity))), true);
  // 0x18: u32
  if (data?.FileIdentityLength !== undefined) view.setUint32(24, Number(data.FileIdentityLength), true);
  // 0x1c: u32
  if (data?.Flags !== undefined) view.setUint32(28, Number(data.Flags), true);
  // 0x20: pointer
  if (data?.Result !== undefined) view.setBigUint64(32, data.Result === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Result))), true);
  // 0x28: i64
  if (data?.CreateUsn !== undefined) view.setBigInt64(40, BigInt(data.CreateUsn), true);
  return buf;
}

export class CF_PLACEHOLDER_CREATE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get RelativeFileName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get FsMetadata(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get FileIdentity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get FileIdentityLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Flags(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get Result(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i64
  get CreateUsn(): bigint | number {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x00: buffer
  set RelativeFileName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set FsMetadata(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set FileIdentity(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set FileIdentityLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Flags(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set Result(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: i64
  set CreateUsn(value: bigint | number) {
    this.view.setBigInt64(40, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Storage.CloudFilters.CF_PROCESS_INFO (size: 48)
 */
export interface CF_PROCESS_INFO {
  /** u32 */
  StructSize: number;
  /** u32 */
  ProcessId: number;
  /** Windows.Win32.Foundation.PWSTR */
  ImagePath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  PackageName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ApplicationId: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  CommandLine: string | null | Uint8Array | Uint16Array;
  /** u32 */
  SessionId: number;
}

export const sizeofCF_PROCESS_INFO = 48;

export function allocCF_PROCESS_INFO(data?: Partial<CF_PROCESS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCF_PROCESS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.StructSize !== undefined) view.setUint32(0, Number(data.StructSize), true);
  // 0x04: u32
  if (data?.ProcessId !== undefined) view.setUint32(4, Number(data.ProcessId), true);
  // 0x08: buffer
  if (data?.ImagePath !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ImagePath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.PackageName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.PackageName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.ApplicationId !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ApplicationId);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.CommandLine !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.CommandLine);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.SessionId !== undefined) view.setUint32(40, Number(data.SessionId), true);
  // 0x2c: pad4
  return buf;
}

export class CF_PROCESS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get StructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ProcessId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get ImagePath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get PackageName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get ApplicationId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get CommandLine(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get SessionId(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: u32
  set StructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ProcessId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set ImagePath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set PackageName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set ApplicationId(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set CommandLine(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set SessionId(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Storage.CloudFilters.CF_PLATFORM_INFO (size: 16)
 */
export interface CF_PLATFORM_INFO {
  /** u32 */
  BuildNumber: number;
  /** u32 */
  RevisionNumber: number;
  /** u32 */
  IntegrationNumber: number;
}

export const sizeofCF_PLATFORM_INFO = 16;

export function allocCF_PLATFORM_INFO(data?: Partial<CF_PLATFORM_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCF_PLATFORM_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BuildNumber !== undefined) view.setUint32(0, Number(data.BuildNumber), true);
  // 0x04: u32
  if (data?.RevisionNumber !== undefined) view.setUint32(4, Number(data.RevisionNumber), true);
  // 0x08: u32
  if (data?.IntegrationNumber !== undefined) view.setUint32(8, Number(data.IntegrationNumber), true);
  // 0x0c: pad4
  return buf;
}

export class CF_PLATFORM_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get BuildNumber(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get RevisionNumber(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get IntegrationNumber(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set BuildNumber(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set RevisionNumber(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set IntegrationNumber(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Storage.CloudFilters.CF_HYDRATION_POLICY_PRIMARY_USHORT (size: 8)
 */
export interface CF_HYDRATION_POLICY_PRIMARY_USHORT {
  /** u16 */
  us: number;
}

export const sizeofCF_HYDRATION_POLICY_PRIMARY_USHORT = 8;

export function allocCF_HYDRATION_POLICY_PRIMARY_USHORT(data?: Partial<CF_HYDRATION_POLICY_PRIMARY_USHORT>): Uint8Array {
  const buf = new Uint8Array(sizeofCF_HYDRATION_POLICY_PRIMARY_USHORT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.us !== undefined) view.setUint16(0, Number(data.us), true);
  // 0x02: pad6
  return buf;
}

export class CF_HYDRATION_POLICY_PRIMARY_USHORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get us(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x00: u16
  set us(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.Storage.CloudFilters.CF_HYDRATION_POLICY_MODIFIER_USHORT (size: 8)
 */
export interface CF_HYDRATION_POLICY_MODIFIER_USHORT {
  /** u16 */
  us: number;
}

export const sizeofCF_HYDRATION_POLICY_MODIFIER_USHORT = 8;

export function allocCF_HYDRATION_POLICY_MODIFIER_USHORT(data?: Partial<CF_HYDRATION_POLICY_MODIFIER_USHORT>): Uint8Array {
  const buf = new Uint8Array(sizeofCF_HYDRATION_POLICY_MODIFIER_USHORT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.us !== undefined) view.setUint16(0, Number(data.us), true);
  // 0x02: pad6
  return buf;
}

export class CF_HYDRATION_POLICY_MODIFIER_USHORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get us(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x00: u16
  set us(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.Storage.CloudFilters.CF_HYDRATION_POLICY (size: 16)
 */
export interface CF_HYDRATION_POLICY {
  /** Windows.Win32.Storage.CloudFilters.CF_HYDRATION_POLICY_PRIMARY_USHORT */
  Primary: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.CloudFilters.CF_HYDRATION_POLICY_MODIFIER_USHORT */
  Modifier: Uint8Array | Deno.PointerValue;
}

export const sizeofCF_HYDRATION_POLICY = 16;

export function allocCF_HYDRATION_POLICY(data?: Partial<CF_HYDRATION_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofCF_HYDRATION_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Primary !== undefined) view.setBigUint64(0, data.Primary === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Primary))), true);
  // 0x08: pointer
  if (data?.Modifier !== undefined) view.setBigUint64(8, data.Modifier === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Modifier))), true);
  return buf;
}

export class CF_HYDRATION_POLICYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Primary(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Modifier(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Primary(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Modifier(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.CloudFilters.CF_POPULATION_POLICY_PRIMARY_USHORT (size: 8)
 */
export interface CF_POPULATION_POLICY_PRIMARY_USHORT {
  /** u16 */
  us: number;
}

export const sizeofCF_POPULATION_POLICY_PRIMARY_USHORT = 8;

export function allocCF_POPULATION_POLICY_PRIMARY_USHORT(data?: Partial<CF_POPULATION_POLICY_PRIMARY_USHORT>): Uint8Array {
  const buf = new Uint8Array(sizeofCF_POPULATION_POLICY_PRIMARY_USHORT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.us !== undefined) view.setUint16(0, Number(data.us), true);
  // 0x02: pad6
  return buf;
}

export class CF_POPULATION_POLICY_PRIMARY_USHORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get us(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x00: u16
  set us(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.Storage.CloudFilters.CF_POPULATION_POLICY_MODIFIER_USHORT (size: 8)
 */
export interface CF_POPULATION_POLICY_MODIFIER_USHORT {
  /** u16 */
  us: number;
}

export const sizeofCF_POPULATION_POLICY_MODIFIER_USHORT = 8;

export function allocCF_POPULATION_POLICY_MODIFIER_USHORT(data?: Partial<CF_POPULATION_POLICY_MODIFIER_USHORT>): Uint8Array {
  const buf = new Uint8Array(sizeofCF_POPULATION_POLICY_MODIFIER_USHORT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.us !== undefined) view.setUint16(0, Number(data.us), true);
  // 0x02: pad6
  return buf;
}

export class CF_POPULATION_POLICY_MODIFIER_USHORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get us(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x00: u16
  set us(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.Storage.CloudFilters.CF_POPULATION_POLICY (size: 16)
 */
export interface CF_POPULATION_POLICY {
  /** Windows.Win32.Storage.CloudFilters.CF_POPULATION_POLICY_PRIMARY_USHORT */
  Primary: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.CloudFilters.CF_POPULATION_POLICY_MODIFIER_USHORT */
  Modifier: Uint8Array | Deno.PointerValue;
}

export const sizeofCF_POPULATION_POLICY = 16;

export function allocCF_POPULATION_POLICY(data?: Partial<CF_POPULATION_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofCF_POPULATION_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Primary !== undefined) view.setBigUint64(0, data.Primary === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Primary))), true);
  // 0x08: pointer
  if (data?.Modifier !== undefined) view.setBigUint64(8, data.Modifier === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Modifier))), true);
  return buf;
}

export class CF_POPULATION_POLICYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Primary(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Modifier(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Primary(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Modifier(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.CloudFilters.CF_SYNC_POLICIES (size: 40)
 */
export interface CF_SYNC_POLICIES {
  /** u32 */
  StructSize: number;
  /** Windows.Win32.Storage.CloudFilters.CF_HYDRATION_POLICY */
  Hydration: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.CloudFilters.CF_POPULATION_POLICY */
  Population: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.CloudFilters.CF_INSYNC_POLICY */
  InSync: CF_INSYNC_POLICY;
  /** Windows.Win32.Storage.CloudFilters.CF_HARDLINK_POLICY */
  HardLink: CF_HARDLINK_POLICY;
  /** Windows.Win32.Storage.CloudFilters.CF_PLACEHOLDER_MANAGEMENT_POLICY */
  PlaceholderManagement: CF_PLACEHOLDER_MANAGEMENT_POLICY;
}

export const sizeofCF_SYNC_POLICIES = 40;

export function allocCF_SYNC_POLICIES(data?: Partial<CF_SYNC_POLICIES>): Uint8Array {
  const buf = new Uint8Array(sizeofCF_SYNC_POLICIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.StructSize !== undefined) view.setUint32(0, Number(data.StructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Hydration !== undefined) view.setBigUint64(8, data.Hydration === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Hydration))), true);
  // 0x10: pointer
  if (data?.Population !== undefined) view.setBigUint64(16, data.Population === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Population))), true);
  // 0x18: u32
  if (data?.InSync !== undefined) view.setUint32(24, Number(data.InSync), true);
  // 0x1c: u32
  if (data?.HardLink !== undefined) view.setUint32(28, Number(data.HardLink), true);
  // 0x20: i32
  if (data?.PlaceholderManagement !== undefined) view.setInt32(32, Number(data.PlaceholderManagement), true);
  // 0x24: pad4
  return buf;
}

export class CF_SYNC_POLICIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get StructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Hydration(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Population(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get InSync(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get HardLink(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: i32
  get PlaceholderManagement(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set StructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Hydration(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Population(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set InSync(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set HardLink(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: i32
  set PlaceholderManagement(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Storage.CloudFilters.CF_SYNC_REGISTRATION (size: 64)
 */
export interface CF_SYNC_REGISTRATION {
  /** u32 */
  StructSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  ProviderName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ProviderVersion: string | null | Uint8Array | Uint16Array;
  /** ptr */
  SyncRootIdentity: Deno.PointerValue | Uint8Array;
  /** u32 */
  SyncRootIdentityLength: number;
  /** ptr */
  FileIdentity: Deno.PointerValue | Uint8Array;
  /** u32 */
  FileIdentityLength: number;
  /** System.Guid */
  ProviderId: Uint8Array | Deno.PointerValue;
}

export const sizeofCF_SYNC_REGISTRATION = 64;

export function allocCF_SYNC_REGISTRATION(data?: Partial<CF_SYNC_REGISTRATION>): Uint8Array {
  const buf = new Uint8Array(sizeofCF_SYNC_REGISTRATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.StructSize !== undefined) view.setUint32(0, Number(data.StructSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.ProviderName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ProviderName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.ProviderVersion !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.ProviderVersion);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.SyncRootIdentity !== undefined) view.setBigUint64(24, data.SyncRootIdentity === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SyncRootIdentity))), true);
  // 0x20: u32
  if (data?.SyncRootIdentityLength !== undefined) view.setUint32(32, Number(data.SyncRootIdentityLength), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.FileIdentity !== undefined) view.setBigUint64(40, data.FileIdentity === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FileIdentity))), true);
  // 0x30: u32
  if (data?.FileIdentityLength !== undefined) view.setUint32(48, Number(data.FileIdentityLength), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.ProviderId !== undefined) view.setBigUint64(56, data.ProviderId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProviderId))), true);
  return buf;
}

export class CF_SYNC_REGISTRATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get StructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get ProviderName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get ProviderVersion(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get SyncRootIdentity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get SyncRootIdentityLength(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get FileIdentity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get FileIdentityLength(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get ProviderId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set StructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set ProviderName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set ProviderVersion(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set SyncRootIdentity(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set SyncRootIdentityLength(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set FileIdentity(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set FileIdentityLength(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set ProviderId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.CloudFilters.CF_CALLBACK_INFO (size: 152)
 */
export interface CF_CALLBACK_INFO {
  /** u32 */
  StructSize: number;
  /** Windows.Win32.Storage.CloudFilters.CF_CONNECTION_KEY */
  ConnectionKey: Uint8Array | Deno.PointerValue;
  /** ptr */
  CallbackContext: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  VolumeGuidName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  VolumeDosName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  VolumeSerialNumber: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  SyncRootFileId: Uint8Array | Deno.PointerValue;
  /** ptr */
  SyncRootIdentity: Deno.PointerValue | Uint8Array;
  /** u32 */
  SyncRootIdentityLength: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  FileId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  FileSize: Uint8Array | Deno.PointerValue;
  /** ptr */
  FileIdentity: Deno.PointerValue | Uint8Array;
  /** u32 */
  FileIdentityLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  NormalizedPath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TransferKey: Uint8Array | Deno.PointerValue;
  /** u8 */
  PriorityHint: number;
  /** ptr */
  CorrelationVector: Deno.PointerValue | Uint8Array;
  /** ptr */
  ProcessInfo: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  RequestKey: Uint8Array | Deno.PointerValue;
}

export const sizeofCF_CALLBACK_INFO = 152;

export function allocCF_CALLBACK_INFO(data?: Partial<CF_CALLBACK_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCF_CALLBACK_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.StructSize !== undefined) view.setUint32(0, Number(data.StructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ConnectionKey !== undefined) view.setBigUint64(8, data.ConnectionKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ConnectionKey))), true);
  // 0x10: pointer
  if (data?.CallbackContext !== undefined) view.setBigUint64(16, data.CallbackContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CallbackContext))), true);
  // 0x18: buffer
  if (data?.VolumeGuidName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.VolumeGuidName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.VolumeDosName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.VolumeDosName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.VolumeSerialNumber !== undefined) view.setUint32(40, Number(data.VolumeSerialNumber), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.SyncRootFileId !== undefined) view.setBigUint64(48, data.SyncRootFileId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SyncRootFileId))), true);
  // 0x38: pointer
  if (data?.SyncRootIdentity !== undefined) view.setBigUint64(56, data.SyncRootIdentity === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SyncRootIdentity))), true);
  // 0x40: u32
  if (data?.SyncRootIdentityLength !== undefined) view.setUint32(64, Number(data.SyncRootIdentityLength), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.FileId !== undefined) view.setBigUint64(72, data.FileId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FileId))), true);
  // 0x50: pointer
  if (data?.FileSize !== undefined) view.setBigUint64(80, data.FileSize === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FileSize))), true);
  // 0x58: pointer
  if (data?.FileIdentity !== undefined) view.setBigUint64(88, data.FileIdentity === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FileIdentity))), true);
  // 0x60: u32
  if (data?.FileIdentityLength !== undefined) view.setUint32(96, Number(data.FileIdentityLength), true);
  // 0x64: pad4
  // 0x68: buffer
  if (data?.NormalizedPath !== undefined) {
    (buf as any)._f104 = util.pwstrToFfi(data.NormalizedPath);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f104))), true);
  }
  // 0x70: pointer
  if (data?.TransferKey !== undefined) view.setBigUint64(112, data.TransferKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TransferKey))), true);
  // 0x78: u8
  if (data?.PriorityHint !== undefined) view.setUint8(120, Number(data.PriorityHint));
  // 0x79: pad7
  // 0x80: pointer
  if (data?.CorrelationVector !== undefined) view.setBigUint64(128, data.CorrelationVector === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CorrelationVector))), true);
  // 0x88: pointer
  if (data?.ProcessInfo !== undefined) view.setBigUint64(136, data.ProcessInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProcessInfo))), true);
  // 0x90: pointer
  if (data?.RequestKey !== undefined) view.setBigUint64(144, data.RequestKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RequestKey))), true);
  return buf;
}

export class CF_CALLBACK_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get StructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ConnectionKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get CallbackContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get VolumeGuidName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get VolumeDosName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get VolumeSerialNumber(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get SyncRootFileId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get SyncRootIdentity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get SyncRootIdentityLength(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get FileId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get FileSize(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get FileIdentity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get FileIdentityLength(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: buffer
  get NormalizedPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get TransferKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: u8
  get PriorityHint(): number {
    return this.view.getUint8(120);
  }

  // 0x79: pad7

  // 0x80: pointer
  get CorrelationVector(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: pointer
  get ProcessInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: pointer
  get RequestKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set StructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ConnectionKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set CallbackContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set VolumeGuidName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set VolumeDosName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set VolumeSerialNumber(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set SyncRootFileId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set SyncRootIdentity(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set SyncRootIdentityLength(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set FileId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set FileSize(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set FileIdentity(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: u32
  set FileIdentityLength(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: buffer
  set NormalizedPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f104))), true);
  }

  // 0x70: pointer
  set TransferKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: u8
  set PriorityHint(value: number) {
    this.view.setUint8(120, value);
  }

  // 0x79: pad7

  // 0x80: pointer
  set CorrelationVector(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x88: pointer
  set ProcessInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: pointer
  set RequestKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  X: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.X))), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.CloudFilters.CF_CALLBACK_PARAMETERS (size: 16)
 */
export interface CF_CALLBACK_PARAMETERS {
  /** u32 */
  ParamSize: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofCF_CALLBACK_PARAMETERS = 16;

export function allocCF_CALLBACK_PARAMETERS(data?: Partial<CF_CALLBACK_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofCF_CALLBACK_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ParamSize !== undefined) view.setUint32(0, Number(data.ParamSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class CF_CALLBACK_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ParamSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ParamSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.CloudFilters.CF_CALLBACK_REGISTRATION (size: 16)
 */
export interface CF_CALLBACK_REGISTRATION {
  /** Windows.Win32.Storage.CloudFilters.CF_CALLBACK_TYPE */
  Type: CF_CALLBACK_TYPE;
  /** Windows.Win32.Storage.CloudFilters.CF_CALLBACK */
  Callback: Uint8Array | Deno.PointerValue;
}

export const sizeofCF_CALLBACK_REGISTRATION = 16;

export function allocCF_CALLBACK_REGISTRATION(data?: Partial<CF_CALLBACK_REGISTRATION>): Uint8Array {
  const buf = new Uint8Array(sizeofCF_CALLBACK_REGISTRATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Callback !== undefined) view.setBigUint64(8, data.Callback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Callback))), true);
  return buf;
}

export class CF_CALLBACK_REGISTRATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Callback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Callback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.CloudFilters.CF_SYNC_STATUS (size: 24)
 */
export interface CF_SYNC_STATUS {
  /** u32 */
  StructSize: number;
  /** u32 */
  Code: number;
  /** u32 */
  DescriptionOffset: number;
  /** u32 */
  DescriptionLength: number;
  /** u32 */
  DeviceIdOffset: number;
  /** u32 */
  DeviceIdLength: number;
}

export const sizeofCF_SYNC_STATUS = 24;

export function allocCF_SYNC_STATUS(data?: Partial<CF_SYNC_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofCF_SYNC_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.StructSize !== undefined) view.setUint32(0, Number(data.StructSize), true);
  // 0x04: u32
  if (data?.Code !== undefined) view.setUint32(4, Number(data.Code), true);
  // 0x08: u32
  if (data?.DescriptionOffset !== undefined) view.setUint32(8, Number(data.DescriptionOffset), true);
  // 0x0c: u32
  if (data?.DescriptionLength !== undefined) view.setUint32(12, Number(data.DescriptionLength), true);
  // 0x10: u32
  if (data?.DeviceIdOffset !== undefined) view.setUint32(16, Number(data.DeviceIdOffset), true);
  // 0x14: u32
  if (data?.DeviceIdLength !== undefined) view.setUint32(20, Number(data.DeviceIdLength), true);
  return buf;
}

export class CF_SYNC_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get StructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Code(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get DescriptionOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get DescriptionLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get DeviceIdOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get DeviceIdLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set StructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Code(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set DescriptionOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set DescriptionLength(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set DeviceIdOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set DeviceIdLength(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Storage.CloudFilters.CF_OPERATION_INFO (size: 48)
 */
export interface CF_OPERATION_INFO {
  /** u32 */
  StructSize: number;
  /** Windows.Win32.Storage.CloudFilters.CF_OPERATION_TYPE */
  Type: CF_OPERATION_TYPE;
  /** Windows.Win32.Storage.CloudFilters.CF_CONNECTION_KEY */
  ConnectionKey: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TransferKey: Uint8Array | Deno.PointerValue;
  /** ptr */
  CorrelationVector: Deno.PointerValue | Uint8Array;
  /** ptr */
  SyncStatus: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  RequestKey: Uint8Array | Deno.PointerValue;
}

export const sizeofCF_OPERATION_INFO = 48;

export function allocCF_OPERATION_INFO(data?: Partial<CF_OPERATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCF_OPERATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.StructSize !== undefined) view.setUint32(0, Number(data.StructSize), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  // 0x08: pointer
  if (data?.ConnectionKey !== undefined) view.setBigUint64(8, data.ConnectionKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ConnectionKey))), true);
  // 0x10: pointer
  if (data?.TransferKey !== undefined) view.setBigUint64(16, data.TransferKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TransferKey))), true);
  // 0x18: pointer
  if (data?.CorrelationVector !== undefined) view.setBigUint64(24, data.CorrelationVector === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CorrelationVector))), true);
  // 0x20: pointer
  if (data?.SyncStatus !== undefined) view.setBigUint64(32, data.SyncStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SyncStatus))), true);
  // 0x28: pointer
  if (data?.RequestKey !== undefined) view.setBigUint64(40, data.RequestKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RequestKey))), true);
  return buf;
}

export class CF_OPERATION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get StructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Type(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get ConnectionKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get TransferKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get CorrelationVector(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get SyncStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get RequestKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set StructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Type(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set ConnectionKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set TransferKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set CorrelationVector(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set SyncStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set RequestKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.CloudFilters.CF_OPERATION_PARAMETERS (size: 16)
 */
export interface CF_OPERATION_PARAMETERS {
  /** u32 */
  ParamSize: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofCF_OPERATION_PARAMETERS = 16;

export function allocCF_OPERATION_PARAMETERS(data?: Partial<CF_OPERATION_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofCF_OPERATION_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ParamSize !== undefined) view.setUint32(0, Number(data.ParamSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class CF_OPERATION_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ParamSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ParamSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.CloudFilters.CF_FILE_RANGE (size: 16)
 */
export interface CF_FILE_RANGE {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartingOffset: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Length: Uint8Array | Deno.PointerValue;
}

export const sizeofCF_FILE_RANGE = 16;

export function allocCF_FILE_RANGE(data?: Partial<CF_FILE_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofCF_FILE_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.StartingOffset !== undefined) view.setBigUint64(0, data.StartingOffset === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.StartingOffset))), true);
  // 0x08: pointer
  if (data?.Length !== undefined) view.setBigUint64(8, data.Length === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Length))), true);
  return buf;
}

export class CF_FILE_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get StartingOffset(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Length(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set StartingOffset(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Length(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.CloudFilters.CF_PLACEHOLDER_BASIC_INFO (size: 40)
 */
export interface CF_PLACEHOLDER_BASIC_INFO {
  /** Windows.Win32.Storage.CloudFilters.CF_PIN_STATE */
  PinState: CF_PIN_STATE;
  /** Windows.Win32.Storage.CloudFilters.CF_IN_SYNC_STATE */
  InSyncState: CF_IN_SYNC_STATE;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  FileId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  SyncRootFileId: Uint8Array | Deno.PointerValue;
  /** u32 */
  FileIdentityLength: number;
  /** array */
  FileIdentity: Deno.PointerValue;
}

export const sizeofCF_PLACEHOLDER_BASIC_INFO = 40;

export function allocCF_PLACEHOLDER_BASIC_INFO(data?: Partial<CF_PLACEHOLDER_BASIC_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCF_PLACEHOLDER_BASIC_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.PinState !== undefined) view.setInt32(0, Number(data.PinState), true);
  // 0x04: i32
  if (data?.InSyncState !== undefined) view.setInt32(4, Number(data.InSyncState), true);
  // 0x08: pointer
  if (data?.FileId !== undefined) view.setBigUint64(8, data.FileId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FileId))), true);
  // 0x10: pointer
  if (data?.SyncRootFileId !== undefined) view.setBigUint64(16, data.SyncRootFileId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SyncRootFileId))), true);
  // 0x18: u32
  if (data?.FileIdentityLength !== undefined) view.setUint32(24, Number(data.FileIdentityLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.FileIdentity !== undefined) view.setBigUint64(32, data.FileIdentity === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FileIdentity))), true);
  return buf;
}

export class CF_PLACEHOLDER_BASIC_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get PinState(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get InSyncState(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get FileId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get SyncRootFileId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get FileIdentityLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get FileIdentity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set PinState(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set InSyncState(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set FileId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set SyncRootFileId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set FileIdentityLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set FileIdentity(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.CloudFilters.CF_PLACEHOLDER_STANDARD_INFO (size: 72)
 */
export interface CF_PLACEHOLDER_STANDARD_INFO {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  OnDiskDataSize: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ValidatedDataSize: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ModifiedDataSize: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PropertiesSize: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.CloudFilters.CF_PIN_STATE */
  PinState: CF_PIN_STATE;
  /** Windows.Win32.Storage.CloudFilters.CF_IN_SYNC_STATE */
  InSyncState: CF_IN_SYNC_STATE;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  FileId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  SyncRootFileId: Uint8Array | Deno.PointerValue;
  /** u32 */
  FileIdentityLength: number;
  /** array */
  FileIdentity: Deno.PointerValue;
}

export const sizeofCF_PLACEHOLDER_STANDARD_INFO = 72;

export function allocCF_PLACEHOLDER_STANDARD_INFO(data?: Partial<CF_PLACEHOLDER_STANDARD_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCF_PLACEHOLDER_STANDARD_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.OnDiskDataSize !== undefined) view.setBigUint64(0, data.OnDiskDataSize === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OnDiskDataSize))), true);
  // 0x08: pointer
  if (data?.ValidatedDataSize !== undefined) view.setBigUint64(8, data.ValidatedDataSize === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ValidatedDataSize))), true);
  // 0x10: pointer
  if (data?.ModifiedDataSize !== undefined) view.setBigUint64(16, data.ModifiedDataSize === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ModifiedDataSize))), true);
  // 0x18: pointer
  if (data?.PropertiesSize !== undefined) view.setBigUint64(24, data.PropertiesSize === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PropertiesSize))), true);
  // 0x20: i32
  if (data?.PinState !== undefined) view.setInt32(32, Number(data.PinState), true);
  // 0x24: i32
  if (data?.InSyncState !== undefined) view.setInt32(36, Number(data.InSyncState), true);
  // 0x28: pointer
  if (data?.FileId !== undefined) view.setBigUint64(40, data.FileId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FileId))), true);
  // 0x30: pointer
  if (data?.SyncRootFileId !== undefined) view.setBigUint64(48, data.SyncRootFileId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SyncRootFileId))), true);
  // 0x38: u32
  if (data?.FileIdentityLength !== undefined) view.setUint32(56, Number(data.FileIdentityLength), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.FileIdentity !== undefined) view.setBigUint64(64, data.FileIdentity === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FileIdentity))), true);
  return buf;
}

export class CF_PLACEHOLDER_STANDARD_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get OnDiskDataSize(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ValidatedDataSize(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ModifiedDataSize(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get PropertiesSize(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get PinState(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get InSyncState(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: pointer
  get FileId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get SyncRootFileId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get FileIdentityLength(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get FileIdentity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set OnDiskDataSize(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ValidatedDataSize(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ModifiedDataSize(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set PropertiesSize(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set PinState(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set InSyncState(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: pointer
  set FileId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set SyncRootFileId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set FileIdentityLength(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set FileIdentity(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.CloudFilters.CF_SYNC_ROOT_BASIC_INFO (size: 8)
 */
export interface CF_SYNC_ROOT_BASIC_INFO {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  SyncRootFileId: Uint8Array | Deno.PointerValue;
}

export const sizeofCF_SYNC_ROOT_BASIC_INFO = 8;

export function allocCF_SYNC_ROOT_BASIC_INFO(data?: Partial<CF_SYNC_ROOT_BASIC_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCF_SYNC_ROOT_BASIC_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SyncRootFileId !== undefined) view.setBigUint64(0, data.SyncRootFileId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SyncRootFileId))), true);
  return buf;
}

export class CF_SYNC_ROOT_BASIC_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SyncRootFileId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set SyncRootFileId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.CloudFilters.CF_SYNC_ROOT_PROVIDER_INFO (size: 24)
 */
export interface CF_SYNC_ROOT_PROVIDER_INFO {
  /** Windows.Win32.Storage.CloudFilters.CF_SYNC_PROVIDER_STATUS */
  ProviderStatus: CF_SYNC_PROVIDER_STATUS;
  /** array */
  ProviderName: Deno.PointerValue;
  /** array */
  ProviderVersion: Deno.PointerValue;
}

export const sizeofCF_SYNC_ROOT_PROVIDER_INFO = 24;

export function allocCF_SYNC_ROOT_PROVIDER_INFO(data?: Partial<CF_SYNC_ROOT_PROVIDER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCF_SYNC_ROOT_PROVIDER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ProviderStatus !== undefined) view.setUint32(0, Number(data.ProviderStatus), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ProviderName !== undefined) view.setBigUint64(8, data.ProviderName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProviderName))), true);
  // 0x10: pointer
  if (data?.ProviderVersion !== undefined) view.setBigUint64(16, data.ProviderVersion === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProviderVersion))), true);
  return buf;
}

export class CF_SYNC_ROOT_PROVIDER_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ProviderStatus(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ProviderName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ProviderVersion(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ProviderStatus(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ProviderName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ProviderVersion(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.CloudFilters.CF_SYNC_ROOT_STANDARD_INFO (size: 72)
 */
export interface CF_SYNC_ROOT_STANDARD_INFO {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  SyncRootFileId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.CloudFilters.CF_HYDRATION_POLICY */
  HydrationPolicy: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.CloudFilters.CF_POPULATION_POLICY */
  PopulationPolicy: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.CloudFilters.CF_INSYNC_POLICY */
  InSyncPolicy: CF_INSYNC_POLICY;
  /** Windows.Win32.Storage.CloudFilters.CF_HARDLINK_POLICY */
  HardLinkPolicy: CF_HARDLINK_POLICY;
  /** Windows.Win32.Storage.CloudFilters.CF_SYNC_PROVIDER_STATUS */
  ProviderStatus: CF_SYNC_PROVIDER_STATUS;
  /** array */
  ProviderName: Deno.PointerValue;
  /** array */
  ProviderVersion: Deno.PointerValue;
  /** u32 */
  SyncRootIdentityLength: number;
  /** array */
  SyncRootIdentity: Deno.PointerValue;
}

export const sizeofCF_SYNC_ROOT_STANDARD_INFO = 72;

export function allocCF_SYNC_ROOT_STANDARD_INFO(data?: Partial<CF_SYNC_ROOT_STANDARD_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCF_SYNC_ROOT_STANDARD_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SyncRootFileId !== undefined) view.setBigUint64(0, data.SyncRootFileId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SyncRootFileId))), true);
  // 0x08: pointer
  if (data?.HydrationPolicy !== undefined) view.setBigUint64(8, data.HydrationPolicy === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HydrationPolicy))), true);
  // 0x10: pointer
  if (data?.PopulationPolicy !== undefined) view.setBigUint64(16, data.PopulationPolicy === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PopulationPolicy))), true);
  // 0x18: u32
  if (data?.InSyncPolicy !== undefined) view.setUint32(24, Number(data.InSyncPolicy), true);
  // 0x1c: u32
  if (data?.HardLinkPolicy !== undefined) view.setUint32(28, Number(data.HardLinkPolicy), true);
  // 0x20: u32
  if (data?.ProviderStatus !== undefined) view.setUint32(32, Number(data.ProviderStatus), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ProviderName !== undefined) view.setBigUint64(40, data.ProviderName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProviderName))), true);
  // 0x30: pointer
  if (data?.ProviderVersion !== undefined) view.setBigUint64(48, data.ProviderVersion === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProviderVersion))), true);
  // 0x38: u32
  if (data?.SyncRootIdentityLength !== undefined) view.setUint32(56, Number(data.SyncRootIdentityLength), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.SyncRootIdentity !== undefined) view.setBigUint64(64, data.SyncRootIdentity === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SyncRootIdentity))), true);
  return buf;
}

export class CF_SYNC_ROOT_STANDARD_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SyncRootFileId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get HydrationPolicy(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get PopulationPolicy(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get InSyncPolicy(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get HardLinkPolicy(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get ProviderStatus(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ProviderName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get ProviderVersion(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get SyncRootIdentityLength(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get SyncRootIdentity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set SyncRootFileId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set HydrationPolicy(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set PopulationPolicy(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set InSyncPolicy(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set HardLinkPolicy(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set ProviderStatus(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ProviderName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set ProviderVersion(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set SyncRootIdentityLength(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set SyncRootIdentity(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HANDLE = bigint | number;

export type BOOLEAN = number;

// Native Libraries

try {
  var libcldapi_dll = Deno.dlopen("cldapi.dll", {
    CfGetPlatformInfo: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    CfRegisterSyncRoot: {
      parameters: ["buffer", "pointer", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    CfUnregisterSyncRoot: {
      parameters: ["buffer"],
      result: "pointer",
      optional: true,
    },
    CfConnectSyncRoot: {
      parameters: ["buffer", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    CfDisconnectSyncRoot: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    CfGetTransferKey: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    CfReleaseTransferKey: {
      parameters: ["pointer", "pointer"],
      result: "void",
      optional: true,
    },
    CfExecute: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    CfUpdateSyncProviderStatus: {
      parameters: ["pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    CfQuerySyncProviderStatus: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    CfReportSyncStatus: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
      optional: true,
    },
    CfCreatePlaceholders: {
      parameters: ["buffer", "pointer", "u32", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    CfOpenFileWithOplock: {
      parameters: ["buffer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    CfReferenceProtectedHandle: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    CfGetWin32HandleFromProtectedHandle: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    CfReleaseProtectedHandle: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
    CfCloseHandle: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
    CfConvertToPlaceholder: {
      parameters: ["pointer", "pointer", "u32", "u32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    CfUpdatePlaceholder: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "u32", "u32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    CfRevertPlaceholder: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    CfHydratePlaceholder: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    CfDehydratePlaceholder: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    CfSetPinState: {
      parameters: ["pointer", "i32", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    CfSetInSyncState: {
      parameters: ["pointer", "i32", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    CfSetCorrelationVector: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    CfGetCorrelationVector: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    CfGetPlaceholderStateFromAttributeTag: {
      parameters: ["u32", "u32"],
      result: "u32",
      optional: true,
    },
    CfGetPlaceholderStateFromFileInfo: {
      parameters: ["pointer", "i32"],
      result: "u32",
      optional: true,
    },
    CfGetPlaceholderStateFromFindData: {
      parameters: ["pointer"],
      result: "u32",
      optional: true,
    },
    CfGetPlaceholderInfo: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    CfGetSyncRootInfoByPath: {
      parameters: ["buffer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    CfGetSyncRootInfoByHandle: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    CfGetPlaceholderRangeInfo: {
      parameters: ["pointer", "i32", "pointer", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    CfReportProviderProgress: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    CfReportProviderProgress2: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function CfGetPlatformInfo(
  PlatformVersion: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcldapi_dll.CfGetPlatformInfo!(util.toPointer(PlatformVersion));
}

export function CfRegisterSyncRoot(
  SyncRootPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Registration: Deno.PointerValue | Uint8Array /* ptr */,
  Policies: Deno.PointerValue | Uint8Array /* ptr */,
  RegisterFlags: CF_REGISTER_FLAGS /* Windows.Win32.Storage.CloudFilters.CF_REGISTER_FLAGS */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcldapi_dll.CfRegisterSyncRoot!(util.pwstrToFfi(SyncRootPath), util.toPointer(Registration), util.toPointer(Policies), RegisterFlags);
}

export function CfUnregisterSyncRoot(
  SyncRootPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcldapi_dll.CfUnregisterSyncRoot!(util.pwstrToFfi(SyncRootPath));
}

export function CfConnectSyncRoot(
  SyncRootPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  CallbackTable: Deno.PointerValue | Uint8Array /* ptr */,
  CallbackContext: Deno.PointerValue | Uint8Array /* ptr */,
  ConnectFlags: CF_CONNECT_FLAGS /* Windows.Win32.Storage.CloudFilters.CF_CONNECT_FLAGS */,
  ConnectionKey: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcldapi_dll.CfConnectSyncRoot!(util.pwstrToFfi(SyncRootPath), util.toPointer(CallbackTable), util.toPointer(CallbackContext), ConnectFlags, util.toPointer(ConnectionKey));
}

export function CfDisconnectSyncRoot(
  ConnectionKey: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.CloudFilters.CF_CONNECTION_KEY */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcldapi_dll.CfDisconnectSyncRoot!(util.toPointer(ConnectionKey));
}

export function CfGetTransferKey(
  FileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  TransferKey: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcldapi_dll.CfGetTransferKey!(util.toPointer(FileHandle), util.toPointer(TransferKey));
}

export function CfReleaseTransferKey(
  FileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  TransferKey: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libcldapi_dll.CfReleaseTransferKey!(util.toPointer(FileHandle), util.toPointer(TransferKey));
}

export function CfExecute(
  OpInfo: Deno.PointerValue | Uint8Array /* ptr */,
  OpParams: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcldapi_dll.CfExecute!(util.toPointer(OpInfo), util.toPointer(OpParams));
}

export function CfUpdateSyncProviderStatus(
  ConnectionKey: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.CloudFilters.CF_CONNECTION_KEY */,
  ProviderStatus: CF_SYNC_PROVIDER_STATUS /* Windows.Win32.Storage.CloudFilters.CF_SYNC_PROVIDER_STATUS */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcldapi_dll.CfUpdateSyncProviderStatus!(util.toPointer(ConnectionKey), ProviderStatus);
}

export function CfQuerySyncProviderStatus(
  ConnectionKey: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.CloudFilters.CF_CONNECTION_KEY */,
  ProviderStatus: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcldapi_dll.CfQuerySyncProviderStatus!(util.toPointer(ConnectionKey), util.toPointer(ProviderStatus));
}

export function CfReportSyncStatus(
  SyncRootPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SyncStatus: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcldapi_dll.CfReportSyncStatus!(util.pwstrToFfi(SyncRootPath), util.toPointer(SyncStatus));
}

export function CfCreatePlaceholders(
  BaseDirectoryPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  PlaceholderArray: Deno.PointerValue | Uint8Array /* ptr */,
  PlaceholderCount: number /* u32 */,
  CreateFlags: CF_CREATE_FLAGS /* Windows.Win32.Storage.CloudFilters.CF_CREATE_FLAGS */,
  EntriesProcessed: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcldapi_dll.CfCreatePlaceholders!(util.pwstrToFfi(BaseDirectoryPath), util.toPointer(PlaceholderArray), PlaceholderCount, CreateFlags, util.toPointer(EntriesProcessed));
}

export function CfOpenFileWithOplock(
  FilePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: CF_OPEN_FILE_FLAGS /* Windows.Win32.Storage.CloudFilters.CF_OPEN_FILE_FLAGS */,
  ProtectedHandle: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcldapi_dll.CfOpenFileWithOplock!(util.pwstrToFfi(FilePath), Flags, util.toPointer(ProtectedHandle));
}

export function CfReferenceProtectedHandle(
  ProtectedHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libcldapi_dll.CfReferenceProtectedHandle!(util.toPointer(ProtectedHandle));
}

export function CfGetWin32HandleFromProtectedHandle(
  ProtectedHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libcldapi_dll.CfGetWin32HandleFromProtectedHandle!(util.toPointer(ProtectedHandle));
}

export function CfReleaseProtectedHandle(
  ProtectedHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): void /* void */ {
  return libcldapi_dll.CfReleaseProtectedHandle!(util.toPointer(ProtectedHandle));
}

export function CfCloseHandle(
  FileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): void /* void */ {
  return libcldapi_dll.CfCloseHandle!(util.toPointer(FileHandle));
}

export function CfConvertToPlaceholder(
  FileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  FileIdentity: Deno.PointerValue | Uint8Array /* ptr */,
  FileIdentityLength: number /* u32 */,
  ConvertFlags: CF_CONVERT_FLAGS /* Windows.Win32.Storage.CloudFilters.CF_CONVERT_FLAGS */,
  ConvertUsn: Deno.PointerValue | Uint8Array /* ptr */,
  Overlapped: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcldapi_dll.CfConvertToPlaceholder!(util.toPointer(FileHandle), util.toPointer(FileIdentity), FileIdentityLength, ConvertFlags, util.toPointer(ConvertUsn), util.toPointer(Overlapped));
}

export function CfUpdatePlaceholder(
  FileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  FsMetadata: Deno.PointerValue | Uint8Array /* ptr */,
  FileIdentity: Deno.PointerValue | Uint8Array /* ptr */,
  FileIdentityLength: number /* u32 */,
  DehydrateRangeArray: Deno.PointerValue | Uint8Array /* ptr */,
  DehydrateRangeCount: number /* u32 */,
  UpdateFlags: CF_UPDATE_FLAGS /* Windows.Win32.Storage.CloudFilters.CF_UPDATE_FLAGS */,
  UpdateUsn: Deno.PointerValue | Uint8Array /* ptr */,
  Overlapped: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcldapi_dll.CfUpdatePlaceholder!(util.toPointer(FileHandle), util.toPointer(FsMetadata), util.toPointer(FileIdentity), FileIdentityLength, util.toPointer(DehydrateRangeArray), DehydrateRangeCount, UpdateFlags, util.toPointer(UpdateUsn), util.toPointer(Overlapped));
}

export function CfRevertPlaceholder(
  FileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  RevertFlags: CF_REVERT_FLAGS /* Windows.Win32.Storage.CloudFilters.CF_REVERT_FLAGS */,
  Overlapped: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcldapi_dll.CfRevertPlaceholder!(util.toPointer(FileHandle), RevertFlags, util.toPointer(Overlapped));
}

export function CfHydratePlaceholder(
  FileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  StartingOffset: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LARGE_INTEGER */,
  Length: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LARGE_INTEGER */,
  HydrateFlags: CF_HYDRATE_FLAGS /* Windows.Win32.Storage.CloudFilters.CF_HYDRATE_FLAGS */,
  Overlapped: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcldapi_dll.CfHydratePlaceholder!(util.toPointer(FileHandle), util.toPointer(StartingOffset), util.toPointer(Length), HydrateFlags, util.toPointer(Overlapped));
}

export function CfDehydratePlaceholder(
  FileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  StartingOffset: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LARGE_INTEGER */,
  Length: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LARGE_INTEGER */,
  DehydrateFlags: CF_DEHYDRATE_FLAGS /* Windows.Win32.Storage.CloudFilters.CF_DEHYDRATE_FLAGS */,
  Overlapped: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcldapi_dll.CfDehydratePlaceholder!(util.toPointer(FileHandle), util.toPointer(StartingOffset), util.toPointer(Length), DehydrateFlags, util.toPointer(Overlapped));
}

export function CfSetPinState(
  FileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  PinState: CF_PIN_STATE /* Windows.Win32.Storage.CloudFilters.CF_PIN_STATE */,
  PinFlags: CF_SET_PIN_FLAGS /* Windows.Win32.Storage.CloudFilters.CF_SET_PIN_FLAGS */,
  Overlapped: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcldapi_dll.CfSetPinState!(util.toPointer(FileHandle), PinState, PinFlags, util.toPointer(Overlapped));
}

export function CfSetInSyncState(
  FileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  InSyncState: CF_IN_SYNC_STATE /* Windows.Win32.Storage.CloudFilters.CF_IN_SYNC_STATE */,
  InSyncFlags: CF_SET_IN_SYNC_FLAGS /* Windows.Win32.Storage.CloudFilters.CF_SET_IN_SYNC_FLAGS */,
  InSyncUsn: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcldapi_dll.CfSetInSyncState!(util.toPointer(FileHandle), InSyncState, InSyncFlags, util.toPointer(InSyncUsn));
}

export function CfSetCorrelationVector(
  FileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  CorrelationVector: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcldapi_dll.CfSetCorrelationVector!(util.toPointer(FileHandle), util.toPointer(CorrelationVector));
}

export function CfGetCorrelationVector(
  FileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  CorrelationVector: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcldapi_dll.CfGetCorrelationVector!(util.toPointer(FileHandle), util.toPointer(CorrelationVector));
}

export function CfGetPlaceholderStateFromAttributeTag(
  FileAttributes: number /* u32 */,
  ReparseTag: number /* u32 */,
): CF_PLACEHOLDER_STATE /* Windows.Win32.Storage.CloudFilters.CF_PLACEHOLDER_STATE */ {
  return libcldapi_dll.CfGetPlaceholderStateFromAttributeTag!(FileAttributes, ReparseTag);
}

export function CfGetPlaceholderStateFromFileInfo(
  InfoBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  InfoClass: FILE_INFO_BY_HANDLE_CLASS /* Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS */,
): CF_PLACEHOLDER_STATE /* Windows.Win32.Storage.CloudFilters.CF_PLACEHOLDER_STATE */ {
  return libcldapi_dll.CfGetPlaceholderStateFromFileInfo!(util.toPointer(InfoBuffer), InfoClass);
}

export function CfGetPlaceholderStateFromFindData(
  FindData: Deno.PointerValue | Uint8Array /* ptr */,
): CF_PLACEHOLDER_STATE /* Windows.Win32.Storage.CloudFilters.CF_PLACEHOLDER_STATE */ {
  return libcldapi_dll.CfGetPlaceholderStateFromFindData!(util.toPointer(FindData));
}

export function CfGetPlaceholderInfo(
  FileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  InfoClass: CF_PLACEHOLDER_INFO_CLASS /* Windows.Win32.Storage.CloudFilters.CF_PLACEHOLDER_INFO_CLASS */,
  InfoBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  InfoBufferLength: number /* u32 */,
  ReturnedLength: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcldapi_dll.CfGetPlaceholderInfo!(util.toPointer(FileHandle), InfoClass, util.toPointer(InfoBuffer), InfoBufferLength, util.toPointer(ReturnedLength));
}

export function CfGetSyncRootInfoByPath(
  FilePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  InfoClass: CF_SYNC_ROOT_INFO_CLASS /* Windows.Win32.Storage.CloudFilters.CF_SYNC_ROOT_INFO_CLASS */,
  InfoBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  InfoBufferLength: number /* u32 */,
  ReturnedLength: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcldapi_dll.CfGetSyncRootInfoByPath!(util.pwstrToFfi(FilePath), InfoClass, util.toPointer(InfoBuffer), InfoBufferLength, util.toPointer(ReturnedLength));
}

export function CfGetSyncRootInfoByHandle(
  FileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  InfoClass: CF_SYNC_ROOT_INFO_CLASS /* Windows.Win32.Storage.CloudFilters.CF_SYNC_ROOT_INFO_CLASS */,
  InfoBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  InfoBufferLength: number /* u32 */,
  ReturnedLength: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcldapi_dll.CfGetSyncRootInfoByHandle!(util.toPointer(FileHandle), InfoClass, util.toPointer(InfoBuffer), InfoBufferLength, util.toPointer(ReturnedLength));
}

export function CfGetPlaceholderRangeInfo(
  FileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  InfoClass: CF_PLACEHOLDER_RANGE_INFO_CLASS /* Windows.Win32.Storage.CloudFilters.CF_PLACEHOLDER_RANGE_INFO_CLASS */,
  StartingOffset: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LARGE_INTEGER */,
  Length: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LARGE_INTEGER */,
  InfoBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  InfoBufferLength: number /* u32 */,
  ReturnedLength: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcldapi_dll.CfGetPlaceholderRangeInfo!(util.toPointer(FileHandle), InfoClass, util.toPointer(StartingOffset), util.toPointer(Length), util.toPointer(InfoBuffer), InfoBufferLength, util.toPointer(ReturnedLength));
}

export function CfReportProviderProgress(
  ConnectionKey: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.CloudFilters.CF_CONNECTION_KEY */,
  TransferKey: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LARGE_INTEGER */,
  ProviderProgressTotal: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LARGE_INTEGER */,
  ProviderProgressCompleted: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LARGE_INTEGER */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcldapi_dll.CfReportProviderProgress!(util.toPointer(ConnectionKey), util.toPointer(TransferKey), util.toPointer(ProviderProgressTotal), util.toPointer(ProviderProgressCompleted));
}

export function CfReportProviderProgress2(
  ConnectionKey: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.CloudFilters.CF_CONNECTION_KEY */,
  TransferKey: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LARGE_INTEGER */,
  RequestKey: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LARGE_INTEGER */,
  ProviderProgressTotal: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LARGE_INTEGER */,
  ProviderProgressCompleted: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LARGE_INTEGER */,
  TargetSessionId: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcldapi_dll.CfReportProviderProgress2!(util.toPointer(ConnectionKey), util.toPointer(TransferKey), util.toPointer(RequestKey), util.toPointer(ProviderProgressTotal), util.toPointer(ProviderProgressCompleted), TargetSessionId);
}

