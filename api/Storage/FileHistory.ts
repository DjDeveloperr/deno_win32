/// Auto-generated by Deno Win32: Windows.Win32.Storage.FileHistory.Apis

import * as util from "../../util.ts";

// Enums
export type FH_TARGET_PROPERTY_TYPE = number;
export type FH_TARGET_DRIVE_TYPES = number;
export type FH_PROTECTED_ITEM_CATEGORY = number;
export type FH_LOCAL_POLICY_TYPE = number;
export type FH_RETENTION_TYPES = number;
export type FH_BACKUP_STATUS = number;
export type FH_DEVICE_VALIDATION_RESULT = number;
export type FhBackupStopReason = number;

// Constants
export const FHCFG_E_CORRUPT_CONFIG_FILE = 333301576125121280n;
export const FHCFG_E_CONFIG_FILE_NOT_FOUND = 289077019432715009n;
export const FHCFG_E_CONFIG_ALREADY_EXISTS = 289078118944342786n;
export const FHCFG_E_NO_VALID_CONFIGURATION_LOADED = 289079218455970563n;
export const FHCFG_E_TARGET_NOT_CONNECTED = 289080317967598340n;
export const FHCFG_E_CONFIGURATION_PREVIOUSLY_LOADED = 289081417479226117n;
export const FHCFG_E_TARGET_VERIFICATION_FAILED = 289082516990853894n;
export const FHCFG_E_TARGET_NOT_CONFIGURED = 289083616502481671n;
export const FHCFG_E_TARGET_NOT_ENOUGH_FREE_SPACE = 289084716014109448n;
export const FHCFG_E_TARGET_CANNOT_BE_USED = 289085815525737225n;
export const FHCFG_E_INVALID_REHYDRATION_STATE = 289094611618759434n;
export const FHCFG_E_RECOMMENDATION_CHANGE_NOT_ALLOWED = 289093512107131664n;
export const FHCFG_E_TARGET_REHYDRATED_ELSEWHERE = 289095711130387217n;
export const FHCFG_E_LEGACY_TARGET_UNSUPPORTED = 289920344851219218n;
export const FHCFG_E_LEGACY_TARGET_VALIDATION_UNSUPPORTED = 289096810642014995n;
export const FHCFG_E_LEGACY_BACKUP_USER_EXCLUDED = 289097910153642772n;
export const FHCFG_E_LEGACY_BACKUP_NOT_FOUND = 289110004781548309n;
export const FHSVC_E_BACKUP_BLOCKED = 1224980286203495936n;
export const FHSVC_E_NOT_CONFIGURED = 289921444362847745n;
export const FHSVC_E_CONFIG_DISABLED = 289922543874475522n;
export const FHSVC_E_CONFIG_DISABLED_GP = 289923643386103299n;
export const FHSVC_E_FATAL_CONFIG_ERROR = 289924742897731076n;
export const FHSVC_E_CONFIG_REHYDRATING = 1225542093695616517n;
export const FH_STATE_NOT_TRACKED = 0;
export const FH_STATE_OFF = 1;
export const FH_STATE_DISABLED_BY_GP = 2;
export const FH_STATE_FATAL_CONFIG_ERROR = 3;
export const FH_STATE_MIGRATING = 4;
export const FH_STATE_REHYDRATING = 5;
export const FH_STATE_TARGET_FS_LIMITATION = 13;
export const FH_STATE_TARGET_ACCESS_DENIED = 14;
export const FH_STATE_TARGET_VOLUME_DIRTY = 15;
export const FH_STATE_TARGET_FULL_RETENTION_MAX = 16;
export const FH_STATE_TARGET_FULL = 17;
export const FH_STATE_STAGING_FULL = 18;
export const FH_STATE_TARGET_LOW_SPACE_RETENTION_MAX = 19;
export const FH_STATE_TARGET_LOW_SPACE = 20;
export const FH_STATE_TARGET_ABSENT = 21;
export const FH_STATE_TOO_MUCH_BEHIND = 240;
export const FH_STATE_NO_ERROR = 255;
export const FH_STATE_BACKUP_NOT_SUPPORTED = 2064;
export const FH_STATE_RUNNING = 256;
export const FH_TARGET_NAME = 0;
export const FH_TARGET_URL = 1;
export const FH_TARGET_DRIVE_TYPE = 2;
export const MAX_TARGET_PROPERTY = 3;
export const FH_DRIVE_UNKNOWN = 0;
export const FH_DRIVE_REMOVABLE = 2;
export const FH_DRIVE_FIXED = 3;
export const FH_DRIVE_REMOTE = 4;
export const FH_FOLDER = 0;
export const FH_LIBRARY = 1;
export const MAX_PROTECTED_ITEM_CATEGORY = 2;
export const FH_FREQUENCY = 0;
export const FH_RETENTION_TYPE = 1;
export const FH_RETENTION_AGE = 2;
export const MAX_LOCAL_POLICY = 3;
export const FH_RETENTION_DISABLED = 0;
export const FH_RETENTION_UNLIMITED = 1;
export const FH_RETENTION_AGE_BASED = 2;
export const MAX_RETENTION_TYPE = 3;
export const FH_STATUS_DISABLED = 0;
export const FH_STATUS_DISABLED_BY_GP = 1;
export const FH_STATUS_ENABLED = 2;
export const FH_STATUS_REHYDRATING = 3;
export const MAX_BACKUP_STATUS = 4;
export const FH_ACCESS_DENIED = 0;
export const FH_INVALID_DRIVE_TYPE = 1;
export const FH_READ_ONLY_PERMISSION = 2;
export const FH_CURRENT_DEFAULT = 3;
export const FH_NAMESPACE_EXISTS = 4;
export const FH_TARGET_PART_OF_LIBRARY = 5;
export const FH_VALID_TARGET = 6;
export const MAX_VALIDATION_RESULT = 7;
export const BackupInvalidStopReason = 0;
export const BackupLimitUserBusyMachineOnAC = 1;
export const BackupLimitUserIdleMachineOnDC = 2;
export const BackupLimitUserBusyMachineOnDC = 3;
export const BackupCancelled = 4;

// Structs

export type BOOL = number;

export type HRESULT = number;

export type FH_SERVICE_PIPE_HANDLE = bigint | number;

// Native Libraries

try {
  var libfhsvcctl_dll = Deno.dlopen("fhsvcctl.dll", {
    FhServiceOpenPipe: {
      parameters: ["i32", "pointer"],
      result: "pointer",
      optional: true,
    },
    FhServiceClosePipe: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    FhServiceStartBackup: {
      parameters: ["pointer", "i32"],
      result: "pointer",
      optional: true,
    },
    FhServiceStopBackup: {
      parameters: ["pointer", "i32"],
      result: "pointer",
      optional: true,
    },
    FhServiceReloadConfiguration: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    FhServiceBlockBackup: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    FhServiceUnblockBackup: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function FhServiceOpenPipe(
  StartServiceIfStopped: boolean /* Windows.Win32.Foundation.BOOL */,
  Pipe: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libfhsvcctl_dll.FhServiceOpenPipe!(util.boolToFfi(StartServiceIfStopped), util.toPointer(Pipe));
}

export function FhServiceClosePipe(
  Pipe: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WindowsProgramming.FH_SERVICE_PIPE_HANDLE */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libfhsvcctl_dll.FhServiceClosePipe!(util.toPointer(Pipe));
}

export function FhServiceStartBackup(
  Pipe: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WindowsProgramming.FH_SERVICE_PIPE_HANDLE */,
  LowPriorityIo: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libfhsvcctl_dll.FhServiceStartBackup!(util.toPointer(Pipe), util.boolToFfi(LowPriorityIo));
}

export function FhServiceStopBackup(
  Pipe: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WindowsProgramming.FH_SERVICE_PIPE_HANDLE */,
  StopTracking: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libfhsvcctl_dll.FhServiceStopBackup!(util.toPointer(Pipe), util.boolToFfi(StopTracking));
}

export function FhServiceReloadConfiguration(
  Pipe: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WindowsProgramming.FH_SERVICE_PIPE_HANDLE */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libfhsvcctl_dll.FhServiceReloadConfiguration!(util.toPointer(Pipe));
}

export function FhServiceBlockBackup(
  Pipe: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WindowsProgramming.FH_SERVICE_PIPE_HANDLE */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libfhsvcctl_dll.FhServiceBlockBackup!(util.toPointer(Pipe));
}

export function FhServiceUnblockBackup(
  Pipe: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WindowsProgramming.FH_SERVICE_PIPE_HANDLE */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libfhsvcctl_dll.FhServiceUnblockBackup!(util.toPointer(Pipe));
}

