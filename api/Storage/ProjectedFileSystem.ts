/// Auto-generated by Deno Win32: Windows.Win32.Storage.ProjectedFileSystem.Apis

import * as util from "../../util.ts";

// Enums
export type PRJ_NOTIFY_TYPES = number;
export type PRJ_NOTIFICATION = number;
export type PRJ_EXT_INFO_TYPE = number;
export type PRJ_STARTVIRTUALIZING_FLAGS = number;
export type PRJ_PLACEHOLDER_ID = number;
export type PRJ_UPDATE_TYPES = number;
export type PRJ_UPDATE_FAILURE_CAUSES = number;
export type PRJ_FILE_STATE = number;
export type PRJ_CALLBACK_DATA_FLAGS = number;
export type PRJ_COMPLETE_COMMAND_TYPE = number;

// Constants
export const PRJ_NOTIFY_NONE = 0;
export const PRJ_NOTIFY_SUPPRESS_NOTIFICATIONS = 1;
export const PRJ_NOTIFY_FILE_OPENED = 2;
export const PRJ_NOTIFY_NEW_FILE_CREATED = 4;
export const PRJ_NOTIFY_FILE_OVERWRITTEN = 8;
export const PRJ_NOTIFY_PRE_DELETE = 16;
export const PRJ_NOTIFY_PRE_RENAME = 32;
export const PRJ_NOTIFY_PRE_SET_HARDLINK = 64;
export const PRJ_NOTIFY_FILE_RENAMED = 128;
export const PRJ_NOTIFY_HARDLINK_CREATED = 256;
export const PRJ_NOTIFY_FILE_HANDLE_CLOSED_NO_MODIFICATION = 512;
export const PRJ_NOTIFY_FILE_HANDLE_CLOSED_FILE_MODIFIED = 1024;
export const PRJ_NOTIFY_FILE_HANDLE_CLOSED_FILE_DELETED = 2048;
export const PRJ_NOTIFY_FILE_PRE_CONVERT_TO_FULL = 4096;
export const PRJ_NOTIFY_USE_EXISTING_MASK = 4294967295;
export const PRJ_NOTIFICATION_FILE_OPENED = 2;
export const PRJ_NOTIFICATION_NEW_FILE_CREATED = 4;
export const PRJ_NOTIFICATION_FILE_OVERWRITTEN = 8;
export const PRJ_NOTIFICATION_PRE_DELETE = 16;
export const PRJ_NOTIFICATION_PRE_RENAME = 32;
export const PRJ_NOTIFICATION_PRE_SET_HARDLINK = 64;
export const PRJ_NOTIFICATION_FILE_RENAMED = 128;
export const PRJ_NOTIFICATION_HARDLINK_CREATED = 256;
export const PRJ_NOTIFICATION_FILE_HANDLE_CLOSED_NO_MODIFICATION = 512;
export const PRJ_NOTIFICATION_FILE_HANDLE_CLOSED_FILE_MODIFIED = 1024;
export const PRJ_NOTIFICATION_FILE_HANDLE_CLOSED_FILE_DELETED = 2048;
export const PRJ_NOTIFICATION_FILE_PRE_CONVERT_TO_FULL = 4096;
export const PRJ_EXT_INFO_TYPE_SYMLINK = 1;
export const PRJ_FLAG_NONE = 0;
export const PRJ_FLAG_USE_NEGATIVE_PATH_CACHE = 1;
export const PRJ_PLACEHOLDER_ID_LENGTH = 128;
export const PRJ_UPDATE_NONE = 0;
export const PRJ_UPDATE_ALLOW_DIRTY_METADATA = 1;
export const PRJ_UPDATE_ALLOW_DIRTY_DATA = 2;
export const PRJ_UPDATE_ALLOW_TOMBSTONE = 4;
export const PRJ_UPDATE_RESERVED1 = 8;
export const PRJ_UPDATE_RESERVED2 = 16;
export const PRJ_UPDATE_ALLOW_READ_ONLY = 32;
export const PRJ_UPDATE_MAX_VAL = 64;
export const PRJ_UPDATE_FAILURE_CAUSE_NONE = 0;
export const PRJ_UPDATE_FAILURE_CAUSE_DIRTY_METADATA = 1;
export const PRJ_UPDATE_FAILURE_CAUSE_DIRTY_DATA = 2;
export const PRJ_UPDATE_FAILURE_CAUSE_TOMBSTONE = 4;
export const PRJ_UPDATE_FAILURE_CAUSE_READ_ONLY = 8;
export const PRJ_FILE_STATE_PLACEHOLDER = 1;
export const PRJ_FILE_STATE_HYDRATED_PLACEHOLDER = 2;
export const PRJ_FILE_STATE_DIRTY_PLACEHOLDER = 4;
export const PRJ_FILE_STATE_FULL = 8;
export const PRJ_FILE_STATE_TOMBSTONE = 16;
export const PRJ_CB_DATA_FLAG_ENUM_RESTART_SCAN = 1;
export const PRJ_CB_DATA_FLAG_ENUM_RETURN_SINGLE_ENTRY = 2;
export const PRJ_COMPLETE_COMMAND_TYPE_NOTIFICATION = 1;
export const PRJ_COMPLETE_COMMAND_TYPE_ENUMERATION = 2;

// Structs

export type PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT = Deno.PointerValue;

export type PRJ_DIR_ENTRY_BUFFER_HANDLE = Deno.PointerValue;

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  X: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.X))), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.ProjectedFileSystem.PRJ_EXTENDED_INFO (size: 16)
 */
export interface PRJ_EXTENDED_INFO {
  /** Windows.Win32.Storage.ProjectedFileSystem.PRJ_EXT_INFO_TYPE */
  InfoType: PRJ_EXT_INFO_TYPE;
  /** u32 */
  NextInfoOffset: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofPRJ_EXTENDED_INFO = 16;

export function allocPRJ_EXTENDED_INFO(data?: Partial<PRJ_EXTENDED_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPRJ_EXTENDED_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.InfoType !== undefined) view.setInt32(0, Number(data.InfoType), true);
  // 0x04: u32
  if (data?.NextInfoOffset !== undefined) view.setUint32(4, Number(data.NextInfoOffset), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class PRJ_EXTENDED_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get InfoType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get NextInfoOffset(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set InfoType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set NextInfoOffset(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Storage.ProjectedFileSystem.PRJ_NOTIFICATION_MAPPING (size: 16)
 */
export interface PRJ_NOTIFICATION_MAPPING {
  /** Windows.Win32.Storage.ProjectedFileSystem.PRJ_NOTIFY_TYPES */
  NotificationBitMask: PRJ_NOTIFY_TYPES;
  /** Windows.Win32.Foundation.PWSTR */
  NotificationRoot: string | null | Uint8Array | Uint16Array;
}

export const sizeofPRJ_NOTIFICATION_MAPPING = 16;

export function allocPRJ_NOTIFICATION_MAPPING(data?: Partial<PRJ_NOTIFICATION_MAPPING>): Uint8Array {
  const buf = new Uint8Array(sizeofPRJ_NOTIFICATION_MAPPING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NotificationBitMask !== undefined) view.setUint32(0, Number(data.NotificationBitMask), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.NotificationRoot !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.NotificationRoot);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class PRJ_NOTIFICATION_MAPPINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NotificationBitMask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get NotificationRoot(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NotificationBitMask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set NotificationRoot(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Storage.ProjectedFileSystem.PRJ_STARTVIRTUALIZING_OPTIONS (size: 32)
 */
export interface PRJ_STARTVIRTUALIZING_OPTIONS {
  /** Windows.Win32.Storage.ProjectedFileSystem.PRJ_STARTVIRTUALIZING_FLAGS */
  Flags: PRJ_STARTVIRTUALIZING_FLAGS;
  /** u32 */
  PoolThreadCount: number;
  /** u32 */
  ConcurrentThreadCount: number;
  /** ptr */
  NotificationMappings: Deno.PointerValue | Uint8Array;
  /** u32 */
  NotificationMappingsCount: number;
}

export const sizeofPRJ_STARTVIRTUALIZING_OPTIONS = 32;

export function allocPRJ_STARTVIRTUALIZING_OPTIONS(data?: Partial<PRJ_STARTVIRTUALIZING_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofPRJ_STARTVIRTUALIZING_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.PoolThreadCount !== undefined) view.setUint32(4, Number(data.PoolThreadCount), true);
  // 0x08: u32
  if (data?.ConcurrentThreadCount !== undefined) view.setUint32(8, Number(data.ConcurrentThreadCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.NotificationMappings !== undefined) view.setBigUint64(16, data.NotificationMappings === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NotificationMappings))), true);
  // 0x18: u32
  if (data?.NotificationMappingsCount !== undefined) view.setUint32(24, Number(data.NotificationMappingsCount), true);
  // 0x1c: pad4
  return buf;
}

export class PRJ_STARTVIRTUALIZING_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get PoolThreadCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ConcurrentThreadCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get NotificationMappings(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get NotificationMappingsCount(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set PoolThreadCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ConcurrentThreadCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set NotificationMappings(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set NotificationMappingsCount(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Storage.ProjectedFileSystem.PRJ_VIRTUALIZATION_INSTANCE_INFO (size: 16)
 */
export interface PRJ_VIRTUALIZATION_INSTANCE_INFO {
  /** System.Guid */
  InstanceID: Uint8Array | Deno.PointerValue;
  /** u32 */
  WriteAlignment: number;
}

export const sizeofPRJ_VIRTUALIZATION_INSTANCE_INFO = 16;

export function allocPRJ_VIRTUALIZATION_INSTANCE_INFO(data?: Partial<PRJ_VIRTUALIZATION_INSTANCE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPRJ_VIRTUALIZATION_INSTANCE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.InstanceID !== undefined) view.setBigUint64(0, data.InstanceID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InstanceID))), true);
  // 0x08: u32
  if (data?.WriteAlignment !== undefined) view.setUint32(8, Number(data.WriteAlignment), true);
  // 0x0c: pad4
  return buf;
}

export class PRJ_VIRTUALIZATION_INSTANCE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get InstanceID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get WriteAlignment(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set InstanceID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set WriteAlignment(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Storage.ProjectedFileSystem.PRJ_PLACEHOLDER_VERSION_INFO (size: 16)
 */
export interface PRJ_PLACEHOLDER_VERSION_INFO {
  /** array */
  ProviderID: Deno.PointerValue;
  /** array */
  ContentID: Deno.PointerValue;
}

export const sizeofPRJ_PLACEHOLDER_VERSION_INFO = 16;

export function allocPRJ_PLACEHOLDER_VERSION_INFO(data?: Partial<PRJ_PLACEHOLDER_VERSION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPRJ_PLACEHOLDER_VERSION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ProviderID !== undefined) view.setBigUint64(0, data.ProviderID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProviderID))), true);
  // 0x08: pointer
  if (data?.ContentID !== undefined) view.setBigUint64(8, data.ContentID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ContentID))), true);
  return buf;
}

export class PRJ_PLACEHOLDER_VERSION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ProviderID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ContentID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ProviderID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ContentID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type BOOLEAN = number;

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class _u_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwValue(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwValue(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue;
  /** i64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.u))), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

export class LARGE_INTEGERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get u(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i64
  get QuadPart(): Deno.PointerValue {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set u(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i64
  set QuadPart(value: Deno.PointerValue) {
    this.view.setBigInt64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Storage.ProjectedFileSystem.PRJ_FILE_BASIC_INFO (size: 56)
 */
export interface PRJ_FILE_BASIC_INFO {
  /** Windows.Win32.Foundation.BOOLEAN */
  IsDirectory: Uint8Array | Deno.PointerValue;
  /** i64 */
  FileSize: Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  CreationTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LastAccessTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LastWriteTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ChangeTime: Uint8Array | Deno.PointerValue;
  /** u32 */
  FileAttributes: number;
}

export const sizeofPRJ_FILE_BASIC_INFO = 56;

export function allocPRJ_FILE_BASIC_INFO(data?: Partial<PRJ_FILE_BASIC_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPRJ_FILE_BASIC_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IsDirectory !== undefined) view.setBigUint64(0, data.IsDirectory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IsDirectory))), true);
  // 0x08: i64
  if (data?.FileSize !== undefined) view.setBigInt64(8, BigInt(data.FileSize), true);
  // 0x10: pointer
  if (data?.CreationTime !== undefined) view.setBigUint64(16, data.CreationTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreationTime))), true);
  // 0x18: pointer
  if (data?.LastAccessTime !== undefined) view.setBigUint64(24, data.LastAccessTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LastAccessTime))), true);
  // 0x20: pointer
  if (data?.LastWriteTime !== undefined) view.setBigUint64(32, data.LastWriteTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LastWriteTime))), true);
  // 0x28: pointer
  if (data?.ChangeTime !== undefined) view.setBigUint64(40, data.ChangeTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ChangeTime))), true);
  // 0x30: u32
  if (data?.FileAttributes !== undefined) view.setUint32(48, Number(data.FileAttributes), true);
  // 0x34: pad4
  return buf;
}

export class PRJ_FILE_BASIC_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get IsDirectory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i64
  get FileSize(): Deno.PointerValue {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: pointer
  get CreationTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get LastAccessTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get LastWriteTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get ChangeTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get FileAttributes(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: pointer
  set IsDirectory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i64
  set FileSize(value: Deno.PointerValue) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set CreationTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set LastAccessTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set LastWriteTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set ChangeTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set FileAttributes(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * _EaInformation_e__Struct (size: 8)
 */
export interface _EaInformation_e__Struct {
  /** u32 */
  EaBufferSize: number;
  /** u32 */
  OffsetToFirstEa: number;
}

export const sizeof_EaInformation_e__Struct = 8;

export function alloc_EaInformation_e__Struct(data?: Partial<_EaInformation_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_EaInformation_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EaBufferSize !== undefined) view.setUint32(0, Number(data.EaBufferSize), true);
  // 0x04: u32
  if (data?.OffsetToFirstEa !== undefined) view.setUint32(4, Number(data.OffsetToFirstEa), true);
  return buf;
}

export class _EaInformation_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get EaBufferSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get OffsetToFirstEa(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set EaBufferSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set OffsetToFirstEa(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * _SecurityInformation_e__Struct (size: 8)
 */
export interface _SecurityInformation_e__Struct {
  /** u32 */
  SecurityBufferSize: number;
  /** u32 */
  OffsetToSecurityDescriptor: number;
}

export const sizeof_SecurityInformation_e__Struct = 8;

export function alloc_SecurityInformation_e__Struct(data?: Partial<_SecurityInformation_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_SecurityInformation_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SecurityBufferSize !== undefined) view.setUint32(0, Number(data.SecurityBufferSize), true);
  // 0x04: u32
  if (data?.OffsetToSecurityDescriptor !== undefined) view.setUint32(4, Number(data.OffsetToSecurityDescriptor), true);
  return buf;
}

export class _SecurityInformation_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SecurityBufferSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get OffsetToSecurityDescriptor(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set SecurityBufferSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set OffsetToSecurityDescriptor(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * _StreamsInformation_e__Struct (size: 8)
 */
export interface _StreamsInformation_e__Struct {
  /** u32 */
  StreamsInfoBufferSize: number;
  /** u32 */
  OffsetToFirstStreamInfo: number;
}

export const sizeof_StreamsInformation_e__Struct = 8;

export function alloc_StreamsInformation_e__Struct(data?: Partial<_StreamsInformation_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_StreamsInformation_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.StreamsInfoBufferSize !== undefined) view.setUint32(0, Number(data.StreamsInfoBufferSize), true);
  // 0x04: u32
  if (data?.OffsetToFirstStreamInfo !== undefined) view.setUint32(4, Number(data.OffsetToFirstStreamInfo), true);
  return buf;
}

export class _StreamsInformation_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get StreamsInfoBufferSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get OffsetToFirstStreamInfo(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set StreamsInfoBufferSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set OffsetToFirstStreamInfo(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Storage.ProjectedFileSystem.PRJ_PLACEHOLDER_INFO (size: 48)
 */
export interface PRJ_PLACEHOLDER_INFO {
  /** Windows.Win32.Storage.ProjectedFileSystem.PRJ_FILE_BASIC_INFO */
  FileBasicInfo: Uint8Array | Deno.PointerValue;
  /** _EaInformation_e__Struct */
  EaInformation: Uint8Array | Deno.PointerValue;
  /** _SecurityInformation_e__Struct */
  SecurityInformation: Uint8Array | Deno.PointerValue;
  /** _StreamsInformation_e__Struct */
  StreamsInformation: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.ProjectedFileSystem.PRJ_PLACEHOLDER_VERSION_INFO */
  VersionInfo: Uint8Array | Deno.PointerValue;
  /** array */
  VariableData: Deno.PointerValue;
}

export const sizeofPRJ_PLACEHOLDER_INFO = 48;

export function allocPRJ_PLACEHOLDER_INFO(data?: Partial<PRJ_PLACEHOLDER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPRJ_PLACEHOLDER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FileBasicInfo !== undefined) view.setBigUint64(0, data.FileBasicInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FileBasicInfo))), true);
  // 0x08: pointer
  if (data?.EaInformation !== undefined) view.setBigUint64(8, data.EaInformation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EaInformation))), true);
  // 0x10: pointer
  if (data?.SecurityInformation !== undefined) view.setBigUint64(16, data.SecurityInformation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SecurityInformation))), true);
  // 0x18: pointer
  if (data?.StreamsInformation !== undefined) view.setBigUint64(24, data.StreamsInformation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.StreamsInformation))), true);
  // 0x20: pointer
  if (data?.VersionInfo !== undefined) view.setBigUint64(32, data.VersionInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VersionInfo))), true);
  // 0x28: pointer
  if (data?.VariableData !== undefined) view.setBigUint64(40, data.VariableData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VariableData))), true);
  return buf;
}

export class PRJ_PLACEHOLDER_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get FileBasicInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get EaInformation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get SecurityInformation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get StreamsInformation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get VersionInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get VariableData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set FileBasicInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set EaInformation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set SecurityInformation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set StreamsInformation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set VersionInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set VariableData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.ProjectedFileSystem.PRJ_CALLBACK_DATA (size: 80)
 */
export interface PRJ_CALLBACK_DATA {
  /** u32 */
  Size: number;
  /** Windows.Win32.Storage.ProjectedFileSystem.PRJ_CALLBACK_DATA_FLAGS */
  Flags: PRJ_CALLBACK_DATA_FLAGS;
  /** Windows.Win32.Storage.ProjectedFileSystem.PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT */
  NamespaceVirtualizationContext: Uint8Array | Deno.PointerValue;
  /** i32 */
  CommandId: number;
  /** System.Guid */
  FileId: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  DataStreamId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  FilePathName: string | null | Uint8Array | Uint16Array;
  /** ptr */
  VersionInfo: Deno.PointerValue | Uint8Array;
  /** u32 */
  TriggeringProcessId: number;
  /** Windows.Win32.Foundation.PWSTR */
  TriggeringProcessImageFileName: string | null | Uint8Array | Uint16Array;
  /** ptr */
  InstanceContext: Deno.PointerValue | Uint8Array;
}

export const sizeofPRJ_CALLBACK_DATA = 80;

export function allocPRJ_CALLBACK_DATA(data?: Partial<PRJ_CALLBACK_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPRJ_CALLBACK_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: i32
  if (data?.Flags !== undefined) view.setInt32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.NamespaceVirtualizationContext !== undefined) view.setBigUint64(8, data.NamespaceVirtualizationContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NamespaceVirtualizationContext))), true);
  // 0x10: i32
  if (data?.CommandId !== undefined) view.setInt32(16, Number(data.CommandId), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.FileId !== undefined) view.setBigUint64(24, data.FileId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FileId))), true);
  // 0x20: pointer
  if (data?.DataStreamId !== undefined) view.setBigUint64(32, data.DataStreamId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DataStreamId))), true);
  // 0x28: buffer
  if (data?.FilePathName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.FilePathName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: pointer
  if (data?.VersionInfo !== undefined) view.setBigUint64(48, data.VersionInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VersionInfo))), true);
  // 0x38: u32
  if (data?.TriggeringProcessId !== undefined) view.setUint32(56, Number(data.TriggeringProcessId), true);
  // 0x3c: pad4
  // 0x40: buffer
  if (data?.TriggeringProcessImageFileName !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.TriggeringProcessImageFileName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: pointer
  if (data?.InstanceContext !== undefined) view.setBigUint64(72, data.InstanceContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InstanceContext))), true);
  return buf;
}

export class PRJ_CALLBACK_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Flags(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get NamespaceVirtualizationContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get CommandId(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get FileId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get DataStreamId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get FilePathName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get VersionInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get TriggeringProcessId(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  get TriggeringProcessImageFileName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get InstanceContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Flags(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set NamespaceVirtualizationContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set CommandId(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set FileId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set DataStreamId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: buffer
  set FilePathName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: pointer
  set VersionInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set TriggeringProcessId(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  set TriggeringProcessImageFileName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: pointer
  set InstanceContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _PostCreate_e__Struct (size: 8)
 */
export interface _PostCreate_e__Struct {
  /** Windows.Win32.Storage.ProjectedFileSystem.PRJ_NOTIFY_TYPES */
  NotificationMask: PRJ_NOTIFY_TYPES;
}

export const sizeof_PostCreate_e__Struct = 8;

export function alloc_PostCreate_e__Struct(data?: Partial<_PostCreate_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_PostCreate_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NotificationMask !== undefined) view.setUint32(0, Number(data.NotificationMask), true);
  // 0x04: pad4
  return buf;
}

export class _PostCreate_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NotificationMask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set NotificationMask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * _FileRenamed_e__Struct (size: 8)
 */
export interface _FileRenamed_e__Struct {
  /** Windows.Win32.Storage.ProjectedFileSystem.PRJ_NOTIFY_TYPES */
  NotificationMask: PRJ_NOTIFY_TYPES;
}

export const sizeof_FileRenamed_e__Struct = 8;

export function alloc_FileRenamed_e__Struct(data?: Partial<_FileRenamed_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_FileRenamed_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NotificationMask !== undefined) view.setUint32(0, Number(data.NotificationMask), true);
  // 0x04: pad4
  return buf;
}

export class _FileRenamed_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NotificationMask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set NotificationMask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * _FileDeletedOnHandleClose_e__Struct (size: 8)
 */
export interface _FileDeletedOnHandleClose_e__Struct {
  /** Windows.Win32.Foundation.BOOLEAN */
  IsFileModified: Uint8Array | Deno.PointerValue;
}

export const sizeof_FileDeletedOnHandleClose_e__Struct = 8;

export function alloc_FileDeletedOnHandleClose_e__Struct(data?: Partial<_FileDeletedOnHandleClose_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_FileDeletedOnHandleClose_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IsFileModified !== undefined) view.setBigUint64(0, data.IsFileModified === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IsFileModified))), true);
  return buf;
}

export class _FileDeletedOnHandleClose_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get IsFileModified(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set IsFileModified(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.ProjectedFileSystem.PRJ_NOTIFICATION_PARAMETERS (size: 24)
 */
export interface PRJ_NOTIFICATION_PARAMETERS {
  /** _PostCreate_e__Struct */
  PostCreate: Uint8Array | Deno.PointerValue;
  /** _FileRenamed_e__Struct */
  FileRenamed: Uint8Array | Deno.PointerValue;
  /** _FileDeletedOnHandleClose_e__Struct */
  FileDeletedOnHandleClose: Uint8Array | Deno.PointerValue;
}

export const sizeofPRJ_NOTIFICATION_PARAMETERS = 24;

export function allocPRJ_NOTIFICATION_PARAMETERS(data?: Partial<PRJ_NOTIFICATION_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofPRJ_NOTIFICATION_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PostCreate !== undefined) view.setBigUint64(0, data.PostCreate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PostCreate))), true);
  // 0x08: pointer
  if (data?.FileRenamed !== undefined) view.setBigUint64(8, data.FileRenamed === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FileRenamed))), true);
  // 0x10: pointer
  if (data?.FileDeletedOnHandleClose !== undefined) view.setBigUint64(16, data.FileDeletedOnHandleClose === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FileDeletedOnHandleClose))), true);
  return buf;
}

export class PRJ_NOTIFICATION_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PostCreate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get FileRenamed(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get FileDeletedOnHandleClose(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set PostCreate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set FileRenamed(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set FileDeletedOnHandleClose(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.ProjectedFileSystem.PRJ_CALLBACKS (size: 64)
 */
export interface PRJ_CALLBACKS {
  /** Windows.Win32.Storage.ProjectedFileSystem.PRJ_START_DIRECTORY_ENUMERATION_CB */
  StartDirectoryEnumerationCallback: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.ProjectedFileSystem.PRJ_END_DIRECTORY_ENUMERATION_CB */
  EndDirectoryEnumerationCallback: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.ProjectedFileSystem.PRJ_GET_DIRECTORY_ENUMERATION_CB */
  GetDirectoryEnumerationCallback: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.ProjectedFileSystem.PRJ_GET_PLACEHOLDER_INFO_CB */
  GetPlaceholderInfoCallback: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.ProjectedFileSystem.PRJ_GET_FILE_DATA_CB */
  GetFileDataCallback: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.ProjectedFileSystem.PRJ_QUERY_FILE_NAME_CB */
  QueryFileNameCallback: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.ProjectedFileSystem.PRJ_NOTIFICATION_CB */
  NotificationCallback: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.ProjectedFileSystem.PRJ_CANCEL_COMMAND_CB */
  CancelCommandCallback: Uint8Array | Deno.PointerValue;
}

export const sizeofPRJ_CALLBACKS = 64;

export function allocPRJ_CALLBACKS(data?: Partial<PRJ_CALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofPRJ_CALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.StartDirectoryEnumerationCallback !== undefined) view.setBigUint64(0, data.StartDirectoryEnumerationCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.StartDirectoryEnumerationCallback))), true);
  // 0x08: pointer
  if (data?.EndDirectoryEnumerationCallback !== undefined) view.setBigUint64(8, data.EndDirectoryEnumerationCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EndDirectoryEnumerationCallback))), true);
  // 0x10: pointer
  if (data?.GetDirectoryEnumerationCallback !== undefined) view.setBigUint64(16, data.GetDirectoryEnumerationCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetDirectoryEnumerationCallback))), true);
  // 0x18: pointer
  if (data?.GetPlaceholderInfoCallback !== undefined) view.setBigUint64(24, data.GetPlaceholderInfoCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetPlaceholderInfoCallback))), true);
  // 0x20: pointer
  if (data?.GetFileDataCallback !== undefined) view.setBigUint64(32, data.GetFileDataCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetFileDataCallback))), true);
  // 0x28: pointer
  if (data?.QueryFileNameCallback !== undefined) view.setBigUint64(40, data.QueryFileNameCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.QueryFileNameCallback))), true);
  // 0x30: pointer
  if (data?.NotificationCallback !== undefined) view.setBigUint64(48, data.NotificationCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NotificationCallback))), true);
  // 0x38: pointer
  if (data?.CancelCommandCallback !== undefined) view.setBigUint64(56, data.CancelCommandCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CancelCommandCallback))), true);
  return buf;
}

export class PRJ_CALLBACKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get StartDirectoryEnumerationCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get EndDirectoryEnumerationCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get GetDirectoryEnumerationCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get GetPlaceholderInfoCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get GetFileDataCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get QueryFileNameCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get NotificationCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get CancelCommandCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set StartDirectoryEnumerationCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set EndDirectoryEnumerationCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set GetDirectoryEnumerationCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set GetPlaceholderInfoCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set GetFileDataCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set QueryFileNameCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set NotificationCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set CancelCommandCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.ProjectedFileSystem.PRJ_COMPLETE_COMMAND_EXTENDED_PARAMETERS (size: 16)
 */
export interface PRJ_COMPLETE_COMMAND_EXTENDED_PARAMETERS {
  /** Windows.Win32.Storage.ProjectedFileSystem.PRJ_COMPLETE_COMMAND_TYPE */
  CommandType: PRJ_COMPLETE_COMMAND_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofPRJ_COMPLETE_COMMAND_EXTENDED_PARAMETERS = 16;

export function allocPRJ_COMPLETE_COMMAND_EXTENDED_PARAMETERS(data?: Partial<PRJ_COMPLETE_COMMAND_EXTENDED_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofPRJ_COMPLETE_COMMAND_EXTENDED_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.CommandType !== undefined) view.setInt32(0, Number(data.CommandType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class PRJ_COMPLETE_COMMAND_EXTENDED_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get CommandType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set CommandType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HRESULT = number;

// Native Libraries

try {
  var libPROJECTEDFSLIB_dll = Deno.dlopen("PROJECTEDFSLIB.dll", {
    PrjStartVirtualizing: {
      parameters: ["buffer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PrjStopVirtualizing: {
      parameters: ["pointer"],
      result: "void",
    },
    PrjClearNegativePathCache: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PrjGetVirtualizationInstanceInfo: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PrjMarkDirectoryAsPlaceholder: {
      parameters: ["buffer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    PrjWritePlaceholderInfo: {
      parameters: ["pointer", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    PrjWritePlaceholderInfo2: {
      parameters: ["pointer", "buffer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    PrjUpdateFileIfNeeded: {
      parameters: ["pointer", "buffer", "pointer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    PrjDeleteFile: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    PrjWriteFileData: {
      parameters: ["pointer", "pointer", "pointer", "u64", "u32"],
      result: "pointer",
    },
    PrjGetOnDiskFileState: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    PrjAllocateAlignedBuffer: {
      parameters: ["pointer", "usize"],
      result: "pointer",
    },
    PrjFreeAlignedBuffer: {
      parameters: ["pointer"],
      result: "void",
    },
    PrjCompleteCommand: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    PrjFillDirEntryBuffer: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "pointer",
    },
    PrjFillDirEntryBuffer2: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    PrjFileNameMatch: {
      parameters: ["buffer", "buffer"],
      result: "pointer",
    },
    PrjFileNameCompare: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    PrjDoesNameContainWildCards: {
      parameters: ["buffer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function PrjStartVirtualizing(
  virtualizationRootPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  callbacks: Deno.PointerValue | Uint8Array /* ptr */,
  instanceContext: Deno.PointerValue | Uint8Array /* ptr */,
  options: Deno.PointerValue | Uint8Array /* ptr */,
  namespaceVirtualizationContext: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROJECTEDFSLIB_dll.PrjStartVirtualizing(util.pwstrToFfi(virtualizationRootPath), util.toPointer(callbacks), util.toPointer(instanceContext), util.toPointer(options), util.toPointer(namespaceVirtualizationContext));
}

export function PrjStopVirtualizing(
  namespaceVirtualizationContext: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.ProjectedFileSystem.PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT */,
): void /* void */ {
  return libPROJECTEDFSLIB_dll.PrjStopVirtualizing(util.toPointer(namespaceVirtualizationContext));
}

export function PrjClearNegativePathCache(
  namespaceVirtualizationContext: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.ProjectedFileSystem.PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT */,
  totalEntryNumber: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROJECTEDFSLIB_dll.PrjClearNegativePathCache(util.toPointer(namespaceVirtualizationContext), util.toPointer(totalEntryNumber));
}

export function PrjGetVirtualizationInstanceInfo(
  namespaceVirtualizationContext: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.ProjectedFileSystem.PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT */,
  virtualizationInstanceInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROJECTEDFSLIB_dll.PrjGetVirtualizationInstanceInfo(util.toPointer(namespaceVirtualizationContext), util.toPointer(virtualizationInstanceInfo));
}

export function PrjMarkDirectoryAsPlaceholder(
  rootPathName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  targetPathName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  versionInfo: Deno.PointerValue | Uint8Array /* ptr */,
  virtualizationInstanceID: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROJECTEDFSLIB_dll.PrjMarkDirectoryAsPlaceholder(util.pwstrToFfi(rootPathName), util.pwstrToFfi(targetPathName), util.toPointer(versionInfo), util.toPointer(virtualizationInstanceID));
}

export function PrjWritePlaceholderInfo(
  namespaceVirtualizationContext: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.ProjectedFileSystem.PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT */,
  destinationFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  placeholderInfo: Deno.PointerValue | Uint8Array /* ptr */,
  placeholderInfoSize: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROJECTEDFSLIB_dll.PrjWritePlaceholderInfo(util.toPointer(namespaceVirtualizationContext), util.pwstrToFfi(destinationFileName), util.toPointer(placeholderInfo), placeholderInfoSize);
}

export function PrjWritePlaceholderInfo2(
  namespaceVirtualizationContext: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.ProjectedFileSystem.PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT */,
  destinationFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  placeholderInfo: Deno.PointerValue | Uint8Array /* ptr */,
  placeholderInfoSize: number /* u32 */,
  ExtendedInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROJECTEDFSLIB_dll.PrjWritePlaceholderInfo2(util.toPointer(namespaceVirtualizationContext), util.pwstrToFfi(destinationFileName), util.toPointer(placeholderInfo), placeholderInfoSize, util.toPointer(ExtendedInfo));
}

export function PrjUpdateFileIfNeeded(
  namespaceVirtualizationContext: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.ProjectedFileSystem.PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT */,
  destinationFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  placeholderInfo: Deno.PointerValue | Uint8Array /* ptr */,
  placeholderInfoSize: number /* u32 */,
  updateFlags: PRJ_UPDATE_TYPES /* Windows.Win32.Storage.ProjectedFileSystem.PRJ_UPDATE_TYPES */,
  failureReason: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROJECTEDFSLIB_dll.PrjUpdateFileIfNeeded(util.toPointer(namespaceVirtualizationContext), util.pwstrToFfi(destinationFileName), util.toPointer(placeholderInfo), placeholderInfoSize, updateFlags, util.toPointer(failureReason));
}

export function PrjDeleteFile(
  namespaceVirtualizationContext: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.ProjectedFileSystem.PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT */,
  destinationFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  updateFlags: PRJ_UPDATE_TYPES /* Windows.Win32.Storage.ProjectedFileSystem.PRJ_UPDATE_TYPES */,
  failureReason: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROJECTEDFSLIB_dll.PrjDeleteFile(util.toPointer(namespaceVirtualizationContext), util.pwstrToFfi(destinationFileName), updateFlags, util.toPointer(failureReason));
}

export function PrjWriteFileData(
  namespaceVirtualizationContext: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.ProjectedFileSystem.PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT */,
  dataStreamId: Deno.PointerValue | Uint8Array /* ptr */,
  buffer: Deno.PointerValue | Uint8Array /* ptr */,
  byteOffset: Deno.PointerValue /* u64 */,
  length: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROJECTEDFSLIB_dll.PrjWriteFileData(util.toPointer(namespaceVirtualizationContext), util.toPointer(dataStreamId), util.toPointer(buffer), byteOffset, length);
}

export function PrjGetOnDiskFileState(
  destinationFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fileState: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROJECTEDFSLIB_dll.PrjGetOnDiskFileState(util.pwstrToFfi(destinationFileName), util.toPointer(fileState));
}

export function PrjAllocateAlignedBuffer(
  namespaceVirtualizationContext: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.ProjectedFileSystem.PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT */,
  size: Deno.PointerValue /* usize */,
): Deno.PointerValue /* ptr */ {
  return libPROJECTEDFSLIB_dll.PrjAllocateAlignedBuffer(util.toPointer(namespaceVirtualizationContext), size);
}

export function PrjFreeAlignedBuffer(
  buffer: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libPROJECTEDFSLIB_dll.PrjFreeAlignedBuffer(util.toPointer(buffer));
}

export function PrjCompleteCommand(
  namespaceVirtualizationContext: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.ProjectedFileSystem.PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT */,
  commandId: number /* i32 */,
  completionResult: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */,
  extendedParameters: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROJECTEDFSLIB_dll.PrjCompleteCommand(util.toPointer(namespaceVirtualizationContext), commandId, util.toPointer(completionResult), util.toPointer(extendedParameters));
}

export function PrjFillDirEntryBuffer(
  fileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fileBasicInfo: Deno.PointerValue | Uint8Array /* ptr */,
  dirEntryBufferHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.ProjectedFileSystem.PRJ_DIR_ENTRY_BUFFER_HANDLE */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROJECTEDFSLIB_dll.PrjFillDirEntryBuffer(util.pwstrToFfi(fileName), util.toPointer(fileBasicInfo), util.toPointer(dirEntryBufferHandle));
}

export function PrjFillDirEntryBuffer2(
  dirEntryBufferHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Storage.ProjectedFileSystem.PRJ_DIR_ENTRY_BUFFER_HANDLE */,
  fileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fileBasicInfo: Deno.PointerValue | Uint8Array /* ptr */,
  extendedInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROJECTEDFSLIB_dll.PrjFillDirEntryBuffer2(util.toPointer(dirEntryBufferHandle), util.pwstrToFfi(fileName), util.toPointer(fileBasicInfo), util.toPointer(extendedInfo));
}

export function PrjFileNameMatch(
  fileNameToCheck: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pattern: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libPROJECTEDFSLIB_dll.PrjFileNameMatch(util.pwstrToFfi(fileNameToCheck), util.pwstrToFfi(pattern));
}

export function PrjFileNameCompare(
  fileName1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fileName2: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libPROJECTEDFSLIB_dll.PrjFileNameCompare(util.pwstrToFfi(fileName1), util.pwstrToFfi(fileName2));
}

export function PrjDoesNameContainWildCards(
  fileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libPROJECTEDFSLIB_dll.PrjDoesNameContainWildCards(util.pwstrToFfi(fileName));
}

