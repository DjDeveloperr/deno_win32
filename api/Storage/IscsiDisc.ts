/// Auto-generated by Deno Win32: Windows.Win32.Storage.IscsiDisc.Apis

import * as util from "../../util.ts";

// Enums
export type NV_SEP_WRITE_CACHE_TYPE = number;
export type MP_STORAGE_DIAGNOSTIC_LEVEL = number;
export type MP_STORAGE_DIAGNOSTIC_TARGET_TYPE = number;
export type NVCACHE_TYPE = number;
export type NVCACHE_STATUS = number;
export type ISCSI_DIGEST_TYPES = number;
export type ISCSI_AUTH_TYPES = number;
export type IKE_AUTHENTICATION_METHOD = number;
export type TARGETPROTOCOLTYPE = number;
export type TARGET_INFORMATION_CLASS = number;

// Constants
export const IOCTL_SCSI_BASE = 4;
export const FILE_DEVICE_SCSI = 27;
export const DD_SCSI_DEVICE_NAME = `\\Device\\ScsiPort`;
export const IOCTL_SCSI_PASS_THROUGH = 315396;
export const IOCTL_SCSI_MINIPORT = 315400;
export const IOCTL_SCSI_GET_INQUIRY_DATA = 266252;
export const IOCTL_SCSI_GET_CAPABILITIES = 266256;
export const IOCTL_SCSI_PASS_THROUGH_DIRECT = 315412;
export const IOCTL_SCSI_GET_ADDRESS = 266264;
export const IOCTL_SCSI_RESCAN_BUS = 266268;
export const IOCTL_SCSI_GET_DUMP_POINTERS = 266272;
export const IOCTL_SCSI_FREE_DUMP_POINTERS = 266276;
export const IOCTL_IDE_PASS_THROUGH = 315432;
export const IOCTL_ATA_PASS_THROUGH = 315436;
export const IOCTL_ATA_PASS_THROUGH_DIRECT = 315440;
export const IOCTL_ATA_MINIPORT = 315444;
export const IOCTL_MINIPORT_PROCESS_SERVICE_IRP = 315448;
export const IOCTL_MPIO_PASS_THROUGH_PATH = 315452;
export const IOCTL_MPIO_PASS_THROUGH_PATH_DIRECT = 315456;
export const IOCTL_SCSI_PASS_THROUGH_EX = 315460;
export const IOCTL_SCSI_PASS_THROUGH_DIRECT_EX = 315464;
export const IOCTL_MPIO_PASS_THROUGH_PATH_EX = 315468;
export const IOCTL_MPIO_PASS_THROUGH_PATH_DIRECT_EX = 315472;
export const ATA_FLAGS_DRDY_REQUIRED = 1;
export const ATA_FLAGS_DATA_IN = 2;
export const ATA_FLAGS_DATA_OUT = 4;
export const ATA_FLAGS_48BIT_COMMAND = 8;
export const ATA_FLAGS_USE_DMA = 16;
export const ATA_FLAGS_NO_MULTIPLE = 32;
export const IOCTL_MINIPORT_SIGNATURE_SCSIDISK = `SCSIDISK`;
export const IOCTL_MINIPORT_SIGNATURE_HYBRDISK = `HYBRDISK`;
export const IOCTL_MINIPORT_SIGNATURE_DSM_NOTIFICATION = `MPDSM   `;
export const IOCTL_MINIPORT_SIGNATURE_DSM_GENERAL = `MPDSMGEN`;
export const IOCTL_MINIPORT_SIGNATURE_FIRMWARE = `FIRMWARE`;
export const IOCTL_MINIPORT_SIGNATURE_QUERY_PROTOCOL = `PROTOCOL`;
export const IOCTL_MINIPORT_SIGNATURE_SET_PROTOCOL = `SETPROTO`;
export const IOCTL_MINIPORT_SIGNATURE_QUERY_TEMPERATURE = `TEMPERAT`;
export const IOCTL_MINIPORT_SIGNATURE_SET_TEMPERATURE_THRESHOLD = `SETTEMPT`;
export const IOCTL_MINIPORT_SIGNATURE_QUERY_PHYSICAL_TOPOLOGY = `TOPOLOGY`;
export const IOCTL_MINIPORT_SIGNATURE_ENDURANCE_INFO = `ENDURINF`;
export const NRB_FUNCTION_NVCACHE_INFO = 236;
export const NRB_FUNCTION_SPINDLE_STATUS = 229;
export const NRB_FUNCTION_NVCACHE_POWER_MODE_SET = 0;
export const NRB_FUNCTION_NVCACHE_POWER_MODE_RETURN = 1;
export const NRB_FUNCTION_FLUSH_NVCACHE = 20;
export const NRB_FUNCTION_QUERY_PINNED_SET = 18;
export const NRB_FUNCTION_QUERY_CACHE_MISS = 19;
export const NRB_FUNCTION_ADD_LBAS_PINNED_SET = 16;
export const NRB_FUNCTION_REMOVE_LBAS_PINNED_SET = 17;
export const NRB_FUNCTION_QUERY_ASCENDER_STATUS = 208;
export const NRB_FUNCTION_QUERY_HYBRID_DISK_STATUS = 209;
export const NRB_FUNCTION_PASS_HINT_PAYLOAD = 224;
export const NRB_FUNCTION_NVSEPARATED_INFO = 192;
export const NRB_FUNCTION_NVSEPARATED_FLUSH = 193;
export const NRB_FUNCTION_NVSEPARATED_WB_DISABLE = 194;
export const NRB_FUNCTION_NVSEPARATED_WB_REVERT_DEFAULT = 195;
export const NRB_SUCCESS = 0;
export const NRB_ILLEGAL_REQUEST = 1;
export const NRB_INVALID_PARAMETER = 2;
export const NRB_INPUT_DATA_OVERRUN = 3;
export const NRB_INPUT_DATA_UNDERRUN = 4;
export const NRB_OUTPUT_DATA_OVERRUN = 5;
export const NRB_OUTPUT_DATA_UNDERRUN = 6;
export const NV_SEP_CACHE_PARAMETER_VERSION_1 = 1;
export const NV_SEP_CACHE_PARAMETER_VERSION = 1;
export const STORAGE_DIAGNOSTIC_STATUS_SUCCESS = 0;
export const STORAGE_DIAGNOSTIC_STATUS_BUFFER_TOO_SMALL = 1;
export const STORAGE_DIAGNOSTIC_STATUS_UNSUPPORTED_VERSION = 2;
export const STORAGE_DIAGNOSTIC_STATUS_INVALID_PARAMETER = 3;
export const STORAGE_DIAGNOSTIC_STATUS_INVALID_SIGNATURE = 4;
export const STORAGE_DIAGNOSTIC_STATUS_INVALID_TARGET_TYPE = 5;
export const STORAGE_DIAGNOSTIC_STATUS_MORE_DATA = 6;
export const MINIPORT_DSM_NOTIFICATION_VERSION_1 = 1;
export const MINIPORT_DSM_NOTIFICATION_VERSION = 1;
export const MINIPORT_DSM_PROFILE_UNKNOWN = 0;
export const MINIPORT_DSM_PROFILE_PAGE_FILE = 1;
export const MINIPORT_DSM_PROFILE_HIBERNATION_FILE = 2;
export const MINIPORT_DSM_PROFILE_CRASHDUMP_FILE = 3;
export const MINIPORT_DSM_NOTIFY_FLAG_BEGIN = 1;
export const MINIPORT_DSM_NOTIFY_FLAG_END = 2;
export const HYBRID_FUNCTION_GET_INFO = 1;
export const HYBRID_FUNCTION_DISABLE_CACHING_MEDIUM = 16;
export const HYBRID_FUNCTION_ENABLE_CACHING_MEDIUM = 17;
export const HYBRID_FUNCTION_SET_DIRTY_THRESHOLD = 18;
export const HYBRID_FUNCTION_DEMOTE_BY_SIZE = 19;
export const HYBRID_STATUS_SUCCESS = 0;
export const HYBRID_STATUS_ILLEGAL_REQUEST = 1;
export const HYBRID_STATUS_INVALID_PARAMETER = 2;
export const HYBRID_STATUS_OUTPUT_BUFFER_TOO_SMALL = 3;
export const HYBRID_STATUS_ENABLE_REFCOUNT_HOLD = 16;
export const HYBRID_REQUEST_BLOCK_STRUCTURE_VERSION = 1;
export const HYBRID_REQUEST_INFO_STRUCTURE_VERSION = 1;
export const FIRMWARE_FUNCTION_GET_INFO = 1;
export const FIRMWARE_FUNCTION_DOWNLOAD = 2;
export const FIRMWARE_FUNCTION_ACTIVATE = 3;
export const FIRMWARE_STATUS_SUCCESS = 0;
export const FIRMWARE_STATUS_ERROR = 1;
export const FIRMWARE_STATUS_ILLEGAL_REQUEST = 2;
export const FIRMWARE_STATUS_INVALID_PARAMETER = 3;
export const FIRMWARE_STATUS_INPUT_BUFFER_TOO_BIG = 4;
export const FIRMWARE_STATUS_OUTPUT_BUFFER_TOO_SMALL = 5;
export const FIRMWARE_STATUS_INVALID_SLOT = 6;
export const FIRMWARE_STATUS_INVALID_IMAGE = 7;
export const FIRMWARE_STATUS_CONTROLLER_ERROR = 16;
export const FIRMWARE_STATUS_POWER_CYCLE_REQUIRED = 32;
export const FIRMWARE_STATUS_DEVICE_ERROR = 64;
export const FIRMWARE_STATUS_INTERFACE_CRC_ERROR = 128;
export const FIRMWARE_STATUS_UNCORRECTABLE_DATA_ERROR = 129;
export const FIRMWARE_STATUS_MEDIA_CHANGE = 130;
export const FIRMWARE_STATUS_ID_NOT_FOUND = 131;
export const FIRMWARE_STATUS_MEDIA_CHANGE_REQUEST = 132;
export const FIRMWARE_STATUS_COMMAND_ABORT = 133;
export const FIRMWARE_STATUS_END_OF_MEDIA = 134;
export const FIRMWARE_STATUS_ILLEGAL_LENGTH = 135;
export const FIRMWARE_REQUEST_BLOCK_STRUCTURE_VERSION = 1;
export const FIRMWARE_REQUEST_FLAG_CONTROLLER = 1;
export const FIRMWARE_REQUEST_FLAG_LAST_SEGMENT = 2;
export const FIRMWARE_REQUEST_FLAG_FIRST_SEGMENT = 4;
export const FIRMWARE_REQUEST_FLAG_SWITCH_TO_EXISTING_FIRMWARE = 2147483648;
export const STORAGE_FIRMWARE_INFO_STRUCTURE_VERSION = 1;
export const STORAGE_FIRMWARE_INFO_STRUCTURE_VERSION_V2 = 2;
export const STORAGE_FIRMWARE_INFO_INVALID_SLOT = 255;
export const STORAGE_FIRMWARE_SLOT_INFO_V2_REVISION_LENGTH = 16;
export const STORAGE_FIRMWARE_DOWNLOAD_STRUCTURE_VERSION = 1;
export const STORAGE_FIRMWARE_DOWNLOAD_STRUCTURE_VERSION_V2 = 2;
export const STORAGE_FIRMWARE_ACTIVATE_STRUCTURE_VERSION = 1;
export const DUMP_POINTERS_VERSION_1 = 1;
export const DUMP_POINTERS_VERSION_2 = 2;
export const DUMP_POINTERS_VERSION_3 = 3;
export const DUMP_POINTERS_VERSION_4 = 4;
export const DUMP_DRIVER_NAME_LENGTH = 15;
export const DUMP_EX_FLAG_SUPPORT_64BITMEMORY = 1;
export const DUMP_EX_FLAG_SUPPORT_DD_TELEMETRY = 2;
export const DUMP_EX_FLAG_RESUME_SUPPORT = 4;
export const DUMP_EX_FLAG_DRIVER_FULL_PATH_SUPPORT = 8;
export const SCSI_IOCTL_DATA_OUT = 0;
export const SCSI_IOCTL_DATA_IN = 1;
export const SCSI_IOCTL_DATA_UNSPECIFIED = 2;
export const SCSI_IOCTL_DATA_BIDIRECTIONAL = 3;
export const MPIO_IOCTL_FLAG_USE_PATHID = 1;
export const MPIO_IOCTL_FLAG_USE_SCSIADDRESS = 2;
export const MPIO_IOCTL_FLAG_INVOLVE_DSM = 4;
export const MAX_ISCSI_HBANAME_LEN = 256;
export const MAX_ISCSI_NAME_LEN = 223;
export const MAX_ISCSI_ALIAS_LEN = 255;
export const MAX_ISCSI_PORTAL_NAME_LEN = 256;
export const MAX_ISCSI_PORTAL_ALIAS_LEN = 256;
export const MAX_ISCSI_TEXT_ADDRESS_LEN = 256;
export const MAX_ISCSI_PORTAL_ADDRESS_LEN = 256;
export const MAX_ISCSI_DISCOVERY_DOMAIN_LEN = 256;
export const MAX_RADIUS_ADDRESS_LEN = 41;
export const ISCSI_SECURITY_FLAG_TUNNEL_MODE_PREFERRED = `0x00000040`;
export const ISCSI_SECURITY_FLAG_TRANSPORT_MODE_PREFERRED = `0x00000020`;
export const ISCSI_SECURITY_FLAG_PFS_ENABLED = `0x00000010`;
export const ISCSI_SECURITY_FLAG_AGGRESSIVE_MODE_ENABLED = `0x00000008`;
export const ISCSI_SECURITY_FLAG_MAIN_MODE_ENABLED = `0x00000004`;
export const ISCSI_SECURITY_FLAG_IKE_IPSEC_ENABLED = `0x00000002`;
export const ISCSI_SECURITY_FLAG_VALID = `0x00000001`;
export const ISCSI_LOGIN_OPTIONS_HEADER_DIGEST = `0x00000001`;
export const ISCSI_LOGIN_OPTIONS_DATA_DIGEST = `0x00000002`;
export const ISCSI_LOGIN_OPTIONS_MAXIMUM_CONNECTIONS = `0x00000004`;
export const ISCSI_LOGIN_OPTIONS_DEFAULT_TIME_2_WAIT = `0x00000008`;
export const ISCSI_LOGIN_OPTIONS_DEFAULT_TIME_2_RETAIN = `0x00000010`;
export const ISCSI_LOGIN_OPTIONS_USERNAME = `0x00000020`;
export const ISCSI_LOGIN_OPTIONS_PASSWORD = `0x00000040`;
export const ISCSI_LOGIN_OPTIONS_AUTH_TYPE = `0x00000080`;
export const ID_IPV4_ADDR = 1;
export const ID_FQDN = 2;
export const ID_USER_FQDN = 3;
export const ID_IPV6_ADDR = 5;
export const ISCSI_LOGIN_FLAG_REQUIRE_IPSEC = 1;
export const ISCSI_LOGIN_FLAG_MULTIPATH_ENABLED = 2;
export const ISCSI_LOGIN_FLAG_RESERVED1 = 4;
export const ISCSI_LOGIN_FLAG_ALLOW_PORTAL_HOPPING = 8;
export const ISCSI_LOGIN_FLAG_USE_RADIUS_RESPONSE = 16;
export const ISCSI_LOGIN_FLAG_USE_RADIUS_VERIFICATION = 32;
export const ISCSI_LOGIN_OPTIONS_VERSION = 0;
export const ISCSI_TARGET_FLAG_HIDE_STATIC_TARGET = 2;
export const ISCSI_TARGET_FLAG_MERGE_TARGET_INFORMATION = 4;
export const NVSEPWriteCacheTypeUnknown = 0;
export const NVSEPWriteCacheTypeNone = 1;
export const NVSEPWriteCacheTypeWriteBack = 2;
export const NVSEPWriteCacheTypeWriteThrough = 3;
export const MpStorageDiagnosticLevelDefault = 0;
export const MpStorageDiagnosticLevelMax = 1;
export const MpStorageDiagnosticTargetTypeUndefined = 0;
export const MpStorageDiagnosticTargetTypeMiniport = 2;
export const MpStorageDiagnosticTargetTypeHbaFirmware = 3;
export const MpStorageDiagnosticTargetTypeMax = 4;
export const NvCacheTypeUnknown = 0;
export const NvCacheTypeNone = 1;
export const NvCacheTypeWriteBack = 2;
export const NvCacheTypeWriteThrough = 3;
export const NvCacheStatusUnknown = 0;
export const NvCacheStatusDisabling = 1;
export const NvCacheStatusDisabled = 2;
export const NvCacheStatusEnabled = 3;
export const ISCSI_DIGEST_TYPE_NONE = 0;
export const ISCSI_DIGEST_TYPE_CRC32C = 1;
export const ISCSI_NO_AUTH_TYPE = 0;
export const ISCSI_CHAP_AUTH_TYPE = 1;
export const ISCSI_MUTUAL_CHAP_AUTH_TYPE = 2;
export const IKE_AUTHENTICATION_PRESHARED_KEY_METHOD = 1;
export const ISCSI_TCP_PROTOCOL_TYPE = 0;
export const ProtocolType = 0;
export const TargetAlias = 1;
export const DiscoveryMechanisms = 2;
export const PortalGroups = 3;
export const PersistentTargetMappings = 4;
export const InitiatorName = 5;
export const TargetFlags = 6;
export const LoginOptions = 7;

// Structs

/**
 * Windows.Win32.Storage.IscsiDisc.SCSI_PASS_THROUGH32 (size: 40)
 */
export interface SCSI_PASS_THROUGH32 {
  /** u16 */
  Length: number;
  /** u8 */
  ScsiStatus: number;
  /** u8 */
  PathId: number;
  /** u8 */
  TargetId: number;
  /** u8 */
  Lun: number;
  /** u8 */
  CdbLength: number;
  /** u8 */
  SenseInfoLength: number;
  /** u8 */
  DataIn: number;
  /** u32 */
  DataTransferLength: number;
  /** u32 */
  TimeOutValue: number;
  /** u32 */
  DataBufferOffset: number;
  /** u32 */
  SenseInfoOffset: number;
  /** array */
  Cdb: Deno.PointerValue;
}

export const sizeofSCSI_PASS_THROUGH32 = 40;

export function allocSCSI_PASS_THROUGH32(data?: Partial<SCSI_PASS_THROUGH32>): Uint8Array {
  const buf = new Uint8Array(sizeofSCSI_PASS_THROUGH32);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: u8
  if (data?.ScsiStatus !== undefined) view.setUint8(2, Number(data.ScsiStatus));
  // 0x03: u8
  if (data?.PathId !== undefined) view.setUint8(3, Number(data.PathId));
  // 0x04: u8
  if (data?.TargetId !== undefined) view.setUint8(4, Number(data.TargetId));
  // 0x05: u8
  if (data?.Lun !== undefined) view.setUint8(5, Number(data.Lun));
  // 0x06: u8
  if (data?.CdbLength !== undefined) view.setUint8(6, Number(data.CdbLength));
  // 0x07: u8
  if (data?.SenseInfoLength !== undefined) view.setUint8(7, Number(data.SenseInfoLength));
  // 0x08: u8
  if (data?.DataIn !== undefined) view.setUint8(8, Number(data.DataIn));
  // 0x09: u32
  if (data?.DataTransferLength !== undefined) view.setUint32(9, Number(data.DataTransferLength), true);
  // 0x0d: u32
  if (data?.TimeOutValue !== undefined) view.setUint32(13, Number(data.TimeOutValue), true);
  // 0x11: u32
  if (data?.DataBufferOffset !== undefined) view.setUint32(17, Number(data.DataBufferOffset), true);
  // 0x15: u32
  if (data?.SenseInfoOffset !== undefined) view.setUint32(21, Number(data.SenseInfoOffset), true);
  // 0x19: pad7
  // 0x20: pointer
  if (data?.Cdb !== undefined) view.setBigUint64(32, data.Cdb === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Cdb))), true);
  return buf;
}

export class SCSI_PASS_THROUGH32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Length(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get ScsiStatus(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get PathId(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u8
  get TargetId(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get Lun(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get CdbLength(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get SenseInfoLength(): number {
    return this.view.getUint8(7);
  }

  // 0x08: u8
  get DataIn(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u32
  get DataTransferLength(): number {
    return this.view.getUint32(9, true);
  }

  // 0x0d: u32
  get TimeOutValue(): number {
    return this.view.getUint32(13, true);
  }

  // 0x11: u32
  get DataBufferOffset(): number {
    return this.view.getUint32(17, true);
  }

  // 0x15: u32
  get SenseInfoOffset(): number {
    return this.view.getUint32(21, true);
  }

  // 0x19: pad7

  // 0x20: pointer
  get Cdb(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set Length(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set ScsiStatus(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set PathId(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u8
  set TargetId(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set Lun(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set CdbLength(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set SenseInfoLength(value: number) {
    this.view.setUint8(7, value);
  }

  // 0x08: u8
  set DataIn(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u32
  set DataTransferLength(value: number) {
    this.view.setUint32(9, value, true);
  }

  // 0x0d: u32
  set TimeOutValue(value: number) {
    this.view.setUint32(13, value, true);
  }

  // 0x11: u32
  set DataBufferOffset(value: number) {
    this.view.setUint32(17, value, true);
  }

  // 0x15: u32
  set SenseInfoOffset(value: number) {
    this.view.setUint32(21, value, true);
  }

  // 0x19: pad7

  // 0x20: pointer
  set Cdb(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.SCSI_PASS_THROUGH_DIRECT32 (size: 48)
 */
export interface SCSI_PASS_THROUGH_DIRECT32 {
  /** u16 */
  Length: number;
  /** u8 */
  ScsiStatus: number;
  /** u8 */
  PathId: number;
  /** u8 */
  TargetId: number;
  /** u8 */
  Lun: number;
  /** u8 */
  CdbLength: number;
  /** u8 */
  SenseInfoLength: number;
  /** u8 */
  DataIn: number;
  /** u32 */
  DataTransferLength: number;
  /** u32 */
  TimeOutValue: number;
  /** ptr */
  DataBuffer: Deno.PointerValue | Uint8Array;
  /** u32 */
  SenseInfoOffset: number;
  /** array */
  Cdb: Deno.PointerValue;
}

export const sizeofSCSI_PASS_THROUGH_DIRECT32 = 48;

export function allocSCSI_PASS_THROUGH_DIRECT32(data?: Partial<SCSI_PASS_THROUGH_DIRECT32>): Uint8Array {
  const buf = new Uint8Array(sizeofSCSI_PASS_THROUGH_DIRECT32);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: u8
  if (data?.ScsiStatus !== undefined) view.setUint8(2, Number(data.ScsiStatus));
  // 0x03: u8
  if (data?.PathId !== undefined) view.setUint8(3, Number(data.PathId));
  // 0x04: u8
  if (data?.TargetId !== undefined) view.setUint8(4, Number(data.TargetId));
  // 0x05: u8
  if (data?.Lun !== undefined) view.setUint8(5, Number(data.Lun));
  // 0x06: u8
  if (data?.CdbLength !== undefined) view.setUint8(6, Number(data.CdbLength));
  // 0x07: u8
  if (data?.SenseInfoLength !== undefined) view.setUint8(7, Number(data.SenseInfoLength));
  // 0x08: u8
  if (data?.DataIn !== undefined) view.setUint8(8, Number(data.DataIn));
  // 0x09: u32
  if (data?.DataTransferLength !== undefined) view.setUint32(9, Number(data.DataTransferLength), true);
  // 0x0d: u32
  if (data?.TimeOutValue !== undefined) view.setUint32(13, Number(data.TimeOutValue), true);
  // 0x11: pad7
  // 0x18: pointer
  if (data?.DataBuffer !== undefined) view.setBigUint64(24, data.DataBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DataBuffer))), true);
  // 0x20: u32
  if (data?.SenseInfoOffset !== undefined) view.setUint32(32, Number(data.SenseInfoOffset), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Cdb !== undefined) view.setBigUint64(40, data.Cdb === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Cdb))), true);
  return buf;
}

export class SCSI_PASS_THROUGH_DIRECT32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Length(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get ScsiStatus(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get PathId(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u8
  get TargetId(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get Lun(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get CdbLength(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get SenseInfoLength(): number {
    return this.view.getUint8(7);
  }

  // 0x08: u8
  get DataIn(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u32
  get DataTransferLength(): number {
    return this.view.getUint32(9, true);
  }

  // 0x0d: u32
  get TimeOutValue(): number {
    return this.view.getUint32(13, true);
  }

  // 0x11: pad7

  // 0x18: pointer
  get DataBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get SenseInfoOffset(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get Cdb(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set Length(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set ScsiStatus(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set PathId(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u8
  set TargetId(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set Lun(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set CdbLength(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set SenseInfoLength(value: number) {
    this.view.setUint8(7, value);
  }

  // 0x08: u8
  set DataIn(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u32
  set DataTransferLength(value: number) {
    this.view.setUint32(9, value, true);
  }

  // 0x0d: u32
  set TimeOutValue(value: number) {
    this.view.setUint32(13, value, true);
  }

  // 0x11: pad7

  // 0x18: pointer
  set DataBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set SenseInfoOffset(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set Cdb(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.SCSI_PASS_THROUGH32_EX (size: 56)
 */
export interface SCSI_PASS_THROUGH32_EX {
  /** u32 */
  Version: number;
  /** u32 */
  Length: number;
  /** u32 */
  CdbLength: number;
  /** u32 */
  StorAddressLength: number;
  /** u8 */
  ScsiStatus: number;
  /** u8 */
  SenseInfoLength: number;
  /** u8 */
  DataDirection: number;
  /** u8 */
  Reserved: number;
  /** u32 */
  TimeOutValue: number;
  /** u32 */
  StorAddressOffset: number;
  /** u32 */
  SenseInfoOffset: number;
  /** u32 */
  DataOutTransferLength: number;
  /** u32 */
  DataInTransferLength: number;
  /** u32 */
  DataOutBufferOffset: number;
  /** u32 */
  DataInBufferOffset: number;
  /** array */
  Cdb: Deno.PointerValue;
}

export const sizeofSCSI_PASS_THROUGH32_EX = 56;

export function allocSCSI_PASS_THROUGH32_EX(data?: Partial<SCSI_PASS_THROUGH32_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofSCSI_PASS_THROUGH32_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: u32
  if (data?.CdbLength !== undefined) view.setUint32(8, Number(data.CdbLength), true);
  // 0x0c: u32
  if (data?.StorAddressLength !== undefined) view.setUint32(12, Number(data.StorAddressLength), true);
  // 0x10: u8
  if (data?.ScsiStatus !== undefined) view.setUint8(16, Number(data.ScsiStatus));
  // 0x11: u8
  if (data?.SenseInfoLength !== undefined) view.setUint8(17, Number(data.SenseInfoLength));
  // 0x12: u8
  if (data?.DataDirection !== undefined) view.setUint8(18, Number(data.DataDirection));
  // 0x13: u8
  if (data?.Reserved !== undefined) view.setUint8(19, Number(data.Reserved));
  // 0x14: u32
  if (data?.TimeOutValue !== undefined) view.setUint32(20, Number(data.TimeOutValue), true);
  // 0x18: u32
  if (data?.StorAddressOffset !== undefined) view.setUint32(24, Number(data.StorAddressOffset), true);
  // 0x1c: u32
  if (data?.SenseInfoOffset !== undefined) view.setUint32(28, Number(data.SenseInfoOffset), true);
  // 0x20: u32
  if (data?.DataOutTransferLength !== undefined) view.setUint32(32, Number(data.DataOutTransferLength), true);
  // 0x24: u32
  if (data?.DataInTransferLength !== undefined) view.setUint32(36, Number(data.DataInTransferLength), true);
  // 0x28: u32
  if (data?.DataOutBufferOffset !== undefined) view.setUint32(40, Number(data.DataOutBufferOffset), true);
  // 0x2c: u32
  if (data?.DataInBufferOffset !== undefined) view.setUint32(44, Number(data.DataInBufferOffset), true);
  // 0x30: pointer
  if (data?.Cdb !== undefined) view.setBigUint64(48, data.Cdb === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Cdb))), true);
  return buf;
}

export class SCSI_PASS_THROUGH32_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get CdbLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get StorAddressLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u8
  get ScsiStatus(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u8
  get SenseInfoLength(): number {
    return this.view.getUint8(17);
  }

  // 0x12: u8
  get DataDirection(): number {
    return this.view.getUint8(18);
  }

  // 0x13: u8
  get Reserved(): number {
    return this.view.getUint8(19);
  }

  // 0x14: u32
  get TimeOutValue(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get StorAddressOffset(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get SenseInfoOffset(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get DataOutTransferLength(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get DataInTransferLength(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get DataOutBufferOffset(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get DataInBufferOffset(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get Cdb(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set CdbLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set StorAddressLength(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u8
  set ScsiStatus(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u8
  set SenseInfoLength(value: number) {
    this.view.setUint8(17, value);
  }

  // 0x12: u8
  set DataDirection(value: number) {
    this.view.setUint8(18, value);
  }

  // 0x13: u8
  set Reserved(value: number) {
    this.view.setUint8(19, value);
  }

  // 0x14: u32
  set TimeOutValue(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set StorAddressOffset(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set SenseInfoOffset(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set DataOutTransferLength(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set DataInTransferLength(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set DataOutBufferOffset(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set DataInBufferOffset(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set Cdb(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.SCSI_PASS_THROUGH_DIRECT32_EX (size: 64)
 */
export interface SCSI_PASS_THROUGH_DIRECT32_EX {
  /** u32 */
  Version: number;
  /** u32 */
  Length: number;
  /** u32 */
  CdbLength: number;
  /** u32 */
  StorAddressLength: number;
  /** u8 */
  ScsiStatus: number;
  /** u8 */
  SenseInfoLength: number;
  /** u8 */
  DataDirection: number;
  /** u8 */
  Reserved: number;
  /** u32 */
  TimeOutValue: number;
  /** u32 */
  StorAddressOffset: number;
  /** u32 */
  SenseInfoOffset: number;
  /** u32 */
  DataOutTransferLength: number;
  /** u32 */
  DataInTransferLength: number;
  /** ptr */
  DataOutBuffer: Deno.PointerValue | Uint8Array;
  /** ptr */
  DataInBuffer: Deno.PointerValue | Uint8Array;
  /** array */
  Cdb: Deno.PointerValue;
}

export const sizeofSCSI_PASS_THROUGH_DIRECT32_EX = 64;

export function allocSCSI_PASS_THROUGH_DIRECT32_EX(data?: Partial<SCSI_PASS_THROUGH_DIRECT32_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofSCSI_PASS_THROUGH_DIRECT32_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: u32
  if (data?.CdbLength !== undefined) view.setUint32(8, Number(data.CdbLength), true);
  // 0x0c: u32
  if (data?.StorAddressLength !== undefined) view.setUint32(12, Number(data.StorAddressLength), true);
  // 0x10: u8
  if (data?.ScsiStatus !== undefined) view.setUint8(16, Number(data.ScsiStatus));
  // 0x11: u8
  if (data?.SenseInfoLength !== undefined) view.setUint8(17, Number(data.SenseInfoLength));
  // 0x12: u8
  if (data?.DataDirection !== undefined) view.setUint8(18, Number(data.DataDirection));
  // 0x13: u8
  if (data?.Reserved !== undefined) view.setUint8(19, Number(data.Reserved));
  // 0x14: u32
  if (data?.TimeOutValue !== undefined) view.setUint32(20, Number(data.TimeOutValue), true);
  // 0x18: u32
  if (data?.StorAddressOffset !== undefined) view.setUint32(24, Number(data.StorAddressOffset), true);
  // 0x1c: u32
  if (data?.SenseInfoOffset !== undefined) view.setUint32(28, Number(data.SenseInfoOffset), true);
  // 0x20: u32
  if (data?.DataOutTransferLength !== undefined) view.setUint32(32, Number(data.DataOutTransferLength), true);
  // 0x24: u32
  if (data?.DataInTransferLength !== undefined) view.setUint32(36, Number(data.DataInTransferLength), true);
  // 0x28: pointer
  if (data?.DataOutBuffer !== undefined) view.setBigUint64(40, data.DataOutBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DataOutBuffer))), true);
  // 0x30: pointer
  if (data?.DataInBuffer !== undefined) view.setBigUint64(48, data.DataInBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DataInBuffer))), true);
  // 0x38: pointer
  if (data?.Cdb !== undefined) view.setBigUint64(56, data.Cdb === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Cdb))), true);
  return buf;
}

export class SCSI_PASS_THROUGH_DIRECT32_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get CdbLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get StorAddressLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u8
  get ScsiStatus(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u8
  get SenseInfoLength(): number {
    return this.view.getUint8(17);
  }

  // 0x12: u8
  get DataDirection(): number {
    return this.view.getUint8(18);
  }

  // 0x13: u8
  get Reserved(): number {
    return this.view.getUint8(19);
  }

  // 0x14: u32
  get TimeOutValue(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get StorAddressOffset(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get SenseInfoOffset(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get DataOutTransferLength(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get DataInTransferLength(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get DataOutBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get DataInBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get Cdb(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set CdbLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set StorAddressLength(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u8
  set ScsiStatus(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u8
  set SenseInfoLength(value: number) {
    this.view.setUint8(17, value);
  }

  // 0x12: u8
  set DataDirection(value: number) {
    this.view.setUint8(18, value);
  }

  // 0x13: u8
  set Reserved(value: number) {
    this.view.setUint8(19, value);
  }

  // 0x14: u32
  set TimeOutValue(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set StorAddressOffset(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set SenseInfoOffset(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set DataOutTransferLength(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set DataInTransferLength(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set DataOutBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set DataInBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set Cdb(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.ATA_PASS_THROUGH_EX32 (size: 40)
 */
export interface ATA_PASS_THROUGH_EX32 {
  /** u16 */
  Length: number;
  /** u16 */
  AtaFlags: number;
  /** u8 */
  PathId: number;
  /** u8 */
  TargetId: number;
  /** u8 */
  Lun: number;
  /** u8 */
  ReservedAsUchar: number;
  /** u32 */
  DataTransferLength: number;
  /** u32 */
  TimeOutValue: number;
  /** u32 */
  ReservedAsUlong: number;
  /** u32 */
  DataBufferOffset: number;
  /** array */
  PreviousTaskFile: Deno.PointerValue;
  /** array */
  CurrentTaskFile: Deno.PointerValue;
}

export const sizeofATA_PASS_THROUGH_EX32 = 40;

export function allocATA_PASS_THROUGH_EX32(data?: Partial<ATA_PASS_THROUGH_EX32>): Uint8Array {
  const buf = new Uint8Array(sizeofATA_PASS_THROUGH_EX32);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: u16
  if (data?.AtaFlags !== undefined) view.setUint16(2, Number(data.AtaFlags), true);
  // 0x04: u8
  if (data?.PathId !== undefined) view.setUint8(4, Number(data.PathId));
  // 0x05: u8
  if (data?.TargetId !== undefined) view.setUint8(5, Number(data.TargetId));
  // 0x06: u8
  if (data?.Lun !== undefined) view.setUint8(6, Number(data.Lun));
  // 0x07: u8
  if (data?.ReservedAsUchar !== undefined) view.setUint8(7, Number(data.ReservedAsUchar));
  // 0x08: u32
  if (data?.DataTransferLength !== undefined) view.setUint32(8, Number(data.DataTransferLength), true);
  // 0x0c: u32
  if (data?.TimeOutValue !== undefined) view.setUint32(12, Number(data.TimeOutValue), true);
  // 0x10: u32
  if (data?.ReservedAsUlong !== undefined) view.setUint32(16, Number(data.ReservedAsUlong), true);
  // 0x14: u32
  if (data?.DataBufferOffset !== undefined) view.setUint32(20, Number(data.DataBufferOffset), true);
  // 0x18: pointer
  if (data?.PreviousTaskFile !== undefined) view.setBigUint64(24, data.PreviousTaskFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PreviousTaskFile))), true);
  // 0x20: pointer
  if (data?.CurrentTaskFile !== undefined) view.setBigUint64(32, data.CurrentTaskFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CurrentTaskFile))), true);
  return buf;
}

export class ATA_PASS_THROUGH_EX32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Length(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get AtaFlags(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u8
  get PathId(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get TargetId(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get Lun(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get ReservedAsUchar(): number {
    return this.view.getUint8(7);
  }

  // 0x08: u32
  get DataTransferLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get TimeOutValue(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ReservedAsUlong(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get DataBufferOffset(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get PreviousTaskFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get CurrentTaskFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set Length(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set AtaFlags(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u8
  set PathId(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set TargetId(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set Lun(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set ReservedAsUchar(value: number) {
    this.view.setUint8(7, value);
  }

  // 0x08: u32
  set DataTransferLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set TimeOutValue(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ReservedAsUlong(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set DataBufferOffset(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set PreviousTaskFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set CurrentTaskFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.ATA_PASS_THROUGH_DIRECT32 (size: 48)
 */
export interface ATA_PASS_THROUGH_DIRECT32 {
  /** u16 */
  Length: number;
  /** u16 */
  AtaFlags: number;
  /** u8 */
  PathId: number;
  /** u8 */
  TargetId: number;
  /** u8 */
  Lun: number;
  /** u8 */
  ReservedAsUchar: number;
  /** u32 */
  DataTransferLength: number;
  /** u32 */
  TimeOutValue: number;
  /** u32 */
  ReservedAsUlong: number;
  /** ptr */
  DataBuffer: Deno.PointerValue | Uint8Array;
  /** array */
  PreviousTaskFile: Deno.PointerValue;
  /** array */
  CurrentTaskFile: Deno.PointerValue;
}

export const sizeofATA_PASS_THROUGH_DIRECT32 = 48;

export function allocATA_PASS_THROUGH_DIRECT32(data?: Partial<ATA_PASS_THROUGH_DIRECT32>): Uint8Array {
  const buf = new Uint8Array(sizeofATA_PASS_THROUGH_DIRECT32);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: u16
  if (data?.AtaFlags !== undefined) view.setUint16(2, Number(data.AtaFlags), true);
  // 0x04: u8
  if (data?.PathId !== undefined) view.setUint8(4, Number(data.PathId));
  // 0x05: u8
  if (data?.TargetId !== undefined) view.setUint8(5, Number(data.TargetId));
  // 0x06: u8
  if (data?.Lun !== undefined) view.setUint8(6, Number(data.Lun));
  // 0x07: u8
  if (data?.ReservedAsUchar !== undefined) view.setUint8(7, Number(data.ReservedAsUchar));
  // 0x08: u32
  if (data?.DataTransferLength !== undefined) view.setUint32(8, Number(data.DataTransferLength), true);
  // 0x0c: u32
  if (data?.TimeOutValue !== undefined) view.setUint32(12, Number(data.TimeOutValue), true);
  // 0x10: u32
  if (data?.ReservedAsUlong !== undefined) view.setUint32(16, Number(data.ReservedAsUlong), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.DataBuffer !== undefined) view.setBigUint64(24, data.DataBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DataBuffer))), true);
  // 0x20: pointer
  if (data?.PreviousTaskFile !== undefined) view.setBigUint64(32, data.PreviousTaskFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PreviousTaskFile))), true);
  // 0x28: pointer
  if (data?.CurrentTaskFile !== undefined) view.setBigUint64(40, data.CurrentTaskFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CurrentTaskFile))), true);
  return buf;
}

export class ATA_PASS_THROUGH_DIRECT32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Length(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get AtaFlags(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u8
  get PathId(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get TargetId(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get Lun(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get ReservedAsUchar(): number {
    return this.view.getUint8(7);
  }

  // 0x08: u32
  get DataTransferLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get TimeOutValue(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ReservedAsUlong(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get DataBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get PreviousTaskFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get CurrentTaskFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set Length(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set AtaFlags(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u8
  set PathId(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set TargetId(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set Lun(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set ReservedAsUchar(value: number) {
    this.view.setUint8(7, value);
  }

  // 0x08: u32
  set DataTransferLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set TimeOutValue(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ReservedAsUlong(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set DataBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set PreviousTaskFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set CurrentTaskFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.MPIO_PASS_THROUGH_PATH32 (size: 24)
 */
export interface MPIO_PASS_THROUGH_PATH32 {
  /** Windows.Win32.Storage.IscsiDisc.SCSI_PASS_THROUGH32 */
  PassThrough: Uint8Array | Deno.PointerValue;
  /** u32 */
  Version: number;
  /** u16 */
  Length: number;
  /** u8 */
  Flags: number;
  /** u8 */
  PortNumber: number;
  /** u64 */
  MpioPathId: bigint | number;
}

export const sizeofMPIO_PASS_THROUGH_PATH32 = 24;

export function allocMPIO_PASS_THROUGH_PATH32(data?: Partial<MPIO_PASS_THROUGH_PATH32>): Uint8Array {
  const buf = new Uint8Array(sizeofMPIO_PASS_THROUGH_PATH32);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PassThrough !== undefined) view.setBigUint64(0, data.PassThrough === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PassThrough))), true);
  // 0x08: u32
  if (data?.Version !== undefined) view.setUint32(8, Number(data.Version), true);
  // 0x0c: u16
  if (data?.Length !== undefined) view.setUint16(12, Number(data.Length), true);
  // 0x0e: u8
  if (data?.Flags !== undefined) view.setUint8(14, Number(data.Flags));
  // 0x0f: u8
  if (data?.PortNumber !== undefined) view.setUint8(15, Number(data.PortNumber));
  // 0x10: u64
  if (data?.MpioPathId !== undefined) view.setBigUint64(16, BigInt(data.MpioPathId), true);
  return buf;
}

export class MPIO_PASS_THROUGH_PATH32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PassThrough(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get Version(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u16
  get Length(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u8
  get Flags(): number {
    return this.view.getUint8(14);
  }

  // 0x0f: u8
  get PortNumber(): number {
    return this.view.getUint8(15);
  }

  // 0x10: u64
  get MpioPathId(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x00: pointer
  set PassThrough(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set Version(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u16
  set Length(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u8
  set Flags(value: number) {
    this.view.setUint8(14, value);
  }

  // 0x0f: u8
  set PortNumber(value: number) {
    this.view.setUint8(15, value);
  }

  // 0x10: u64
  set MpioPathId(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.MPIO_PASS_THROUGH_PATH_DIRECT32 (size: 24)
 */
export interface MPIO_PASS_THROUGH_PATH_DIRECT32 {
  /** Windows.Win32.Storage.IscsiDisc.SCSI_PASS_THROUGH_DIRECT32 */
  PassThrough: Uint8Array | Deno.PointerValue;
  /** u32 */
  Version: number;
  /** u16 */
  Length: number;
  /** u8 */
  Flags: number;
  /** u8 */
  PortNumber: number;
  /** u64 */
  MpioPathId: bigint | number;
}

export const sizeofMPIO_PASS_THROUGH_PATH_DIRECT32 = 24;

export function allocMPIO_PASS_THROUGH_PATH_DIRECT32(data?: Partial<MPIO_PASS_THROUGH_PATH_DIRECT32>): Uint8Array {
  const buf = new Uint8Array(sizeofMPIO_PASS_THROUGH_PATH_DIRECT32);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PassThrough !== undefined) view.setBigUint64(0, data.PassThrough === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PassThrough))), true);
  // 0x08: u32
  if (data?.Version !== undefined) view.setUint32(8, Number(data.Version), true);
  // 0x0c: u16
  if (data?.Length !== undefined) view.setUint16(12, Number(data.Length), true);
  // 0x0e: u8
  if (data?.Flags !== undefined) view.setUint8(14, Number(data.Flags));
  // 0x0f: u8
  if (data?.PortNumber !== undefined) view.setUint8(15, Number(data.PortNumber));
  // 0x10: u64
  if (data?.MpioPathId !== undefined) view.setBigUint64(16, BigInt(data.MpioPathId), true);
  return buf;
}

export class MPIO_PASS_THROUGH_PATH_DIRECT32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PassThrough(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get Version(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u16
  get Length(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u8
  get Flags(): number {
    return this.view.getUint8(14);
  }

  // 0x0f: u8
  get PortNumber(): number {
    return this.view.getUint8(15);
  }

  // 0x10: u64
  get MpioPathId(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x00: pointer
  set PassThrough(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set Version(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u16
  set Length(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u8
  set Flags(value: number) {
    this.view.setUint8(14, value);
  }

  // 0x0f: u8
  set PortNumber(value: number) {
    this.view.setUint8(15, value);
  }

  // 0x10: u64
  set MpioPathId(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.MPIO_PASS_THROUGH_PATH32_EX (size: 24)
 */
export interface MPIO_PASS_THROUGH_PATH32_EX {
  /** u32 */
  PassThroughOffset: number;
  /** u32 */
  Version: number;
  /** u16 */
  Length: number;
  /** u8 */
  Flags: number;
  /** u8 */
  PortNumber: number;
  /** u64 */
  MpioPathId: bigint | number;
}

export const sizeofMPIO_PASS_THROUGH_PATH32_EX = 24;

export function allocMPIO_PASS_THROUGH_PATH32_EX(data?: Partial<MPIO_PASS_THROUGH_PATH32_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofMPIO_PASS_THROUGH_PATH32_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PassThroughOffset !== undefined) view.setUint32(0, Number(data.PassThroughOffset), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u16
  if (data?.Length !== undefined) view.setUint16(8, Number(data.Length), true);
  // 0x0a: u8
  if (data?.Flags !== undefined) view.setUint8(10, Number(data.Flags));
  // 0x0b: u8
  if (data?.PortNumber !== undefined) view.setUint8(11, Number(data.PortNumber));
  // 0x0c: pad4
  // 0x10: u64
  if (data?.MpioPathId !== undefined) view.setBigUint64(16, BigInt(data.MpioPathId), true);
  return buf;
}

export class MPIO_PASS_THROUGH_PATH32_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PassThroughOffset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Version(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get Length(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u8
  get Flags(): number {
    return this.view.getUint8(10);
  }

  // 0x0b: u8
  get PortNumber(): number {
    return this.view.getUint8(11);
  }

  // 0x0c: pad4

  // 0x10: u64
  get MpioPathId(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x00: u32
  set PassThroughOffset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Version(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set Length(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u8
  set Flags(value: number) {
    this.view.setUint8(10, value);
  }

  // 0x0b: u8
  set PortNumber(value: number) {
    this.view.setUint8(11, value);
  }

  // 0x0c: pad4

  // 0x10: u64
  set MpioPathId(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.MPIO_PASS_THROUGH_PATH_DIRECT32_EX (size: 24)
 */
export interface MPIO_PASS_THROUGH_PATH_DIRECT32_EX {
  /** u32 */
  PassThroughOffset: number;
  /** u32 */
  Version: number;
  /** u16 */
  Length: number;
  /** u8 */
  Flags: number;
  /** u8 */
  PortNumber: number;
  /** u64 */
  MpioPathId: bigint | number;
}

export const sizeofMPIO_PASS_THROUGH_PATH_DIRECT32_EX = 24;

export function allocMPIO_PASS_THROUGH_PATH_DIRECT32_EX(data?: Partial<MPIO_PASS_THROUGH_PATH_DIRECT32_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofMPIO_PASS_THROUGH_PATH_DIRECT32_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PassThroughOffset !== undefined) view.setUint32(0, Number(data.PassThroughOffset), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u16
  if (data?.Length !== undefined) view.setUint16(8, Number(data.Length), true);
  // 0x0a: u8
  if (data?.Flags !== undefined) view.setUint8(10, Number(data.Flags));
  // 0x0b: u8
  if (data?.PortNumber !== undefined) view.setUint8(11, Number(data.PortNumber));
  // 0x0c: pad4
  // 0x10: u64
  if (data?.MpioPathId !== undefined) view.setBigUint64(16, BigInt(data.MpioPathId), true);
  return buf;
}

export class MPIO_PASS_THROUGH_PATH_DIRECT32_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PassThroughOffset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Version(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get Length(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u8
  get Flags(): number {
    return this.view.getUint8(10);
  }

  // 0x0b: u8
  get PortNumber(): number {
    return this.view.getUint8(11);
  }

  // 0x0c: pad4

  // 0x10: u64
  get MpioPathId(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x00: u32
  set PassThroughOffset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Version(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set Length(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u8
  set Flags(value: number) {
    this.view.setUint8(10, value);
  }

  // 0x0b: u8
  set PortNumber(value: number) {
    this.view.setUint8(11, value);
  }

  // 0x0c: pad4

  // 0x10: u64
  set MpioPathId(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.SCSI_PASS_THROUGH (size: 48)
 */
export interface SCSI_PASS_THROUGH {
  /** u16 */
  Length: number;
  /** u8 */
  ScsiStatus: number;
  /** u8 */
  PathId: number;
  /** u8 */
  TargetId: number;
  /** u8 */
  Lun: number;
  /** u8 */
  CdbLength: number;
  /** u8 */
  SenseInfoLength: number;
  /** u8 */
  DataIn: number;
  /** u32 */
  DataTransferLength: number;
  /** u32 */
  TimeOutValue: number;
  /** usize */
  DataBufferOffset: bigint | number;
  /** u32 */
  SenseInfoOffset: number;
  /** array */
  Cdb: Deno.PointerValue;
}

export const sizeofSCSI_PASS_THROUGH = 48;

export function allocSCSI_PASS_THROUGH(data?: Partial<SCSI_PASS_THROUGH>): Uint8Array {
  const buf = new Uint8Array(sizeofSCSI_PASS_THROUGH);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: u8
  if (data?.ScsiStatus !== undefined) view.setUint8(2, Number(data.ScsiStatus));
  // 0x03: u8
  if (data?.PathId !== undefined) view.setUint8(3, Number(data.PathId));
  // 0x04: u8
  if (data?.TargetId !== undefined) view.setUint8(4, Number(data.TargetId));
  // 0x05: u8
  if (data?.Lun !== undefined) view.setUint8(5, Number(data.Lun));
  // 0x06: u8
  if (data?.CdbLength !== undefined) view.setUint8(6, Number(data.CdbLength));
  // 0x07: u8
  if (data?.SenseInfoLength !== undefined) view.setUint8(7, Number(data.SenseInfoLength));
  // 0x08: u8
  if (data?.DataIn !== undefined) view.setUint8(8, Number(data.DataIn));
  // 0x09: u32
  if (data?.DataTransferLength !== undefined) view.setUint32(9, Number(data.DataTransferLength), true);
  // 0x0d: u32
  if (data?.TimeOutValue !== undefined) view.setUint32(13, Number(data.TimeOutValue), true);
  // 0x11: pad7
  // 0x18: usize
  if (data?.DataBufferOffset !== undefined) view.setBigUint64(24, BigInt(data.DataBufferOffset), true);
  // 0x20: u32
  if (data?.SenseInfoOffset !== undefined) view.setUint32(32, Number(data.SenseInfoOffset), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Cdb !== undefined) view.setBigUint64(40, data.Cdb === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Cdb))), true);
  return buf;
}

export class SCSI_PASS_THROUGHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Length(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get ScsiStatus(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get PathId(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u8
  get TargetId(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get Lun(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get CdbLength(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get SenseInfoLength(): number {
    return this.view.getUint8(7);
  }

  // 0x08: u8
  get DataIn(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u32
  get DataTransferLength(): number {
    return this.view.getUint32(9, true);
  }

  // 0x0d: u32
  get TimeOutValue(): number {
    return this.view.getUint32(13, true);
  }

  // 0x11: pad7

  // 0x18: usize
  get DataBufferOffset(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u32
  get SenseInfoOffset(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get Cdb(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set Length(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set ScsiStatus(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set PathId(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u8
  set TargetId(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set Lun(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set CdbLength(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set SenseInfoLength(value: number) {
    this.view.setUint8(7, value);
  }

  // 0x08: u8
  set DataIn(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u32
  set DataTransferLength(value: number) {
    this.view.setUint32(9, value, true);
  }

  // 0x0d: u32
  set TimeOutValue(value: number) {
    this.view.setUint32(13, value, true);
  }

  // 0x11: pad7

  // 0x18: usize
  set DataBufferOffset(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u32
  set SenseInfoOffset(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set Cdb(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.SCSI_PASS_THROUGH_DIRECT (size: 48)
 */
export interface SCSI_PASS_THROUGH_DIRECT {
  /** u16 */
  Length: number;
  /** u8 */
  ScsiStatus: number;
  /** u8 */
  PathId: number;
  /** u8 */
  TargetId: number;
  /** u8 */
  Lun: number;
  /** u8 */
  CdbLength: number;
  /** u8 */
  SenseInfoLength: number;
  /** u8 */
  DataIn: number;
  /** u32 */
  DataTransferLength: number;
  /** u32 */
  TimeOutValue: number;
  /** ptr */
  DataBuffer: Deno.PointerValue | Uint8Array;
  /** u32 */
  SenseInfoOffset: number;
  /** array */
  Cdb: Deno.PointerValue;
}

export const sizeofSCSI_PASS_THROUGH_DIRECT = 48;

export function allocSCSI_PASS_THROUGH_DIRECT(data?: Partial<SCSI_PASS_THROUGH_DIRECT>): Uint8Array {
  const buf = new Uint8Array(sizeofSCSI_PASS_THROUGH_DIRECT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: u8
  if (data?.ScsiStatus !== undefined) view.setUint8(2, Number(data.ScsiStatus));
  // 0x03: u8
  if (data?.PathId !== undefined) view.setUint8(3, Number(data.PathId));
  // 0x04: u8
  if (data?.TargetId !== undefined) view.setUint8(4, Number(data.TargetId));
  // 0x05: u8
  if (data?.Lun !== undefined) view.setUint8(5, Number(data.Lun));
  // 0x06: u8
  if (data?.CdbLength !== undefined) view.setUint8(6, Number(data.CdbLength));
  // 0x07: u8
  if (data?.SenseInfoLength !== undefined) view.setUint8(7, Number(data.SenseInfoLength));
  // 0x08: u8
  if (data?.DataIn !== undefined) view.setUint8(8, Number(data.DataIn));
  // 0x09: u32
  if (data?.DataTransferLength !== undefined) view.setUint32(9, Number(data.DataTransferLength), true);
  // 0x0d: u32
  if (data?.TimeOutValue !== undefined) view.setUint32(13, Number(data.TimeOutValue), true);
  // 0x11: pad7
  // 0x18: pointer
  if (data?.DataBuffer !== undefined) view.setBigUint64(24, data.DataBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DataBuffer))), true);
  // 0x20: u32
  if (data?.SenseInfoOffset !== undefined) view.setUint32(32, Number(data.SenseInfoOffset), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Cdb !== undefined) view.setBigUint64(40, data.Cdb === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Cdb))), true);
  return buf;
}

export class SCSI_PASS_THROUGH_DIRECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Length(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get ScsiStatus(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get PathId(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u8
  get TargetId(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get Lun(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get CdbLength(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get SenseInfoLength(): number {
    return this.view.getUint8(7);
  }

  // 0x08: u8
  get DataIn(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u32
  get DataTransferLength(): number {
    return this.view.getUint32(9, true);
  }

  // 0x0d: u32
  get TimeOutValue(): number {
    return this.view.getUint32(13, true);
  }

  // 0x11: pad7

  // 0x18: pointer
  get DataBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get SenseInfoOffset(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get Cdb(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set Length(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set ScsiStatus(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set PathId(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u8
  set TargetId(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set Lun(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set CdbLength(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set SenseInfoLength(value: number) {
    this.view.setUint8(7, value);
  }

  // 0x08: u8
  set DataIn(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u32
  set DataTransferLength(value: number) {
    this.view.setUint32(9, value, true);
  }

  // 0x0d: u32
  set TimeOutValue(value: number) {
    this.view.setUint32(13, value, true);
  }

  // 0x11: pad7

  // 0x18: pointer
  set DataBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set SenseInfoOffset(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set Cdb(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.SCSI_PASS_THROUGH_EX (size: 64)
 */
export interface SCSI_PASS_THROUGH_EX {
  /** u32 */
  Version: number;
  /** u32 */
  Length: number;
  /** u32 */
  CdbLength: number;
  /** u32 */
  StorAddressLength: number;
  /** u8 */
  ScsiStatus: number;
  /** u8 */
  SenseInfoLength: number;
  /** u8 */
  DataDirection: number;
  /** u8 */
  Reserved: number;
  /** u32 */
  TimeOutValue: number;
  /** u32 */
  StorAddressOffset: number;
  /** u32 */
  SenseInfoOffset: number;
  /** u32 */
  DataOutTransferLength: number;
  /** u32 */
  DataInTransferLength: number;
  /** usize */
  DataOutBufferOffset: bigint | number;
  /** usize */
  DataInBufferOffset: bigint | number;
  /** array */
  Cdb: Deno.PointerValue;
}

export const sizeofSCSI_PASS_THROUGH_EX = 64;

export function allocSCSI_PASS_THROUGH_EX(data?: Partial<SCSI_PASS_THROUGH_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofSCSI_PASS_THROUGH_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: u32
  if (data?.CdbLength !== undefined) view.setUint32(8, Number(data.CdbLength), true);
  // 0x0c: u32
  if (data?.StorAddressLength !== undefined) view.setUint32(12, Number(data.StorAddressLength), true);
  // 0x10: u8
  if (data?.ScsiStatus !== undefined) view.setUint8(16, Number(data.ScsiStatus));
  // 0x11: u8
  if (data?.SenseInfoLength !== undefined) view.setUint8(17, Number(data.SenseInfoLength));
  // 0x12: u8
  if (data?.DataDirection !== undefined) view.setUint8(18, Number(data.DataDirection));
  // 0x13: u8
  if (data?.Reserved !== undefined) view.setUint8(19, Number(data.Reserved));
  // 0x14: u32
  if (data?.TimeOutValue !== undefined) view.setUint32(20, Number(data.TimeOutValue), true);
  // 0x18: u32
  if (data?.StorAddressOffset !== undefined) view.setUint32(24, Number(data.StorAddressOffset), true);
  // 0x1c: u32
  if (data?.SenseInfoOffset !== undefined) view.setUint32(28, Number(data.SenseInfoOffset), true);
  // 0x20: u32
  if (data?.DataOutTransferLength !== undefined) view.setUint32(32, Number(data.DataOutTransferLength), true);
  // 0x24: u32
  if (data?.DataInTransferLength !== undefined) view.setUint32(36, Number(data.DataInTransferLength), true);
  // 0x28: usize
  if (data?.DataOutBufferOffset !== undefined) view.setBigUint64(40, BigInt(data.DataOutBufferOffset), true);
  // 0x30: usize
  if (data?.DataInBufferOffset !== undefined) view.setBigUint64(48, BigInt(data.DataInBufferOffset), true);
  // 0x38: pointer
  if (data?.Cdb !== undefined) view.setBigUint64(56, data.Cdb === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Cdb))), true);
  return buf;
}

export class SCSI_PASS_THROUGH_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get CdbLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get StorAddressLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u8
  get ScsiStatus(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u8
  get SenseInfoLength(): number {
    return this.view.getUint8(17);
  }

  // 0x12: u8
  get DataDirection(): number {
    return this.view.getUint8(18);
  }

  // 0x13: u8
  get Reserved(): number {
    return this.view.getUint8(19);
  }

  // 0x14: u32
  get TimeOutValue(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get StorAddressOffset(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get SenseInfoOffset(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get DataOutTransferLength(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get DataInTransferLength(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: usize
  get DataOutBufferOffset(): bigint | number {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: usize
  get DataInBufferOffset(): bigint | number {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: pointer
  get Cdb(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set CdbLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set StorAddressLength(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u8
  set ScsiStatus(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u8
  set SenseInfoLength(value: number) {
    this.view.setUint8(17, value);
  }

  // 0x12: u8
  set DataDirection(value: number) {
    this.view.setUint8(18, value);
  }

  // 0x13: u8
  set Reserved(value: number) {
    this.view.setUint8(19, value);
  }

  // 0x14: u32
  set TimeOutValue(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set StorAddressOffset(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set SenseInfoOffset(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set DataOutTransferLength(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set DataInTransferLength(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: usize
  set DataOutBufferOffset(value: bigint | number) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: usize
  set DataInBufferOffset(value: bigint | number) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: pointer
  set Cdb(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.SCSI_PASS_THROUGH_DIRECT_EX (size: 64)
 */
export interface SCSI_PASS_THROUGH_DIRECT_EX {
  /** u32 */
  Version: number;
  /** u32 */
  Length: number;
  /** u32 */
  CdbLength: number;
  /** u32 */
  StorAddressLength: number;
  /** u8 */
  ScsiStatus: number;
  /** u8 */
  SenseInfoLength: number;
  /** u8 */
  DataDirection: number;
  /** u8 */
  Reserved: number;
  /** u32 */
  TimeOutValue: number;
  /** u32 */
  StorAddressOffset: number;
  /** u32 */
  SenseInfoOffset: number;
  /** u32 */
  DataOutTransferLength: number;
  /** u32 */
  DataInTransferLength: number;
  /** ptr */
  DataOutBuffer: Deno.PointerValue | Uint8Array;
  /** ptr */
  DataInBuffer: Deno.PointerValue | Uint8Array;
  /** array */
  Cdb: Deno.PointerValue;
}

export const sizeofSCSI_PASS_THROUGH_DIRECT_EX = 64;

export function allocSCSI_PASS_THROUGH_DIRECT_EX(data?: Partial<SCSI_PASS_THROUGH_DIRECT_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofSCSI_PASS_THROUGH_DIRECT_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: u32
  if (data?.CdbLength !== undefined) view.setUint32(8, Number(data.CdbLength), true);
  // 0x0c: u32
  if (data?.StorAddressLength !== undefined) view.setUint32(12, Number(data.StorAddressLength), true);
  // 0x10: u8
  if (data?.ScsiStatus !== undefined) view.setUint8(16, Number(data.ScsiStatus));
  // 0x11: u8
  if (data?.SenseInfoLength !== undefined) view.setUint8(17, Number(data.SenseInfoLength));
  // 0x12: u8
  if (data?.DataDirection !== undefined) view.setUint8(18, Number(data.DataDirection));
  // 0x13: u8
  if (data?.Reserved !== undefined) view.setUint8(19, Number(data.Reserved));
  // 0x14: u32
  if (data?.TimeOutValue !== undefined) view.setUint32(20, Number(data.TimeOutValue), true);
  // 0x18: u32
  if (data?.StorAddressOffset !== undefined) view.setUint32(24, Number(data.StorAddressOffset), true);
  // 0x1c: u32
  if (data?.SenseInfoOffset !== undefined) view.setUint32(28, Number(data.SenseInfoOffset), true);
  // 0x20: u32
  if (data?.DataOutTransferLength !== undefined) view.setUint32(32, Number(data.DataOutTransferLength), true);
  // 0x24: u32
  if (data?.DataInTransferLength !== undefined) view.setUint32(36, Number(data.DataInTransferLength), true);
  // 0x28: pointer
  if (data?.DataOutBuffer !== undefined) view.setBigUint64(40, data.DataOutBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DataOutBuffer))), true);
  // 0x30: pointer
  if (data?.DataInBuffer !== undefined) view.setBigUint64(48, data.DataInBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DataInBuffer))), true);
  // 0x38: pointer
  if (data?.Cdb !== undefined) view.setBigUint64(56, data.Cdb === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Cdb))), true);
  return buf;
}

export class SCSI_PASS_THROUGH_DIRECT_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get CdbLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get StorAddressLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u8
  get ScsiStatus(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u8
  get SenseInfoLength(): number {
    return this.view.getUint8(17);
  }

  // 0x12: u8
  get DataDirection(): number {
    return this.view.getUint8(18);
  }

  // 0x13: u8
  get Reserved(): number {
    return this.view.getUint8(19);
  }

  // 0x14: u32
  get TimeOutValue(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get StorAddressOffset(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get SenseInfoOffset(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get DataOutTransferLength(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get DataInTransferLength(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get DataOutBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get DataInBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get Cdb(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set CdbLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set StorAddressLength(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u8
  set ScsiStatus(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u8
  set SenseInfoLength(value: number) {
    this.view.setUint8(17, value);
  }

  // 0x12: u8
  set DataDirection(value: number) {
    this.view.setUint8(18, value);
  }

  // 0x13: u8
  set Reserved(value: number) {
    this.view.setUint8(19, value);
  }

  // 0x14: u32
  set TimeOutValue(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set StorAddressOffset(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set SenseInfoOffset(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set DataOutTransferLength(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set DataInTransferLength(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set DataOutBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set DataInBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set Cdb(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.ATA_PASS_THROUGH_EX (size: 48)
 */
export interface ATA_PASS_THROUGH_EX {
  /** u16 */
  Length: number;
  /** u16 */
  AtaFlags: number;
  /** u8 */
  PathId: number;
  /** u8 */
  TargetId: number;
  /** u8 */
  Lun: number;
  /** u8 */
  ReservedAsUchar: number;
  /** u32 */
  DataTransferLength: number;
  /** u32 */
  TimeOutValue: number;
  /** u32 */
  ReservedAsUlong: number;
  /** usize */
  DataBufferOffset: bigint | number;
  /** array */
  PreviousTaskFile: Deno.PointerValue;
  /** array */
  CurrentTaskFile: Deno.PointerValue;
}

export const sizeofATA_PASS_THROUGH_EX = 48;

export function allocATA_PASS_THROUGH_EX(data?: Partial<ATA_PASS_THROUGH_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofATA_PASS_THROUGH_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: u16
  if (data?.AtaFlags !== undefined) view.setUint16(2, Number(data.AtaFlags), true);
  // 0x04: u8
  if (data?.PathId !== undefined) view.setUint8(4, Number(data.PathId));
  // 0x05: u8
  if (data?.TargetId !== undefined) view.setUint8(5, Number(data.TargetId));
  // 0x06: u8
  if (data?.Lun !== undefined) view.setUint8(6, Number(data.Lun));
  // 0x07: u8
  if (data?.ReservedAsUchar !== undefined) view.setUint8(7, Number(data.ReservedAsUchar));
  // 0x08: u32
  if (data?.DataTransferLength !== undefined) view.setUint32(8, Number(data.DataTransferLength), true);
  // 0x0c: u32
  if (data?.TimeOutValue !== undefined) view.setUint32(12, Number(data.TimeOutValue), true);
  // 0x10: u32
  if (data?.ReservedAsUlong !== undefined) view.setUint32(16, Number(data.ReservedAsUlong), true);
  // 0x14: pad4
  // 0x18: usize
  if (data?.DataBufferOffset !== undefined) view.setBigUint64(24, BigInt(data.DataBufferOffset), true);
  // 0x20: pointer
  if (data?.PreviousTaskFile !== undefined) view.setBigUint64(32, data.PreviousTaskFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PreviousTaskFile))), true);
  // 0x28: pointer
  if (data?.CurrentTaskFile !== undefined) view.setBigUint64(40, data.CurrentTaskFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CurrentTaskFile))), true);
  return buf;
}

export class ATA_PASS_THROUGH_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Length(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get AtaFlags(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u8
  get PathId(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get TargetId(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get Lun(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get ReservedAsUchar(): number {
    return this.view.getUint8(7);
  }

  // 0x08: u32
  get DataTransferLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get TimeOutValue(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ReservedAsUlong(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: usize
  get DataBufferOffset(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: pointer
  get PreviousTaskFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get CurrentTaskFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set Length(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set AtaFlags(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u8
  set PathId(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set TargetId(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set Lun(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set ReservedAsUchar(value: number) {
    this.view.setUint8(7, value);
  }

  // 0x08: u32
  set DataTransferLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set TimeOutValue(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ReservedAsUlong(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: usize
  set DataBufferOffset(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set PreviousTaskFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set CurrentTaskFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.ATA_PASS_THROUGH_DIRECT (size: 48)
 */
export interface ATA_PASS_THROUGH_DIRECT {
  /** u16 */
  Length: number;
  /** u16 */
  AtaFlags: number;
  /** u8 */
  PathId: number;
  /** u8 */
  TargetId: number;
  /** u8 */
  Lun: number;
  /** u8 */
  ReservedAsUchar: number;
  /** u32 */
  DataTransferLength: number;
  /** u32 */
  TimeOutValue: number;
  /** u32 */
  ReservedAsUlong: number;
  /** ptr */
  DataBuffer: Deno.PointerValue | Uint8Array;
  /** array */
  PreviousTaskFile: Deno.PointerValue;
  /** array */
  CurrentTaskFile: Deno.PointerValue;
}

export const sizeofATA_PASS_THROUGH_DIRECT = 48;

export function allocATA_PASS_THROUGH_DIRECT(data?: Partial<ATA_PASS_THROUGH_DIRECT>): Uint8Array {
  const buf = new Uint8Array(sizeofATA_PASS_THROUGH_DIRECT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: u16
  if (data?.AtaFlags !== undefined) view.setUint16(2, Number(data.AtaFlags), true);
  // 0x04: u8
  if (data?.PathId !== undefined) view.setUint8(4, Number(data.PathId));
  // 0x05: u8
  if (data?.TargetId !== undefined) view.setUint8(5, Number(data.TargetId));
  // 0x06: u8
  if (data?.Lun !== undefined) view.setUint8(6, Number(data.Lun));
  // 0x07: u8
  if (data?.ReservedAsUchar !== undefined) view.setUint8(7, Number(data.ReservedAsUchar));
  // 0x08: u32
  if (data?.DataTransferLength !== undefined) view.setUint32(8, Number(data.DataTransferLength), true);
  // 0x0c: u32
  if (data?.TimeOutValue !== undefined) view.setUint32(12, Number(data.TimeOutValue), true);
  // 0x10: u32
  if (data?.ReservedAsUlong !== undefined) view.setUint32(16, Number(data.ReservedAsUlong), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.DataBuffer !== undefined) view.setBigUint64(24, data.DataBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DataBuffer))), true);
  // 0x20: pointer
  if (data?.PreviousTaskFile !== undefined) view.setBigUint64(32, data.PreviousTaskFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PreviousTaskFile))), true);
  // 0x28: pointer
  if (data?.CurrentTaskFile !== undefined) view.setBigUint64(40, data.CurrentTaskFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CurrentTaskFile))), true);
  return buf;
}

export class ATA_PASS_THROUGH_DIRECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Length(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get AtaFlags(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u8
  get PathId(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get TargetId(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get Lun(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get ReservedAsUchar(): number {
    return this.view.getUint8(7);
  }

  // 0x08: u32
  get DataTransferLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get TimeOutValue(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ReservedAsUlong(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get DataBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get PreviousTaskFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get CurrentTaskFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set Length(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set AtaFlags(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u8
  set PathId(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set TargetId(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set Lun(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set ReservedAsUchar(value: number) {
    this.view.setUint8(7, value);
  }

  // 0x08: u32
  set DataTransferLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set TimeOutValue(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ReservedAsUlong(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set DataBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set PreviousTaskFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set CurrentTaskFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.IDE_IO_CONTROL (size: 32)
 */
export interface IDE_IO_CONTROL {
  /** u32 */
  HeaderLength: number;
  /** array */
  Signature: Deno.PointerValue;
  /** u32 */
  Timeout: number;
  /** u32 */
  ControlCode: number;
  /** u32 */
  ReturnStatus: number;
  /** u32 */
  DataLength: number;
}

export const sizeofIDE_IO_CONTROL = 32;

export function allocIDE_IO_CONTROL(data?: Partial<IDE_IO_CONTROL>): Uint8Array {
  const buf = new Uint8Array(sizeofIDE_IO_CONTROL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.HeaderLength !== undefined) view.setUint32(0, Number(data.HeaderLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Signature !== undefined) view.setBigUint64(8, data.Signature === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Signature))), true);
  // 0x10: u32
  if (data?.Timeout !== undefined) view.setUint32(16, Number(data.Timeout), true);
  // 0x14: u32
  if (data?.ControlCode !== undefined) view.setUint32(20, Number(data.ControlCode), true);
  // 0x18: u32
  if (data?.ReturnStatus !== undefined) view.setUint32(24, Number(data.ReturnStatus), true);
  // 0x1c: u32
  if (data?.DataLength !== undefined) view.setUint32(28, Number(data.DataLength), true);
  return buf;
}

export class IDE_IO_CONTROLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get HeaderLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Signature(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get Timeout(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ControlCode(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get ReturnStatus(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get DataLength(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set HeaderLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Signature(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set Timeout(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ControlCode(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set ReturnStatus(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set DataLength(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.MPIO_PASS_THROUGH_PATH (size: 24)
 */
export interface MPIO_PASS_THROUGH_PATH {
  /** Windows.Win32.Storage.IscsiDisc.SCSI_PASS_THROUGH */
  PassThrough: Uint8Array | Deno.PointerValue;
  /** u32 */
  Version: number;
  /** u16 */
  Length: number;
  /** u8 */
  Flags: number;
  /** u8 */
  PortNumber: number;
  /** u64 */
  MpioPathId: bigint | number;
}

export const sizeofMPIO_PASS_THROUGH_PATH = 24;

export function allocMPIO_PASS_THROUGH_PATH(data?: Partial<MPIO_PASS_THROUGH_PATH>): Uint8Array {
  const buf = new Uint8Array(sizeofMPIO_PASS_THROUGH_PATH);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PassThrough !== undefined) view.setBigUint64(0, data.PassThrough === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PassThrough))), true);
  // 0x08: u32
  if (data?.Version !== undefined) view.setUint32(8, Number(data.Version), true);
  // 0x0c: u16
  if (data?.Length !== undefined) view.setUint16(12, Number(data.Length), true);
  // 0x0e: u8
  if (data?.Flags !== undefined) view.setUint8(14, Number(data.Flags));
  // 0x0f: u8
  if (data?.PortNumber !== undefined) view.setUint8(15, Number(data.PortNumber));
  // 0x10: u64
  if (data?.MpioPathId !== undefined) view.setBigUint64(16, BigInt(data.MpioPathId), true);
  return buf;
}

export class MPIO_PASS_THROUGH_PATHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PassThrough(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get Version(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u16
  get Length(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u8
  get Flags(): number {
    return this.view.getUint8(14);
  }

  // 0x0f: u8
  get PortNumber(): number {
    return this.view.getUint8(15);
  }

  // 0x10: u64
  get MpioPathId(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x00: pointer
  set PassThrough(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set Version(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u16
  set Length(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u8
  set Flags(value: number) {
    this.view.setUint8(14, value);
  }

  // 0x0f: u8
  set PortNumber(value: number) {
    this.view.setUint8(15, value);
  }

  // 0x10: u64
  set MpioPathId(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.MPIO_PASS_THROUGH_PATH_DIRECT (size: 24)
 */
export interface MPIO_PASS_THROUGH_PATH_DIRECT {
  /** Windows.Win32.Storage.IscsiDisc.SCSI_PASS_THROUGH_DIRECT */
  PassThrough: Uint8Array | Deno.PointerValue;
  /** u32 */
  Version: number;
  /** u16 */
  Length: number;
  /** u8 */
  Flags: number;
  /** u8 */
  PortNumber: number;
  /** u64 */
  MpioPathId: bigint | number;
}

export const sizeofMPIO_PASS_THROUGH_PATH_DIRECT = 24;

export function allocMPIO_PASS_THROUGH_PATH_DIRECT(data?: Partial<MPIO_PASS_THROUGH_PATH_DIRECT>): Uint8Array {
  const buf = new Uint8Array(sizeofMPIO_PASS_THROUGH_PATH_DIRECT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PassThrough !== undefined) view.setBigUint64(0, data.PassThrough === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PassThrough))), true);
  // 0x08: u32
  if (data?.Version !== undefined) view.setUint32(8, Number(data.Version), true);
  // 0x0c: u16
  if (data?.Length !== undefined) view.setUint16(12, Number(data.Length), true);
  // 0x0e: u8
  if (data?.Flags !== undefined) view.setUint8(14, Number(data.Flags));
  // 0x0f: u8
  if (data?.PortNumber !== undefined) view.setUint8(15, Number(data.PortNumber));
  // 0x10: u64
  if (data?.MpioPathId !== undefined) view.setBigUint64(16, BigInt(data.MpioPathId), true);
  return buf;
}

export class MPIO_PASS_THROUGH_PATH_DIRECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PassThrough(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get Version(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u16
  get Length(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u8
  get Flags(): number {
    return this.view.getUint8(14);
  }

  // 0x0f: u8
  get PortNumber(): number {
    return this.view.getUint8(15);
  }

  // 0x10: u64
  get MpioPathId(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x00: pointer
  set PassThrough(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set Version(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u16
  set Length(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u8
  set Flags(value: number) {
    this.view.setUint8(14, value);
  }

  // 0x0f: u8
  set PortNumber(value: number) {
    this.view.setUint8(15, value);
  }

  // 0x10: u64
  set MpioPathId(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.MPIO_PASS_THROUGH_PATH_EX (size: 24)
 */
export interface MPIO_PASS_THROUGH_PATH_EX {
  /** u32 */
  PassThroughOffset: number;
  /** u32 */
  Version: number;
  /** u16 */
  Length: number;
  /** u8 */
  Flags: number;
  /** u8 */
  PortNumber: number;
  /** u64 */
  MpioPathId: bigint | number;
}

export const sizeofMPIO_PASS_THROUGH_PATH_EX = 24;

export function allocMPIO_PASS_THROUGH_PATH_EX(data?: Partial<MPIO_PASS_THROUGH_PATH_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofMPIO_PASS_THROUGH_PATH_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PassThroughOffset !== undefined) view.setUint32(0, Number(data.PassThroughOffset), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u16
  if (data?.Length !== undefined) view.setUint16(8, Number(data.Length), true);
  // 0x0a: u8
  if (data?.Flags !== undefined) view.setUint8(10, Number(data.Flags));
  // 0x0b: u8
  if (data?.PortNumber !== undefined) view.setUint8(11, Number(data.PortNumber));
  // 0x0c: pad4
  // 0x10: u64
  if (data?.MpioPathId !== undefined) view.setBigUint64(16, BigInt(data.MpioPathId), true);
  return buf;
}

export class MPIO_PASS_THROUGH_PATH_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PassThroughOffset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Version(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get Length(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u8
  get Flags(): number {
    return this.view.getUint8(10);
  }

  // 0x0b: u8
  get PortNumber(): number {
    return this.view.getUint8(11);
  }

  // 0x0c: pad4

  // 0x10: u64
  get MpioPathId(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x00: u32
  set PassThroughOffset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Version(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set Length(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u8
  set Flags(value: number) {
    this.view.setUint8(10, value);
  }

  // 0x0b: u8
  set PortNumber(value: number) {
    this.view.setUint8(11, value);
  }

  // 0x0c: pad4

  // 0x10: u64
  set MpioPathId(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.MPIO_PASS_THROUGH_PATH_DIRECT_EX (size: 24)
 */
export interface MPIO_PASS_THROUGH_PATH_DIRECT_EX {
  /** u32 */
  PassThroughOffset: number;
  /** u32 */
  Version: number;
  /** u16 */
  Length: number;
  /** u8 */
  Flags: number;
  /** u8 */
  PortNumber: number;
  /** u64 */
  MpioPathId: bigint | number;
}

export const sizeofMPIO_PASS_THROUGH_PATH_DIRECT_EX = 24;

export function allocMPIO_PASS_THROUGH_PATH_DIRECT_EX(data?: Partial<MPIO_PASS_THROUGH_PATH_DIRECT_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofMPIO_PASS_THROUGH_PATH_DIRECT_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PassThroughOffset !== undefined) view.setUint32(0, Number(data.PassThroughOffset), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u16
  if (data?.Length !== undefined) view.setUint16(8, Number(data.Length), true);
  // 0x0a: u8
  if (data?.Flags !== undefined) view.setUint8(10, Number(data.Flags));
  // 0x0b: u8
  if (data?.PortNumber !== undefined) view.setUint8(11, Number(data.PortNumber));
  // 0x0c: pad4
  // 0x10: u64
  if (data?.MpioPathId !== undefined) view.setBigUint64(16, BigInt(data.MpioPathId), true);
  return buf;
}

export class MPIO_PASS_THROUGH_PATH_DIRECT_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PassThroughOffset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Version(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get Length(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u8
  get Flags(): number {
    return this.view.getUint8(10);
  }

  // 0x0b: u8
  get PortNumber(): number {
    return this.view.getUint8(11);
  }

  // 0x0c: pad4

  // 0x10: u64
  get MpioPathId(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x00: u32
  set PassThroughOffset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Version(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set Length(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u8
  set Flags(value: number) {
    this.view.setUint8(10, value);
  }

  // 0x0b: u8
  set PortNumber(value: number) {
    this.view.setUint8(11, value);
  }

  // 0x0c: pad4

  // 0x10: u64
  set MpioPathId(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.SCSI_BUS_DATA (size: 8)
 */
export interface SCSI_BUS_DATA {
  /** u8 */
  NumberOfLogicalUnits: number;
  /** u8 */
  InitiatorBusId: number;
  /** u32 */
  InquiryDataOffset: number;
}

export const sizeofSCSI_BUS_DATA = 8;

export function allocSCSI_BUS_DATA(data?: Partial<SCSI_BUS_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSCSI_BUS_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.NumberOfLogicalUnits !== undefined) view.setUint8(0, Number(data.NumberOfLogicalUnits));
  // 0x01: u8
  if (data?.InitiatorBusId !== undefined) view.setUint8(1, Number(data.InitiatorBusId));
  // 0x02: u32
  if (data?.InquiryDataOffset !== undefined) view.setUint32(2, Number(data.InquiryDataOffset), true);
  // 0x06: pad2
  return buf;
}

export class SCSI_BUS_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get NumberOfLogicalUnits(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get InitiatorBusId(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u32
  get InquiryDataOffset(): number {
    return this.view.getUint32(2, true);
  }

  // 0x06: pad2

  // 0x00: u8
  set NumberOfLogicalUnits(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set InitiatorBusId(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u32
  set InquiryDataOffset(value: number) {
    this.view.setUint32(2, value, true);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.Storage.IscsiDisc.SCSI_ADAPTER_BUS_INFO (size: 16)
 */
export interface SCSI_ADAPTER_BUS_INFO {
  /** u8 */
  NumberOfBuses: number;
  /** array */
  BusData: Deno.PointerValue;
}

export const sizeofSCSI_ADAPTER_BUS_INFO = 16;

export function allocSCSI_ADAPTER_BUS_INFO(data?: Partial<SCSI_ADAPTER_BUS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSCSI_ADAPTER_BUS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.NumberOfBuses !== undefined) view.setUint8(0, Number(data.NumberOfBuses));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.BusData !== undefined) view.setBigUint64(8, data.BusData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BusData))), true);
  return buf;
}

export class SCSI_ADAPTER_BUS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get NumberOfBuses(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get BusData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set NumberOfBuses(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set BusData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type BOOLEAN = number;

/**
 * Windows.Win32.Storage.IscsiDisc.SCSI_INQUIRY_DATA (size: 32)
 */
export interface SCSI_INQUIRY_DATA {
  /** u8 */
  PathId: number;
  /** u8 */
  TargetId: number;
  /** u8 */
  Lun: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  DeviceClaimed: Uint8Array | Deno.PointerValue;
  /** u32 */
  InquiryDataLength: number;
  /** u32 */
  NextInquiryDataOffset: number;
  /** array */
  InquiryData: Deno.PointerValue;
}

export const sizeofSCSI_INQUIRY_DATA = 32;

export function allocSCSI_INQUIRY_DATA(data?: Partial<SCSI_INQUIRY_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSCSI_INQUIRY_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.PathId !== undefined) view.setUint8(0, Number(data.PathId));
  // 0x01: u8
  if (data?.TargetId !== undefined) view.setUint8(1, Number(data.TargetId));
  // 0x02: u8
  if (data?.Lun !== undefined) view.setUint8(2, Number(data.Lun));
  // 0x03: pad5
  // 0x08: pointer
  if (data?.DeviceClaimed !== undefined) view.setBigUint64(8, data.DeviceClaimed === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceClaimed))), true);
  // 0x10: u32
  if (data?.InquiryDataLength !== undefined) view.setUint32(16, Number(data.InquiryDataLength), true);
  // 0x14: u32
  if (data?.NextInquiryDataOffset !== undefined) view.setUint32(20, Number(data.NextInquiryDataOffset), true);
  // 0x18: pointer
  if (data?.InquiryData !== undefined) view.setBigUint64(24, data.InquiryData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InquiryData))), true);
  return buf;
}

export class SCSI_INQUIRY_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get PathId(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get TargetId(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get Lun(): number {
    return this.view.getUint8(2);
  }

  // 0x03: pad5

  // 0x08: pointer
  get DeviceClaimed(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get InquiryDataLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get NextInquiryDataOffset(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get InquiryData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set PathId(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set TargetId(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set Lun(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: pad5

  // 0x08: pointer
  set DeviceClaimed(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set InquiryDataLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set NextInquiryDataOffset(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set InquiryData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.SRB_IO_CONTROL (size: 32)
 */
export interface SRB_IO_CONTROL {
  /** u32 */
  HeaderLength: number;
  /** array */
  Signature: Deno.PointerValue;
  /** u32 */
  Timeout: number;
  /** u32 */
  ControlCode: number;
  /** u32 */
  ReturnCode: number;
  /** u32 */
  Length: number;
}

export const sizeofSRB_IO_CONTROL = 32;

export function allocSRB_IO_CONTROL(data?: Partial<SRB_IO_CONTROL>): Uint8Array {
  const buf = new Uint8Array(sizeofSRB_IO_CONTROL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.HeaderLength !== undefined) view.setUint32(0, Number(data.HeaderLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Signature !== undefined) view.setBigUint64(8, data.Signature === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Signature))), true);
  // 0x10: u32
  if (data?.Timeout !== undefined) view.setUint32(16, Number(data.Timeout), true);
  // 0x14: u32
  if (data?.ControlCode !== undefined) view.setUint32(20, Number(data.ControlCode), true);
  // 0x18: u32
  if (data?.ReturnCode !== undefined) view.setUint32(24, Number(data.ReturnCode), true);
  // 0x1c: u32
  if (data?.Length !== undefined) view.setUint32(28, Number(data.Length), true);
  return buf;
}

export class SRB_IO_CONTROLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get HeaderLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Signature(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get Timeout(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ControlCode(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get ReturnCode(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Length(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set HeaderLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Signature(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set Timeout(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ControlCode(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set ReturnCode(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Length(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.NVCACHE_REQUEST_BLOCK (size: 48)
 */
export interface NVCACHE_REQUEST_BLOCK {
  /** u32 */
  NRBSize: number;
  /** u16 */
  Function: number;
  /** u32 */
  NRBFlags: number;
  /** u32 */
  NRBStatus: number;
  /** u32 */
  Count: number;
  /** u64 */
  LBA: bigint | number;
  /** u32 */
  DataBufSize: number;
  /** u32 */
  NVCacheStatus: number;
  /** u32 */
  NVCacheSubStatus: number;
}

export const sizeofNVCACHE_REQUEST_BLOCK = 48;

export function allocNVCACHE_REQUEST_BLOCK(data?: Partial<NVCACHE_REQUEST_BLOCK>): Uint8Array {
  const buf = new Uint8Array(sizeofNVCACHE_REQUEST_BLOCK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NRBSize !== undefined) view.setUint32(0, Number(data.NRBSize), true);
  // 0x04: u16
  if (data?.Function !== undefined) view.setUint16(4, Number(data.Function), true);
  // 0x06: u32
  if (data?.NRBFlags !== undefined) view.setUint32(6, Number(data.NRBFlags), true);
  // 0x0a: u32
  if (data?.NRBStatus !== undefined) view.setUint32(10, Number(data.NRBStatus), true);
  // 0x0e: u32
  if (data?.Count !== undefined) view.setUint32(14, Number(data.Count), true);
  // 0x12: pad6
  // 0x18: u64
  if (data?.LBA !== undefined) view.setBigUint64(24, BigInt(data.LBA), true);
  // 0x20: u32
  if (data?.DataBufSize !== undefined) view.setUint32(32, Number(data.DataBufSize), true);
  // 0x24: u32
  if (data?.NVCacheStatus !== undefined) view.setUint32(36, Number(data.NVCacheStatus), true);
  // 0x28: u32
  if (data?.NVCacheSubStatus !== undefined) view.setUint32(40, Number(data.NVCacheSubStatus), true);
  // 0x2c: pad4
  return buf;
}

export class NVCACHE_REQUEST_BLOCKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NRBSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get Function(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u32
  get NRBFlags(): number {
    return this.view.getUint32(6, true);
  }

  // 0x0a: u32
  get NRBStatus(): number {
    return this.view.getUint32(10, true);
  }

  // 0x0e: u32
  get Count(): number {
    return this.view.getUint32(14, true);
  }

  // 0x12: pad6

  // 0x18: u64
  get LBA(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u32
  get DataBufSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get NVCacheStatus(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get NVCacheSubStatus(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: u32
  set NRBSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set Function(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u32
  set NRBFlags(value: number) {
    this.view.setUint32(6, value, true);
  }

  // 0x0a: u32
  set NRBStatus(value: number) {
    this.view.setUint32(10, value, true);
  }

  // 0x0e: u32
  set Count(value: number) {
    this.view.setUint32(14, value, true);
  }

  // 0x12: pad6

  // 0x18: u64
  set LBA(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u32
  set DataBufSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set NVCacheStatus(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set NVCacheSubStatus(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Storage.IscsiDisc.NV_FEATURE_PARAMETER (size: 24)
 */
export interface NV_FEATURE_PARAMETER {
  /** u16 */
  NVPowerModeEnabled: number;
  /** u16 */
  NVParameterReserv1: number;
  /** u16 */
  NVCmdEnabled: number;
  /** u16 */
  NVParameterReserv2: number;
  /** u16 */
  NVPowerModeVer: number;
  /** u16 */
  NVCmdVer: number;
  /** u32 */
  NVSize: number;
  /** u16 */
  NVReadSpeed: number;
  /** u16 */
  NVWrtSpeed: number;
  /** u32 */
  DeviceSpinUpTime: number;
}

export const sizeofNV_FEATURE_PARAMETER = 24;

export function allocNV_FEATURE_PARAMETER(data?: Partial<NV_FEATURE_PARAMETER>): Uint8Array {
  const buf = new Uint8Array(sizeofNV_FEATURE_PARAMETER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.NVPowerModeEnabled !== undefined) view.setUint16(0, Number(data.NVPowerModeEnabled), true);
  // 0x02: u16
  if (data?.NVParameterReserv1 !== undefined) view.setUint16(2, Number(data.NVParameterReserv1), true);
  // 0x04: u16
  if (data?.NVCmdEnabled !== undefined) view.setUint16(4, Number(data.NVCmdEnabled), true);
  // 0x06: u16
  if (data?.NVParameterReserv2 !== undefined) view.setUint16(6, Number(data.NVParameterReserv2), true);
  // 0x08: u16
  if (data?.NVPowerModeVer !== undefined) view.setUint16(8, Number(data.NVPowerModeVer), true);
  // 0x0a: u16
  if (data?.NVCmdVer !== undefined) view.setUint16(10, Number(data.NVCmdVer), true);
  // 0x0c: u32
  if (data?.NVSize !== undefined) view.setUint32(12, Number(data.NVSize), true);
  // 0x10: u16
  if (data?.NVReadSpeed !== undefined) view.setUint16(16, Number(data.NVReadSpeed), true);
  // 0x12: u16
  if (data?.NVWrtSpeed !== undefined) view.setUint16(18, Number(data.NVWrtSpeed), true);
  // 0x14: u32
  if (data?.DeviceSpinUpTime !== undefined) view.setUint32(20, Number(data.DeviceSpinUpTime), true);
  return buf;
}

export class NV_FEATURE_PARAMETERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get NVPowerModeEnabled(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get NVParameterReserv1(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get NVCmdEnabled(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get NVParameterReserv2(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u16
  get NVPowerModeVer(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get NVCmdVer(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u32
  get NVSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u16
  get NVReadSpeed(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get NVWrtSpeed(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: u32
  get DeviceSpinUpTime(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u16
  set NVPowerModeEnabled(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set NVParameterReserv1(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set NVCmdEnabled(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set NVParameterReserv2(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u16
  set NVPowerModeVer(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set NVCmdVer(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u32
  set NVSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u16
  set NVReadSpeed(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set NVWrtSpeed(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: u32
  set DeviceSpinUpTime(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.NVCACHE_HINT_PAYLOAD (size: 24)
 */
export interface NVCACHE_HINT_PAYLOAD {
  /** u8 */
  Command: number;
  /** u8 */
  Feature7_0: number;
  /** u8 */
  Feature15_8: number;
  /** u8 */
  Count15_8: number;
  /** u8 */
  LBA7_0: number;
  /** u8 */
  LBA15_8: number;
  /** u8 */
  LBA23_16: number;
  /** u8 */
  LBA31_24: number;
  /** u8 */
  LBA39_32: number;
  /** u8 */
  LBA47_40: number;
  /** u8 */
  Auxiliary7_0: number;
  /** u8 */
  Auxiliary23_16: number;
  /** array */
  Reserved: Deno.PointerValue;
}

export const sizeofNVCACHE_HINT_PAYLOAD = 24;

export function allocNVCACHE_HINT_PAYLOAD(data?: Partial<NVCACHE_HINT_PAYLOAD>): Uint8Array {
  const buf = new Uint8Array(sizeofNVCACHE_HINT_PAYLOAD);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Command !== undefined) view.setUint8(0, Number(data.Command));
  // 0x01: u8
  if (data?.Feature7_0 !== undefined) view.setUint8(1, Number(data.Feature7_0));
  // 0x02: u8
  if (data?.Feature15_8 !== undefined) view.setUint8(2, Number(data.Feature15_8));
  // 0x03: u8
  if (data?.Count15_8 !== undefined) view.setUint8(3, Number(data.Count15_8));
  // 0x04: u8
  if (data?.LBA7_0 !== undefined) view.setUint8(4, Number(data.LBA7_0));
  // 0x05: u8
  if (data?.LBA15_8 !== undefined) view.setUint8(5, Number(data.LBA15_8));
  // 0x06: u8
  if (data?.LBA23_16 !== undefined) view.setUint8(6, Number(data.LBA23_16));
  // 0x07: u8
  if (data?.LBA31_24 !== undefined) view.setUint8(7, Number(data.LBA31_24));
  // 0x08: u8
  if (data?.LBA39_32 !== undefined) view.setUint8(8, Number(data.LBA39_32));
  // 0x09: u8
  if (data?.LBA47_40 !== undefined) view.setUint8(9, Number(data.LBA47_40));
  // 0x0a: u8
  if (data?.Auxiliary7_0 !== undefined) view.setUint8(10, Number(data.Auxiliary7_0));
  // 0x0b: u8
  if (data?.Auxiliary23_16 !== undefined) view.setUint8(11, Number(data.Auxiliary23_16));
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(16, data.Reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved))), true);
  return buf;
}

export class NVCACHE_HINT_PAYLOADView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Command(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Feature7_0(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get Feature15_8(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get Count15_8(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u8
  get LBA7_0(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get LBA15_8(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get LBA23_16(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get LBA31_24(): number {
    return this.view.getUint8(7);
  }

  // 0x08: u8
  get LBA39_32(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get LBA47_40(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: u8
  get Auxiliary7_0(): number {
    return this.view.getUint8(10);
  }

  // 0x0b: u8
  get Auxiliary23_16(): number {
    return this.view.getUint8(11);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set Command(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Feature7_0(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set Feature15_8(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set Count15_8(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u8
  set LBA7_0(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set LBA15_8(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set LBA23_16(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set LBA31_24(value: number) {
    this.view.setUint8(7, value);
  }

  // 0x08: u8
  set LBA39_32(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set LBA47_40(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: u8
  set Auxiliary7_0(value: number) {
    this.view.setUint8(10, value);
  }

  // 0x0b: u8
  set Auxiliary23_16(value: number) {
    this.view.setUint8(11, value);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: bigint | number;
  /** u64 */
  Region: bigint | number;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _Flags_e__Union (size: 16)
 */
export interface _Flags_e__Union {
  /** u16 */
  AsWORD: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeof_Flags_e__Union = 16;

export function alloc_Flags_e__Union(data?: Partial<_Flags_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Flags_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.AsWORD !== undefined) view.setUint16(0, Number(data.AsWORD), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class _Flags_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get AsWORD(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set AsWORD(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.NV_SEP_CACHE_PARAMETER (size: 32)
 */
export interface NV_SEP_CACHE_PARAMETER {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** _Flags_e__Union */
  Flags: Uint8Array | Deno.PointerValue;
  /** u8 */
  WriteCacheType: number;
  /** u8 */
  WriteCacheTypeEffective: number;
  /** array */
  ParameterReserve1: Deno.PointerValue;
}

export const sizeofNV_SEP_CACHE_PARAMETER = 32;

export function allocNV_SEP_CACHE_PARAMETER(data?: Partial<NV_SEP_CACHE_PARAMETER>): Uint8Array {
  const buf = new Uint8Array(sizeofNV_SEP_CACHE_PARAMETER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.Flags !== undefined) view.setBigUint64(8, data.Flags === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Flags))), true);
  // 0x10: u8
  if (data?.WriteCacheType !== undefined) view.setUint8(16, Number(data.WriteCacheType));
  // 0x11: u8
  if (data?.WriteCacheTypeEffective !== undefined) view.setUint8(17, Number(data.WriteCacheTypeEffective));
  // 0x12: pad6
  // 0x18: pointer
  if (data?.ParameterReserve1 !== undefined) view.setBigUint64(24, data.ParameterReserve1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ParameterReserve1))), true);
  return buf;
}

export class NV_SEP_CACHE_PARAMETERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Flags(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u8
  get WriteCacheType(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u8
  get WriteCacheTypeEffective(): number {
    return this.view.getUint8(17);
  }

  // 0x12: pad6

  // 0x18: pointer
  get ParameterReserve1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Flags(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u8
  set WriteCacheType(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u8
  set WriteCacheTypeEffective(value: number) {
    this.view.setUint8(17, value);
  }

  // 0x12: pad6

  // 0x18: pointer
  set ParameterReserve1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.STORAGE_DIAGNOSTIC_MP_REQUEST (size: 40)
 */
export interface STORAGE_DIAGNOSTIC_MP_REQUEST {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.Storage.IscsiDisc.MP_STORAGE_DIAGNOSTIC_TARGET_TYPE */
  TargetType: MP_STORAGE_DIAGNOSTIC_TARGET_TYPE;
  /** Windows.Win32.Storage.IscsiDisc.MP_STORAGE_DIAGNOSTIC_LEVEL */
  Level: MP_STORAGE_DIAGNOSTIC_LEVEL;
  /** System.Guid */
  ProviderId: Uint8Array | Deno.PointerValue;
  /** u32 */
  BufferSize: number;
  /** u32 */
  Reserved: number;
  /** array */
  DataBuffer: Deno.PointerValue;
}

export const sizeofSTORAGE_DIAGNOSTIC_MP_REQUEST = 40;

export function allocSTORAGE_DIAGNOSTIC_MP_REQUEST(data?: Partial<STORAGE_DIAGNOSTIC_MP_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_DIAGNOSTIC_MP_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: i32
  if (data?.TargetType !== undefined) view.setInt32(8, Number(data.TargetType), true);
  // 0x0c: i32
  if (data?.Level !== undefined) view.setInt32(12, Number(data.Level), true);
  // 0x10: pointer
  if (data?.ProviderId !== undefined) view.setBigUint64(16, data.ProviderId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProviderId))), true);
  // 0x18: u32
  if (data?.BufferSize !== undefined) view.setUint32(24, Number(data.BufferSize), true);
  // 0x1c: u32
  if (data?.Reserved !== undefined) view.setUint32(28, Number(data.Reserved), true);
  // 0x20: pointer
  if (data?.DataBuffer !== undefined) view.setBigUint64(32, data.DataBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DataBuffer))), true);
  return buf;
}

export class STORAGE_DIAGNOSTIC_MP_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get TargetType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get Level(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get ProviderId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get BufferSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Reserved(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get DataBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set TargetType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set Level(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set ProviderId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set BufferSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Reserved(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set DataBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.MP_DEVICE_DATA_SET_RANGE (size: 16)
 */
export interface MP_DEVICE_DATA_SET_RANGE {
  /** i64 */
  StartingOffset: bigint | number;
  /** u64 */
  LengthInBytes: bigint | number;
}

export const sizeofMP_DEVICE_DATA_SET_RANGE = 16;

export function allocMP_DEVICE_DATA_SET_RANGE(data?: Partial<MP_DEVICE_DATA_SET_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofMP_DEVICE_DATA_SET_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.StartingOffset !== undefined) view.setBigInt64(0, BigInt(data.StartingOffset), true);
  // 0x08: u64
  if (data?.LengthInBytes !== undefined) view.setBigUint64(8, BigInt(data.LengthInBytes), true);
  return buf;
}

export class MP_DEVICE_DATA_SET_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get StartingOffset(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: u64
  get LengthInBytes(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: i64
  set StartingOffset(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: u64
  set LengthInBytes(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.DSM_NOTIFICATION_REQUEST_BLOCK (size: 40)
 */
export interface DSM_NOTIFICATION_REQUEST_BLOCK {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** u32 */
  NotifyFlags: number;
  /** u32 */
  DataSetProfile: number;
  /** array */
  Reserved: Deno.PointerValue;
  /** u32 */
  DataSetRangesCount: number;
  /** array */
  DataSetRanges: Deno.PointerValue;
}

export const sizeofDSM_NOTIFICATION_REQUEST_BLOCK = 40;

export function allocDSM_NOTIFICATION_REQUEST_BLOCK(data?: Partial<DSM_NOTIFICATION_REQUEST_BLOCK>): Uint8Array {
  const buf = new Uint8Array(sizeofDSM_NOTIFICATION_REQUEST_BLOCK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.NotifyFlags !== undefined) view.setUint32(8, Number(data.NotifyFlags), true);
  // 0x0c: u32
  if (data?.DataSetProfile !== undefined) view.setUint32(12, Number(data.DataSetProfile), true);
  // 0x10: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(16, data.Reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved))), true);
  // 0x18: u32
  if (data?.DataSetRangesCount !== undefined) view.setUint32(24, Number(data.DataSetRangesCount), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.DataSetRanges !== undefined) view.setBigUint64(32, data.DataSetRanges === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DataSetRanges))), true);
  return buf;
}

export class DSM_NOTIFICATION_REQUEST_BLOCKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Version(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NotifyFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get DataSetProfile(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get Reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get DataSetRangesCount(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get DataSetRanges(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Version(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NotifyFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set DataSetProfile(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set DataSetRangesCount(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set DataSetRanges(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.HYBRID_REQUEST_BLOCK (size: 24)
 */
export interface HYBRID_REQUEST_BLOCK {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  Function: number;
  /** u32 */
  Flags: number;
  /** u32 */
  DataBufferOffset: number;
  /** u32 */
  DataBufferLength: number;
}

export const sizeofHYBRID_REQUEST_BLOCK = 24;

export function allocHYBRID_REQUEST_BLOCK(data?: Partial<HYBRID_REQUEST_BLOCK>): Uint8Array {
  const buf = new Uint8Array(sizeofHYBRID_REQUEST_BLOCK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.Function !== undefined) view.setUint32(8, Number(data.Function), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.DataBufferOffset !== undefined) view.setUint32(16, Number(data.DataBufferOffset), true);
  // 0x14: u32
  if (data?.DataBufferLength !== undefined) view.setUint32(20, Number(data.DataBufferLength), true);
  return buf;
}

export class HYBRID_REQUEST_BLOCKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Function(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Flags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get DataBufferOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get DataBufferLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Function(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Flags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set DataBufferOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set DataBufferLength(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.NVCACHE_PRIORITY_LEVEL_DESCRIPTOR (size: 40)
 */
export interface NVCACHE_PRIORITY_LEVEL_DESCRIPTOR {
  /** u8 */
  PriorityLevel: number;
  /** array */
  Reserved0: Deno.PointerValue;
  /** u32 */
  ConsumedNVMSizeFraction: number;
  /** u32 */
  ConsumedMappingResourcesFraction: number;
  /** u32 */
  ConsumedNVMSizeForDirtyDataFraction: number;
  /** u32 */
  ConsumedMappingResourcesForDirtyDataFraction: number;
  /** u32 */
  Reserved1: number;
}

export const sizeofNVCACHE_PRIORITY_LEVEL_DESCRIPTOR = 40;

export function allocNVCACHE_PRIORITY_LEVEL_DESCRIPTOR(data?: Partial<NVCACHE_PRIORITY_LEVEL_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofNVCACHE_PRIORITY_LEVEL_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.PriorityLevel !== undefined) view.setUint8(0, Number(data.PriorityLevel));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Reserved0 !== undefined) view.setBigUint64(8, data.Reserved0 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved0))), true);
  // 0x10: u32
  if (data?.ConsumedNVMSizeFraction !== undefined) view.setUint32(16, Number(data.ConsumedNVMSizeFraction), true);
  // 0x14: u32
  if (data?.ConsumedMappingResourcesFraction !== undefined) view.setUint32(20, Number(data.ConsumedMappingResourcesFraction), true);
  // 0x18: u32
  if (data?.ConsumedNVMSizeForDirtyDataFraction !== undefined) view.setUint32(24, Number(data.ConsumedNVMSizeForDirtyDataFraction), true);
  // 0x1c: u32
  if (data?.ConsumedMappingResourcesForDirtyDataFraction !== undefined) view.setUint32(28, Number(data.ConsumedMappingResourcesForDirtyDataFraction), true);
  // 0x20: u32
  if (data?.Reserved1 !== undefined) view.setUint32(32, Number(data.Reserved1), true);
  // 0x24: pad4
  return buf;
}

export class NVCACHE_PRIORITY_LEVEL_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get PriorityLevel(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get Reserved0(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get ConsumedNVMSizeFraction(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ConsumedMappingResourcesFraction(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get ConsumedNVMSizeForDirtyDataFraction(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ConsumedMappingResourcesForDirtyDataFraction(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get Reserved1(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u8
  set PriorityLevel(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set Reserved0(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set ConsumedNVMSizeFraction(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ConsumedMappingResourcesFraction(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set ConsumedNVMSizeForDirtyDataFraction(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ConsumedMappingResourcesForDirtyDataFraction(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set Reserved1(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * _Attributes_e__Struct (size: 8)
 */
export interface _Attributes_e__Struct {
  /** u32 */
  _bitfield: number;
}

export const sizeof_Attributes_e__Struct = 8;

export function alloc_Attributes_e__Struct(data?: Partial<_Attributes_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Attributes_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

export class _Attributes_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get _bitfield(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set _bitfield(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * _SupportedCommands_e__Struct (size: 16)
 */
export interface _SupportedCommands_e__Struct {
  /** u32 */
  _bitfield: number;
  /** u32 */
  MaxEvictCommands: number;
  /** u32 */
  MaxLbaRangeCountForEvict: number;
  /** u32 */
  MaxLbaRangeCountForChangeLba: number;
}

export const sizeof_SupportedCommands_e__Struct = 16;

export function alloc_SupportedCommands_e__Struct(data?: Partial<_SupportedCommands_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_SupportedCommands_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: u32
  if (data?.MaxEvictCommands !== undefined) view.setUint32(4, Number(data.MaxEvictCommands), true);
  // 0x08: u32
  if (data?.MaxLbaRangeCountForEvict !== undefined) view.setUint32(8, Number(data.MaxLbaRangeCountForEvict), true);
  // 0x0c: u32
  if (data?.MaxLbaRangeCountForChangeLba !== undefined) view.setUint32(12, Number(data.MaxLbaRangeCountForChangeLba), true);
  return buf;
}

export class _SupportedCommands_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get _bitfield(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MaxEvictCommands(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get MaxLbaRangeCountForEvict(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get MaxLbaRangeCountForChangeLba(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set _bitfield(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MaxEvictCommands(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set MaxLbaRangeCountForEvict(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set MaxLbaRangeCountForChangeLba(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * _Priorities_e__Struct (size: 48)
 */
export interface _Priorities_e__Struct {
  /** u8 */
  PriorityLevelCount: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  MaxPriorityBehavior: Uint8Array | Deno.PointerValue;
  /** u8 */
  OptimalWriteGranularity: number;
  /** u8 */
  Reserved: number;
  /** u32 */
  DirtyThresholdLow: number;
  /** u32 */
  DirtyThresholdHigh: number;
  /** _SupportedCommands_e__Struct */
  SupportedCommands: Uint8Array | Deno.PointerValue;
  /** array */
  Priority: Deno.PointerValue;
}

export const sizeof_Priorities_e__Struct = 48;

export function alloc_Priorities_e__Struct(data?: Partial<_Priorities_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Priorities_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.PriorityLevelCount !== undefined) view.setUint8(0, Number(data.PriorityLevelCount));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.MaxPriorityBehavior !== undefined) view.setBigUint64(8, data.MaxPriorityBehavior === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MaxPriorityBehavior))), true);
  // 0x10: u8
  if (data?.OptimalWriteGranularity !== undefined) view.setUint8(16, Number(data.OptimalWriteGranularity));
  // 0x11: u8
  if (data?.Reserved !== undefined) view.setUint8(17, Number(data.Reserved));
  // 0x12: u32
  if (data?.DirtyThresholdLow !== undefined) view.setUint32(18, Number(data.DirtyThresholdLow), true);
  // 0x16: u32
  if (data?.DirtyThresholdHigh !== undefined) view.setUint32(22, Number(data.DirtyThresholdHigh), true);
  // 0x1a: pad6
  // 0x20: pointer
  if (data?.SupportedCommands !== undefined) view.setBigUint64(32, data.SupportedCommands === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SupportedCommands))), true);
  // 0x28: pointer
  if (data?.Priority !== undefined) view.setBigUint64(40, data.Priority === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Priority))), true);
  return buf;
}

export class _Priorities_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get PriorityLevelCount(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get MaxPriorityBehavior(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u8
  get OptimalWriteGranularity(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u8
  get Reserved(): number {
    return this.view.getUint8(17);
  }

  // 0x12: u32
  get DirtyThresholdLow(): number {
    return this.view.getUint32(18, true);
  }

  // 0x16: u32
  get DirtyThresholdHigh(): number {
    return this.view.getUint32(22, true);
  }

  // 0x1a: pad6

  // 0x20: pointer
  get SupportedCommands(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Priority(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set PriorityLevelCount(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set MaxPriorityBehavior(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u8
  set OptimalWriteGranularity(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u8
  set Reserved(value: number) {
    this.view.setUint8(17, value);
  }

  // 0x12: u32
  set DirtyThresholdLow(value: number) {
    this.view.setUint32(18, value, true);
  }

  // 0x16: u32
  set DirtyThresholdHigh(value: number) {
    this.view.setUint32(22, value, true);
  }

  // 0x1a: pad6

  // 0x20: pointer
  set SupportedCommands(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Priority(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.HYBRID_INFORMATION (size: 56)
 */
export interface HYBRID_INFORMATION {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  HybridSupported: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.IscsiDisc.NVCACHE_STATUS */
  Status: NVCACHE_STATUS;
  /** Windows.Win32.Storage.IscsiDisc.NVCACHE_TYPE */
  CacheTypeEffective: NVCACHE_TYPE;
  /** Windows.Win32.Storage.IscsiDisc.NVCACHE_TYPE */
  CacheTypeDefault: NVCACHE_TYPE;
  /** u32 */
  FractionBase: number;
  /** u64 */
  CacheSize: bigint | number;
  /** _Attributes_e__Struct */
  Attributes: Uint8Array | Deno.PointerValue;
  /** _Priorities_e__Struct */
  Priorities: Uint8Array | Deno.PointerValue;
}

export const sizeofHYBRID_INFORMATION = 56;

export function allocHYBRID_INFORMATION(data?: Partial<HYBRID_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofHYBRID_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.HybridSupported !== undefined) view.setBigUint64(8, data.HybridSupported === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HybridSupported))), true);
  // 0x10: i32
  if (data?.Status !== undefined) view.setInt32(16, Number(data.Status), true);
  // 0x14: i32
  if (data?.CacheTypeEffective !== undefined) view.setInt32(20, Number(data.CacheTypeEffective), true);
  // 0x18: i32
  if (data?.CacheTypeDefault !== undefined) view.setInt32(24, Number(data.CacheTypeDefault), true);
  // 0x1c: u32
  if (data?.FractionBase !== undefined) view.setUint32(28, Number(data.FractionBase), true);
  // 0x20: u64
  if (data?.CacheSize !== undefined) view.setBigUint64(32, BigInt(data.CacheSize), true);
  // 0x28: pointer
  if (data?.Attributes !== undefined) view.setBigUint64(40, data.Attributes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Attributes))), true);
  // 0x30: pointer
  if (data?.Priorities !== undefined) view.setBigUint64(48, data.Priorities === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Priorities))), true);
  return buf;
}

export class HYBRID_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get HybridSupported(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get Status(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get CacheTypeEffective(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get CacheTypeDefault(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u32
  get FractionBase(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u64
  get CacheSize(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: pointer
  get Attributes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get Priorities(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set HybridSupported(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set Status(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set CacheTypeEffective(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set CacheTypeDefault(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u32
  set FractionBase(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u64
  set CacheSize(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: pointer
  set Attributes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set Priorities(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.HYBRID_DIRTY_THRESHOLDS (size: 16)
 */
export interface HYBRID_DIRTY_THRESHOLDS {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  DirtyLowThreshold: number;
  /** u32 */
  DirtyHighThreshold: number;
}

export const sizeofHYBRID_DIRTY_THRESHOLDS = 16;

export function allocHYBRID_DIRTY_THRESHOLDS(data?: Partial<HYBRID_DIRTY_THRESHOLDS>): Uint8Array {
  const buf = new Uint8Array(sizeofHYBRID_DIRTY_THRESHOLDS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.DirtyLowThreshold !== undefined) view.setUint32(8, Number(data.DirtyLowThreshold), true);
  // 0x0c: u32
  if (data?.DirtyHighThreshold !== undefined) view.setUint32(12, Number(data.DirtyHighThreshold), true);
  return buf;
}

export class HYBRID_DIRTY_THRESHOLDSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get DirtyLowThreshold(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get DirtyHighThreshold(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set DirtyLowThreshold(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set DirtyHighThreshold(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.HYBRID_DEMOTE_BY_SIZE (size: 24)
 */
export interface HYBRID_DEMOTE_BY_SIZE {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u8 */
  SourcePriority: number;
  /** u8 */
  TargetPriority: number;
  /** u16 */
  Reserved0: number;
  /** u32 */
  Reserved1: number;
  /** u64 */
  LbaCount: bigint | number;
}

export const sizeofHYBRID_DEMOTE_BY_SIZE = 24;

export function allocHYBRID_DEMOTE_BY_SIZE(data?: Partial<HYBRID_DEMOTE_BY_SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofHYBRID_DEMOTE_BY_SIZE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u8
  if (data?.SourcePriority !== undefined) view.setUint8(8, Number(data.SourcePriority));
  // 0x09: u8
  if (data?.TargetPriority !== undefined) view.setUint8(9, Number(data.TargetPriority));
  // 0x0a: u16
  if (data?.Reserved0 !== undefined) view.setUint16(10, Number(data.Reserved0), true);
  // 0x0c: u32
  if (data?.Reserved1 !== undefined) view.setUint32(12, Number(data.Reserved1), true);
  // 0x10: u64
  if (data?.LbaCount !== undefined) view.setBigUint64(16, BigInt(data.LbaCount), true);
  return buf;
}

export class HYBRID_DEMOTE_BY_SIZEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u8
  get SourcePriority(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get TargetPriority(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: u16
  get Reserved0(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u32
  get Reserved1(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u64
  get LbaCount(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u8
  set SourcePriority(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set TargetPriority(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: u16
  set Reserved0(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u32
  set Reserved1(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u64
  set LbaCount(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.FIRMWARE_REQUEST_BLOCK (size: 24)
 */
export interface FIRMWARE_REQUEST_BLOCK {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  Function: number;
  /** u32 */
  Flags: number;
  /** u32 */
  DataBufferOffset: number;
  /** u32 */
  DataBufferLength: number;
}

export const sizeofFIRMWARE_REQUEST_BLOCK = 24;

export function allocFIRMWARE_REQUEST_BLOCK(data?: Partial<FIRMWARE_REQUEST_BLOCK>): Uint8Array {
  const buf = new Uint8Array(sizeofFIRMWARE_REQUEST_BLOCK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.Function !== undefined) view.setUint32(8, Number(data.Function), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.DataBufferOffset !== undefined) view.setUint32(16, Number(data.DataBufferOffset), true);
  // 0x14: u32
  if (data?.DataBufferLength !== undefined) view.setUint32(20, Number(data.DataBufferLength), true);
  return buf;
}

export class FIRMWARE_REQUEST_BLOCKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Function(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Flags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get DataBufferOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get DataBufferLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Function(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Flags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set DataBufferOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set DataBufferLength(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * _Revision_e__Union (size: 16)
 */
export interface _Revision_e__Union {
  /** array */
  Info: Deno.PointerValue;
  /** u64 */
  AsUlonglong: bigint | number;
}

export const sizeof_Revision_e__Union = 16;

export function alloc_Revision_e__Union(data?: Partial<_Revision_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Revision_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Info !== undefined) view.setBigUint64(0, data.Info === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Info))), true);
  // 0x08: u64
  if (data?.AsUlonglong !== undefined) view.setBigUint64(8, BigInt(data.AsUlonglong), true);
  return buf;
}

export class _Revision_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Info(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u64
  get AsUlonglong(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: pointer
  set Info(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u64
  set AsUlonglong(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.STORAGE_FIRMWARE_SLOT_INFO (size: 32)
 */
export interface STORAGE_FIRMWARE_SLOT_INFO {
  /** u8 */
  SlotNumber: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  ReadOnly: Uint8Array | Deno.PointerValue;
  /** array */
  Reserved: Deno.PointerValue;
  /** _Revision_e__Union */
  Revision: Uint8Array | Deno.PointerValue;
}

export const sizeofSTORAGE_FIRMWARE_SLOT_INFO = 32;

export function allocSTORAGE_FIRMWARE_SLOT_INFO(data?: Partial<STORAGE_FIRMWARE_SLOT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_FIRMWARE_SLOT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.SlotNumber !== undefined) view.setUint8(0, Number(data.SlotNumber));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.ReadOnly !== undefined) view.setBigUint64(8, data.ReadOnly === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReadOnly))), true);
  // 0x10: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(16, data.Reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved))), true);
  // 0x18: pointer
  if (data?.Revision !== undefined) view.setBigUint64(24, data.Revision === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Revision))), true);
  return buf;
}

export class STORAGE_FIRMWARE_SLOT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get SlotNumber(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get ReadOnly(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Revision(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set SlotNumber(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set ReadOnly(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Revision(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.STORAGE_FIRMWARE_SLOT_INFO_V2 (size: 32)
 */
export interface STORAGE_FIRMWARE_SLOT_INFO_V2 {
  /** u8 */
  SlotNumber: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  ReadOnly: Uint8Array | Deno.PointerValue;
  /** array */
  Reserved: Deno.PointerValue;
  /** array */
  Revision: Deno.PointerValue;
}

export const sizeofSTORAGE_FIRMWARE_SLOT_INFO_V2 = 32;

export function allocSTORAGE_FIRMWARE_SLOT_INFO_V2(data?: Partial<STORAGE_FIRMWARE_SLOT_INFO_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_FIRMWARE_SLOT_INFO_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.SlotNumber !== undefined) view.setUint8(0, Number(data.SlotNumber));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.ReadOnly !== undefined) view.setBigUint64(8, data.ReadOnly === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReadOnly))), true);
  // 0x10: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(16, data.Reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved))), true);
  // 0x18: pointer
  if (data?.Revision !== undefined) view.setBigUint64(24, data.Revision === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Revision))), true);
  return buf;
}

export class STORAGE_FIRMWARE_SLOT_INFO_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get SlotNumber(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get ReadOnly(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Revision(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set SlotNumber(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set ReadOnly(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Revision(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.STORAGE_FIRMWARE_INFO (size: 32)
 */
export interface STORAGE_FIRMWARE_INFO {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  UpgradeSupport: Uint8Array | Deno.PointerValue;
  /** u8 */
  SlotCount: number;
  /** u8 */
  ActiveSlot: number;
  /** u8 */
  PendingActivateSlot: number;
  /** u32 */
  Reserved: number;
  /** array */
  Slot: Deno.PointerValue;
}

export const sizeofSTORAGE_FIRMWARE_INFO = 32;

export function allocSTORAGE_FIRMWARE_INFO(data?: Partial<STORAGE_FIRMWARE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_FIRMWARE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.UpgradeSupport !== undefined) view.setBigUint64(8, data.UpgradeSupport === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UpgradeSupport))), true);
  // 0x10: u8
  if (data?.SlotCount !== undefined) view.setUint8(16, Number(data.SlotCount));
  // 0x11: u8
  if (data?.ActiveSlot !== undefined) view.setUint8(17, Number(data.ActiveSlot));
  // 0x12: u8
  if (data?.PendingActivateSlot !== undefined) view.setUint8(18, Number(data.PendingActivateSlot));
  // 0x13: u32
  if (data?.Reserved !== undefined) view.setUint32(19, Number(data.Reserved), true);
  // 0x17: pad1
  // 0x18: pointer
  if (data?.Slot !== undefined) view.setBigUint64(24, data.Slot === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Slot))), true);
  return buf;
}

export class STORAGE_FIRMWARE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get UpgradeSupport(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u8
  get SlotCount(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u8
  get ActiveSlot(): number {
    return this.view.getUint8(17);
  }

  // 0x12: u8
  get PendingActivateSlot(): number {
    return this.view.getUint8(18);
  }

  // 0x13: u32
  get Reserved(): number {
    return this.view.getUint32(19, true);
  }

  // 0x17: pad1

  // 0x18: pointer
  get Slot(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set UpgradeSupport(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u8
  set SlotCount(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u8
  set ActiveSlot(value: number) {
    this.view.setUint8(17, value);
  }

  // 0x12: u8
  set PendingActivateSlot(value: number) {
    this.view.setUint8(18, value);
  }

  // 0x13: u32
  set Reserved(value: number) {
    this.view.setUint32(19, value, true);
  }

  // 0x17: pad1

  // 0x18: pointer
  set Slot(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.STORAGE_FIRMWARE_INFO_V2 (size: 56)
 */
export interface STORAGE_FIRMWARE_INFO_V2 {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  UpgradeSupport: Uint8Array | Deno.PointerValue;
  /** u8 */
  SlotCount: number;
  /** u8 */
  ActiveSlot: number;
  /** u8 */
  PendingActivateSlot: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  FirmwareShared: Uint8Array | Deno.PointerValue;
  /** array */
  Reserved: Deno.PointerValue;
  /** u32 */
  ImagePayloadAlignment: number;
  /** u32 */
  ImagePayloadMaxSize: number;
  /** array */
  Slot: Deno.PointerValue;
}

export const sizeofSTORAGE_FIRMWARE_INFO_V2 = 56;

export function allocSTORAGE_FIRMWARE_INFO_V2(data?: Partial<STORAGE_FIRMWARE_INFO_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_FIRMWARE_INFO_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.UpgradeSupport !== undefined) view.setBigUint64(8, data.UpgradeSupport === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UpgradeSupport))), true);
  // 0x10: u8
  if (data?.SlotCount !== undefined) view.setUint8(16, Number(data.SlotCount));
  // 0x11: u8
  if (data?.ActiveSlot !== undefined) view.setUint8(17, Number(data.ActiveSlot));
  // 0x12: u8
  if (data?.PendingActivateSlot !== undefined) view.setUint8(18, Number(data.PendingActivateSlot));
  // 0x13: pad5
  // 0x18: pointer
  if (data?.FirmwareShared !== undefined) view.setBigUint64(24, data.FirmwareShared === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FirmwareShared))), true);
  // 0x20: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(32, data.Reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved))), true);
  // 0x28: u32
  if (data?.ImagePayloadAlignment !== undefined) view.setUint32(40, Number(data.ImagePayloadAlignment), true);
  // 0x2c: u32
  if (data?.ImagePayloadMaxSize !== undefined) view.setUint32(44, Number(data.ImagePayloadMaxSize), true);
  // 0x30: pointer
  if (data?.Slot !== undefined) view.setBigUint64(48, data.Slot === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Slot))), true);
  return buf;
}

export class STORAGE_FIRMWARE_INFO_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get UpgradeSupport(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u8
  get SlotCount(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u8
  get ActiveSlot(): number {
    return this.view.getUint8(17);
  }

  // 0x12: u8
  get PendingActivateSlot(): number {
    return this.view.getUint8(18);
  }

  // 0x13: pad5

  // 0x18: pointer
  get FirmwareShared(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get ImagePayloadAlignment(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get ImagePayloadMaxSize(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get Slot(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set UpgradeSupport(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u8
  set SlotCount(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u8
  set ActiveSlot(value: number) {
    this.view.setUint8(17, value);
  }

  // 0x12: u8
  set PendingActivateSlot(value: number) {
    this.view.setUint8(18, value);
  }

  // 0x13: pad5

  // 0x18: pointer
  set FirmwareShared(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set ImagePayloadAlignment(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set ImagePayloadMaxSize(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set Slot(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.STORAGE_FIRMWARE_DOWNLOAD (size: 32)
 */
export interface STORAGE_FIRMWARE_DOWNLOAD {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u64 */
  Offset: bigint | number;
  /** u64 */
  BufferSize: bigint | number;
  /** array */
  ImageBuffer: Deno.PointerValue;
}

export const sizeofSTORAGE_FIRMWARE_DOWNLOAD = 32;

export function allocSTORAGE_FIRMWARE_DOWNLOAD(data?: Partial<STORAGE_FIRMWARE_DOWNLOAD>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_FIRMWARE_DOWNLOAD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u64
  if (data?.Offset !== undefined) view.setBigUint64(8, BigInt(data.Offset), true);
  // 0x10: u64
  if (data?.BufferSize !== undefined) view.setBigUint64(16, BigInt(data.BufferSize), true);
  // 0x18: pointer
  if (data?.ImageBuffer !== undefined) view.setBigUint64(24, data.ImageBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ImageBuffer))), true);
  return buf;
}

export class STORAGE_FIRMWARE_DOWNLOADView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get Offset(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get BufferSize(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get ImageBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set Offset(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set BufferSize(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set ImageBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.STORAGE_FIRMWARE_DOWNLOAD_V2 (size: 56)
 */
export interface STORAGE_FIRMWARE_DOWNLOAD_V2 {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u64 */
  Offset: bigint | number;
  /** u64 */
  BufferSize: bigint | number;
  /** u8 */
  Slot: number;
  /** array */
  Reserved: Deno.PointerValue;
  /** u32 */
  ImageSize: number;
  /** array */
  ImageBuffer: Deno.PointerValue;
}

export const sizeofSTORAGE_FIRMWARE_DOWNLOAD_V2 = 56;

export function allocSTORAGE_FIRMWARE_DOWNLOAD_V2(data?: Partial<STORAGE_FIRMWARE_DOWNLOAD_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_FIRMWARE_DOWNLOAD_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u64
  if (data?.Offset !== undefined) view.setBigUint64(8, BigInt(data.Offset), true);
  // 0x10: u64
  if (data?.BufferSize !== undefined) view.setBigUint64(16, BigInt(data.BufferSize), true);
  // 0x18: u8
  if (data?.Slot !== undefined) view.setUint8(24, Number(data.Slot));
  // 0x19: pad7
  // 0x20: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(32, data.Reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved))), true);
  // 0x28: u32
  if (data?.ImageSize !== undefined) view.setUint32(40, Number(data.ImageSize), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.ImageBuffer !== undefined) view.setBigUint64(48, data.ImageBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ImageBuffer))), true);
  return buf;
}

export class STORAGE_FIRMWARE_DOWNLOAD_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get Offset(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get BufferSize(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u8
  get Slot(): number {
    return this.view.getUint8(24);
  }

  // 0x19: pad7

  // 0x20: pointer
  get Reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get ImageSize(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get ImageBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set Offset(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set BufferSize(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u8
  set Slot(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: pad7

  // 0x20: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set ImageSize(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set ImageBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.STORAGE_FIRMWARE_ACTIVATE (size: 24)
 */
export interface STORAGE_FIRMWARE_ACTIVATE {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u8 */
  SlotToActivate: number;
  /** array */
  Reserved0: Deno.PointerValue;
}

export const sizeofSTORAGE_FIRMWARE_ACTIVATE = 24;

export function allocSTORAGE_FIRMWARE_ACTIVATE(data?: Partial<STORAGE_FIRMWARE_ACTIVATE>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_FIRMWARE_ACTIVATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u8
  if (data?.SlotToActivate !== undefined) view.setUint8(8, Number(data.SlotToActivate));
  // 0x09: pad7
  // 0x10: pointer
  if (data?.Reserved0 !== undefined) view.setBigUint64(16, data.Reserved0 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved0))), true);
  return buf;
}

export class STORAGE_FIRMWARE_ACTIVATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u8
  get SlotToActivate(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x10: pointer
  get Reserved0(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u8
  set SlotToActivate(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7

  // 0x10: pointer
  set Reserved0(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.IO_SCSI_CAPABILITIES (size: 48)
 */
export interface IO_SCSI_CAPABILITIES {
  /** u32 */
  Length: number;
  /** u32 */
  MaximumTransferLength: number;
  /** u32 */
  MaximumPhysicalPages: number;
  /** u32 */
  SupportedAsynchronousEvents: number;
  /** u32 */
  AlignmentMask: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  TaggedQueuing: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  AdapterScansDown: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  AdapterUsesPio: Uint8Array | Deno.PointerValue;
}

export const sizeofIO_SCSI_CAPABILITIES = 48;

export function allocIO_SCSI_CAPABILITIES(data?: Partial<IO_SCSI_CAPABILITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofIO_SCSI_CAPABILITIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: u32
  if (data?.MaximumTransferLength !== undefined) view.setUint32(4, Number(data.MaximumTransferLength), true);
  // 0x08: u32
  if (data?.MaximumPhysicalPages !== undefined) view.setUint32(8, Number(data.MaximumPhysicalPages), true);
  // 0x0c: u32
  if (data?.SupportedAsynchronousEvents !== undefined) view.setUint32(12, Number(data.SupportedAsynchronousEvents), true);
  // 0x10: u32
  if (data?.AlignmentMask !== undefined) view.setUint32(16, Number(data.AlignmentMask), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.TaggedQueuing !== undefined) view.setBigUint64(24, data.TaggedQueuing === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TaggedQueuing))), true);
  // 0x20: pointer
  if (data?.AdapterScansDown !== undefined) view.setBigUint64(32, data.AdapterScansDown === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AdapterScansDown))), true);
  // 0x28: pointer
  if (data?.AdapterUsesPio !== undefined) view.setBigUint64(40, data.AdapterUsesPio === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AdapterUsesPio))), true);
  return buf;
}

export class IO_SCSI_CAPABILITIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MaximumTransferLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get MaximumPhysicalPages(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SupportedAsynchronousEvents(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get AlignmentMask(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get TaggedQueuing(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get AdapterScansDown(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get AdapterUsesPio(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MaximumTransferLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set MaximumPhysicalPages(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SupportedAsynchronousEvents(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set AlignmentMask(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set TaggedQueuing(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set AdapterScansDown(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set AdapterUsesPio(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.SCSI_ADDRESS (size: 8)
 */
export interface SCSI_ADDRESS {
  /** u32 */
  Length: number;
  /** u8 */
  PortNumber: number;
  /** u8 */
  PathId: number;
  /** u8 */
  TargetId: number;
  /** u8 */
  Lun: number;
}

export const sizeofSCSI_ADDRESS = 8;

export function allocSCSI_ADDRESS(data?: Partial<SCSI_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofSCSI_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: u8
  if (data?.PortNumber !== undefined) view.setUint8(4, Number(data.PortNumber));
  // 0x05: u8
  if (data?.PathId !== undefined) view.setUint8(5, Number(data.PathId));
  // 0x06: u8
  if (data?.TargetId !== undefined) view.setUint8(6, Number(data.TargetId));
  // 0x07: u8
  if (data?.Lun !== undefined) view.setUint8(7, Number(data.Lun));
  return buf;
}

export class SCSI_ADDRESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u8
  get PortNumber(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get PathId(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get TargetId(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get Lun(): number {
    return this.view.getUint8(7);
  }

  // 0x00: u32
  set Length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u8
  set PortNumber(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set PathId(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set TargetId(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set Lun(value: number) {
    this.view.setUint8(7, value);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.DUMP_POINTERS_VERSION (size: 8)
 */
export interface DUMP_POINTERS_VERSION {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
}

export const sizeofDUMP_POINTERS_VERSION = 8;

export function allocDUMP_POINTERS_VERSION(data?: Partial<DUMP_POINTERS_VERSION>): Uint8Array {
  const buf = new Uint8Array(sizeofDUMP_POINTERS_VERSION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  return buf;
}

export class DUMP_POINTERS_VERSIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class _u_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwValue(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwValue(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue;
  /** i64 */
  QuadPart: bigint | number;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.u))), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

export class LARGE_INTEGERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get u(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i64
  get QuadPart(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set u(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i64
  set QuadPart(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.DUMP_POINTERS (size: 80)
 */
export interface DUMP_POINTERS {
  /** ptr */
  AdapterObject: Deno.PointerValue | Uint8Array;
  /** ptr */
  MappedRegisterBase: Deno.PointerValue | Uint8Array;
  /** ptr */
  DumpData: Deno.PointerValue | Uint8Array;
  /** ptr */
  CommonBufferVa: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  CommonBufferPa: Uint8Array | Deno.PointerValue;
  /** u32 */
  CommonBufferSize: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  AllocateCommonBuffers: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  UseDiskDump: Uint8Array | Deno.PointerValue;
  /** array */
  Spare1: Deno.PointerValue;
  /** ptr */
  DeviceObject: Deno.PointerValue | Uint8Array;
}

export const sizeofDUMP_POINTERS = 80;

export function allocDUMP_POINTERS(data?: Partial<DUMP_POINTERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDUMP_POINTERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AdapterObject !== undefined) view.setBigUint64(0, data.AdapterObject === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AdapterObject))), true);
  // 0x08: pointer
  if (data?.MappedRegisterBase !== undefined) view.setBigUint64(8, data.MappedRegisterBase === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MappedRegisterBase))), true);
  // 0x10: pointer
  if (data?.DumpData !== undefined) view.setBigUint64(16, data.DumpData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DumpData))), true);
  // 0x18: pointer
  if (data?.CommonBufferVa !== undefined) view.setBigUint64(24, data.CommonBufferVa === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CommonBufferVa))), true);
  // 0x20: pointer
  if (data?.CommonBufferPa !== undefined) view.setBigUint64(32, data.CommonBufferPa === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CommonBufferPa))), true);
  // 0x28: u32
  if (data?.CommonBufferSize !== undefined) view.setUint32(40, Number(data.CommonBufferSize), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.AllocateCommonBuffers !== undefined) view.setBigUint64(48, data.AllocateCommonBuffers === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AllocateCommonBuffers))), true);
  // 0x38: pointer
  if (data?.UseDiskDump !== undefined) view.setBigUint64(56, data.UseDiskDump === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UseDiskDump))), true);
  // 0x40: pointer
  if (data?.Spare1 !== undefined) view.setBigUint64(64, data.Spare1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Spare1))), true);
  // 0x48: pointer
  if (data?.DeviceObject !== undefined) view.setBigUint64(72, data.DeviceObject === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceObject))), true);
  return buf;
}

export class DUMP_POINTERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AdapterObject(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get MappedRegisterBase(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get DumpData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get CommonBufferVa(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get CommonBufferPa(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get CommonBufferSize(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get AllocateCommonBuffers(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get UseDiskDump(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get Spare1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get DeviceObject(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set AdapterObject(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set MappedRegisterBase(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set DumpData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set CommonBufferVa(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set CommonBufferPa(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set CommonBufferSize(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set AllocateCommonBuffers(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set UseDiskDump(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set Spare1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set DeviceObject(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.DUMP_POINTERS_EX (size: 112)
 */
export interface DUMP_POINTERS_EX {
  /** Windows.Win32.Storage.IscsiDisc.DUMP_POINTERS_VERSION */
  Header: Uint8Array | Deno.PointerValue;
  /** ptr */
  DumpData: Deno.PointerValue | Uint8Array;
  /** ptr */
  CommonBufferVa: Deno.PointerValue | Uint8Array;
  /** u32 */
  CommonBufferSize: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  AllocateCommonBuffers: Uint8Array | Deno.PointerValue;
  /** ptr */
  DeviceObject: Deno.PointerValue | Uint8Array;
  /** ptr */
  DriverList: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwPortFlags: number;
  /** u32 */
  MaxDeviceDumpSectionSize: number;
  /** u32 */
  MaxDeviceDumpLevel: number;
  /** u32 */
  MaxTransferSize: number;
  /** ptr */
  AdapterObject: Deno.PointerValue | Uint8Array;
  /** ptr */
  MappedRegisterBase: Deno.PointerValue | Uint8Array;
  /** ptr */
  DeviceReady: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Storage.IscsiDisc.PDUMP_DEVICE_POWERON_ROUTINE */
  DumpDevicePowerOn: Uint8Array | Deno.PointerValue;
  /** ptr */
  DumpDevicePowerOnContext: Deno.PointerValue | Uint8Array;
}

export const sizeofDUMP_POINTERS_EX = 112;

export function allocDUMP_POINTERS_EX(data?: Partial<DUMP_POINTERS_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofDUMP_POINTERS_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.DumpData !== undefined) view.setBigUint64(8, data.DumpData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DumpData))), true);
  // 0x10: pointer
  if (data?.CommonBufferVa !== undefined) view.setBigUint64(16, data.CommonBufferVa === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CommonBufferVa))), true);
  // 0x18: u32
  if (data?.CommonBufferSize !== undefined) view.setUint32(24, Number(data.CommonBufferSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.AllocateCommonBuffers !== undefined) view.setBigUint64(32, data.AllocateCommonBuffers === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AllocateCommonBuffers))), true);
  // 0x28: pointer
  if (data?.DeviceObject !== undefined) view.setBigUint64(40, data.DeviceObject === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceObject))), true);
  // 0x30: pointer
  if (data?.DriverList !== undefined) view.setBigUint64(48, data.DriverList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DriverList))), true);
  // 0x38: u32
  if (data?.dwPortFlags !== undefined) view.setUint32(56, Number(data.dwPortFlags), true);
  // 0x3c: u32
  if (data?.MaxDeviceDumpSectionSize !== undefined) view.setUint32(60, Number(data.MaxDeviceDumpSectionSize), true);
  // 0x40: u32
  if (data?.MaxDeviceDumpLevel !== undefined) view.setUint32(64, Number(data.MaxDeviceDumpLevel), true);
  // 0x44: u32
  if (data?.MaxTransferSize !== undefined) view.setUint32(68, Number(data.MaxTransferSize), true);
  // 0x48: pointer
  if (data?.AdapterObject !== undefined) view.setBigUint64(72, data.AdapterObject === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AdapterObject))), true);
  // 0x50: pointer
  if (data?.MappedRegisterBase !== undefined) view.setBigUint64(80, data.MappedRegisterBase === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MappedRegisterBase))), true);
  // 0x58: pointer
  if (data?.DeviceReady !== undefined) view.setBigUint64(88, data.DeviceReady === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceReady))), true);
  // 0x60: pointer
  if (data?.DumpDevicePowerOn !== undefined) view.setBigUint64(96, data.DumpDevicePowerOn === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DumpDevicePowerOn))), true);
  // 0x68: pointer
  if (data?.DumpDevicePowerOnContext !== undefined) view.setBigUint64(104, data.DumpDevicePowerOnContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DumpDevicePowerOnContext))), true);
  return buf;
}

export class DUMP_POINTERS_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get DumpData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get CommonBufferVa(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get CommonBufferSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get AllocateCommonBuffers(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get DeviceObject(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get DriverList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get dwPortFlags(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get MaxDeviceDumpSectionSize(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get MaxDeviceDumpLevel(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get MaxTransferSize(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: pointer
  get AdapterObject(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get MappedRegisterBase(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get DeviceReady(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get DumpDevicePowerOn(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get DumpDevicePowerOnContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set DumpData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set CommonBufferVa(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set CommonBufferSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set AllocateCommonBuffers(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set DeviceObject(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set DriverList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set dwPortFlags(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set MaxDeviceDumpSectionSize(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set MaxDeviceDumpLevel(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set MaxTransferSize(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: pointer
  set AdapterObject(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set MappedRegisterBase(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set DeviceReady(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set DumpDevicePowerOn(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set DumpDevicePowerOnContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.DUMP_DRIVER (size: 24)
 */
export interface DUMP_DRIVER {
  /** ptr */
  DumpDriverList: Deno.PointerValue | Uint8Array;
  /** array */
  DriverName: Deno.PointerValue;
  /** array */
  BaseName: Deno.PointerValue;
}

export const sizeofDUMP_DRIVER = 24;

export function allocDUMP_DRIVER(data?: Partial<DUMP_DRIVER>): Uint8Array {
  const buf = new Uint8Array(sizeofDUMP_DRIVER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DumpDriverList !== undefined) view.setBigUint64(0, data.DumpDriverList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DumpDriverList))), true);
  // 0x08: pointer
  if (data?.DriverName !== undefined) view.setBigUint64(8, data.DriverName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DriverName))), true);
  // 0x10: pointer
  if (data?.BaseName !== undefined) view.setBigUint64(16, data.BaseName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BaseName))), true);
  return buf;
}

export class DUMP_DRIVERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DumpDriverList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get DriverName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get BaseName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set DumpDriverList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set DriverName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set BaseName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.NTSCSI_UNICODE_STRING (size: 16)
 */
export interface NTSCSI_UNICODE_STRING {
  /** u16 */
  Length: number;
  /** u16 */
  MaximumLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  Buffer: string | null | Uint8Array | Uint16Array;
}

export const sizeofNTSCSI_UNICODE_STRING = 16;

export function allocNTSCSI_UNICODE_STRING(data?: Partial<NTSCSI_UNICODE_STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofNTSCSI_UNICODE_STRING);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: u16
  if (data?.MaximumLength !== undefined) view.setUint16(2, Number(data.MaximumLength), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.Buffer !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Buffer);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class NTSCSI_UNICODE_STRINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Length(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get MaximumLength(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get Buffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set Length(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set MaximumLength(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set Buffer(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.DUMP_DRIVER_EX (size: 32)
 */
export interface DUMP_DRIVER_EX {
  /** ptr */
  DumpDriverList: Deno.PointerValue | Uint8Array;
  /** array */
  DriverName: Deno.PointerValue;
  /** array */
  BaseName: Deno.PointerValue;
  /** Windows.Win32.Storage.IscsiDisc.NTSCSI_UNICODE_STRING */
  DriverFullPath: Uint8Array | Deno.PointerValue;
}

export const sizeofDUMP_DRIVER_EX = 32;

export function allocDUMP_DRIVER_EX(data?: Partial<DUMP_DRIVER_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofDUMP_DRIVER_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DumpDriverList !== undefined) view.setBigUint64(0, data.DumpDriverList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DumpDriverList))), true);
  // 0x08: pointer
  if (data?.DriverName !== undefined) view.setBigUint64(8, data.DriverName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DriverName))), true);
  // 0x10: pointer
  if (data?.BaseName !== undefined) view.setBigUint64(16, data.BaseName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BaseName))), true);
  // 0x18: pointer
  if (data?.DriverFullPath !== undefined) view.setBigUint64(24, data.DriverFullPath === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DriverFullPath))), true);
  return buf;
}

export class DUMP_DRIVER_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DumpDriverList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get DriverName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get BaseName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get DriverFullPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set DumpDriverList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set DriverName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set BaseName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set DriverFullPath(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Flags_e__Struct (size: 8)
 */
export interface _Flags_e__Struct {
  /** u32 */
  _bitfield: number;
}

export const sizeof_Flags_e__Struct = 8;

export function alloc_Flags_e__Struct(data?: Partial<_Flags_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Flags_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

export class _Flags_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get _bitfield(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set _bitfield(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Storage.IscsiDisc.STORAGE_ENDURANCE_INFO (size: 40)
 */
export interface STORAGE_ENDURANCE_INFO {
  /** u32 */
  ValidFields: number;
  /** u32 */
  GroupId: number;
  /** _Flags_e__Struct */
  Flags: Uint8Array | Deno.PointerValue;
  /** u32 */
  LifePercentage: number;
  /** array */
  BytesReadCount: Deno.PointerValue;
  /** array */
  ByteWriteCount: Deno.PointerValue;
}

export const sizeofSTORAGE_ENDURANCE_INFO = 40;

export function allocSTORAGE_ENDURANCE_INFO(data?: Partial<STORAGE_ENDURANCE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_ENDURANCE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ValidFields !== undefined) view.setUint32(0, Number(data.ValidFields), true);
  // 0x04: u32
  if (data?.GroupId !== undefined) view.setUint32(4, Number(data.GroupId), true);
  // 0x08: pointer
  if (data?.Flags !== undefined) view.setBigUint64(8, data.Flags === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Flags))), true);
  // 0x10: u32
  if (data?.LifePercentage !== undefined) view.setUint32(16, Number(data.LifePercentage), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.BytesReadCount !== undefined) view.setBigUint64(24, data.BytesReadCount === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BytesReadCount))), true);
  // 0x20: pointer
  if (data?.ByteWriteCount !== undefined) view.setBigUint64(32, data.ByteWriteCount === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ByteWriteCount))), true);
  return buf;
}

export class STORAGE_ENDURANCE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ValidFields(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get GroupId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Flags(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get LifePercentage(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get BytesReadCount(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ByteWriteCount(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ValidFields(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set GroupId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Flags(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set LifePercentage(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set BytesReadCount(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ByteWriteCount(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.STORAGE_ENDURANCE_DATA_DESCRIPTOR (size: 16)
 */
export interface STORAGE_ENDURANCE_DATA_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.Storage.IscsiDisc.STORAGE_ENDURANCE_INFO */
  EnduranceInfo: Uint8Array | Deno.PointerValue;
}

export const sizeofSTORAGE_ENDURANCE_DATA_DESCRIPTOR = 16;

export function allocSTORAGE_ENDURANCE_DATA_DESCRIPTOR(data?: Partial<STORAGE_ENDURANCE_DATA_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_ENDURANCE_DATA_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.EnduranceInfo !== undefined) view.setBigUint64(8, data.EnduranceInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EnduranceInfo))), true);
  return buf;
}

export class STORAGE_ENDURANCE_DATA_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get EnduranceInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set EnduranceInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.ISCSI_LOGIN_OPTIONS (size: 64)
 */
export interface ISCSI_LOGIN_OPTIONS {
  /** u32 */
  Version: number;
  /** u32 */
  InformationSpecified: number;
  /** u32 */
  LoginFlags: number;
  /** Windows.Win32.Storage.IscsiDisc.ISCSI_AUTH_TYPES */
  AuthType: ISCSI_AUTH_TYPES;
  /** Windows.Win32.Storage.IscsiDisc.ISCSI_DIGEST_TYPES */
  HeaderDigest: ISCSI_DIGEST_TYPES;
  /** Windows.Win32.Storage.IscsiDisc.ISCSI_DIGEST_TYPES */
  DataDigest: ISCSI_DIGEST_TYPES;
  /** u32 */
  MaximumConnections: number;
  /** u32 */
  DefaultTime2Wait: number;
  /** u32 */
  DefaultTime2Retain: number;
  /** u32 */
  UsernameLength: number;
  /** u32 */
  PasswordLength: number;
  /** ptr */
  Username: Deno.PointerValue | Uint8Array;
  /** ptr */
  Password: Deno.PointerValue | Uint8Array;
}

export const sizeofISCSI_LOGIN_OPTIONS = 64;

export function allocISCSI_LOGIN_OPTIONS(data?: Partial<ISCSI_LOGIN_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofISCSI_LOGIN_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.InformationSpecified !== undefined) view.setUint32(4, Number(data.InformationSpecified), true);
  // 0x08: u32
  if (data?.LoginFlags !== undefined) view.setUint32(8, Number(data.LoginFlags), true);
  // 0x0c: i32
  if (data?.AuthType !== undefined) view.setInt32(12, Number(data.AuthType), true);
  // 0x10: i32
  if (data?.HeaderDigest !== undefined) view.setInt32(16, Number(data.HeaderDigest), true);
  // 0x14: i32
  if (data?.DataDigest !== undefined) view.setInt32(20, Number(data.DataDigest), true);
  // 0x18: u32
  if (data?.MaximumConnections !== undefined) view.setUint32(24, Number(data.MaximumConnections), true);
  // 0x1c: u32
  if (data?.DefaultTime2Wait !== undefined) view.setUint32(28, Number(data.DefaultTime2Wait), true);
  // 0x20: u32
  if (data?.DefaultTime2Retain !== undefined) view.setUint32(32, Number(data.DefaultTime2Retain), true);
  // 0x24: u32
  if (data?.UsernameLength !== undefined) view.setUint32(36, Number(data.UsernameLength), true);
  // 0x28: u32
  if (data?.PasswordLength !== undefined) view.setUint32(40, Number(data.PasswordLength), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.Username !== undefined) view.setBigUint64(48, data.Username === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Username))), true);
  // 0x38: pointer
  if (data?.Password !== undefined) view.setBigUint64(56, data.Password === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Password))), true);
  return buf;
}

export class ISCSI_LOGIN_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get InformationSpecified(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get LoginFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get AuthType(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get HeaderDigest(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get DataDigest(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: u32
  get MaximumConnections(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get DefaultTime2Wait(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get DefaultTime2Retain(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get UsernameLength(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get PasswordLength(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get Username(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get Password(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set InformationSpecified(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set LoginFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set AuthType(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set HeaderDigest(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set DataDigest(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: u32
  set MaximumConnections(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set DefaultTime2Wait(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set DefaultTime2Retain(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set UsernameLength(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set PasswordLength(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set Username(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set Password(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.IKE_AUTHENTICATION_PRESHARED_KEY (size: 40)
 */
export interface IKE_AUTHENTICATION_PRESHARED_KEY {
  /** u64 */
  SecurityFlags: bigint | number;
  /** u8 */
  IdType: number;
  /** u32 */
  IdLengthInBytes: number;
  /** ptr */
  Id: Deno.PointerValue | Uint8Array;
  /** u32 */
  KeyLengthInBytes: number;
  /** ptr */
  Key: Deno.PointerValue | Uint8Array;
}

export const sizeofIKE_AUTHENTICATION_PRESHARED_KEY = 40;

export function allocIKE_AUTHENTICATION_PRESHARED_KEY(data?: Partial<IKE_AUTHENTICATION_PRESHARED_KEY>): Uint8Array {
  const buf = new Uint8Array(sizeofIKE_AUTHENTICATION_PRESHARED_KEY);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.SecurityFlags !== undefined) view.setBigUint64(0, BigInt(data.SecurityFlags), true);
  // 0x08: u8
  if (data?.IdType !== undefined) view.setUint8(8, Number(data.IdType));
  // 0x09: u32
  if (data?.IdLengthInBytes !== undefined) view.setUint32(9, Number(data.IdLengthInBytes), true);
  // 0x0d: pad3
  // 0x10: pointer
  if (data?.Id !== undefined) view.setBigUint64(16, data.Id === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Id))), true);
  // 0x18: u32
  if (data?.KeyLengthInBytes !== undefined) view.setUint32(24, Number(data.KeyLengthInBytes), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Key !== undefined) view.setBigUint64(32, data.Key === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Key))), true);
  return buf;
}

export class IKE_AUTHENTICATION_PRESHARED_KEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get SecurityFlags(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u8
  get IdType(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u32
  get IdLengthInBytes(): number {
    return this.view.getUint32(9, true);
  }

  // 0x0d: pad3

  // 0x10: pointer
  get Id(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get KeyLengthInBytes(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Key(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u64
  set SecurityFlags(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u8
  set IdType(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u32
  set IdLengthInBytes(value: number) {
    this.view.setUint32(9, value, true);
  }

  // 0x0d: pad3

  // 0x10: pointer
  set Id(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set KeyLengthInBytes(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Key(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  X: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.X))), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.IKE_AUTHENTICATION_INFORMATION (size: 16)
 */
export interface IKE_AUTHENTICATION_INFORMATION {
  /** Windows.Win32.Storage.IscsiDisc.IKE_AUTHENTICATION_METHOD */
  AuthMethod: IKE_AUTHENTICATION_METHOD;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofIKE_AUTHENTICATION_INFORMATION = 16;

export function allocIKE_AUTHENTICATION_INFORMATION(data?: Partial<IKE_AUTHENTICATION_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofIKE_AUTHENTICATION_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.AuthMethod !== undefined) view.setInt32(0, Number(data.AuthMethod), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class IKE_AUTHENTICATION_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get AuthMethod(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set AuthMethod(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.ISCSI_UNIQUE_SESSION_ID (size: 16)
 */
export interface ISCSI_UNIQUE_SESSION_ID {
  /** u64 */
  AdapterUnique: bigint | number;
  /** u64 */
  AdapterSpecific: bigint | number;
}

export const sizeofISCSI_UNIQUE_SESSION_ID = 16;

export function allocISCSI_UNIQUE_SESSION_ID(data?: Partial<ISCSI_UNIQUE_SESSION_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofISCSI_UNIQUE_SESSION_ID);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.AdapterUnique !== undefined) view.setBigUint64(0, BigInt(data.AdapterUnique), true);
  // 0x08: u64
  if (data?.AdapterSpecific !== undefined) view.setBigUint64(8, BigInt(data.AdapterSpecific), true);
  return buf;
}

export class ISCSI_UNIQUE_SESSION_IDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get AdapterUnique(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get AdapterSpecific(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set AdapterUnique(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set AdapterSpecific(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.SCSI_LUN_LIST (size: 16)
 */
export interface SCSI_LUN_LIST {
  /** u32 */
  OSLUN: number;
  /** u64 */
  TargetLUN: bigint | number;
}

export const sizeofSCSI_LUN_LIST = 16;

export function allocSCSI_LUN_LIST(data?: Partial<SCSI_LUN_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofSCSI_LUN_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.OSLUN !== undefined) view.setUint32(0, Number(data.OSLUN), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.TargetLUN !== undefined) view.setBigUint64(8, BigInt(data.TargetLUN), true);
  return buf;
}

export class SCSI_LUN_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get OSLUN(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get TargetLUN(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u32
  set OSLUN(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set TargetLUN(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.ISCSI_TARGET_MAPPINGW (size: 56)
 */
export interface ISCSI_TARGET_MAPPINGW {
  /** array */
  InitiatorName: Deno.PointerValue;
  /** array */
  TargetName: Deno.PointerValue;
  /** array */
  OSDeviceName: Deno.PointerValue;
  /** Windows.Win32.Storage.IscsiDisc.ISCSI_UNIQUE_SESSION_ID */
  SessionId: Uint8Array | Deno.PointerValue;
  /** u32 */
  OSBusNumber: number;
  /** u32 */
  OSTargetNumber: number;
  /** u32 */
  LUNCount: number;
  /** ptr */
  LUNList: Deno.PointerValue | Uint8Array;
}

export const sizeofISCSI_TARGET_MAPPINGW = 56;

export function allocISCSI_TARGET_MAPPINGW(data?: Partial<ISCSI_TARGET_MAPPINGW>): Uint8Array {
  const buf = new Uint8Array(sizeofISCSI_TARGET_MAPPINGW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.InitiatorName !== undefined) view.setBigUint64(0, data.InitiatorName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitiatorName))), true);
  // 0x08: pointer
  if (data?.TargetName !== undefined) view.setBigUint64(8, data.TargetName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TargetName))), true);
  // 0x10: pointer
  if (data?.OSDeviceName !== undefined) view.setBigUint64(16, data.OSDeviceName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OSDeviceName))), true);
  // 0x18: pointer
  if (data?.SessionId !== undefined) view.setBigUint64(24, data.SessionId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SessionId))), true);
  // 0x20: u32
  if (data?.OSBusNumber !== undefined) view.setUint32(32, Number(data.OSBusNumber), true);
  // 0x24: u32
  if (data?.OSTargetNumber !== undefined) view.setUint32(36, Number(data.OSTargetNumber), true);
  // 0x28: u32
  if (data?.LUNCount !== undefined) view.setUint32(40, Number(data.LUNCount), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.LUNList !== undefined) view.setBigUint64(48, data.LUNList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LUNList))), true);
  return buf;
}

export class ISCSI_TARGET_MAPPINGWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get InitiatorName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get TargetName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get OSDeviceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get SessionId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get OSBusNumber(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get OSTargetNumber(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get LUNCount(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get LUNList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set InitiatorName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set TargetName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set OSDeviceName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set SessionId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set OSBusNumber(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set OSTargetNumber(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set LUNCount(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set LUNList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.ISCSI_TARGET_MAPPINGA (size: 56)
 */
export interface ISCSI_TARGET_MAPPINGA {
  /** array */
  InitiatorName: Deno.PointerValue;
  /** array */
  TargetName: Deno.PointerValue;
  /** array */
  OSDeviceName: Deno.PointerValue;
  /** Windows.Win32.Storage.IscsiDisc.ISCSI_UNIQUE_SESSION_ID */
  SessionId: Uint8Array | Deno.PointerValue;
  /** u32 */
  OSBusNumber: number;
  /** u32 */
  OSTargetNumber: number;
  /** u32 */
  LUNCount: number;
  /** ptr */
  LUNList: Deno.PointerValue | Uint8Array;
}

export const sizeofISCSI_TARGET_MAPPINGA = 56;

export function allocISCSI_TARGET_MAPPINGA(data?: Partial<ISCSI_TARGET_MAPPINGA>): Uint8Array {
  const buf = new Uint8Array(sizeofISCSI_TARGET_MAPPINGA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.InitiatorName !== undefined) view.setBigUint64(0, data.InitiatorName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitiatorName))), true);
  // 0x08: pointer
  if (data?.TargetName !== undefined) view.setBigUint64(8, data.TargetName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TargetName))), true);
  // 0x10: pointer
  if (data?.OSDeviceName !== undefined) view.setBigUint64(16, data.OSDeviceName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OSDeviceName))), true);
  // 0x18: pointer
  if (data?.SessionId !== undefined) view.setBigUint64(24, data.SessionId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SessionId))), true);
  // 0x20: u32
  if (data?.OSBusNumber !== undefined) view.setUint32(32, Number(data.OSBusNumber), true);
  // 0x24: u32
  if (data?.OSTargetNumber !== undefined) view.setUint32(36, Number(data.OSTargetNumber), true);
  // 0x28: u32
  if (data?.LUNCount !== undefined) view.setUint32(40, Number(data.LUNCount), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.LUNList !== undefined) view.setBigUint64(48, data.LUNList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LUNList))), true);
  return buf;
}

export class ISCSI_TARGET_MAPPINGAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get InitiatorName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get TargetName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get OSDeviceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get SessionId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get OSBusNumber(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get OSTargetNumber(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get LUNCount(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get LUNList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set InitiatorName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set TargetName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set OSDeviceName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set SessionId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set OSBusNumber(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set OSTargetNumber(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set LUNCount(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set LUNList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.ISCSI_TARGET_PORTALW (size: 24)
 */
export interface ISCSI_TARGET_PORTALW {
  /** array */
  SymbolicName: Deno.PointerValue;
  /** array */
  Address: Deno.PointerValue;
  /** u16 */
  Socket: number;
}

export const sizeofISCSI_TARGET_PORTALW = 24;

export function allocISCSI_TARGET_PORTALW(data?: Partial<ISCSI_TARGET_PORTALW>): Uint8Array {
  const buf = new Uint8Array(sizeofISCSI_TARGET_PORTALW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SymbolicName !== undefined) view.setBigUint64(0, data.SymbolicName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SymbolicName))), true);
  // 0x08: pointer
  if (data?.Address !== undefined) view.setBigUint64(8, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  // 0x10: u16
  if (data?.Socket !== undefined) view.setUint16(16, Number(data.Socket), true);
  // 0x12: pad6
  return buf;
}

export class ISCSI_TARGET_PORTALWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SymbolicName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u16
  get Socket(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x00: pointer
  set SymbolicName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u16
  set Socket(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6
}

/**
 * Windows.Win32.Storage.IscsiDisc.ISCSI_TARGET_PORTALA (size: 24)
 */
export interface ISCSI_TARGET_PORTALA {
  /** array */
  SymbolicName: Deno.PointerValue;
  /** array */
  Address: Deno.PointerValue;
  /** u16 */
  Socket: number;
}

export const sizeofISCSI_TARGET_PORTALA = 24;

export function allocISCSI_TARGET_PORTALA(data?: Partial<ISCSI_TARGET_PORTALA>): Uint8Array {
  const buf = new Uint8Array(sizeofISCSI_TARGET_PORTALA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SymbolicName !== undefined) view.setBigUint64(0, data.SymbolicName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SymbolicName))), true);
  // 0x08: pointer
  if (data?.Address !== undefined) view.setBigUint64(8, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  // 0x10: u16
  if (data?.Socket !== undefined) view.setUint16(16, Number(data.Socket), true);
  // 0x12: pad6
  return buf;
}

export class ISCSI_TARGET_PORTALAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SymbolicName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u16
  get Socket(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x00: pointer
  set SymbolicName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u16
  set Socket(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6
}

/**
 * Windows.Win32.Storage.IscsiDisc.ISCSI_TARGET_PORTAL_INFOW (size: 40)
 */
export interface ISCSI_TARGET_PORTAL_INFOW {
  /** array */
  InitiatorName: Deno.PointerValue;
  /** u32 */
  InitiatorPortNumber: number;
  /** array */
  SymbolicName: Deno.PointerValue;
  /** array */
  Address: Deno.PointerValue;
  /** u16 */
  Socket: number;
}

export const sizeofISCSI_TARGET_PORTAL_INFOW = 40;

export function allocISCSI_TARGET_PORTAL_INFOW(data?: Partial<ISCSI_TARGET_PORTAL_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofISCSI_TARGET_PORTAL_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.InitiatorName !== undefined) view.setBigUint64(0, data.InitiatorName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitiatorName))), true);
  // 0x08: u32
  if (data?.InitiatorPortNumber !== undefined) view.setUint32(8, Number(data.InitiatorPortNumber), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.SymbolicName !== undefined) view.setBigUint64(16, data.SymbolicName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SymbolicName))), true);
  // 0x18: pointer
  if (data?.Address !== undefined) view.setBigUint64(24, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  // 0x20: u16
  if (data?.Socket !== undefined) view.setUint16(32, Number(data.Socket), true);
  // 0x22: pad6
  return buf;
}

export class ISCSI_TARGET_PORTAL_INFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get InitiatorName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get InitiatorPortNumber(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get SymbolicName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u16
  get Socket(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: pad6

  // 0x00: pointer
  set InitiatorName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set InitiatorPortNumber(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set SymbolicName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u16
  set Socket(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: pad6
}

/**
 * Windows.Win32.Storage.IscsiDisc.ISCSI_TARGET_PORTAL_INFOA (size: 40)
 */
export interface ISCSI_TARGET_PORTAL_INFOA {
  /** array */
  InitiatorName: Deno.PointerValue;
  /** u32 */
  InitiatorPortNumber: number;
  /** array */
  SymbolicName: Deno.PointerValue;
  /** array */
  Address: Deno.PointerValue;
  /** u16 */
  Socket: number;
}

export const sizeofISCSI_TARGET_PORTAL_INFOA = 40;

export function allocISCSI_TARGET_PORTAL_INFOA(data?: Partial<ISCSI_TARGET_PORTAL_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofISCSI_TARGET_PORTAL_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.InitiatorName !== undefined) view.setBigUint64(0, data.InitiatorName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitiatorName))), true);
  // 0x08: u32
  if (data?.InitiatorPortNumber !== undefined) view.setUint32(8, Number(data.InitiatorPortNumber), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.SymbolicName !== undefined) view.setBigUint64(16, data.SymbolicName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SymbolicName))), true);
  // 0x18: pointer
  if (data?.Address !== undefined) view.setBigUint64(24, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  // 0x20: u16
  if (data?.Socket !== undefined) view.setUint16(32, Number(data.Socket), true);
  // 0x22: pad6
  return buf;
}

export class ISCSI_TARGET_PORTAL_INFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get InitiatorName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get InitiatorPortNumber(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get SymbolicName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u16
  get Socket(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: pad6

  // 0x00: pointer
  set InitiatorName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set InitiatorPortNumber(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set SymbolicName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u16
  set Socket(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: pad6
}

/**
 * Windows.Win32.Storage.IscsiDisc.ISCSI_TARGET_PORTAL_INFO_EXW (size: 56)
 */
export interface ISCSI_TARGET_PORTAL_INFO_EXW {
  /** array */
  InitiatorName: Deno.PointerValue;
  /** u32 */
  InitiatorPortNumber: number;
  /** array */
  SymbolicName: Deno.PointerValue;
  /** array */
  Address: Deno.PointerValue;
  /** u16 */
  Socket: number;
  /** u64 */
  SecurityFlags: bigint | number;
  /** Windows.Win32.Storage.IscsiDisc.ISCSI_LOGIN_OPTIONS */
  LoginOptions: Uint8Array | Deno.PointerValue;
}

export const sizeofISCSI_TARGET_PORTAL_INFO_EXW = 56;

export function allocISCSI_TARGET_PORTAL_INFO_EXW(data?: Partial<ISCSI_TARGET_PORTAL_INFO_EXW>): Uint8Array {
  const buf = new Uint8Array(sizeofISCSI_TARGET_PORTAL_INFO_EXW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.InitiatorName !== undefined) view.setBigUint64(0, data.InitiatorName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitiatorName))), true);
  // 0x08: u32
  if (data?.InitiatorPortNumber !== undefined) view.setUint32(8, Number(data.InitiatorPortNumber), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.SymbolicName !== undefined) view.setBigUint64(16, data.SymbolicName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SymbolicName))), true);
  // 0x18: pointer
  if (data?.Address !== undefined) view.setBigUint64(24, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  // 0x20: u16
  if (data?.Socket !== undefined) view.setUint16(32, Number(data.Socket), true);
  // 0x22: pad6
  // 0x28: u64
  if (data?.SecurityFlags !== undefined) view.setBigUint64(40, BigInt(data.SecurityFlags), true);
  // 0x30: pointer
  if (data?.LoginOptions !== undefined) view.setBigUint64(48, data.LoginOptions === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LoginOptions))), true);
  return buf;
}

export class ISCSI_TARGET_PORTAL_INFO_EXWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get InitiatorName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get InitiatorPortNumber(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get SymbolicName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u16
  get Socket(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: pad6

  // 0x28: u64
  get SecurityFlags(): bigint | number {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: pointer
  get LoginOptions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set InitiatorName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set InitiatorPortNumber(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set SymbolicName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u16
  set Socket(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: pad6

  // 0x28: u64
  set SecurityFlags(value: bigint | number) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: pointer
  set LoginOptions(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.ISCSI_TARGET_PORTAL_INFO_EXA (size: 56)
 */
export interface ISCSI_TARGET_PORTAL_INFO_EXA {
  /** array */
  InitiatorName: Deno.PointerValue;
  /** u32 */
  InitiatorPortNumber: number;
  /** array */
  SymbolicName: Deno.PointerValue;
  /** array */
  Address: Deno.PointerValue;
  /** u16 */
  Socket: number;
  /** u64 */
  SecurityFlags: bigint | number;
  /** Windows.Win32.Storage.IscsiDisc.ISCSI_LOGIN_OPTIONS */
  LoginOptions: Uint8Array | Deno.PointerValue;
}

export const sizeofISCSI_TARGET_PORTAL_INFO_EXA = 56;

export function allocISCSI_TARGET_PORTAL_INFO_EXA(data?: Partial<ISCSI_TARGET_PORTAL_INFO_EXA>): Uint8Array {
  const buf = new Uint8Array(sizeofISCSI_TARGET_PORTAL_INFO_EXA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.InitiatorName !== undefined) view.setBigUint64(0, data.InitiatorName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitiatorName))), true);
  // 0x08: u32
  if (data?.InitiatorPortNumber !== undefined) view.setUint32(8, Number(data.InitiatorPortNumber), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.SymbolicName !== undefined) view.setBigUint64(16, data.SymbolicName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SymbolicName))), true);
  // 0x18: pointer
  if (data?.Address !== undefined) view.setBigUint64(24, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  // 0x20: u16
  if (data?.Socket !== undefined) view.setUint16(32, Number(data.Socket), true);
  // 0x22: pad6
  // 0x28: u64
  if (data?.SecurityFlags !== undefined) view.setBigUint64(40, BigInt(data.SecurityFlags), true);
  // 0x30: pointer
  if (data?.LoginOptions !== undefined) view.setBigUint64(48, data.LoginOptions === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LoginOptions))), true);
  return buf;
}

export class ISCSI_TARGET_PORTAL_INFO_EXAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get InitiatorName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get InitiatorPortNumber(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get SymbolicName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u16
  get Socket(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: pad6

  // 0x28: u64
  get SecurityFlags(): bigint | number {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: pointer
  get LoginOptions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set InitiatorName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set InitiatorPortNumber(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set SymbolicName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u16
  set Socket(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: pad6

  // 0x28: u64
  set SecurityFlags(value: bigint | number) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: pointer
  set LoginOptions(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.ISCSI_TARGET_PORTAL_GROUPW (size: 16)
 */
export interface ISCSI_TARGET_PORTAL_GROUPW {
  /** u32 */
  Count: number;
  /** array */
  Portals: Deno.PointerValue;
}

export const sizeofISCSI_TARGET_PORTAL_GROUPW = 16;

export function allocISCSI_TARGET_PORTAL_GROUPW(data?: Partial<ISCSI_TARGET_PORTAL_GROUPW>): Uint8Array {
  const buf = new Uint8Array(sizeofISCSI_TARGET_PORTAL_GROUPW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Portals !== undefined) view.setBigUint64(8, data.Portals === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Portals))), true);
  return buf;
}

export class ISCSI_TARGET_PORTAL_GROUPWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Count(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Portals(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Count(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Portals(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.ISCSI_TARGET_PORTAL_GROUPA (size: 16)
 */
export interface ISCSI_TARGET_PORTAL_GROUPA {
  /** u32 */
  Count: number;
  /** array */
  Portals: Deno.PointerValue;
}

export const sizeofISCSI_TARGET_PORTAL_GROUPA = 16;

export function allocISCSI_TARGET_PORTAL_GROUPA(data?: Partial<ISCSI_TARGET_PORTAL_GROUPA>): Uint8Array {
  const buf = new Uint8Array(sizeofISCSI_TARGET_PORTAL_GROUPA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Portals !== undefined) view.setBigUint64(8, data.Portals === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Portals))), true);
  return buf;
}

export class ISCSI_TARGET_PORTAL_GROUPAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Count(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Portals(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Count(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Portals(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.ISCSI_CONNECTION_INFOW (size: 40)
 */
export interface ISCSI_CONNECTION_INFOW {
  /** Windows.Win32.Storage.IscsiDisc.ISCSI_UNIQUE_SESSION_ID */
  ConnectionId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  InitiatorAddress: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  TargetAddress: string | null | Uint8Array | Uint16Array;
  /** u16 */
  InitiatorSocket: number;
  /** u16 */
  TargetSocket: number;
  /** array */
  CID: Deno.PointerValue;
}

export const sizeofISCSI_CONNECTION_INFOW = 40;

export function allocISCSI_CONNECTION_INFOW(data?: Partial<ISCSI_CONNECTION_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofISCSI_CONNECTION_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ConnectionId !== undefined) view.setBigUint64(0, data.ConnectionId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ConnectionId))), true);
  // 0x08: buffer
  if (data?.InitiatorAddress !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.InitiatorAddress);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.TargetAddress !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.TargetAddress);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u16
  if (data?.InitiatorSocket !== undefined) view.setUint16(24, Number(data.InitiatorSocket), true);
  // 0x1a: u16
  if (data?.TargetSocket !== undefined) view.setUint16(26, Number(data.TargetSocket), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.CID !== undefined) view.setBigUint64(32, data.CID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CID))), true);
  return buf;
}

export class ISCSI_CONNECTION_INFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ConnectionId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get InitiatorAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get TargetAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u16
  get InitiatorSocket(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: u16
  get TargetSocket(): number {
    return this.view.getUint16(26, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get CID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ConnectionId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set InitiatorAddress(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set TargetAddress(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u16
  set InitiatorSocket(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: u16
  set TargetSocket(value: number) {
    this.view.setUint16(26, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set CID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.ISCSI_SESSION_INFOW (size: 64)
 */
export interface ISCSI_SESSION_INFOW {
  /** Windows.Win32.Storage.IscsiDisc.ISCSI_UNIQUE_SESSION_ID */
  SessionId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  InitiatorName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  TargetNodeName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  TargetName: string | null | Uint8Array | Uint16Array;
  /** array */
  ISID: Deno.PointerValue;
  /** array */
  TSID: Deno.PointerValue;
  /** u32 */
  ConnectionCount: number;
  /** ptr */
  Connections: Deno.PointerValue | Uint8Array;
}

export const sizeofISCSI_SESSION_INFOW = 64;

export function allocISCSI_SESSION_INFOW(data?: Partial<ISCSI_SESSION_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofISCSI_SESSION_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SessionId !== undefined) view.setBigUint64(0, data.SessionId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SessionId))), true);
  // 0x08: buffer
  if (data?.InitiatorName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.InitiatorName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.TargetNodeName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.TargetNodeName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.TargetName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.TargetName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.ISID !== undefined) view.setBigUint64(32, data.ISID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ISID))), true);
  // 0x28: pointer
  if (data?.TSID !== undefined) view.setBigUint64(40, data.TSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TSID))), true);
  // 0x30: u32
  if (data?.ConnectionCount !== undefined) view.setUint32(48, Number(data.ConnectionCount), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.Connections !== undefined) view.setBigUint64(56, data.Connections === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Connections))), true);
  return buf;
}

export class ISCSI_SESSION_INFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SessionId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get InitiatorName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get TargetNodeName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get TargetName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ISID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get TSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get ConnectionCount(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get Connections(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set SessionId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set InitiatorName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set TargetNodeName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set TargetName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set ISID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set TSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set ConnectionCount(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set Connections(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type PSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Storage.IscsiDisc.ISCSI_CONNECTION_INFOA (size: 40)
 */
export interface ISCSI_CONNECTION_INFOA {
  /** Windows.Win32.Storage.IscsiDisc.ISCSI_UNIQUE_SESSION_ID */
  ConnectionId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  InitiatorAddress: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  TargetAddress: string | null | Uint8Array;
  /** u16 */
  InitiatorSocket: number;
  /** u16 */
  TargetSocket: number;
  /** array */
  CID: Deno.PointerValue;
}

export const sizeofISCSI_CONNECTION_INFOA = 40;

export function allocISCSI_CONNECTION_INFOA(data?: Partial<ISCSI_CONNECTION_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofISCSI_CONNECTION_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ConnectionId !== undefined) view.setBigUint64(0, data.ConnectionId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ConnectionId))), true);
  // 0x08: buffer
  if (data?.InitiatorAddress !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.InitiatorAddress);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.TargetAddress !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.TargetAddress);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u16
  if (data?.InitiatorSocket !== undefined) view.setUint16(24, Number(data.InitiatorSocket), true);
  // 0x1a: u16
  if (data?.TargetSocket !== undefined) view.setUint16(26, Number(data.TargetSocket), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.CID !== undefined) view.setBigUint64(32, data.CID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CID))), true);
  return buf;
}

export class ISCSI_CONNECTION_INFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ConnectionId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get InitiatorAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get TargetAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u16
  get InitiatorSocket(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: u16
  get TargetSocket(): number {
    return this.view.getUint16(26, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get CID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ConnectionId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set InitiatorAddress(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set TargetAddress(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u16
  set InitiatorSocket(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: u16
  set TargetSocket(value: number) {
    this.view.setUint16(26, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set CID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.ISCSI_SESSION_INFOA (size: 64)
 */
export interface ISCSI_SESSION_INFOA {
  /** Windows.Win32.Storage.IscsiDisc.ISCSI_UNIQUE_SESSION_ID */
  SessionId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  InitiatorName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  TargetNodeName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  TargetName: string | null | Uint8Array;
  /** array */
  ISID: Deno.PointerValue;
  /** array */
  TSID: Deno.PointerValue;
  /** u32 */
  ConnectionCount: number;
  /** ptr */
  Connections: Deno.PointerValue | Uint8Array;
}

export const sizeofISCSI_SESSION_INFOA = 64;

export function allocISCSI_SESSION_INFOA(data?: Partial<ISCSI_SESSION_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofISCSI_SESSION_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SessionId !== undefined) view.setBigUint64(0, data.SessionId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SessionId))), true);
  // 0x08: buffer
  if (data?.InitiatorName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.InitiatorName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.TargetNodeName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.TargetNodeName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.TargetName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.TargetName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.ISID !== undefined) view.setBigUint64(32, data.ISID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ISID))), true);
  // 0x28: pointer
  if (data?.TSID !== undefined) view.setBigUint64(40, data.TSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TSID))), true);
  // 0x30: u32
  if (data?.ConnectionCount !== undefined) view.setUint32(48, Number(data.ConnectionCount), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.Connections !== undefined) view.setBigUint64(56, data.Connections === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Connections))), true);
  return buf;
}

export class ISCSI_SESSION_INFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SessionId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get InitiatorName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get TargetNodeName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get TargetName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ISID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get TSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get ConnectionCount(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get Connections(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set SessionId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set InitiatorName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set TargetNodeName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set TargetName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set ISID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set TSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set ConnectionCount(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set Connections(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.ISCSI_CONNECTION_INFO_EX (size: 40)
 */
export interface ISCSI_CONNECTION_INFO_EX {
  /** Windows.Win32.Storage.IscsiDisc.ISCSI_UNIQUE_SESSION_ID */
  ConnectionId: Uint8Array | Deno.PointerValue;
  /** u8 */
  State: number;
  /** u8 */
  Protocol: number;
  /** u8 */
  HeaderDigest: number;
  /** u8 */
  DataDigest: number;
  /** u32 */
  MaxRecvDataSegmentLength: number;
  /** Windows.Win32.Storage.IscsiDisc.ISCSI_AUTH_TYPES */
  AuthType: ISCSI_AUTH_TYPES;
  /** u64 */
  EstimatedThroughput: bigint | number;
  /** u32 */
  MaxDatagramSize: number;
}

export const sizeofISCSI_CONNECTION_INFO_EX = 40;

export function allocISCSI_CONNECTION_INFO_EX(data?: Partial<ISCSI_CONNECTION_INFO_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofISCSI_CONNECTION_INFO_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ConnectionId !== undefined) view.setBigUint64(0, data.ConnectionId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ConnectionId))), true);
  // 0x08: u8
  if (data?.State !== undefined) view.setUint8(8, Number(data.State));
  // 0x09: u8
  if (data?.Protocol !== undefined) view.setUint8(9, Number(data.Protocol));
  // 0x0a: u8
  if (data?.HeaderDigest !== undefined) view.setUint8(10, Number(data.HeaderDigest));
  // 0x0b: u8
  if (data?.DataDigest !== undefined) view.setUint8(11, Number(data.DataDigest));
  // 0x0c: u32
  if (data?.MaxRecvDataSegmentLength !== undefined) view.setUint32(12, Number(data.MaxRecvDataSegmentLength), true);
  // 0x10: i32
  if (data?.AuthType !== undefined) view.setInt32(16, Number(data.AuthType), true);
  // 0x14: pad4
  // 0x18: u64
  if (data?.EstimatedThroughput !== undefined) view.setBigUint64(24, BigInt(data.EstimatedThroughput), true);
  // 0x20: u32
  if (data?.MaxDatagramSize !== undefined) view.setUint32(32, Number(data.MaxDatagramSize), true);
  // 0x24: pad4
  return buf;
}

export class ISCSI_CONNECTION_INFO_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ConnectionId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get State(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get Protocol(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: u8
  get HeaderDigest(): number {
    return this.view.getUint8(10);
  }

  // 0x0b: u8
  get DataDigest(): number {
    return this.view.getUint8(11);
  }

  // 0x0c: u32
  get MaxRecvDataSegmentLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i32
  get AuthType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: u64
  get EstimatedThroughput(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u32
  get MaxDatagramSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set ConnectionId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set State(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set Protocol(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: u8
  set HeaderDigest(value: number) {
    this.view.setUint8(10, value);
  }

  // 0x0b: u8
  set DataDigest(value: number) {
    this.view.setUint8(11, value);
  }

  // 0x0c: u32
  set MaxRecvDataSegmentLength(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i32
  set AuthType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: u64
  set EstimatedThroughput(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u32
  set MaxDatagramSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Storage.IscsiDisc.ISCSI_SESSION_INFO_EX (size: 80)
 */
export interface ISCSI_SESSION_INFO_EX {
  /** Windows.Win32.Storage.IscsiDisc.ISCSI_UNIQUE_SESSION_ID */
  SessionId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  InitialR2t: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  ImmediateData: Uint8Array | Deno.PointerValue;
  /** u8 */
  Type: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  DataSequenceInOrder: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  DataPduInOrder: Uint8Array | Deno.PointerValue;
  /** u8 */
  ErrorRecoveryLevel: number;
  /** u32 */
  MaxOutstandingR2t: number;
  /** u32 */
  FirstBurstLength: number;
  /** u32 */
  MaxBurstLength: number;
  /** u32 */
  MaximumConnections: number;
  /** u32 */
  ConnectionCount: number;
  /** ptr */
  Connections: Deno.PointerValue | Uint8Array;
}

export const sizeofISCSI_SESSION_INFO_EX = 80;

export function allocISCSI_SESSION_INFO_EX(data?: Partial<ISCSI_SESSION_INFO_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofISCSI_SESSION_INFO_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SessionId !== undefined) view.setBigUint64(0, data.SessionId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SessionId))), true);
  // 0x08: pointer
  if (data?.InitialR2t !== undefined) view.setBigUint64(8, data.InitialR2t === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitialR2t))), true);
  // 0x10: pointer
  if (data?.ImmediateData !== undefined) view.setBigUint64(16, data.ImmediateData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ImmediateData))), true);
  // 0x18: u8
  if (data?.Type !== undefined) view.setUint8(24, Number(data.Type));
  // 0x19: pad7
  // 0x20: pointer
  if (data?.DataSequenceInOrder !== undefined) view.setBigUint64(32, data.DataSequenceInOrder === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DataSequenceInOrder))), true);
  // 0x28: pointer
  if (data?.DataPduInOrder !== undefined) view.setBigUint64(40, data.DataPduInOrder === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DataPduInOrder))), true);
  // 0x30: u8
  if (data?.ErrorRecoveryLevel !== undefined) view.setUint8(48, Number(data.ErrorRecoveryLevel));
  // 0x31: u32
  if (data?.MaxOutstandingR2t !== undefined) view.setUint32(49, Number(data.MaxOutstandingR2t), true);
  // 0x35: u32
  if (data?.FirstBurstLength !== undefined) view.setUint32(53, Number(data.FirstBurstLength), true);
  // 0x39: u32
  if (data?.MaxBurstLength !== undefined) view.setUint32(57, Number(data.MaxBurstLength), true);
  // 0x3d: u32
  if (data?.MaximumConnections !== undefined) view.setUint32(61, Number(data.MaximumConnections), true);
  // 0x41: u32
  if (data?.ConnectionCount !== undefined) view.setUint32(65, Number(data.ConnectionCount), true);
  // 0x45: pad3
  // 0x48: pointer
  if (data?.Connections !== undefined) view.setBigUint64(72, data.Connections === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Connections))), true);
  return buf;
}

export class ISCSI_SESSION_INFO_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SessionId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get InitialR2t(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ImmediateData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u8
  get Type(): number {
    return this.view.getUint8(24);
  }

  // 0x19: pad7

  // 0x20: pointer
  get DataSequenceInOrder(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get DataPduInOrder(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u8
  get ErrorRecoveryLevel(): number {
    return this.view.getUint8(48);
  }

  // 0x31: u32
  get MaxOutstandingR2t(): number {
    return this.view.getUint32(49, true);
  }

  // 0x35: u32
  get FirstBurstLength(): number {
    return this.view.getUint32(53, true);
  }

  // 0x39: u32
  get MaxBurstLength(): number {
    return this.view.getUint32(57, true);
  }

  // 0x3d: u32
  get MaximumConnections(): number {
    return this.view.getUint32(61, true);
  }

  // 0x41: u32
  get ConnectionCount(): number {
    return this.view.getUint32(65, true);
  }

  // 0x45: pad3

  // 0x48: pointer
  get Connections(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set SessionId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set InitialR2t(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ImmediateData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u8
  set Type(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: pad7

  // 0x20: pointer
  set DataSequenceInOrder(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set DataPduInOrder(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u8
  set ErrorRecoveryLevel(value: number) {
    this.view.setUint8(48, value);
  }

  // 0x31: u32
  set MaxOutstandingR2t(value: number) {
    this.view.setUint32(49, value, true);
  }

  // 0x35: u32
  set FirstBurstLength(value: number) {
    this.view.setUint32(53, value, true);
  }

  // 0x39: u32
  set MaxBurstLength(value: number) {
    this.view.setUint32(57, value, true);
  }

  // 0x3d: u32
  set MaximumConnections(value: number) {
    this.view.setUint32(61, value, true);
  }

  // 0x41: u32
  set ConnectionCount(value: number) {
    this.view.setUint32(65, value, true);
  }

  // 0x45: pad3

  // 0x48: pointer
  set Connections(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_DEVICE_NUMBER (size: 16)
 */
export interface STORAGE_DEVICE_NUMBER {
  /** u32 */
  DeviceType: number;
  /** u32 */
  DeviceNumber: number;
  /** u32 */
  PartitionNumber: number;
}

export const sizeofSTORAGE_DEVICE_NUMBER = 16;

export function allocSTORAGE_DEVICE_NUMBER(data?: Partial<STORAGE_DEVICE_NUMBER>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_DEVICE_NUMBER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DeviceType !== undefined) view.setUint32(0, Number(data.DeviceType), true);
  // 0x04: u32
  if (data?.DeviceNumber !== undefined) view.setUint32(4, Number(data.DeviceNumber), true);
  // 0x08: u32
  if (data?.PartitionNumber !== undefined) view.setUint32(8, Number(data.PartitionNumber), true);
  // 0x0c: pad4
  return buf;
}

export class STORAGE_DEVICE_NUMBERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DeviceType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get DeviceNumber(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get PartitionNumber(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set DeviceType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set DeviceNumber(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set PartitionNumber(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Storage.IscsiDisc.ISCSI_DEVICE_ON_SESSIONW (size: 64)
 */
export interface ISCSI_DEVICE_ON_SESSIONW {
  /** array */
  InitiatorName: Deno.PointerValue;
  /** array */
  TargetName: Deno.PointerValue;
  /** Windows.Win32.Storage.IscsiDisc.SCSI_ADDRESS */
  ScsiAddress: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  DeviceInterfaceType: Uint8Array | Deno.PointerValue;
  /** array */
  DeviceInterfaceName: Deno.PointerValue;
  /** array */
  LegacyName: Deno.PointerValue;
  /** Windows.Win32.System.Ioctl.STORAGE_DEVICE_NUMBER */
  StorageDeviceNumber: Uint8Array | Deno.PointerValue;
  /** u32 */
  DeviceInstance: number;
}

export const sizeofISCSI_DEVICE_ON_SESSIONW = 64;

export function allocISCSI_DEVICE_ON_SESSIONW(data?: Partial<ISCSI_DEVICE_ON_SESSIONW>): Uint8Array {
  const buf = new Uint8Array(sizeofISCSI_DEVICE_ON_SESSIONW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.InitiatorName !== undefined) view.setBigUint64(0, data.InitiatorName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitiatorName))), true);
  // 0x08: pointer
  if (data?.TargetName !== undefined) view.setBigUint64(8, data.TargetName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TargetName))), true);
  // 0x10: pointer
  if (data?.ScsiAddress !== undefined) view.setBigUint64(16, data.ScsiAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ScsiAddress))), true);
  // 0x18: pointer
  if (data?.DeviceInterfaceType !== undefined) view.setBigUint64(24, data.DeviceInterfaceType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceInterfaceType))), true);
  // 0x20: pointer
  if (data?.DeviceInterfaceName !== undefined) view.setBigUint64(32, data.DeviceInterfaceName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceInterfaceName))), true);
  // 0x28: pointer
  if (data?.LegacyName !== undefined) view.setBigUint64(40, data.LegacyName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LegacyName))), true);
  // 0x30: pointer
  if (data?.StorageDeviceNumber !== undefined) view.setBigUint64(48, data.StorageDeviceNumber === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.StorageDeviceNumber))), true);
  // 0x38: u32
  if (data?.DeviceInstance !== undefined) view.setUint32(56, Number(data.DeviceInstance), true);
  // 0x3c: pad4
  return buf;
}

export class ISCSI_DEVICE_ON_SESSIONWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get InitiatorName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get TargetName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ScsiAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get DeviceInterfaceType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get DeviceInterfaceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get LegacyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get StorageDeviceNumber(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get DeviceInstance(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x00: pointer
  set InitiatorName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set TargetName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ScsiAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set DeviceInterfaceType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set DeviceInterfaceName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set LegacyName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set StorageDeviceNumber(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set DeviceInstance(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.Storage.IscsiDisc.ISCSI_DEVICE_ON_SESSIONA (size: 64)
 */
export interface ISCSI_DEVICE_ON_SESSIONA {
  /** array */
  InitiatorName: Deno.PointerValue;
  /** array */
  TargetName: Deno.PointerValue;
  /** Windows.Win32.Storage.IscsiDisc.SCSI_ADDRESS */
  ScsiAddress: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  DeviceInterfaceType: Uint8Array | Deno.PointerValue;
  /** array */
  DeviceInterfaceName: Deno.PointerValue;
  /** array */
  LegacyName: Deno.PointerValue;
  /** Windows.Win32.System.Ioctl.STORAGE_DEVICE_NUMBER */
  StorageDeviceNumber: Uint8Array | Deno.PointerValue;
  /** u32 */
  DeviceInstance: number;
}

export const sizeofISCSI_DEVICE_ON_SESSIONA = 64;

export function allocISCSI_DEVICE_ON_SESSIONA(data?: Partial<ISCSI_DEVICE_ON_SESSIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofISCSI_DEVICE_ON_SESSIONA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.InitiatorName !== undefined) view.setBigUint64(0, data.InitiatorName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitiatorName))), true);
  // 0x08: pointer
  if (data?.TargetName !== undefined) view.setBigUint64(8, data.TargetName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TargetName))), true);
  // 0x10: pointer
  if (data?.ScsiAddress !== undefined) view.setBigUint64(16, data.ScsiAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ScsiAddress))), true);
  // 0x18: pointer
  if (data?.DeviceInterfaceType !== undefined) view.setBigUint64(24, data.DeviceInterfaceType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceInterfaceType))), true);
  // 0x20: pointer
  if (data?.DeviceInterfaceName !== undefined) view.setBigUint64(32, data.DeviceInterfaceName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceInterfaceName))), true);
  // 0x28: pointer
  if (data?.LegacyName !== undefined) view.setBigUint64(40, data.LegacyName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LegacyName))), true);
  // 0x30: pointer
  if (data?.StorageDeviceNumber !== undefined) view.setBigUint64(48, data.StorageDeviceNumber === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.StorageDeviceNumber))), true);
  // 0x38: u32
  if (data?.DeviceInstance !== undefined) view.setUint32(56, Number(data.DeviceInstance), true);
  // 0x3c: pad4
  return buf;
}

export class ISCSI_DEVICE_ON_SESSIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get InitiatorName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get TargetName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ScsiAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get DeviceInterfaceType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get DeviceInterfaceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get LegacyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get StorageDeviceNumber(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get DeviceInstance(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x00: pointer
  set InitiatorName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set TargetName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ScsiAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set DeviceInterfaceType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set DeviceInterfaceName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set LegacyName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set StorageDeviceNumber(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set DeviceInstance(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.Storage.IscsiDisc.PERSISTENT_ISCSI_LOGIN_INFOW (size: 64)
 */
export interface PERSISTENT_ISCSI_LOGIN_INFOW {
  /** array */
  TargetName: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsInformationalSession: Uint8Array | Deno.PointerValue;
  /** array */
  InitiatorInstance: Deno.PointerValue;
  /** u32 */
  InitiatorPortNumber: number;
  /** Windows.Win32.Storage.IscsiDisc.ISCSI_TARGET_PORTALW */
  TargetPortal: Uint8Array | Deno.PointerValue;
  /** u64 */
  SecurityFlags: bigint | number;
  /** ptr */
  Mappings: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Storage.IscsiDisc.ISCSI_LOGIN_OPTIONS */
  LoginOptions: Uint8Array | Deno.PointerValue;
}

export const sizeofPERSISTENT_ISCSI_LOGIN_INFOW = 64;

export function allocPERSISTENT_ISCSI_LOGIN_INFOW(data?: Partial<PERSISTENT_ISCSI_LOGIN_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofPERSISTENT_ISCSI_LOGIN_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TargetName !== undefined) view.setBigUint64(0, data.TargetName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TargetName))), true);
  // 0x08: pointer
  if (data?.IsInformationalSession !== undefined) view.setBigUint64(8, data.IsInformationalSession === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IsInformationalSession))), true);
  // 0x10: pointer
  if (data?.InitiatorInstance !== undefined) view.setBigUint64(16, data.InitiatorInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitiatorInstance))), true);
  // 0x18: u32
  if (data?.InitiatorPortNumber !== undefined) view.setUint32(24, Number(data.InitiatorPortNumber), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.TargetPortal !== undefined) view.setBigUint64(32, data.TargetPortal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TargetPortal))), true);
  // 0x28: u64
  if (data?.SecurityFlags !== undefined) view.setBigUint64(40, BigInt(data.SecurityFlags), true);
  // 0x30: pointer
  if (data?.Mappings !== undefined) view.setBigUint64(48, data.Mappings === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Mappings))), true);
  // 0x38: pointer
  if (data?.LoginOptions !== undefined) view.setBigUint64(56, data.LoginOptions === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LoginOptions))), true);
  return buf;
}

export class PERSISTENT_ISCSI_LOGIN_INFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get TargetName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get IsInformationalSession(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get InitiatorInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get InitiatorPortNumber(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get TargetPortal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u64
  get SecurityFlags(): bigint | number {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: pointer
  get Mappings(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get LoginOptions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set TargetName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set IsInformationalSession(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set InitiatorInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set InitiatorPortNumber(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set TargetPortal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u64
  set SecurityFlags(value: bigint | number) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: pointer
  set Mappings(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set LoginOptions(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.PERSISTENT_ISCSI_LOGIN_INFOA (size: 64)
 */
export interface PERSISTENT_ISCSI_LOGIN_INFOA {
  /** array */
  TargetName: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsInformationalSession: Uint8Array | Deno.PointerValue;
  /** array */
  InitiatorInstance: Deno.PointerValue;
  /** u32 */
  InitiatorPortNumber: number;
  /** Windows.Win32.Storage.IscsiDisc.ISCSI_TARGET_PORTALA */
  TargetPortal: Uint8Array | Deno.PointerValue;
  /** u64 */
  SecurityFlags: bigint | number;
  /** ptr */
  Mappings: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Storage.IscsiDisc.ISCSI_LOGIN_OPTIONS */
  LoginOptions: Uint8Array | Deno.PointerValue;
}

export const sizeofPERSISTENT_ISCSI_LOGIN_INFOA = 64;

export function allocPERSISTENT_ISCSI_LOGIN_INFOA(data?: Partial<PERSISTENT_ISCSI_LOGIN_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofPERSISTENT_ISCSI_LOGIN_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TargetName !== undefined) view.setBigUint64(0, data.TargetName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TargetName))), true);
  // 0x08: pointer
  if (data?.IsInformationalSession !== undefined) view.setBigUint64(8, data.IsInformationalSession === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IsInformationalSession))), true);
  // 0x10: pointer
  if (data?.InitiatorInstance !== undefined) view.setBigUint64(16, data.InitiatorInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitiatorInstance))), true);
  // 0x18: u32
  if (data?.InitiatorPortNumber !== undefined) view.setUint32(24, Number(data.InitiatorPortNumber), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.TargetPortal !== undefined) view.setBigUint64(32, data.TargetPortal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TargetPortal))), true);
  // 0x28: u64
  if (data?.SecurityFlags !== undefined) view.setBigUint64(40, BigInt(data.SecurityFlags), true);
  // 0x30: pointer
  if (data?.Mappings !== undefined) view.setBigUint64(48, data.Mappings === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Mappings))), true);
  // 0x38: pointer
  if (data?.LoginOptions !== undefined) view.setBigUint64(56, data.LoginOptions === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LoginOptions))), true);
  return buf;
}

export class PERSISTENT_ISCSI_LOGIN_INFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get TargetName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get IsInformationalSession(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get InitiatorInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get InitiatorPortNumber(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get TargetPortal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u64
  get SecurityFlags(): bigint | number {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: pointer
  get Mappings(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get LoginOptions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set TargetName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set IsInformationalSession(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set InitiatorInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set InitiatorPortNumber(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set TargetPortal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u64
  set SecurityFlags(value: bigint | number) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: pointer
  set Mappings(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set LoginOptions(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IscsiDisc.ISCSI_VERSION_INFO (size: 16)
 */
export interface ISCSI_VERSION_INFO {
  /** u32 */
  MajorVersion: number;
  /** u32 */
  MinorVersion: number;
  /** u32 */
  BuildNumber: number;
}

export const sizeofISCSI_VERSION_INFO = 16;

export function allocISCSI_VERSION_INFO(data?: Partial<ISCSI_VERSION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofISCSI_VERSION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MajorVersion !== undefined) view.setUint32(0, Number(data.MajorVersion), true);
  // 0x04: u32
  if (data?.MinorVersion !== undefined) view.setUint32(4, Number(data.MinorVersion), true);
  // 0x08: u32
  if (data?.BuildNumber !== undefined) view.setUint32(8, Number(data.BuildNumber), true);
  // 0x0c: pad4
  return buf;
}

export class ISCSI_VERSION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MajorVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MinorVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get BuildNumber(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set MajorVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MinorVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set BuildNumber(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

// Native Libraries

try {
  var libISCSIDSC_dll = Deno.dlopen("ISCSIDSC.dll", {
    GetIScsiVersionInformation: {
      parameters: ["pointer"],
      result: "u32",
      optional: true,
    },
    GetIScsiTargetInformationW: {
      parameters: ["buffer", "buffer", "i32", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    GetIScsiTargetInformationA: {
      parameters: ["buffer", "buffer", "i32", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    AddIScsiConnectionW: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u64", "pointer", "u32", "buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    AddIScsiConnectionA: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u64", "pointer", "u32", "buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    RemoveIScsiConnection: {
      parameters: ["pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    ReportIScsiTargetsW: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "u32",
      optional: true,
    },
    ReportIScsiTargetsA: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "u32",
      optional: true,
    },
    AddIScsiStaticTargetW: {
      parameters: ["buffer", "buffer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    AddIScsiStaticTargetA: {
      parameters: ["buffer", "buffer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    RemoveIScsiStaticTargetW: {
      parameters: ["buffer"],
      result: "u32",
      optional: true,
    },
    RemoveIScsiStaticTargetA: {
      parameters: ["buffer"],
      result: "u32",
      optional: true,
    },
    AddIScsiSendTargetPortalW: {
      parameters: ["buffer", "u32", "pointer", "u64", "pointer"],
      result: "u32",
      optional: true,
    },
    AddIScsiSendTargetPortalA: {
      parameters: ["buffer", "u32", "pointer", "u64", "pointer"],
      result: "u32",
      optional: true,
    },
    RemoveIScsiSendTargetPortalW: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    RemoveIScsiSendTargetPortalA: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    RefreshIScsiSendTargetPortalW: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    RefreshIScsiSendTargetPortalA: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    ReportIScsiSendTargetPortalsW: {
      parameters: ["pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    ReportIScsiSendTargetPortalsA: {
      parameters: ["pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    ReportIScsiSendTargetPortalsExW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    ReportIScsiSendTargetPortalsExA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    LoginIScsiTargetW: {
      parameters: ["buffer", "pointer", "buffer", "u32", "pointer", "u64", "pointer", "pointer", "u32", "buffer", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    LoginIScsiTargetA: {
      parameters: ["buffer", "pointer", "buffer", "u32", "pointer", "u64", "pointer", "pointer", "u32", "buffer", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    ReportIScsiPersistentLoginsW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    ReportIScsiPersistentLoginsA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    LogoutIScsiTarget: {
      parameters: ["pointer"],
      result: "u32",
      optional: true,
    },
    RemoveIScsiPersistentTargetW: {
      parameters: ["buffer", "u32", "buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    RemoveIScsiPersistentTargetA: {
      parameters: ["buffer", "u32", "buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    SendScsiInquiry: {
      parameters: ["pointer", "u64", "u8", "u8", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    SendScsiReadCapacity: {
      parameters: ["pointer", "u64", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    SendScsiReportLuns: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    ReportIScsiInitiatorListW: {
      parameters: ["pointer", "buffer"],
      result: "u32",
      optional: true,
    },
    ReportIScsiInitiatorListA: {
      parameters: ["pointer", "buffer"],
      result: "u32",
      optional: true,
    },
    ReportActiveIScsiTargetMappingsW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    ReportActiveIScsiTargetMappingsA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    SetIScsiTunnelModeOuterAddressW: {
      parameters: ["buffer", "u32", "buffer", "buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    SetIScsiTunnelModeOuterAddressA: {
      parameters: ["buffer", "u32", "buffer", "buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    SetIScsiIKEInfoW: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    SetIScsiIKEInfoA: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    GetIScsiIKEInfoW: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    GetIScsiIKEInfoA: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    SetIScsiGroupPresharedKey: {
      parameters: ["u32", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    SetIScsiInitiatorCHAPSharedSecret: {
      parameters: ["u32", "pointer"],
      result: "u32",
      optional: true,
    },
    SetIScsiInitiatorRADIUSSharedSecret: {
      parameters: ["u32", "pointer"],
      result: "u32",
      optional: true,
    },
    SetIScsiInitiatorNodeNameW: {
      parameters: ["buffer"],
      result: "u32",
      optional: true,
    },
    SetIScsiInitiatorNodeNameA: {
      parameters: ["buffer"],
      result: "u32",
      optional: true,
    },
    GetIScsiInitiatorNodeNameW: {
      parameters: ["buffer"],
      result: "u32",
      optional: true,
    },
    GetIScsiInitiatorNodeNameA: {
      parameters: ["buffer"],
      result: "u32",
      optional: true,
    },
    AddISNSServerW: {
      parameters: ["buffer"],
      result: "u32",
      optional: true,
    },
    AddISNSServerA: {
      parameters: ["buffer"],
      result: "u32",
      optional: true,
    },
    RemoveISNSServerW: {
      parameters: ["buffer"],
      result: "u32",
      optional: true,
    },
    RemoveISNSServerA: {
      parameters: ["buffer"],
      result: "u32",
      optional: true,
    },
    RefreshISNSServerW: {
      parameters: ["buffer"],
      result: "u32",
      optional: true,
    },
    RefreshISNSServerA: {
      parameters: ["buffer"],
      result: "u32",
      optional: true,
    },
    ReportISNSServerListW: {
      parameters: ["pointer", "buffer"],
      result: "u32",
      optional: true,
    },
    ReportISNSServerListA: {
      parameters: ["pointer", "buffer"],
      result: "u32",
      optional: true,
    },
    GetIScsiSessionListW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    GetIScsiSessionListA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    GetIScsiSessionListEx: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    GetDevicesForIScsiSessionW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    GetDevicesForIScsiSessionA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    SetupPersistentIScsiVolumes: {
      parameters: [],
      result: "u32",
      optional: true,
    },
    SetupPersistentIScsiDevices: {
      parameters: [],
      result: "u32",
      optional: true,
    },
    AddPersistentIScsiDeviceW: {
      parameters: ["buffer"],
      result: "u32",
      optional: true,
    },
    AddPersistentIScsiDeviceA: {
      parameters: ["buffer"],
      result: "u32",
      optional: true,
    },
    RemovePersistentIScsiDeviceW: {
      parameters: ["buffer"],
      result: "u32",
      optional: true,
    },
    RemovePersistentIScsiDeviceA: {
      parameters: ["buffer"],
      result: "u32",
      optional: true,
    },
    ClearPersistentIScsiDevices: {
      parameters: [],
      result: "u32",
      optional: true,
    },
    ReportPersistentIScsiDevicesW: {
      parameters: ["pointer", "buffer"],
      result: "u32",
      optional: true,
    },
    ReportPersistentIScsiDevicesA: {
      parameters: ["pointer", "buffer"],
      result: "u32",
      optional: true,
    },
    ReportIScsiTargetPortalsW: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    ReportIScsiTargetPortalsA: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    AddRadiusServerW: {
      parameters: ["buffer"],
      result: "u32",
      optional: true,
    },
    AddRadiusServerA: {
      parameters: ["buffer"],
      result: "u32",
      optional: true,
    },
    RemoveRadiusServerW: {
      parameters: ["buffer"],
      result: "u32",
      optional: true,
    },
    RemoveRadiusServerA: {
      parameters: ["buffer"],
      result: "u32",
      optional: true,
    },
    ReportRadiusServerListW: {
      parameters: ["pointer", "buffer"],
      result: "u32",
      optional: true,
    },
    ReportRadiusServerListA: {
      parameters: ["pointer", "buffer"],
      result: "u32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function GetIScsiVersionInformation(
  VersionInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.GetIScsiVersionInformation!(util.toPointer(VersionInfo));
}

export function GetIScsiTargetInformationW(
  TargetName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  DiscoveryMechanism: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  InfoClass: TARGET_INFORMATION_CLASS /* Windows.Win32.Storage.IscsiDisc.TARGET_INFORMATION_CLASS */,
  BufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.GetIScsiTargetInformationW!(util.pwstrToFfi(TargetName), util.pwstrToFfi(DiscoveryMechanism), InfoClass, util.toPointer(BufferSize), util.toPointer(Buffer));
}

export function GetIScsiTargetInformationA(
  TargetName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  DiscoveryMechanism: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  InfoClass: TARGET_INFORMATION_CLASS /* Windows.Win32.Storage.IscsiDisc.TARGET_INFORMATION_CLASS */,
  BufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.GetIScsiTargetInformationA!(util.pstrToFfi(TargetName), util.pstrToFfi(DiscoveryMechanism), InfoClass, util.toPointer(BufferSize), util.toPointer(Buffer));
}

export function AddIScsiConnectionW(
  UniqueSessionId: Deno.PointerValue | Uint8Array /* ptr */,
  Reserved: Deno.PointerValue | Uint8Array /* ptr */,
  InitiatorPortNumber: number /* u32 */,
  TargetPortal: Deno.PointerValue | Uint8Array /* ptr */,
  SecurityFlags: bigint | number /* u64 */,
  LoginOptions: Deno.PointerValue | Uint8Array /* ptr */,
  KeySize: number /* u32 */,
  Key: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ConnectionId: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.AddIScsiConnectionW!(util.toPointer(UniqueSessionId), util.toPointer(Reserved), InitiatorPortNumber, util.toPointer(TargetPortal), SecurityFlags, util.toPointer(LoginOptions), KeySize, util.pstrToFfi(Key), util.toPointer(ConnectionId));
}

export function AddIScsiConnectionA(
  UniqueSessionId: Deno.PointerValue | Uint8Array /* ptr */,
  Reserved: Deno.PointerValue | Uint8Array /* ptr */,
  InitiatorPortNumber: number /* u32 */,
  TargetPortal: Deno.PointerValue | Uint8Array /* ptr */,
  SecurityFlags: bigint | number /* u64 */,
  LoginOptions: Deno.PointerValue | Uint8Array /* ptr */,
  KeySize: number /* u32 */,
  Key: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ConnectionId: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.AddIScsiConnectionA!(util.toPointer(UniqueSessionId), util.toPointer(Reserved), InitiatorPortNumber, util.toPointer(TargetPortal), SecurityFlags, util.toPointer(LoginOptions), KeySize, util.pstrToFfi(Key), util.toPointer(ConnectionId));
}

export function RemoveIScsiConnection(
  UniqueSessionId: Deno.PointerValue | Uint8Array /* ptr */,
  ConnectionId: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.RemoveIScsiConnection!(util.toPointer(UniqueSessionId), util.toPointer(ConnectionId));
}

export function ReportIScsiTargetsW(
  ForceUpdate: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
  BufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.ReportIScsiTargetsW!(util.toPointer(ForceUpdate), util.toPointer(BufferSize), util.pwstrToFfi(Buffer));
}

export function ReportIScsiTargetsA(
  ForceUpdate: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
  BufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.ReportIScsiTargetsA!(util.toPointer(ForceUpdate), util.toPointer(BufferSize), util.pstrToFfi(Buffer));
}

export function AddIScsiStaticTargetW(
  TargetName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  TargetAlias: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  TargetFlags: number /* u32 */,
  Persist: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
  Mappings: Deno.PointerValue | Uint8Array /* ptr */,
  LoginOptions: Deno.PointerValue | Uint8Array /* ptr */,
  PortalGroup: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.AddIScsiStaticTargetW!(util.pwstrToFfi(TargetName), util.pwstrToFfi(TargetAlias), TargetFlags, util.toPointer(Persist), util.toPointer(Mappings), util.toPointer(LoginOptions), util.toPointer(PortalGroup));
}

export function AddIScsiStaticTargetA(
  TargetName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  TargetAlias: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  TargetFlags: number /* u32 */,
  Persist: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
  Mappings: Deno.PointerValue | Uint8Array /* ptr */,
  LoginOptions: Deno.PointerValue | Uint8Array /* ptr */,
  PortalGroup: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.AddIScsiStaticTargetA!(util.pstrToFfi(TargetName), util.pstrToFfi(TargetAlias), TargetFlags, util.toPointer(Persist), util.toPointer(Mappings), util.toPointer(LoginOptions), util.toPointer(PortalGroup));
}

export function RemoveIScsiStaticTargetW(
  TargetName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.RemoveIScsiStaticTargetW!(util.pwstrToFfi(TargetName));
}

export function RemoveIScsiStaticTargetA(
  TargetName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.RemoveIScsiStaticTargetA!(util.pstrToFfi(TargetName));
}

export function AddIScsiSendTargetPortalW(
  InitiatorInstance: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  InitiatorPortNumber: number /* u32 */,
  LoginOptions: Deno.PointerValue | Uint8Array /* ptr */,
  SecurityFlags: bigint | number /* u64 */,
  Portal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.AddIScsiSendTargetPortalW!(util.pwstrToFfi(InitiatorInstance), InitiatorPortNumber, util.toPointer(LoginOptions), SecurityFlags, util.toPointer(Portal));
}

export function AddIScsiSendTargetPortalA(
  InitiatorInstance: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  InitiatorPortNumber: number /* u32 */,
  LoginOptions: Deno.PointerValue | Uint8Array /* ptr */,
  SecurityFlags: bigint | number /* u64 */,
  Portal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.AddIScsiSendTargetPortalA!(util.pstrToFfi(InitiatorInstance), InitiatorPortNumber, util.toPointer(LoginOptions), SecurityFlags, util.toPointer(Portal));
}

export function RemoveIScsiSendTargetPortalW(
  InitiatorInstance: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  InitiatorPortNumber: number /* u32 */,
  Portal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.RemoveIScsiSendTargetPortalW!(util.pwstrToFfi(InitiatorInstance), InitiatorPortNumber, util.toPointer(Portal));
}

export function RemoveIScsiSendTargetPortalA(
  InitiatorInstance: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  InitiatorPortNumber: number /* u32 */,
  Portal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.RemoveIScsiSendTargetPortalA!(util.pstrToFfi(InitiatorInstance), InitiatorPortNumber, util.toPointer(Portal));
}

export function RefreshIScsiSendTargetPortalW(
  InitiatorInstance: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  InitiatorPortNumber: number /* u32 */,
  Portal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.RefreshIScsiSendTargetPortalW!(util.pwstrToFfi(InitiatorInstance), InitiatorPortNumber, util.toPointer(Portal));
}

export function RefreshIScsiSendTargetPortalA(
  InitiatorInstance: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  InitiatorPortNumber: number /* u32 */,
  Portal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.RefreshIScsiSendTargetPortalA!(util.pstrToFfi(InitiatorInstance), InitiatorPortNumber, util.toPointer(Portal));
}

export function ReportIScsiSendTargetPortalsW(
  PortalCount: Deno.PointerValue | Uint8Array /* ptr */,
  PortalInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.ReportIScsiSendTargetPortalsW!(util.toPointer(PortalCount), util.toPointer(PortalInfo));
}

export function ReportIScsiSendTargetPortalsA(
  PortalCount: Deno.PointerValue | Uint8Array /* ptr */,
  PortalInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.ReportIScsiSendTargetPortalsA!(util.toPointer(PortalCount), util.toPointer(PortalInfo));
}

export function ReportIScsiSendTargetPortalsExW(
  PortalCount: Deno.PointerValue | Uint8Array /* ptr */,
  PortalInfoSize: Deno.PointerValue | Uint8Array /* ptr */,
  PortalInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.ReportIScsiSendTargetPortalsExW!(util.toPointer(PortalCount), util.toPointer(PortalInfoSize), util.toPointer(PortalInfo));
}

export function ReportIScsiSendTargetPortalsExA(
  PortalCount: Deno.PointerValue | Uint8Array /* ptr */,
  PortalInfoSize: Deno.PointerValue | Uint8Array /* ptr */,
  PortalInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.ReportIScsiSendTargetPortalsExA!(util.toPointer(PortalCount), util.toPointer(PortalInfoSize), util.toPointer(PortalInfo));
}

export function LoginIScsiTargetW(
  TargetName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  IsInformationalSession: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
  InitiatorInstance: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  InitiatorPortNumber: number /* u32 */,
  TargetPortal: Deno.PointerValue | Uint8Array /* ptr */,
  SecurityFlags: bigint | number /* u64 */,
  Mappings: Deno.PointerValue | Uint8Array /* ptr */,
  LoginOptions: Deno.PointerValue | Uint8Array /* ptr */,
  KeySize: number /* u32 */,
  Key: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  IsPersistent: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
  UniqueSessionId: Deno.PointerValue | Uint8Array /* ptr */,
  UniqueConnectionId: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.LoginIScsiTargetW!(util.pwstrToFfi(TargetName), util.toPointer(IsInformationalSession), util.pwstrToFfi(InitiatorInstance), InitiatorPortNumber, util.toPointer(TargetPortal), SecurityFlags, util.toPointer(Mappings), util.toPointer(LoginOptions), KeySize, util.pstrToFfi(Key), util.toPointer(IsPersistent), util.toPointer(UniqueSessionId), util.toPointer(UniqueConnectionId));
}

export function LoginIScsiTargetA(
  TargetName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  IsInformationalSession: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
  InitiatorInstance: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  InitiatorPortNumber: number /* u32 */,
  TargetPortal: Deno.PointerValue | Uint8Array /* ptr */,
  SecurityFlags: bigint | number /* u64 */,
  Mappings: Deno.PointerValue | Uint8Array /* ptr */,
  LoginOptions: Deno.PointerValue | Uint8Array /* ptr */,
  KeySize: number /* u32 */,
  Key: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  IsPersistent: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
  UniqueSessionId: Deno.PointerValue | Uint8Array /* ptr */,
  UniqueConnectionId: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.LoginIScsiTargetA!(util.pstrToFfi(TargetName), util.toPointer(IsInformationalSession), util.pstrToFfi(InitiatorInstance), InitiatorPortNumber, util.toPointer(TargetPortal), SecurityFlags, util.toPointer(Mappings), util.toPointer(LoginOptions), KeySize, util.pstrToFfi(Key), util.toPointer(IsPersistent), util.toPointer(UniqueSessionId), util.toPointer(UniqueConnectionId));
}

export function ReportIScsiPersistentLoginsW(
  Count: Deno.PointerValue | Uint8Array /* ptr */,
  PersistentLoginInfo: Deno.PointerValue | Uint8Array /* ptr */,
  BufferSizeInBytes: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.ReportIScsiPersistentLoginsW!(util.toPointer(Count), util.toPointer(PersistentLoginInfo), util.toPointer(BufferSizeInBytes));
}

export function ReportIScsiPersistentLoginsA(
  Count: Deno.PointerValue | Uint8Array /* ptr */,
  PersistentLoginInfo: Deno.PointerValue | Uint8Array /* ptr */,
  BufferSizeInBytes: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.ReportIScsiPersistentLoginsA!(util.toPointer(Count), util.toPointer(PersistentLoginInfo), util.toPointer(BufferSizeInBytes));
}

export function LogoutIScsiTarget(
  UniqueSessionId: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.LogoutIScsiTarget!(util.toPointer(UniqueSessionId));
}

export function RemoveIScsiPersistentTargetW(
  InitiatorInstance: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  InitiatorPortNumber: number /* u32 */,
  TargetName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Portal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.RemoveIScsiPersistentTargetW!(util.pwstrToFfi(InitiatorInstance), InitiatorPortNumber, util.pwstrToFfi(TargetName), util.toPointer(Portal));
}

export function RemoveIScsiPersistentTargetA(
  InitiatorInstance: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  InitiatorPortNumber: number /* u32 */,
  TargetName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Portal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.RemoveIScsiPersistentTargetA!(util.pstrToFfi(InitiatorInstance), InitiatorPortNumber, util.pstrToFfi(TargetName), util.toPointer(Portal));
}

export function SendScsiInquiry(
  UniqueSessionId: Deno.PointerValue | Uint8Array /* ptr */,
  Lun: bigint | number /* u64 */,
  EvpdCmddt: number /* u8 */,
  PageCode: number /* u8 */,
  ScsiStatus: Deno.PointerValue | Uint8Array /* ptr */,
  ResponseSize: Deno.PointerValue | Uint8Array /* ptr */,
  ResponseBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  SenseSize: Deno.PointerValue | Uint8Array /* ptr */,
  SenseBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.SendScsiInquiry!(util.toPointer(UniqueSessionId), Lun, EvpdCmddt, PageCode, util.toPointer(ScsiStatus), util.toPointer(ResponseSize), util.toPointer(ResponseBuffer), util.toPointer(SenseSize), util.toPointer(SenseBuffer));
}

export function SendScsiReadCapacity(
  UniqueSessionId: Deno.PointerValue | Uint8Array /* ptr */,
  Lun: bigint | number /* u64 */,
  ScsiStatus: Deno.PointerValue | Uint8Array /* ptr */,
  ResponseSize: Deno.PointerValue | Uint8Array /* ptr */,
  ResponseBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  SenseSize: Deno.PointerValue | Uint8Array /* ptr */,
  SenseBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.SendScsiReadCapacity!(util.toPointer(UniqueSessionId), Lun, util.toPointer(ScsiStatus), util.toPointer(ResponseSize), util.toPointer(ResponseBuffer), util.toPointer(SenseSize), util.toPointer(SenseBuffer));
}

export function SendScsiReportLuns(
  UniqueSessionId: Deno.PointerValue | Uint8Array /* ptr */,
  ScsiStatus: Deno.PointerValue | Uint8Array /* ptr */,
  ResponseSize: Deno.PointerValue | Uint8Array /* ptr */,
  ResponseBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  SenseSize: Deno.PointerValue | Uint8Array /* ptr */,
  SenseBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.SendScsiReportLuns!(util.toPointer(UniqueSessionId), util.toPointer(ScsiStatus), util.toPointer(ResponseSize), util.toPointer(ResponseBuffer), util.toPointer(SenseSize), util.toPointer(SenseBuffer));
}

export function ReportIScsiInitiatorListW(
  BufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.ReportIScsiInitiatorListW!(util.toPointer(BufferSize), util.pwstrToFfi(Buffer));
}

export function ReportIScsiInitiatorListA(
  BufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.ReportIScsiInitiatorListA!(util.toPointer(BufferSize), util.pstrToFfi(Buffer));
}

export function ReportActiveIScsiTargetMappingsW(
  BufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  MappingCount: Deno.PointerValue | Uint8Array /* ptr */,
  Mappings: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.ReportActiveIScsiTargetMappingsW!(util.toPointer(BufferSize), util.toPointer(MappingCount), util.toPointer(Mappings));
}

export function ReportActiveIScsiTargetMappingsA(
  BufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  MappingCount: Deno.PointerValue | Uint8Array /* ptr */,
  Mappings: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.ReportActiveIScsiTargetMappingsA!(util.toPointer(BufferSize), util.toPointer(MappingCount), util.toPointer(Mappings));
}

export function SetIScsiTunnelModeOuterAddressW(
  InitiatorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  InitiatorPortNumber: number /* u32 */,
  DestinationAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  OuterModeAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Persist: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
): number /* u32 */ {
  return libISCSIDSC_dll.SetIScsiTunnelModeOuterAddressW!(util.pwstrToFfi(InitiatorName), InitiatorPortNumber, util.pwstrToFfi(DestinationAddress), util.pwstrToFfi(OuterModeAddress), util.toPointer(Persist));
}

export function SetIScsiTunnelModeOuterAddressA(
  InitiatorName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  InitiatorPortNumber: number /* u32 */,
  DestinationAddress: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  OuterModeAddress: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Persist: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
): number /* u32 */ {
  return libISCSIDSC_dll.SetIScsiTunnelModeOuterAddressA!(util.pstrToFfi(InitiatorName), InitiatorPortNumber, util.pstrToFfi(DestinationAddress), util.pstrToFfi(OuterModeAddress), util.toPointer(Persist));
}

export function SetIScsiIKEInfoW(
  InitiatorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  InitiatorPortNumber: number /* u32 */,
  AuthInfo: Deno.PointerValue | Uint8Array /* ptr */,
  Persist: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
): number /* u32 */ {
  return libISCSIDSC_dll.SetIScsiIKEInfoW!(util.pwstrToFfi(InitiatorName), InitiatorPortNumber, util.toPointer(AuthInfo), util.toPointer(Persist));
}

export function SetIScsiIKEInfoA(
  InitiatorName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  InitiatorPortNumber: number /* u32 */,
  AuthInfo: Deno.PointerValue | Uint8Array /* ptr */,
  Persist: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
): number /* u32 */ {
  return libISCSIDSC_dll.SetIScsiIKEInfoA!(util.pstrToFfi(InitiatorName), InitiatorPortNumber, util.toPointer(AuthInfo), util.toPointer(Persist));
}

export function GetIScsiIKEInfoW(
  InitiatorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  InitiatorPortNumber: number /* u32 */,
  Reserved: Deno.PointerValue | Uint8Array /* ptr */,
  AuthInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.GetIScsiIKEInfoW!(util.pwstrToFfi(InitiatorName), InitiatorPortNumber, util.toPointer(Reserved), util.toPointer(AuthInfo));
}

export function GetIScsiIKEInfoA(
  InitiatorName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  InitiatorPortNumber: number /* u32 */,
  Reserved: Deno.PointerValue | Uint8Array /* ptr */,
  AuthInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.GetIScsiIKEInfoA!(util.pstrToFfi(InitiatorName), InitiatorPortNumber, util.toPointer(Reserved), util.toPointer(AuthInfo));
}

export function SetIScsiGroupPresharedKey(
  KeyLength: number /* u32 */,
  Key: Deno.PointerValue | Uint8Array /* ptr */,
  Persist: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
): number /* u32 */ {
  return libISCSIDSC_dll.SetIScsiGroupPresharedKey!(KeyLength, util.toPointer(Key), util.toPointer(Persist));
}

export function SetIScsiInitiatorCHAPSharedSecret(
  SharedSecretLength: number /* u32 */,
  SharedSecret: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.SetIScsiInitiatorCHAPSharedSecret!(SharedSecretLength, util.toPointer(SharedSecret));
}

export function SetIScsiInitiatorRADIUSSharedSecret(
  SharedSecretLength: number /* u32 */,
  SharedSecret: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.SetIScsiInitiatorRADIUSSharedSecret!(SharedSecretLength, util.toPointer(SharedSecret));
}

export function SetIScsiInitiatorNodeNameW(
  InitiatorNodeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.SetIScsiInitiatorNodeNameW!(util.pwstrToFfi(InitiatorNodeName));
}

export function SetIScsiInitiatorNodeNameA(
  InitiatorNodeName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.SetIScsiInitiatorNodeNameA!(util.pstrToFfi(InitiatorNodeName));
}

export function GetIScsiInitiatorNodeNameW(
  InitiatorNodeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.GetIScsiInitiatorNodeNameW!(util.pwstrToFfi(InitiatorNodeName));
}

export function GetIScsiInitiatorNodeNameA(
  InitiatorNodeName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.GetIScsiInitiatorNodeNameA!(util.pstrToFfi(InitiatorNodeName));
}

export function AddISNSServerW(
  Address: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.AddISNSServerW!(util.pwstrToFfi(Address));
}

export function AddISNSServerA(
  Address: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.AddISNSServerA!(util.pstrToFfi(Address));
}

export function RemoveISNSServerW(
  Address: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.RemoveISNSServerW!(util.pwstrToFfi(Address));
}

export function RemoveISNSServerA(
  Address: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.RemoveISNSServerA!(util.pstrToFfi(Address));
}

export function RefreshISNSServerW(
  Address: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.RefreshISNSServerW!(util.pwstrToFfi(Address));
}

export function RefreshISNSServerA(
  Address: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.RefreshISNSServerA!(util.pstrToFfi(Address));
}

export function ReportISNSServerListW(
  BufferSizeInChar: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.ReportISNSServerListW!(util.toPointer(BufferSizeInChar), util.pwstrToFfi(Buffer));
}

export function ReportISNSServerListA(
  BufferSizeInChar: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.ReportISNSServerListA!(util.toPointer(BufferSizeInChar), util.pstrToFfi(Buffer));
}

export function GetIScsiSessionListW(
  BufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  SessionCount: Deno.PointerValue | Uint8Array /* ptr */,
  SessionInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.GetIScsiSessionListW!(util.toPointer(BufferSize), util.toPointer(SessionCount), util.toPointer(SessionInfo));
}

export function GetIScsiSessionListA(
  BufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  SessionCount: Deno.PointerValue | Uint8Array /* ptr */,
  SessionInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.GetIScsiSessionListA!(util.toPointer(BufferSize), util.toPointer(SessionCount), util.toPointer(SessionInfo));
}

export function GetIScsiSessionListEx(
  BufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  SessionCountPtr: Deno.PointerValue | Uint8Array /* ptr */,
  SessionInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.GetIScsiSessionListEx!(util.toPointer(BufferSize), util.toPointer(SessionCountPtr), util.toPointer(SessionInfo));
}

export function GetDevicesForIScsiSessionW(
  UniqueSessionId: Deno.PointerValue | Uint8Array /* ptr */,
  DeviceCount: Deno.PointerValue | Uint8Array /* ptr */,
  Devices: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.GetDevicesForIScsiSessionW!(util.toPointer(UniqueSessionId), util.toPointer(DeviceCount), util.toPointer(Devices));
}

export function GetDevicesForIScsiSessionA(
  UniqueSessionId: Deno.PointerValue | Uint8Array /* ptr */,
  DeviceCount: Deno.PointerValue | Uint8Array /* ptr */,
  Devices: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.GetDevicesForIScsiSessionA!(util.toPointer(UniqueSessionId), util.toPointer(DeviceCount), util.toPointer(Devices));
}

export function SetupPersistentIScsiVolumes(): number /* u32 */ {
  return libISCSIDSC_dll.SetupPersistentIScsiVolumes!();
}

export function SetupPersistentIScsiDevices(): number /* u32 */ {
  return libISCSIDSC_dll.SetupPersistentIScsiDevices!();
}

export function AddPersistentIScsiDeviceW(
  DevicePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.AddPersistentIScsiDeviceW!(util.pwstrToFfi(DevicePath));
}

export function AddPersistentIScsiDeviceA(
  DevicePath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.AddPersistentIScsiDeviceA!(util.pstrToFfi(DevicePath));
}

export function RemovePersistentIScsiDeviceW(
  DevicePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.RemovePersistentIScsiDeviceW!(util.pwstrToFfi(DevicePath));
}

export function RemovePersistentIScsiDeviceA(
  DevicePath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.RemovePersistentIScsiDeviceA!(util.pstrToFfi(DevicePath));
}

export function ClearPersistentIScsiDevices(): number /* u32 */ {
  return libISCSIDSC_dll.ClearPersistentIScsiDevices!();
}

export function ReportPersistentIScsiDevicesW(
  BufferSizeInChar: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.ReportPersistentIScsiDevicesW!(util.toPointer(BufferSizeInChar), util.pwstrToFfi(Buffer));
}

export function ReportPersistentIScsiDevicesA(
  BufferSizeInChar: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.ReportPersistentIScsiDevicesA!(util.toPointer(BufferSizeInChar), util.pstrToFfi(Buffer));
}

export function ReportIScsiTargetPortalsW(
  InitiatorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  TargetName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  TargetPortalTag: Deno.PointerValue | Uint8Array /* ptr */,
  ElementCount: Deno.PointerValue | Uint8Array /* ptr */,
  Portals: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.ReportIScsiTargetPortalsW!(util.pwstrToFfi(InitiatorName), util.pwstrToFfi(TargetName), util.toPointer(TargetPortalTag), util.toPointer(ElementCount), util.toPointer(Portals));
}

export function ReportIScsiTargetPortalsA(
  InitiatorName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  TargetName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  TargetPortalTag: Deno.PointerValue | Uint8Array /* ptr */,
  ElementCount: Deno.PointerValue | Uint8Array /* ptr */,
  Portals: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libISCSIDSC_dll.ReportIScsiTargetPortalsA!(util.pstrToFfi(InitiatorName), util.pstrToFfi(TargetName), util.toPointer(TargetPortalTag), util.toPointer(ElementCount), util.toPointer(Portals));
}

export function AddRadiusServerW(
  Address: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.AddRadiusServerW!(util.pwstrToFfi(Address));
}

export function AddRadiusServerA(
  Address: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.AddRadiusServerA!(util.pstrToFfi(Address));
}

export function RemoveRadiusServerW(
  Address: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.RemoveRadiusServerW!(util.pwstrToFfi(Address));
}

export function RemoveRadiusServerA(
  Address: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.RemoveRadiusServerA!(util.pstrToFfi(Address));
}

export function ReportRadiusServerListW(
  BufferSizeInChar: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.ReportRadiusServerListW!(util.toPointer(BufferSizeInChar), util.pwstrToFfi(Buffer));
}

export function ReportRadiusServerListA(
  BufferSizeInChar: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libISCSIDSC_dll.ReportRadiusServerListA!(util.toPointer(BufferSizeInChar), util.pstrToFfi(Buffer));
}

